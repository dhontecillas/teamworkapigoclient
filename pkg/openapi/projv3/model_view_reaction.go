/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewReaction Reaction is a reaction item type.
type ViewReaction struct {
	Installation *ViewRelationship `json:"installation,omitempty"`
	InstallationId *int32 `json:"installationId,omitempty"`
	Object *ViewRelationship `json:"object,omitempty"`
	ObjectId *int32 `json:"objectId,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
	PostedDateTime *string `json:"postedDateTime,omitempty"`
	Type *string `json:"type,omitempty"`
	User *ViewRelationship `json:"user,omitempty"`
	UserId *int32 `json:"userId,omitempty"`
}

// NewViewReaction instantiates a new ViewReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewReaction() *ViewReaction {
	this := ViewReaction{}
	return &this
}

// NewViewReactionWithDefaults instantiates a new ViewReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewReactionWithDefaults() *ViewReaction {
	this := ViewReaction{}
	return &this
}

// GetInstallation returns the Installation field value if set, zero value otherwise.
func (o *ViewReaction) GetInstallation() ViewRelationship {
	if o == nil || o.Installation == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Installation
}

// GetInstallationOk returns a tuple with the Installation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReaction) GetInstallationOk() (*ViewRelationship, bool) {
	if o == nil || o.Installation == nil {
		return nil, false
	}
	return o.Installation, true
}

// HasInstallation returns a boolean if a field has been set.
func (o *ViewReaction) HasInstallation() bool {
	if o != nil && o.Installation != nil {
		return true
	}

	return false
}

// SetInstallation gets a reference to the given ViewRelationship and assigns it to the Installation field.
func (o *ViewReaction) SetInstallation(v ViewRelationship) {
	o.Installation = &v
}

// GetInstallationId returns the InstallationId field value if set, zero value otherwise.
func (o *ViewReaction) GetInstallationId() int32 {
	if o == nil || o.InstallationId == nil {
		var ret int32
		return ret
	}
	return *o.InstallationId
}

// GetInstallationIdOk returns a tuple with the InstallationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReaction) GetInstallationIdOk() (*int32, bool) {
	if o == nil || o.InstallationId == nil {
		return nil, false
	}
	return o.InstallationId, true
}

// HasInstallationId returns a boolean if a field has been set.
func (o *ViewReaction) HasInstallationId() bool {
	if o != nil && o.InstallationId != nil {
		return true
	}

	return false
}

// SetInstallationId gets a reference to the given int32 and assigns it to the InstallationId field.
func (o *ViewReaction) SetInstallationId(v int32) {
	o.InstallationId = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ViewReaction) GetObject() ViewRelationship {
	if o == nil || o.Object == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReaction) GetObjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ViewReaction) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given ViewRelationship and assigns it to the Object field.
func (o *ViewReaction) SetObject(v ViewRelationship) {
	o.Object = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *ViewReaction) GetObjectId() int32 {
	if o == nil || o.ObjectId == nil {
		var ret int32
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReaction) GetObjectIdOk() (*int32, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *ViewReaction) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given int32 and assigns it to the ObjectId field.
func (o *ViewReaction) SetObjectId(v int32) {
	o.ObjectId = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *ViewReaction) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReaction) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *ViewReaction) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *ViewReaction) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetPostedDateTime returns the PostedDateTime field value if set, zero value otherwise.
func (o *ViewReaction) GetPostedDateTime() string {
	if o == nil || o.PostedDateTime == nil {
		var ret string
		return ret
	}
	return *o.PostedDateTime
}

// GetPostedDateTimeOk returns a tuple with the PostedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReaction) GetPostedDateTimeOk() (*string, bool) {
	if o == nil || o.PostedDateTime == nil {
		return nil, false
	}
	return o.PostedDateTime, true
}

// HasPostedDateTime returns a boolean if a field has been set.
func (o *ViewReaction) HasPostedDateTime() bool {
	if o != nil && o.PostedDateTime != nil {
		return true
	}

	return false
}

// SetPostedDateTime gets a reference to the given string and assigns it to the PostedDateTime field.
func (o *ViewReaction) SetPostedDateTime(v string) {
	o.PostedDateTime = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ViewReaction) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReaction) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ViewReaction) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ViewReaction) SetType(v string) {
	o.Type = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ViewReaction) GetUser() ViewRelationship {
	if o == nil || o.User == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReaction) GetUserOk() (*ViewRelationship, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ViewReaction) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given ViewRelationship and assigns it to the User field.
func (o *ViewReaction) SetUser(v ViewRelationship) {
	o.User = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ViewReaction) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReaction) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ViewReaction) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *ViewReaction) SetUserId(v int32) {
	o.UserId = &v
}

func (o ViewReaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Installation != nil {
		toSerialize["installation"] = o.Installation
	}
	if o.InstallationId != nil {
		toSerialize["installationId"] = o.InstallationId
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	if o.ObjectId != nil {
		toSerialize["objectId"] = o.ObjectId
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.PostedDateTime != nil {
		toSerialize["postedDateTime"] = o.PostedDateTime
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableViewReaction struct {
	value *ViewReaction
	isSet bool
}

func (v NullableViewReaction) Get() *ViewReaction {
	return v.value
}

func (v *NullableViewReaction) Set(val *ViewReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableViewReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableViewReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewReaction(val *ViewReaction) *NullableViewReaction {
	return &NullableViewReaction{value: val, isSet: true}
}

func (v NullableViewReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


