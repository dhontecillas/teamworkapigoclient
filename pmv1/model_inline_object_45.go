/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineObject45 struct for InlineObject45
type InlineObject45 struct {
	Column *EventtypesJsonEventtype `json:"column,omitempty"`
}

// NewInlineObject45 instantiates a new InlineObject45 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject45() *InlineObject45 {
	this := InlineObject45{}
	return &this
}

// NewInlineObject45WithDefaults instantiates a new InlineObject45 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject45WithDefaults() *InlineObject45 {
	this := InlineObject45{}
	return &this
}

// GetColumn returns the Column field value if set, zero value otherwise.
func (o *InlineObject45) GetColumn() EventtypesJsonEventtype {
	if o == nil || o.Column == nil {
		var ret EventtypesJsonEventtype
		return ret
	}
	return *o.Column
}

// GetColumnOk returns a tuple with the Column field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject45) GetColumnOk() (*EventtypesJsonEventtype, bool) {
	if o == nil || o.Column == nil {
		return nil, false
	}
	return o.Column, true
}

// HasColumn returns a boolean if a field has been set.
func (o *InlineObject45) HasColumn() bool {
	if o != nil && o.Column != nil {
		return true
	}

	return false
}

// SetColumn gets a reference to the given EventtypesJsonEventtype and assigns it to the Column field.
func (o *InlineObject45) SetColumn(v EventtypesJsonEventtype) {
	o.Column = &v
}

func (o InlineObject45) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Column != nil {
		toSerialize["column"] = o.Column
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject45 struct {
	value *InlineObject45
	isSet bool
}

func (v NullableInlineObject45) Get() *InlineObject45 {
	return v.value
}

func (v *NullableInlineObject45) Set(val *InlineObject45) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject45) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject45) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject45(val *InlineObject45) *NullableInlineObject45 {
	return &NullableInlineObject45{value: val, isSet: true}
}

func (v NullableInlineObject45) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject45) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


