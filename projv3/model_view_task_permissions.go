/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewTaskPermissions TaskPermissions is a user specific set of task permissions
type ViewTaskPermissions struct {
	CanAddSubtasks *bool `json:"canAddSubtasks,omitempty"`
	CanComplete *bool `json:"canComplete,omitempty"`
	CanEdit *bool `json:"canEdit,omitempty"`
	CanLogTime *bool `json:"canLogTime,omitempty"`
	CanViewEstTime *bool `json:"canViewEstTime,omitempty"`
}

// NewViewTaskPermissions instantiates a new ViewTaskPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewTaskPermissions() *ViewTaskPermissions {
	this := ViewTaskPermissions{}
	return &this
}

// NewViewTaskPermissionsWithDefaults instantiates a new ViewTaskPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewTaskPermissionsWithDefaults() *ViewTaskPermissions {
	this := ViewTaskPermissions{}
	return &this
}

// GetCanAddSubtasks returns the CanAddSubtasks field value if set, zero value otherwise.
func (o *ViewTaskPermissions) GetCanAddSubtasks() bool {
	if o == nil || o.CanAddSubtasks == nil {
		var ret bool
		return ret
	}
	return *o.CanAddSubtasks
}

// GetCanAddSubtasksOk returns a tuple with the CanAddSubtasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskPermissions) GetCanAddSubtasksOk() (*bool, bool) {
	if o == nil || o.CanAddSubtasks == nil {
		return nil, false
	}
	return o.CanAddSubtasks, true
}

// HasCanAddSubtasks returns a boolean if a field has been set.
func (o *ViewTaskPermissions) HasCanAddSubtasks() bool {
	if o != nil && o.CanAddSubtasks != nil {
		return true
	}

	return false
}

// SetCanAddSubtasks gets a reference to the given bool and assigns it to the CanAddSubtasks field.
func (o *ViewTaskPermissions) SetCanAddSubtasks(v bool) {
	o.CanAddSubtasks = &v
}

// GetCanComplete returns the CanComplete field value if set, zero value otherwise.
func (o *ViewTaskPermissions) GetCanComplete() bool {
	if o == nil || o.CanComplete == nil {
		var ret bool
		return ret
	}
	return *o.CanComplete
}

// GetCanCompleteOk returns a tuple with the CanComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskPermissions) GetCanCompleteOk() (*bool, bool) {
	if o == nil || o.CanComplete == nil {
		return nil, false
	}
	return o.CanComplete, true
}

// HasCanComplete returns a boolean if a field has been set.
func (o *ViewTaskPermissions) HasCanComplete() bool {
	if o != nil && o.CanComplete != nil {
		return true
	}

	return false
}

// SetCanComplete gets a reference to the given bool and assigns it to the CanComplete field.
func (o *ViewTaskPermissions) SetCanComplete(v bool) {
	o.CanComplete = &v
}

// GetCanEdit returns the CanEdit field value if set, zero value otherwise.
func (o *ViewTaskPermissions) GetCanEdit() bool {
	if o == nil || o.CanEdit == nil {
		var ret bool
		return ret
	}
	return *o.CanEdit
}

// GetCanEditOk returns a tuple with the CanEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskPermissions) GetCanEditOk() (*bool, bool) {
	if o == nil || o.CanEdit == nil {
		return nil, false
	}
	return o.CanEdit, true
}

// HasCanEdit returns a boolean if a field has been set.
func (o *ViewTaskPermissions) HasCanEdit() bool {
	if o != nil && o.CanEdit != nil {
		return true
	}

	return false
}

// SetCanEdit gets a reference to the given bool and assigns it to the CanEdit field.
func (o *ViewTaskPermissions) SetCanEdit(v bool) {
	o.CanEdit = &v
}

// GetCanLogTime returns the CanLogTime field value if set, zero value otherwise.
func (o *ViewTaskPermissions) GetCanLogTime() bool {
	if o == nil || o.CanLogTime == nil {
		var ret bool
		return ret
	}
	return *o.CanLogTime
}

// GetCanLogTimeOk returns a tuple with the CanLogTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskPermissions) GetCanLogTimeOk() (*bool, bool) {
	if o == nil || o.CanLogTime == nil {
		return nil, false
	}
	return o.CanLogTime, true
}

// HasCanLogTime returns a boolean if a field has been set.
func (o *ViewTaskPermissions) HasCanLogTime() bool {
	if o != nil && o.CanLogTime != nil {
		return true
	}

	return false
}

// SetCanLogTime gets a reference to the given bool and assigns it to the CanLogTime field.
func (o *ViewTaskPermissions) SetCanLogTime(v bool) {
	o.CanLogTime = &v
}

// GetCanViewEstTime returns the CanViewEstTime field value if set, zero value otherwise.
func (o *ViewTaskPermissions) GetCanViewEstTime() bool {
	if o == nil || o.CanViewEstTime == nil {
		var ret bool
		return ret
	}
	return *o.CanViewEstTime
}

// GetCanViewEstTimeOk returns a tuple with the CanViewEstTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskPermissions) GetCanViewEstTimeOk() (*bool, bool) {
	if o == nil || o.CanViewEstTime == nil {
		return nil, false
	}
	return o.CanViewEstTime, true
}

// HasCanViewEstTime returns a boolean if a field has been set.
func (o *ViewTaskPermissions) HasCanViewEstTime() bool {
	if o != nil && o.CanViewEstTime != nil {
		return true
	}

	return false
}

// SetCanViewEstTime gets a reference to the given bool and assigns it to the CanViewEstTime field.
func (o *ViewTaskPermissions) SetCanViewEstTime(v bool) {
	o.CanViewEstTime = &v
}

func (o ViewTaskPermissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CanAddSubtasks != nil {
		toSerialize["canAddSubtasks"] = o.CanAddSubtasks
	}
	if o.CanComplete != nil {
		toSerialize["canComplete"] = o.CanComplete
	}
	if o.CanEdit != nil {
		toSerialize["canEdit"] = o.CanEdit
	}
	if o.CanLogTime != nil {
		toSerialize["canLogTime"] = o.CanLogTime
	}
	if o.CanViewEstTime != nil {
		toSerialize["canViewEstTime"] = o.CanViewEstTime
	}
	return json.Marshal(toSerialize)
}

type NullableViewTaskPermissions struct {
	value *ViewTaskPermissions
	isSet bool
}

func (v NullableViewTaskPermissions) Get() *ViewTaskPermissions {
	return v.value
}

func (v *NullableViewTaskPermissions) Set(val *ViewTaskPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableViewTaskPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableViewTaskPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewTaskPermissions(val *ViewTaskPermissions) *NullableViewTaskPermissions {
	return &NullableViewTaskPermissions{value: val, isSet: true}
}

func (v NullableViewTaskPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewTaskPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


