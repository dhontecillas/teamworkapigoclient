/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// TimerDeleteRequest DeleteRequest contains the whether or not a timer should be hard deleted or soft deleted. Hard delete will remove the timer row from the DB and remove its timer intervals. Soft delete will just mark it as deleted.
type TimerDeleteRequest struct {
	HardDelete *bool `json:"hardDelete,omitempty"`
}

// NewTimerDeleteRequest instantiates a new TimerDeleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimerDeleteRequest() *TimerDeleteRequest {
	this := TimerDeleteRequest{}
	return &this
}

// NewTimerDeleteRequestWithDefaults instantiates a new TimerDeleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimerDeleteRequestWithDefaults() *TimerDeleteRequest {
	this := TimerDeleteRequest{}
	return &this
}

// GetHardDelete returns the HardDelete field value if set, zero value otherwise.
func (o *TimerDeleteRequest) GetHardDelete() bool {
	if o == nil || o.HardDelete == nil {
		var ret bool
		return ret
	}
	return *o.HardDelete
}

// GetHardDeleteOk returns a tuple with the HardDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimerDeleteRequest) GetHardDeleteOk() (*bool, bool) {
	if o == nil || o.HardDelete == nil {
		return nil, false
	}
	return o.HardDelete, true
}

// HasHardDelete returns a boolean if a field has been set.
func (o *TimerDeleteRequest) HasHardDelete() bool {
	if o != nil && o.HardDelete != nil {
		return true
	}

	return false
}

// SetHardDelete gets a reference to the given bool and assigns it to the HardDelete field.
func (o *TimerDeleteRequest) SetHardDelete(v bool) {
	o.HardDelete = &v
}

func (o TimerDeleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HardDelete != nil {
		toSerialize["hardDelete"] = o.HardDelete
	}
	return json.Marshal(toSerialize)
}

type NullableTimerDeleteRequest struct {
	value *TimerDeleteRequest
	isSet bool
}

func (v NullableTimerDeleteRequest) Get() *TimerDeleteRequest {
	return v.value
}

func (v *NullableTimerDeleteRequest) Set(val *TimerDeleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTimerDeleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTimerDeleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimerDeleteRequest(val *TimerDeleteRequest) *NullableTimerDeleteRequest {
	return &NullableTimerDeleteRequest{value: val, isSet: true}
}

func (v NullableTimerDeleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimerDeleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


