/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// ResourceIdTagsJsonTags struct for ResourceIdTagsJsonTags
type ResourceIdTagsJsonTags struct {
	Content *string `json:"content,omitempty"`
}

// NewResourceIdTagsJsonTags instantiates a new ResourceIdTagsJsonTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceIdTagsJsonTags() *ResourceIdTagsJsonTags {
	this := ResourceIdTagsJsonTags{}
	return &this
}

// NewResourceIdTagsJsonTagsWithDefaults instantiates a new ResourceIdTagsJsonTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceIdTagsJsonTagsWithDefaults() *ResourceIdTagsJsonTags {
	this := ResourceIdTagsJsonTags{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ResourceIdTagsJsonTags) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceIdTagsJsonTags) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ResourceIdTagsJsonTags) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ResourceIdTagsJsonTags) SetContent(v string) {
	o.Content = &v
}

func (o ResourceIdTagsJsonTags) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableResourceIdTagsJsonTags struct {
	value *ResourceIdTagsJsonTags
	isSet bool
}

func (v NullableResourceIdTagsJsonTags) Get() *ResourceIdTagsJsonTags {
	return v.value
}

func (v *NullableResourceIdTagsJsonTags) Set(val *ResourceIdTagsJsonTags) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceIdTagsJsonTags) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceIdTagsJsonTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceIdTagsJsonTags(val *ResourceIdTagsJsonTags) *NullableResourceIdTagsJsonTags {
	return &NullableResourceIdTagsJsonTags{value: val, isSet: true}
}

func (v NullableResourceIdTagsJsonTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceIdTagsJsonTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


