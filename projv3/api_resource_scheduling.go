/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// ResourceSchedulingApiService ResourceSchedulingApi service
type ResourceSchedulingApiService service

type ApiGETProjectsApiV3SchedulePeopleJsonRequest struct {
	ctx _context.Context
	ApiService *ResourceSchedulingApiService
	startDate *string
	searchTerm *string
	projectStatus *string
	orderMode *string
	orderBy *string
	endDate *string
	projectHealths *int32
	pageSize *int32
	page *int32
	onlyStarredProjects *bool
	onlyProjectsWithExplicitMembership *bool
	matchAllProjectTags *bool
	hideObservedProjects *bool
	teamIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsUserSchedules *[]string
	fieldsTimelogs *[]string
	fieldsProjects *[]string
	fieldsProjectSchedules *[]string
	fieldsMilestones *[]string
	fieldsCompanies *[]string
	fieldsCalendarEvents *[]string
	fieldsAllocations *[]string
	companyIds *[]int32
	assignedUserIds *[]int32
}

func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) Page(page int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) OnlyProjectsWithExplicitMembership(onlyProjectsWithExplicitMembership bool) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.onlyProjectsWithExplicitMembership = &onlyProjectsWithExplicitMembership
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) HideObservedProjects(hideObservedProjects bool) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.hideObservedProjects = &hideObservedProjects
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) TeamIds(teamIds []int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.teamIds = &teamIds
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) Include(include []string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) FieldsUserSchedules(fieldsUserSchedules []string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.fieldsUserSchedules = &fieldsUserSchedules
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) FieldsTimelogs(fieldsTimelogs []string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.fieldsTimelogs = &fieldsTimelogs
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) FieldsProjectSchedules(fieldsProjectSchedules []string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.fieldsProjectSchedules = &fieldsProjectSchedules
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) FieldsCalendarEvents(fieldsCalendarEvents []string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.fieldsCalendarEvents = &fieldsCalendarEvents
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) FieldsAllocations(fieldsAllocations []string) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.fieldsAllocations = &fieldsAllocations
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) CompanyIds(companyIds []int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.companyIds = &companyIds
	return r
}
func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) AssignedUserIds(assignedUserIds []int32) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	r.assignedUserIds = &assignedUserIds
	return r
}

func (r ApiGETProjectsApiV3SchedulePeopleJsonRequest) Execute() (ScheduleUserSchedulesResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3SchedulePeopleJsonExecute(r)
}

/*
 * GETProjectsApiV3SchedulePeopleJson Return the summary for users' allocations.
 * Return people allocations summary to easy manage work, time and resources in
Teamwork that address broader resource management needs.


On this endpoint you can filter by project custom fields. The syntax for the
query parameter is the following:

    projectCustomField[id][op]=value

Where:
  - [id] is the custom field ID
  - [op] is the operator to apply when filtering, different operators are
    allowed according to the custom field type
  - [value] is the value to apply when filtering

For example, if I want to filter a dropdown custom field with ID 10 to only
return entries that have the value "Option1" we would do the following:

    projectCustomField[10][eq]=Option1

The allowed operators are:
  - like
  - not-like
  - eq
  - not
  - lt
  - gt
  - any
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3SchedulePeopleJsonRequest
 */
func (a *ResourceSchedulingApiService) GETProjectsApiV3SchedulePeopleJson(ctx _context.Context) ApiGETProjectsApiV3SchedulePeopleJsonRequest {
	return ApiGETProjectsApiV3SchedulePeopleJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ScheduleUserSchedulesResponse
 */
func (a *ResourceSchedulingApiService) GETProjectsApiV3SchedulePeopleJsonExecute(r ApiGETProjectsApiV3SchedulePeopleJsonRequest) (ScheduleUserSchedulesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ScheduleUserSchedulesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceSchedulingApiService.GETProjectsApiV3SchedulePeopleJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/schedule/people.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyProjectsWithExplicitMembership != nil {
		localVarQueryParams.Add("onlyProjectsWithExplicitMembership", parameterToString(*r.onlyProjectsWithExplicitMembership, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.hideObservedProjects != nil {
		localVarQueryParams.Add("hideObservedProjects", parameterToString(*r.hideObservedProjects, ""))
	}
	if r.teamIds != nil {
		localVarQueryParams.Add("teamIds", parameterToString(*r.teamIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsUserSchedules != nil {
		localVarQueryParams.Add("fields[userSchedules]", parameterToString(*r.fieldsUserSchedules, "csv"))
	}
	if r.fieldsTimelogs != nil {
		localVarQueryParams.Add("fields[timelogs]", parameterToString(*r.fieldsTimelogs, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsProjectSchedules != nil {
		localVarQueryParams.Add("fields[projectSchedules]", parameterToString(*r.fieldsProjectSchedules, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.fieldsCalendarEvents != nil {
		localVarQueryParams.Add("fields[calendarEvents]", parameterToString(*r.fieldsCalendarEvents, "csv"))
	}
	if r.fieldsAllocations != nil {
		localVarQueryParams.Add("fields[allocations]", parameterToString(*r.fieldsAllocations, "csv"))
	}
	if r.companyIds != nil {
		localVarQueryParams.Add("companyIds", parameterToString(*r.companyIds, "csv"))
	}
	if r.assignedUserIds != nil {
		localVarQueryParams.Add("assignedUserIds", parameterToString(*r.assignedUserIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ScheduleProjectsJsonRequest struct {
	ctx _context.Context
	ApiService *ResourceSchedulingApiService
	startDate *string
	searchTerm *string
	projectStatus *string
	orderMode *string
	orderBy *string
	endDate *string
	projectHealths *int32
	pageSize *int32
	page *int32
	onlyStarredProjects *bool
	onlyProjectsWithExplicitMembership *bool
	matchAllProjectTags *bool
	hideObservedProjects *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsUserSchedules *[]string
	fieldsTimelogs *[]string
	fieldsProjects *[]string
	fieldsProjectSchedules *[]string
	fieldsMilestones *[]string
	fieldsCompanies *[]string
	fieldsCalendarEvents *[]string
	fieldsAllocations *[]string
	assignedUserIds *[]int32
}

func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) Page(page int32) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) OnlyProjectsWithExplicitMembership(onlyProjectsWithExplicitMembership bool) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.onlyProjectsWithExplicitMembership = &onlyProjectsWithExplicitMembership
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) HideObservedProjects(hideObservedProjects bool) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.hideObservedProjects = &hideObservedProjects
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) Include(include []string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) FieldsUserSchedules(fieldsUserSchedules []string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.fieldsUserSchedules = &fieldsUserSchedules
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) FieldsTimelogs(fieldsTimelogs []string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.fieldsTimelogs = &fieldsTimelogs
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) FieldsProjectSchedules(fieldsProjectSchedules []string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.fieldsProjectSchedules = &fieldsProjectSchedules
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) FieldsCalendarEvents(fieldsCalendarEvents []string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.fieldsCalendarEvents = &fieldsCalendarEvents
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) FieldsAllocations(fieldsAllocations []string) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.fieldsAllocations = &fieldsAllocations
	return r
}
func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) AssignedUserIds(assignedUserIds []int32) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	r.assignedUserIds = &assignedUserIds
	return r
}

func (r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) Execute() (ScheduleProjectSchedulesResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ScheduleProjectsJsonExecute(r)
}

/*
 * GETProjectsApiV3ScheduleProjectsJson Return the summary for projects' allocations.
 * Return project allocations summary to easy manage work, time and resources in
Teamwork that address broader resource management needs.


On this endpoint you can filter by project custom fields. The syntax for the
query parameter is the following:

    projectCustomField[id][op]=value

Where:
  - [id] is the custom field ID
  - [op] is the operator to apply when filtering, different operators are
    allowed according to the custom field type
  - [value] is the value to apply when filtering

For example, if I want to filter a dropdown custom field with ID 10 to only
return entries that have the value "Option1" we would do the following:

    projectCustomField[10][eq]=Option1

The allowed operators are:
  - like
  - not-like
  - eq
  - not
  - lt
  - gt
  - any
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ScheduleProjectsJsonRequest
 */
func (a *ResourceSchedulingApiService) GETProjectsApiV3ScheduleProjectsJson(ctx _context.Context) ApiGETProjectsApiV3ScheduleProjectsJsonRequest {
	return ApiGETProjectsApiV3ScheduleProjectsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ScheduleProjectSchedulesResponse
 */
func (a *ResourceSchedulingApiService) GETProjectsApiV3ScheduleProjectsJsonExecute(r ApiGETProjectsApiV3ScheduleProjectsJsonRequest) (ScheduleProjectSchedulesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ScheduleProjectSchedulesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceSchedulingApiService.GETProjectsApiV3ScheduleProjectsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/schedule/projects.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyProjectsWithExplicitMembership != nil {
		localVarQueryParams.Add("onlyProjectsWithExplicitMembership", parameterToString(*r.onlyProjectsWithExplicitMembership, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.hideObservedProjects != nil {
		localVarQueryParams.Add("hideObservedProjects", parameterToString(*r.hideObservedProjects, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsUserSchedules != nil {
		localVarQueryParams.Add("fields[userSchedules]", parameterToString(*r.fieldsUserSchedules, "csv"))
	}
	if r.fieldsTimelogs != nil {
		localVarQueryParams.Add("fields[timelogs]", parameterToString(*r.fieldsTimelogs, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsProjectSchedules != nil {
		localVarQueryParams.Add("fields[projectSchedules]", parameterToString(*r.fieldsProjectSchedules, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.fieldsCalendarEvents != nil {
		localVarQueryParams.Add("fields[calendarEvents]", parameterToString(*r.fieldsCalendarEvents, "csv"))
	}
	if r.fieldsAllocations != nil {
		localVarQueryParams.Add("fields[allocations]", parameterToString(*r.fieldsAllocations, "csv"))
	}
	if r.assignedUserIds != nil {
		localVarQueryParams.Add("assignedUserIds", parameterToString(*r.assignedUserIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
