/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewTimerInterval TimerInterval contains all the information returned from a timer interval.
type ViewTimerInterval struct {
	Duration *int32 `json:"duration,omitempty"`
	From *string `json:"from,omitempty"`
	Id *int32 `json:"id,omitempty"`
	To *string `json:"to,omitempty"`
}

// NewViewTimerInterval instantiates a new ViewTimerInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewTimerInterval() *ViewTimerInterval {
	this := ViewTimerInterval{}
	return &this
}

// NewViewTimerIntervalWithDefaults instantiates a new ViewTimerInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewTimerIntervalWithDefaults() *ViewTimerInterval {
	this := ViewTimerInterval{}
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ViewTimerInterval) GetDuration() int32 {
	if o == nil || o.Duration == nil {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimerInterval) GetDurationOk() (*int32, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ViewTimerInterval) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *ViewTimerInterval) SetDuration(v int32) {
	o.Duration = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ViewTimerInterval) GetFrom() string {
	if o == nil || o.From == nil {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimerInterval) GetFromOk() (*string, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ViewTimerInterval) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *ViewTimerInterval) SetFrom(v string) {
	o.From = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewTimerInterval) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimerInterval) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewTimerInterval) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewTimerInterval) SetId(v int32) {
	o.Id = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ViewTimerInterval) GetTo() string {
	if o == nil || o.To == nil {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimerInterval) GetToOk() (*string, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ViewTimerInterval) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *ViewTimerInterval) SetTo(v string) {
	o.To = &v
}

func (o ViewTimerInterval) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	return json.Marshal(toSerialize)
}

type NullableViewTimerInterval struct {
	value *ViewTimerInterval
	isSet bool
}

func (v NullableViewTimerInterval) Get() *ViewTimerInterval {
	return v.value
}

func (v *NullableViewTimerInterval) Set(val *ViewTimerInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableViewTimerInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableViewTimerInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewTimerInterval(val *ViewTimerInterval) *NullableViewTimerInterval {
	return &NullableViewTimerInterval{value: val, isSet: true}
}

func (v NullableViewTimerInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewTimerInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


