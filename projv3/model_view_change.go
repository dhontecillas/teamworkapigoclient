/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewChange Change contains all the information returned from a change.
type ViewChange struct {
	Id *int32 `json:"id,omitempty"`
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty"`
	Parent *ViewRelationship `json:"parent,omitempty"`
	ParentId *int32 `json:"parentId,omitempty"`
}

// NewViewChange instantiates a new ViewChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewChange() *ViewChange {
	this := ViewChange{}
	return &this
}

// NewViewChangeWithDefaults instantiates a new ViewChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewChangeWithDefaults() *ViewChange {
	this := ViewChange{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewChange) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewChange) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewChange) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewChange) SetId(v int32) {
	o.Id = &v
}

// GetLastUpdatedDate returns the LastUpdatedDate field value if set, zero value otherwise.
func (o *ViewChange) GetLastUpdatedDate() string {
	if o == nil || o.LastUpdatedDate == nil {
		var ret string
		return ret
	}
	return *o.LastUpdatedDate
}

// GetLastUpdatedDateOk returns a tuple with the LastUpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewChange) GetLastUpdatedDateOk() (*string, bool) {
	if o == nil || o.LastUpdatedDate == nil {
		return nil, false
	}
	return o.LastUpdatedDate, true
}

// HasLastUpdatedDate returns a boolean if a field has been set.
func (o *ViewChange) HasLastUpdatedDate() bool {
	if o != nil && o.LastUpdatedDate != nil {
		return true
	}

	return false
}

// SetLastUpdatedDate gets a reference to the given string and assigns it to the LastUpdatedDate field.
func (o *ViewChange) SetLastUpdatedDate(v string) {
	o.LastUpdatedDate = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *ViewChange) GetParent() ViewRelationship {
	if o == nil || o.Parent == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewChange) GetParentOk() (*ViewRelationship, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *ViewChange) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given ViewRelationship and assigns it to the Parent field.
func (o *ViewChange) SetParent(v ViewRelationship) {
	o.Parent = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ViewChange) GetParentId() int32 {
	if o == nil || o.ParentId == nil {
		var ret int32
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewChange) GetParentIdOk() (*int32, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ViewChange) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int32 and assigns it to the ParentId field.
func (o *ViewChange) SetParentId(v int32) {
	o.ParentId = &v
}

func (o ViewChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdatedDate != nil {
		toSerialize["lastUpdatedDate"] = o.LastUpdatedDate
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.ParentId != nil {
		toSerialize["parentId"] = o.ParentId
	}
	return json.Marshal(toSerialize)
}

type NullableViewChange struct {
	value *ViewChange
	isSet bool
}

func (v NullableViewChange) Get() *ViewChange {
	return v.value
}

func (v *NullableViewChange) Set(val *ViewChange) {
	v.value = val
	v.isSet = true
}

func (v NullableViewChange) IsSet() bool {
	return v.isSet
}

func (v *NullableViewChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewChange(val *ViewChange) *NullableViewChange {
	return &NullableViewChange{value: val, isSet: true}
}

func (v NullableViewChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


