/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileProjectFilesResponse ProjectFilesResponse contains information about a group of files.
type FileProjectFilesResponse struct {
	Files *[]ViewProjectFile `json:"files,omitempty"`
	Included *FileProjectFilesResponseIncluded `json:"included,omitempty"`
	Meta *ViewMeta `json:"meta,omitempty"`
}

// NewFileProjectFilesResponse instantiates a new FileProjectFilesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileProjectFilesResponse() *FileProjectFilesResponse {
	this := FileProjectFilesResponse{}
	return &this
}

// NewFileProjectFilesResponseWithDefaults instantiates a new FileProjectFilesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileProjectFilesResponseWithDefaults() *FileProjectFilesResponse {
	this := FileProjectFilesResponse{}
	return &this
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *FileProjectFilesResponse) GetFiles() []ViewProjectFile {
	if o == nil || o.Files == nil {
		var ret []ViewProjectFile
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileProjectFilesResponse) GetFilesOk() (*[]ViewProjectFile, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *FileProjectFilesResponse) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []ViewProjectFile and assigns it to the Files field.
func (o *FileProjectFilesResponse) SetFiles(v []ViewProjectFile) {
	o.Files = &v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *FileProjectFilesResponse) GetIncluded() FileProjectFilesResponseIncluded {
	if o == nil || o.Included == nil {
		var ret FileProjectFilesResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileProjectFilesResponse) GetIncludedOk() (*FileProjectFilesResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *FileProjectFilesResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given FileProjectFilesResponseIncluded and assigns it to the Included field.
func (o *FileProjectFilesResponse) SetIncluded(v FileProjectFilesResponseIncluded) {
	o.Included = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *FileProjectFilesResponse) GetMeta() ViewMeta {
	if o == nil || o.Meta == nil {
		var ret ViewMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileProjectFilesResponse) GetMetaOk() (*ViewMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *FileProjectFilesResponse) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ViewMeta and assigns it to the Meta field.
func (o *FileProjectFilesResponse) SetMeta(v ViewMeta) {
	o.Meta = &v
}

func (o FileProjectFilesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableFileProjectFilesResponse struct {
	value *FileProjectFilesResponse
	isSet bool
}

func (v NullableFileProjectFilesResponse) Get() *FileProjectFilesResponse {
	return v.value
}

func (v *NullableFileProjectFilesResponse) Set(val *FileProjectFilesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileProjectFilesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileProjectFilesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileProjectFilesResponse(val *FileProjectFilesResponse) *NullableFileProjectFilesResponse {
	return &NullableFileProjectFilesResponse{value: val, isSet: true}
}

func (v NullableFileProjectFilesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileProjectFilesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


