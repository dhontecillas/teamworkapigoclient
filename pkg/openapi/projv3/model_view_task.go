/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewTask Task defines how entity.Task should be rendered.
type ViewTask struct {
	AssigneeCompanies *[]ViewRelationship `json:"assigneeCompanies,omitempty"`
	AssigneeCompanyIDs *[]int32 `json:"assigneeCompanyIDs,omitempty"`
	AssigneeTeamIDs *[]int32 `json:"assigneeTeamIDs,omitempty"`
	AssigneeTeams *[]ViewRelationship `json:"assigneeTeams,omitempty"`
	AssigneeUserIDs *[]int32 `json:"assigneeUserIDs,omitempty"`
	AssigneeUsers *[]ViewRelationship `json:"assigneeUsers,omitempty"`
	CreatedBy *int32 `json:"createdBy,omitempty"`
	CreatedByUserID *int32 `json:"createdByUserID,omitempty"`
	DateUpdated *string `json:"dateUpdated,omitempty"`
	DueDate *string `json:"dueDate,omitempty"`
	EstimateMinutes *int32 `json:"estimateMinutes,omitempty"`
	Id *int32 `json:"id,omitempty"`
	IsPrivate *int32 `json:"isPrivate,omitempty"`
	Name *string `json:"name,omitempty"`
	ParentTask *ViewRelationship `json:"parentTask,omitempty"`
	ParentTaskId *int32 `json:"parentTaskId,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	Status *string `json:"status,omitempty"`
	Tasklist *ViewRelationship `json:"tasklist,omitempty"`
	TasklistId *int32 `json:"tasklistId,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	UserPermissions *ViewTaskPermissions `json:"userPermissions,omitempty"`
}

// NewViewTask instantiates a new ViewTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewTask() *ViewTask {
	this := ViewTask{}
	return &this
}

// NewViewTaskWithDefaults instantiates a new ViewTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewTaskWithDefaults() *ViewTask {
	this := ViewTask{}
	return &this
}

// GetAssigneeCompanies returns the AssigneeCompanies field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeCompanies() []ViewRelationship {
	if o == nil || o.AssigneeCompanies == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.AssigneeCompanies
}

// GetAssigneeCompaniesOk returns a tuple with the AssigneeCompanies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeCompaniesOk() (*[]ViewRelationship, bool) {
	if o == nil || o.AssigneeCompanies == nil {
		return nil, false
	}
	return o.AssigneeCompanies, true
}

// HasAssigneeCompanies returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeCompanies() bool {
	if o != nil && o.AssigneeCompanies != nil {
		return true
	}

	return false
}

// SetAssigneeCompanies gets a reference to the given []ViewRelationship and assigns it to the AssigneeCompanies field.
func (o *ViewTask) SetAssigneeCompanies(v []ViewRelationship) {
	o.AssigneeCompanies = &v
}

// GetAssigneeCompanyIDs returns the AssigneeCompanyIDs field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeCompanyIDs() []int32 {
	if o == nil || o.AssigneeCompanyIDs == nil {
		var ret []int32
		return ret
	}
	return *o.AssigneeCompanyIDs
}

// GetAssigneeCompanyIDsOk returns a tuple with the AssigneeCompanyIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeCompanyIDsOk() (*[]int32, bool) {
	if o == nil || o.AssigneeCompanyIDs == nil {
		return nil, false
	}
	return o.AssigneeCompanyIDs, true
}

// HasAssigneeCompanyIDs returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeCompanyIDs() bool {
	if o != nil && o.AssigneeCompanyIDs != nil {
		return true
	}

	return false
}

// SetAssigneeCompanyIDs gets a reference to the given []int32 and assigns it to the AssigneeCompanyIDs field.
func (o *ViewTask) SetAssigneeCompanyIDs(v []int32) {
	o.AssigneeCompanyIDs = &v
}

// GetAssigneeTeamIDs returns the AssigneeTeamIDs field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeTeamIDs() []int32 {
	if o == nil || o.AssigneeTeamIDs == nil {
		var ret []int32
		return ret
	}
	return *o.AssigneeTeamIDs
}

// GetAssigneeTeamIDsOk returns a tuple with the AssigneeTeamIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeTeamIDsOk() (*[]int32, bool) {
	if o == nil || o.AssigneeTeamIDs == nil {
		return nil, false
	}
	return o.AssigneeTeamIDs, true
}

// HasAssigneeTeamIDs returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeTeamIDs() bool {
	if o != nil && o.AssigneeTeamIDs != nil {
		return true
	}

	return false
}

// SetAssigneeTeamIDs gets a reference to the given []int32 and assigns it to the AssigneeTeamIDs field.
func (o *ViewTask) SetAssigneeTeamIDs(v []int32) {
	o.AssigneeTeamIDs = &v
}

// GetAssigneeTeams returns the AssigneeTeams field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeTeams() []ViewRelationship {
	if o == nil || o.AssigneeTeams == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.AssigneeTeams
}

// GetAssigneeTeamsOk returns a tuple with the AssigneeTeams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeTeamsOk() (*[]ViewRelationship, bool) {
	if o == nil || o.AssigneeTeams == nil {
		return nil, false
	}
	return o.AssigneeTeams, true
}

// HasAssigneeTeams returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeTeams() bool {
	if o != nil && o.AssigneeTeams != nil {
		return true
	}

	return false
}

// SetAssigneeTeams gets a reference to the given []ViewRelationship and assigns it to the AssigneeTeams field.
func (o *ViewTask) SetAssigneeTeams(v []ViewRelationship) {
	o.AssigneeTeams = &v
}

// GetAssigneeUserIDs returns the AssigneeUserIDs field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeUserIDs() []int32 {
	if o == nil || o.AssigneeUserIDs == nil {
		var ret []int32
		return ret
	}
	return *o.AssigneeUserIDs
}

// GetAssigneeUserIDsOk returns a tuple with the AssigneeUserIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeUserIDsOk() (*[]int32, bool) {
	if o == nil || o.AssigneeUserIDs == nil {
		return nil, false
	}
	return o.AssigneeUserIDs, true
}

// HasAssigneeUserIDs returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeUserIDs() bool {
	if o != nil && o.AssigneeUserIDs != nil {
		return true
	}

	return false
}

// SetAssigneeUserIDs gets a reference to the given []int32 and assigns it to the AssigneeUserIDs field.
func (o *ViewTask) SetAssigneeUserIDs(v []int32) {
	o.AssigneeUserIDs = &v
}

// GetAssigneeUsers returns the AssigneeUsers field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeUsers() []ViewRelationship {
	if o == nil || o.AssigneeUsers == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.AssigneeUsers
}

// GetAssigneeUsersOk returns a tuple with the AssigneeUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeUsersOk() (*[]ViewRelationship, bool) {
	if o == nil || o.AssigneeUsers == nil {
		return nil, false
	}
	return o.AssigneeUsers, true
}

// HasAssigneeUsers returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeUsers() bool {
	if o != nil && o.AssigneeUsers != nil {
		return true
	}

	return false
}

// SetAssigneeUsers gets a reference to the given []ViewRelationship and assigns it to the AssigneeUsers field.
func (o *ViewTask) SetAssigneeUsers(v []ViewRelationship) {
	o.AssigneeUsers = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ViewTask) GetCreatedBy() int32 {
	if o == nil || o.CreatedBy == nil {
		var ret int32
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetCreatedByOk() (*int32, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ViewTask) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int32 and assigns it to the CreatedBy field.
func (o *ViewTask) SetCreatedBy(v int32) {
	o.CreatedBy = &v
}

// GetCreatedByUserID returns the CreatedByUserID field value if set, zero value otherwise.
func (o *ViewTask) GetCreatedByUserID() int32 {
	if o == nil || o.CreatedByUserID == nil {
		var ret int32
		return ret
	}
	return *o.CreatedByUserID
}

// GetCreatedByUserIDOk returns a tuple with the CreatedByUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetCreatedByUserIDOk() (*int32, bool) {
	if o == nil || o.CreatedByUserID == nil {
		return nil, false
	}
	return o.CreatedByUserID, true
}

// HasCreatedByUserID returns a boolean if a field has been set.
func (o *ViewTask) HasCreatedByUserID() bool {
	if o != nil && o.CreatedByUserID != nil {
		return true
	}

	return false
}

// SetCreatedByUserID gets a reference to the given int32 and assigns it to the CreatedByUserID field.
func (o *ViewTask) SetCreatedByUserID(v int32) {
	o.CreatedByUserID = &v
}

// GetDateUpdated returns the DateUpdated field value if set, zero value otherwise.
func (o *ViewTask) GetDateUpdated() string {
	if o == nil || o.DateUpdated == nil {
		var ret string
		return ret
	}
	return *o.DateUpdated
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetDateUpdatedOk() (*string, bool) {
	if o == nil || o.DateUpdated == nil {
		return nil, false
	}
	return o.DateUpdated, true
}

// HasDateUpdated returns a boolean if a field has been set.
func (o *ViewTask) HasDateUpdated() bool {
	if o != nil && o.DateUpdated != nil {
		return true
	}

	return false
}

// SetDateUpdated gets a reference to the given string and assigns it to the DateUpdated field.
func (o *ViewTask) SetDateUpdated(v string) {
	o.DateUpdated = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *ViewTask) GetDueDate() string {
	if o == nil || o.DueDate == nil {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetDueDateOk() (*string, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *ViewTask) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *ViewTask) SetDueDate(v string) {
	o.DueDate = &v
}

// GetEstimateMinutes returns the EstimateMinutes field value if set, zero value otherwise.
func (o *ViewTask) GetEstimateMinutes() int32 {
	if o == nil || o.EstimateMinutes == nil {
		var ret int32
		return ret
	}
	return *o.EstimateMinutes
}

// GetEstimateMinutesOk returns a tuple with the EstimateMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetEstimateMinutesOk() (*int32, bool) {
	if o == nil || o.EstimateMinutes == nil {
		return nil, false
	}
	return o.EstimateMinutes, true
}

// HasEstimateMinutes returns a boolean if a field has been set.
func (o *ViewTask) HasEstimateMinutes() bool {
	if o != nil && o.EstimateMinutes != nil {
		return true
	}

	return false
}

// SetEstimateMinutes gets a reference to the given int32 and assigns it to the EstimateMinutes field.
func (o *ViewTask) SetEstimateMinutes(v int32) {
	o.EstimateMinutes = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewTask) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewTask) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewTask) SetId(v int32) {
	o.Id = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *ViewTask) GetIsPrivate() int32 {
	if o == nil || o.IsPrivate == nil {
		var ret int32
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetIsPrivateOk() (*int32, bool) {
	if o == nil || o.IsPrivate == nil {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *ViewTask) HasIsPrivate() bool {
	if o != nil && o.IsPrivate != nil {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given int32 and assigns it to the IsPrivate field.
func (o *ViewTask) SetIsPrivate(v int32) {
	o.IsPrivate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewTask) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewTask) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewTask) SetName(v string) {
	o.Name = &v
}

// GetParentTask returns the ParentTask field value if set, zero value otherwise.
func (o *ViewTask) GetParentTask() ViewRelationship {
	if o == nil || o.ParentTask == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.ParentTask
}

// GetParentTaskOk returns a tuple with the ParentTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetParentTaskOk() (*ViewRelationship, bool) {
	if o == nil || o.ParentTask == nil {
		return nil, false
	}
	return o.ParentTask, true
}

// HasParentTask returns a boolean if a field has been set.
func (o *ViewTask) HasParentTask() bool {
	if o != nil && o.ParentTask != nil {
		return true
	}

	return false
}

// SetParentTask gets a reference to the given ViewRelationship and assigns it to the ParentTask field.
func (o *ViewTask) SetParentTask(v ViewRelationship) {
	o.ParentTask = &v
}

// GetParentTaskId returns the ParentTaskId field value if set, zero value otherwise.
func (o *ViewTask) GetParentTaskId() int32 {
	if o == nil || o.ParentTaskId == nil {
		var ret int32
		return ret
	}
	return *o.ParentTaskId
}

// GetParentTaskIdOk returns a tuple with the ParentTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetParentTaskIdOk() (*int32, bool) {
	if o == nil || o.ParentTaskId == nil {
		return nil, false
	}
	return o.ParentTaskId, true
}

// HasParentTaskId returns a boolean if a field has been set.
func (o *ViewTask) HasParentTaskId() bool {
	if o != nil && o.ParentTaskId != nil {
		return true
	}

	return false
}

// SetParentTaskId gets a reference to the given int32 and assigns it to the ParentTaskId field.
func (o *ViewTask) SetParentTaskId(v int32) {
	o.ParentTaskId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ViewTask) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ViewTask) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ViewTask) SetStartDate(v string) {
	o.StartDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ViewTask) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ViewTask) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ViewTask) SetStatus(v string) {
	o.Status = &v
}

// GetTasklist returns the Tasklist field value if set, zero value otherwise.
func (o *ViewTask) GetTasklist() ViewRelationship {
	if o == nil || o.Tasklist == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Tasklist
}

// GetTasklistOk returns a tuple with the Tasklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetTasklistOk() (*ViewRelationship, bool) {
	if o == nil || o.Tasklist == nil {
		return nil, false
	}
	return o.Tasklist, true
}

// HasTasklist returns a boolean if a field has been set.
func (o *ViewTask) HasTasklist() bool {
	if o != nil && o.Tasklist != nil {
		return true
	}

	return false
}

// SetTasklist gets a reference to the given ViewRelationship and assigns it to the Tasklist field.
func (o *ViewTask) SetTasklist(v ViewRelationship) {
	o.Tasklist = &v
}

// GetTasklistId returns the TasklistId field value if set, zero value otherwise.
func (o *ViewTask) GetTasklistId() int32 {
	if o == nil || o.TasklistId == nil {
		var ret int32
		return ret
	}
	return *o.TasklistId
}

// GetTasklistIdOk returns a tuple with the TasklistId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetTasklistIdOk() (*int32, bool) {
	if o == nil || o.TasklistId == nil {
		return nil, false
	}
	return o.TasklistId, true
}

// HasTasklistId returns a boolean if a field has been set.
func (o *ViewTask) HasTasklistId() bool {
	if o != nil && o.TasklistId != nil {
		return true
	}

	return false
}

// SetTasklistId gets a reference to the given int32 and assigns it to the TasklistId field.
func (o *ViewTask) SetTasklistId(v int32) {
	o.TasklistId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewTask) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewTask) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewTask) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUserPermissions returns the UserPermissions field value if set, zero value otherwise.
func (o *ViewTask) GetUserPermissions() ViewTaskPermissions {
	if o == nil || o.UserPermissions == nil {
		var ret ViewTaskPermissions
		return ret
	}
	return *o.UserPermissions
}

// GetUserPermissionsOk returns a tuple with the UserPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetUserPermissionsOk() (*ViewTaskPermissions, bool) {
	if o == nil || o.UserPermissions == nil {
		return nil, false
	}
	return o.UserPermissions, true
}

// HasUserPermissions returns a boolean if a field has been set.
func (o *ViewTask) HasUserPermissions() bool {
	if o != nil && o.UserPermissions != nil {
		return true
	}

	return false
}

// SetUserPermissions gets a reference to the given ViewTaskPermissions and assigns it to the UserPermissions field.
func (o *ViewTask) SetUserPermissions(v ViewTaskPermissions) {
	o.UserPermissions = &v
}

func (o ViewTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssigneeCompanies != nil {
		toSerialize["assigneeCompanies"] = o.AssigneeCompanies
	}
	if o.AssigneeCompanyIDs != nil {
		toSerialize["assigneeCompanyIDs"] = o.AssigneeCompanyIDs
	}
	if o.AssigneeTeamIDs != nil {
		toSerialize["assigneeTeamIDs"] = o.AssigneeTeamIDs
	}
	if o.AssigneeTeams != nil {
		toSerialize["assigneeTeams"] = o.AssigneeTeams
	}
	if o.AssigneeUserIDs != nil {
		toSerialize["assigneeUserIDs"] = o.AssigneeUserIDs
	}
	if o.AssigneeUsers != nil {
		toSerialize["assigneeUsers"] = o.AssigneeUsers
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CreatedByUserID != nil {
		toSerialize["createdByUserID"] = o.CreatedByUserID
	}
	if o.DateUpdated != nil {
		toSerialize["dateUpdated"] = o.DateUpdated
	}
	if o.DueDate != nil {
		toSerialize["dueDate"] = o.DueDate
	}
	if o.EstimateMinutes != nil {
		toSerialize["estimateMinutes"] = o.EstimateMinutes
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsPrivate != nil {
		toSerialize["isPrivate"] = o.IsPrivate
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ParentTask != nil {
		toSerialize["parentTask"] = o.ParentTask
	}
	if o.ParentTaskId != nil {
		toSerialize["parentTaskId"] = o.ParentTaskId
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Tasklist != nil {
		toSerialize["tasklist"] = o.Tasklist
	}
	if o.TasklistId != nil {
		toSerialize["tasklistId"] = o.TasklistId
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UserPermissions != nil {
		toSerialize["userPermissions"] = o.UserPermissions
	}
	return json.Marshal(toSerialize)
}

type NullableViewTask struct {
	value *ViewTask
	isSet bool
}

func (v NullableViewTask) Get() *ViewTask {
	return v.value
}

func (v *NullableViewTask) Set(val *ViewTask) {
	v.value = val
	v.isSet = true
}

func (v NullableViewTask) IsSet() bool {
	return v.isSet
}

func (v *NullableViewTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewTask(val *ViewTask) *NullableViewTask {
	return &NullableViewTask{value: val, isSet: true}
}

func (v NullableViewTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


