/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// PeopleStatusApiService PeopleStatusApi service
type PeopleStatusApiService service

type ApiGETProjectsApiV3StatusesJsonRequest struct {
	ctx _context.Context
	ApiService *PeopleStatusApiService
	updatedAfter *time.Time
	searchTerm *string
	teamId *int32
	pageSize *int32
	page *int32
	showEveryone *bool
	showDeleted *bool
	includeSubteams *bool
	include *[]string
	fieldsUsers *[]string
	fieldsStatuses *[]string
}

func (r ApiGETProjectsApiV3StatusesJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3StatusesJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3StatusesJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3StatusesJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3StatusesJsonRequest) TeamId(teamId int32) ApiGETProjectsApiV3StatusesJsonRequest {
	r.teamId = &teamId
	return r
}
func (r ApiGETProjectsApiV3StatusesJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3StatusesJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3StatusesJsonRequest) Page(page int32) ApiGETProjectsApiV3StatusesJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3StatusesJsonRequest) ShowEveryone(showEveryone bool) ApiGETProjectsApiV3StatusesJsonRequest {
	r.showEveryone = &showEveryone
	return r
}
func (r ApiGETProjectsApiV3StatusesJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3StatusesJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3StatusesJsonRequest) IncludeSubteams(includeSubteams bool) ApiGETProjectsApiV3StatusesJsonRequest {
	r.includeSubteams = &includeSubteams
	return r
}
func (r ApiGETProjectsApiV3StatusesJsonRequest) Include(include []string) ApiGETProjectsApiV3StatusesJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3StatusesJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3StatusesJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3StatusesJsonRequest) FieldsStatuses(fieldsStatuses []string) ApiGETProjectsApiV3StatusesJsonRequest {
	r.fieldsStatuses = &fieldsStatuses
	return r
}

func (r ApiGETProjectsApiV3StatusesJsonRequest) Execute() (StatusTimelineResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3StatusesJsonExecute(r)
}

/*
 * GETProjectsApiV3StatusesJson Get all statuses
 * All of the latest status posts are returned for all users in the parent
company.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3StatusesJsonRequest
 */
func (a *PeopleStatusApiService) GETProjectsApiV3StatusesJson(ctx _context.Context) ApiGETProjectsApiV3StatusesJsonRequest {
	return ApiGETProjectsApiV3StatusesJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return StatusTimelineResponse
 */
func (a *PeopleStatusApiService) GETProjectsApiV3StatusesJsonExecute(r ApiGETProjectsApiV3StatusesJsonRequest) (StatusTimelineResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StatusTimelineResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PeopleStatusApiService.GETProjectsApiV3StatusesJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/statuses.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.teamId != nil {
		localVarQueryParams.Add("teamId", parameterToString(*r.teamId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showEveryone != nil {
		localVarQueryParams.Add("showEveryone", parameterToString(*r.showEveryone, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeSubteams != nil {
		localVarQueryParams.Add("includeSubteams", parameterToString(*r.includeSubteams, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsStatuses != nil {
		localVarQueryParams.Add("fields[statuses]", parameterToString(*r.fieldsStatuses, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3StatusesTimelineJsonRequest struct {
	ctx _context.Context
	ApiService *PeopleStatusApiService
	searchTerm *string
	teamId *int32
	pageSize *int32
	page *int32
	showDeleted *bool
	includeSubteams *bool
	include *[]string
	fieldsUsers *[]string
}

func (r ApiGETProjectsApiV3StatusesTimelineJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3StatusesTimelineJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3StatusesTimelineJsonRequest) TeamId(teamId int32) ApiGETProjectsApiV3StatusesTimelineJsonRequest {
	r.teamId = &teamId
	return r
}
func (r ApiGETProjectsApiV3StatusesTimelineJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3StatusesTimelineJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3StatusesTimelineJsonRequest) Page(page int32) ApiGETProjectsApiV3StatusesTimelineJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3StatusesTimelineJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3StatusesTimelineJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3StatusesTimelineJsonRequest) IncludeSubteams(includeSubteams bool) ApiGETProjectsApiV3StatusesTimelineJsonRequest {
	r.includeSubteams = &includeSubteams
	return r
}
func (r ApiGETProjectsApiV3StatusesTimelineJsonRequest) Include(include []string) ApiGETProjectsApiV3StatusesTimelineJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3StatusesTimelineJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3StatusesTimelineJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}

func (r ApiGETProjectsApiV3StatusesTimelineJsonRequest) Execute() (StatusTimelineResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3StatusesTimelineJsonExecute(r)
}

/*
 * GETProjectsApiV3StatusesTimelineJson Get the people statuses timeline.
 * Return a timeline list of people statuses that the logged-in user can access.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3StatusesTimelineJsonRequest
 */
func (a *PeopleStatusApiService) GETProjectsApiV3StatusesTimelineJson(ctx _context.Context) ApiGETProjectsApiV3StatusesTimelineJsonRequest {
	return ApiGETProjectsApiV3StatusesTimelineJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return StatusTimelineResponse
 */
func (a *PeopleStatusApiService) GETProjectsApiV3StatusesTimelineJsonExecute(r ApiGETProjectsApiV3StatusesTimelineJsonRequest) (StatusTimelineResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StatusTimelineResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PeopleStatusApiService.GETProjectsApiV3StatusesTimelineJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/statuses/timeline.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.teamId != nil {
		localVarQueryParams.Add("teamId", parameterToString(*r.teamId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeSubteams != nil {
		localVarQueryParams.Add("includeSubteams", parameterToString(*r.includeSubteams, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest struct {
	ctx _context.Context
	ApiService *PeopleStatusApiService
	teamId2 int32
	searchTerm *string
	teamId *int32
	pageSize *int32
	page *int32
	showDeleted *bool
	includeSubteams *bool
	include *[]string
	fieldsUsers *[]string
}

func (r ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest) TeamId(teamId int32) ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest {
	r.teamId = &teamId
	return r
}
func (r ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest) Page(page int32) ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest) IncludeSubteams(includeSubteams bool) ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest {
	r.includeSubteams = &includeSubteams
	return r
}
func (r ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest) Include(include []string) ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}

func (r ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest) Execute() (StatusTimelineResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3TeamsteamIdStatusesTimelineJsonExecute(r)
}

/*
 * GETProjectsApiV3TeamsteamIdStatusesTimelineJson Get statuses timeline for a specific team
 * Return people statuses from a specific team that the logged-in user can
access.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param teamId2
 * @return ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest
 */
func (a *PeopleStatusApiService) GETProjectsApiV3TeamsteamIdStatusesTimelineJson(ctx _context.Context, teamId2 int32) ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest {
	return ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest{
		ApiService: a,
		ctx: ctx,
		teamId2: teamId2,
	}
}

/*
 * Execute executes the request
 * @return StatusTimelineResponse
 */
func (a *PeopleStatusApiService) GETProjectsApiV3TeamsteamIdStatusesTimelineJsonExecute(r ApiGETProjectsApiV3TeamsteamIdStatusesTimelineJsonRequest) (StatusTimelineResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StatusTimelineResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PeopleStatusApiService.GETProjectsApiV3TeamsteamIdStatusesTimelineJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/teams/{teamId}/statuses/timeline.json"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", _neturl.PathEscape(parameterToString(r.teamId2, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.teamId != nil {
		localVarQueryParams.Add("teamId", parameterToString(*r.teamId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeSubteams != nil {
		localVarQueryParams.Add("includeSubteams", parameterToString(*r.includeSubteams, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
