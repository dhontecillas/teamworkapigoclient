/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileUsageResponseFilesUsage struct for FileUsageResponseFilesUsage
type FileUsageResponseFilesUsage struct {
	Overuse *int32 `json:"overuse,omitempty"`
	OveruseAsText *string `json:"overuseAsText,omitempty"`
	Projects *[]FileProjectUsage `json:"projects,omitempty"`
	Total *int32 `json:"total,omitempty"`
	TotalAllowed *int32 `json:"totalAllowed,omitempty"`
	TotalAllowedAsText *string `json:"totalAllowedAsText,omitempty"`
	TotalAsText *string `json:"totalAsText,omitempty"`
	TotalRemaining *int32 `json:"totalRemaining,omitempty"`
	TotalRemainingAsText *string `json:"totalRemainingAsText,omitempty"`
}

// NewFileUsageResponseFilesUsage instantiates a new FileUsageResponseFilesUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileUsageResponseFilesUsage() *FileUsageResponseFilesUsage {
	this := FileUsageResponseFilesUsage{}
	return &this
}

// NewFileUsageResponseFilesUsageWithDefaults instantiates a new FileUsageResponseFilesUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileUsageResponseFilesUsageWithDefaults() *FileUsageResponseFilesUsage {
	this := FileUsageResponseFilesUsage{}
	return &this
}

// GetOveruse returns the Overuse field value if set, zero value otherwise.
func (o *FileUsageResponseFilesUsage) GetOveruse() int32 {
	if o == nil || o.Overuse == nil {
		var ret int32
		return ret
	}
	return *o.Overuse
}

// GetOveruseOk returns a tuple with the Overuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponseFilesUsage) GetOveruseOk() (*int32, bool) {
	if o == nil || o.Overuse == nil {
		return nil, false
	}
	return o.Overuse, true
}

// HasOveruse returns a boolean if a field has been set.
func (o *FileUsageResponseFilesUsage) HasOveruse() bool {
	if o != nil && o.Overuse != nil {
		return true
	}

	return false
}

// SetOveruse gets a reference to the given int32 and assigns it to the Overuse field.
func (o *FileUsageResponseFilesUsage) SetOveruse(v int32) {
	o.Overuse = &v
}

// GetOveruseAsText returns the OveruseAsText field value if set, zero value otherwise.
func (o *FileUsageResponseFilesUsage) GetOveruseAsText() string {
	if o == nil || o.OveruseAsText == nil {
		var ret string
		return ret
	}
	return *o.OveruseAsText
}

// GetOveruseAsTextOk returns a tuple with the OveruseAsText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponseFilesUsage) GetOveruseAsTextOk() (*string, bool) {
	if o == nil || o.OveruseAsText == nil {
		return nil, false
	}
	return o.OveruseAsText, true
}

// HasOveruseAsText returns a boolean if a field has been set.
func (o *FileUsageResponseFilesUsage) HasOveruseAsText() bool {
	if o != nil && o.OveruseAsText != nil {
		return true
	}

	return false
}

// SetOveruseAsText gets a reference to the given string and assigns it to the OveruseAsText field.
func (o *FileUsageResponseFilesUsage) SetOveruseAsText(v string) {
	o.OveruseAsText = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *FileUsageResponseFilesUsage) GetProjects() []FileProjectUsage {
	if o == nil || o.Projects == nil {
		var ret []FileProjectUsage
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponseFilesUsage) GetProjectsOk() (*[]FileProjectUsage, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *FileUsageResponseFilesUsage) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []FileProjectUsage and assigns it to the Projects field.
func (o *FileUsageResponseFilesUsage) SetProjects(v []FileProjectUsage) {
	o.Projects = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *FileUsageResponseFilesUsage) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponseFilesUsage) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *FileUsageResponseFilesUsage) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *FileUsageResponseFilesUsage) SetTotal(v int32) {
	o.Total = &v
}

// GetTotalAllowed returns the TotalAllowed field value if set, zero value otherwise.
func (o *FileUsageResponseFilesUsage) GetTotalAllowed() int32 {
	if o == nil || o.TotalAllowed == nil {
		var ret int32
		return ret
	}
	return *o.TotalAllowed
}

// GetTotalAllowedOk returns a tuple with the TotalAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponseFilesUsage) GetTotalAllowedOk() (*int32, bool) {
	if o == nil || o.TotalAllowed == nil {
		return nil, false
	}
	return o.TotalAllowed, true
}

// HasTotalAllowed returns a boolean if a field has been set.
func (o *FileUsageResponseFilesUsage) HasTotalAllowed() bool {
	if o != nil && o.TotalAllowed != nil {
		return true
	}

	return false
}

// SetTotalAllowed gets a reference to the given int32 and assigns it to the TotalAllowed field.
func (o *FileUsageResponseFilesUsage) SetTotalAllowed(v int32) {
	o.TotalAllowed = &v
}

// GetTotalAllowedAsText returns the TotalAllowedAsText field value if set, zero value otherwise.
func (o *FileUsageResponseFilesUsage) GetTotalAllowedAsText() string {
	if o == nil || o.TotalAllowedAsText == nil {
		var ret string
		return ret
	}
	return *o.TotalAllowedAsText
}

// GetTotalAllowedAsTextOk returns a tuple with the TotalAllowedAsText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponseFilesUsage) GetTotalAllowedAsTextOk() (*string, bool) {
	if o == nil || o.TotalAllowedAsText == nil {
		return nil, false
	}
	return o.TotalAllowedAsText, true
}

// HasTotalAllowedAsText returns a boolean if a field has been set.
func (o *FileUsageResponseFilesUsage) HasTotalAllowedAsText() bool {
	if o != nil && o.TotalAllowedAsText != nil {
		return true
	}

	return false
}

// SetTotalAllowedAsText gets a reference to the given string and assigns it to the TotalAllowedAsText field.
func (o *FileUsageResponseFilesUsage) SetTotalAllowedAsText(v string) {
	o.TotalAllowedAsText = &v
}

// GetTotalAsText returns the TotalAsText field value if set, zero value otherwise.
func (o *FileUsageResponseFilesUsage) GetTotalAsText() string {
	if o == nil || o.TotalAsText == nil {
		var ret string
		return ret
	}
	return *o.TotalAsText
}

// GetTotalAsTextOk returns a tuple with the TotalAsText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponseFilesUsage) GetTotalAsTextOk() (*string, bool) {
	if o == nil || o.TotalAsText == nil {
		return nil, false
	}
	return o.TotalAsText, true
}

// HasTotalAsText returns a boolean if a field has been set.
func (o *FileUsageResponseFilesUsage) HasTotalAsText() bool {
	if o != nil && o.TotalAsText != nil {
		return true
	}

	return false
}

// SetTotalAsText gets a reference to the given string and assigns it to the TotalAsText field.
func (o *FileUsageResponseFilesUsage) SetTotalAsText(v string) {
	o.TotalAsText = &v
}

// GetTotalRemaining returns the TotalRemaining field value if set, zero value otherwise.
func (o *FileUsageResponseFilesUsage) GetTotalRemaining() int32 {
	if o == nil || o.TotalRemaining == nil {
		var ret int32
		return ret
	}
	return *o.TotalRemaining
}

// GetTotalRemainingOk returns a tuple with the TotalRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponseFilesUsage) GetTotalRemainingOk() (*int32, bool) {
	if o == nil || o.TotalRemaining == nil {
		return nil, false
	}
	return o.TotalRemaining, true
}

// HasTotalRemaining returns a boolean if a field has been set.
func (o *FileUsageResponseFilesUsage) HasTotalRemaining() bool {
	if o != nil && o.TotalRemaining != nil {
		return true
	}

	return false
}

// SetTotalRemaining gets a reference to the given int32 and assigns it to the TotalRemaining field.
func (o *FileUsageResponseFilesUsage) SetTotalRemaining(v int32) {
	o.TotalRemaining = &v
}

// GetTotalRemainingAsText returns the TotalRemainingAsText field value if set, zero value otherwise.
func (o *FileUsageResponseFilesUsage) GetTotalRemainingAsText() string {
	if o == nil || o.TotalRemainingAsText == nil {
		var ret string
		return ret
	}
	return *o.TotalRemainingAsText
}

// GetTotalRemainingAsTextOk returns a tuple with the TotalRemainingAsText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponseFilesUsage) GetTotalRemainingAsTextOk() (*string, bool) {
	if o == nil || o.TotalRemainingAsText == nil {
		return nil, false
	}
	return o.TotalRemainingAsText, true
}

// HasTotalRemainingAsText returns a boolean if a field has been set.
func (o *FileUsageResponseFilesUsage) HasTotalRemainingAsText() bool {
	if o != nil && o.TotalRemainingAsText != nil {
		return true
	}

	return false
}

// SetTotalRemainingAsText gets a reference to the given string and assigns it to the TotalRemainingAsText field.
func (o *FileUsageResponseFilesUsage) SetTotalRemainingAsText(v string) {
	o.TotalRemainingAsText = &v
}

func (o FileUsageResponseFilesUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Overuse != nil {
		toSerialize["overuse"] = o.Overuse
	}
	if o.OveruseAsText != nil {
		toSerialize["overuseAsText"] = o.OveruseAsText
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.TotalAllowed != nil {
		toSerialize["totalAllowed"] = o.TotalAllowed
	}
	if o.TotalAllowedAsText != nil {
		toSerialize["totalAllowedAsText"] = o.TotalAllowedAsText
	}
	if o.TotalAsText != nil {
		toSerialize["totalAsText"] = o.TotalAsText
	}
	if o.TotalRemaining != nil {
		toSerialize["totalRemaining"] = o.TotalRemaining
	}
	if o.TotalRemainingAsText != nil {
		toSerialize["totalRemainingAsText"] = o.TotalRemainingAsText
	}
	return json.Marshal(toSerialize)
}

type NullableFileUsageResponseFilesUsage struct {
	value *FileUsageResponseFilesUsage
	isSet bool
}

func (v NullableFileUsageResponseFilesUsage) Get() *FileUsageResponseFilesUsage {
	return v.value
}

func (v *NullableFileUsageResponseFilesUsage) Set(val *FileUsageResponseFilesUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUsageResponseFilesUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUsageResponseFilesUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUsageResponseFilesUsage(val *FileUsageResponseFilesUsage) *NullableFileUsageResponseFilesUsage {
	return &NullableFileUsageResponseFilesUsage{value: val, isSet: true}
}

func (v NullableFileUsageResponseFilesUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUsageResponseFilesUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


