/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewUserEvents UserEvents contains status details from other project features related with a user.
type ViewUserEvents struct {
	ClockedIn *bool `json:"clockedIn,omitempty"`
}

// NewViewUserEvents instantiates a new ViewUserEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewUserEvents() *ViewUserEvents {
	this := ViewUserEvents{}
	return &this
}

// NewViewUserEventsWithDefaults instantiates a new ViewUserEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewUserEventsWithDefaults() *ViewUserEvents {
	this := ViewUserEvents{}
	return &this
}

// GetClockedIn returns the ClockedIn field value if set, zero value otherwise.
func (o *ViewUserEvents) GetClockedIn() bool {
	if o == nil || o.ClockedIn == nil {
		var ret bool
		return ret
	}
	return *o.ClockedIn
}

// GetClockedInOk returns a tuple with the ClockedIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserEvents) GetClockedInOk() (*bool, bool) {
	if o == nil || o.ClockedIn == nil {
		return nil, false
	}
	return o.ClockedIn, true
}

// HasClockedIn returns a boolean if a field has been set.
func (o *ViewUserEvents) HasClockedIn() bool {
	if o != nil && o.ClockedIn != nil {
		return true
	}

	return false
}

// SetClockedIn gets a reference to the given bool and assigns it to the ClockedIn field.
func (o *ViewUserEvents) SetClockedIn(v bool) {
	o.ClockedIn = &v
}

func (o ViewUserEvents) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClockedIn != nil {
		toSerialize["clockedIn"] = o.ClockedIn
	}
	return json.Marshal(toSerialize)
}

type NullableViewUserEvents struct {
	value *ViewUserEvents
	isSet bool
}

func (v NullableViewUserEvents) Get() *ViewUserEvents {
	return v.value
}

func (v *NullableViewUserEvents) Set(val *ViewUserEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUserEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUserEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUserEvents(val *ViewUserEvents) *NullableViewUserEvents {
	return &NullableViewUserEvents{value: val, isSet: true}
}

func (v NullableViewUserEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUserEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


