/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewAudit Audit represents the changes of a field.
type ViewAudit struct {
	After *map[string]interface{} `json:"after,omitempty"`
	Before *map[string]interface{} `json:"before,omitempty"`
	Field *string `json:"field,omitempty"`
}

// NewViewAudit instantiates a new ViewAudit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewAudit() *ViewAudit {
	this := ViewAudit{}
	return &this
}

// NewViewAuditWithDefaults instantiates a new ViewAudit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewAuditWithDefaults() *ViewAudit {
	this := ViewAudit{}
	return &this
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *ViewAudit) GetAfter() map[string]interface{} {
	if o == nil || o.After == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAudit) GetAfterOk() (*map[string]interface{}, bool) {
	if o == nil || o.After == nil {
		return nil, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *ViewAudit) HasAfter() bool {
	if o != nil && o.After != nil {
		return true
	}

	return false
}

// SetAfter gets a reference to the given map[string]interface{} and assigns it to the After field.
func (o *ViewAudit) SetAfter(v map[string]interface{}) {
	o.After = &v
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *ViewAudit) GetBefore() map[string]interface{} {
	if o == nil || o.Before == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAudit) GetBeforeOk() (*map[string]interface{}, bool) {
	if o == nil || o.Before == nil {
		return nil, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *ViewAudit) HasBefore() bool {
	if o != nil && o.Before != nil {
		return true
	}

	return false
}

// SetBefore gets a reference to the given map[string]interface{} and assigns it to the Before field.
func (o *ViewAudit) SetBefore(v map[string]interface{}) {
	o.Before = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *ViewAudit) GetField() string {
	if o == nil || o.Field == nil {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAudit) GetFieldOk() (*string, bool) {
	if o == nil || o.Field == nil {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *ViewAudit) HasField() bool {
	if o != nil && o.Field != nil {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *ViewAudit) SetField(v string) {
	o.Field = &v
}

func (o ViewAudit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.After != nil {
		toSerialize["after"] = o.After
	}
	if o.Before != nil {
		toSerialize["before"] = o.Before
	}
	if o.Field != nil {
		toSerialize["field"] = o.Field
	}
	return json.Marshal(toSerialize)
}

type NullableViewAudit struct {
	value *ViewAudit
	isSet bool
}

func (v NullableViewAudit) Get() *ViewAudit {
	return v.value
}

func (v *NullableViewAudit) Set(val *ViewAudit) {
	v.value = val
	v.isSet = true
}

func (v NullableViewAudit) IsSet() bool {
	return v.isSet
}

func (v *NullableViewAudit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewAudit(val *ViewAudit) *NullableViewAudit {
	return &NullableViewAudit{value: val, isSet: true}
}

func (v NullableViewAudit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewAudit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


