/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewStatus Status contains all the information returned from a status.
type ViewStatus struct {
	DateLastUpdated *string `json:"dateLastUpdated,omitempty"`
	DateTime *string `json:"dateTime,omitempty"`
	Emoji *string `json:"emoji,omitempty"`
	Id *int32 `json:"id,omitempty"`
	IpAddress *string `json:"ipAddress,omitempty"`
	Text *string `json:"text,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	User *ViewRelationship `json:"user,omitempty"`
	UserId *int32 `json:"userId,omitempty"`
}

// NewViewStatus instantiates a new ViewStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewStatus() *ViewStatus {
	this := ViewStatus{}
	return &this
}

// NewViewStatusWithDefaults instantiates a new ViewStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewStatusWithDefaults() *ViewStatus {
	this := ViewStatus{}
	return &this
}

// GetDateLastUpdated returns the DateLastUpdated field value if set, zero value otherwise.
func (o *ViewStatus) GetDateLastUpdated() string {
	if o == nil || o.DateLastUpdated == nil {
		var ret string
		return ret
	}
	return *o.DateLastUpdated
}

// GetDateLastUpdatedOk returns a tuple with the DateLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatus) GetDateLastUpdatedOk() (*string, bool) {
	if o == nil || o.DateLastUpdated == nil {
		return nil, false
	}
	return o.DateLastUpdated, true
}

// HasDateLastUpdated returns a boolean if a field has been set.
func (o *ViewStatus) HasDateLastUpdated() bool {
	if o != nil && o.DateLastUpdated != nil {
		return true
	}

	return false
}

// SetDateLastUpdated gets a reference to the given string and assigns it to the DateLastUpdated field.
func (o *ViewStatus) SetDateLastUpdated(v string) {
	o.DateLastUpdated = &v
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *ViewStatus) GetDateTime() string {
	if o == nil || o.DateTime == nil {
		var ret string
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatus) GetDateTimeOk() (*string, bool) {
	if o == nil || o.DateTime == nil {
		return nil, false
	}
	return o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *ViewStatus) HasDateTime() bool {
	if o != nil && o.DateTime != nil {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given string and assigns it to the DateTime field.
func (o *ViewStatus) SetDateTime(v string) {
	o.DateTime = &v
}

// GetEmoji returns the Emoji field value if set, zero value otherwise.
func (o *ViewStatus) GetEmoji() string {
	if o == nil || o.Emoji == nil {
		var ret string
		return ret
	}
	return *o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatus) GetEmojiOk() (*string, bool) {
	if o == nil || o.Emoji == nil {
		return nil, false
	}
	return o.Emoji, true
}

// HasEmoji returns a boolean if a field has been set.
func (o *ViewStatus) HasEmoji() bool {
	if o != nil && o.Emoji != nil {
		return true
	}

	return false
}

// SetEmoji gets a reference to the given string and assigns it to the Emoji field.
func (o *ViewStatus) SetEmoji(v string) {
	o.Emoji = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewStatus) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatus) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewStatus) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewStatus) SetId(v int32) {
	o.Id = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *ViewStatus) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatus) GetIpAddressOk() (*string, bool) {
	if o == nil || o.IpAddress == nil {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *ViewStatus) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *ViewStatus) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ViewStatus) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatus) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ViewStatus) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ViewStatus) SetText(v string) {
	o.Text = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewStatus) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatus) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewStatus) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewStatus) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ViewStatus) GetUser() ViewRelationship {
	if o == nil || o.User == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatus) GetUserOk() (*ViewRelationship, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ViewStatus) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given ViewRelationship and assigns it to the User field.
func (o *ViewStatus) SetUser(v ViewRelationship) {
	o.User = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ViewStatus) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatus) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ViewStatus) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *ViewStatus) SetUserId(v int32) {
	o.UserId = &v
}

func (o ViewStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DateLastUpdated != nil {
		toSerialize["dateLastUpdated"] = o.DateLastUpdated
	}
	if o.DateTime != nil {
		toSerialize["dateTime"] = o.DateTime
	}
	if o.Emoji != nil {
		toSerialize["emoji"] = o.Emoji
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IpAddress != nil {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableViewStatus struct {
	value *ViewStatus
	isSet bool
}

func (v NullableViewStatus) Get() *ViewStatus {
	return v.value
}

func (v *NullableViewStatus) Set(val *ViewStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableViewStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableViewStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewStatus(val *ViewStatus) *NullableViewStatus {
	return &NullableViewStatus{value: val, isSet: true}
}

func (v NullableViewStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


