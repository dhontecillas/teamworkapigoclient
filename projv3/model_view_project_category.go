/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewProjectCategory ProjectCategory contains all the information returned from a project category.
type ViewProjectCategory struct {
	Color *string `json:"color,omitempty"`
	Count *int32 `json:"count,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Parent *ViewRelationship `json:"parent,omitempty"`
	ParentId *int32 `json:"parentId,omitempty"`
}

// NewViewProjectCategory instantiates a new ViewProjectCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewProjectCategory() *ViewProjectCategory {
	this := ViewProjectCategory{}
	return &this
}

// NewViewProjectCategoryWithDefaults instantiates a new ViewProjectCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewProjectCategoryWithDefaults() *ViewProjectCategory {
	this := ViewProjectCategory{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *ViewProjectCategory) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectCategory) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *ViewProjectCategory) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *ViewProjectCategory) SetColor(v string) {
	o.Color = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ViewProjectCategory) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectCategory) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ViewProjectCategory) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ViewProjectCategory) SetCount(v int32) {
	o.Count = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewProjectCategory) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectCategory) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewProjectCategory) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewProjectCategory) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewProjectCategory) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectCategory) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewProjectCategory) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewProjectCategory) SetName(v string) {
	o.Name = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *ViewProjectCategory) GetParent() ViewRelationship {
	if o == nil || o.Parent == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectCategory) GetParentOk() (*ViewRelationship, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *ViewProjectCategory) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given ViewRelationship and assigns it to the Parent field.
func (o *ViewProjectCategory) SetParent(v ViewRelationship) {
	o.Parent = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ViewProjectCategory) GetParentId() int32 {
	if o == nil || o.ParentId == nil {
		var ret int32
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectCategory) GetParentIdOk() (*int32, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ViewProjectCategory) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int32 and assigns it to the ParentId field.
func (o *ViewProjectCategory) SetParentId(v int32) {
	o.ParentId = &v
}

func (o ViewProjectCategory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.ParentId != nil {
		toSerialize["parentId"] = o.ParentId
	}
	return json.Marshal(toSerialize)
}

type NullableViewProjectCategory struct {
	value *ViewProjectCategory
	isSet bool
}

func (v NullableViewProjectCategory) Get() *ViewProjectCategory {
	return v.value
}

func (v *NullableViewProjectCategory) Set(val *ViewProjectCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableViewProjectCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableViewProjectCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewProjectCategory(val *ViewProjectCategory) *NullableViewProjectCategory {
	return &NullableViewProjectCategory{value: val, isSet: true}
}

func (v NullableViewProjectCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewProjectCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


