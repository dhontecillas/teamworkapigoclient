/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewReactionsForObjectCounter ReactionsForObjectCounter contains the reactions counter of a specific object.
type ViewReactionsForObjectCounter struct {
	Dislike *int32 `json:"dislike,omitempty"`
	Frown *int32 `json:"frown,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Joy *int32 `json:"joy,omitempty"`
	Like *int32 `json:"like,omitempty"`
}

// NewViewReactionsForObjectCounter instantiates a new ViewReactionsForObjectCounter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewReactionsForObjectCounter() *ViewReactionsForObjectCounter {
	this := ViewReactionsForObjectCounter{}
	return &this
}

// NewViewReactionsForObjectCounterWithDefaults instantiates a new ViewReactionsForObjectCounter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewReactionsForObjectCounterWithDefaults() *ViewReactionsForObjectCounter {
	this := ViewReactionsForObjectCounter{}
	return &this
}

// GetDislike returns the Dislike field value if set, zero value otherwise.
func (o *ViewReactionsForObjectCounter) GetDislike() int32 {
	if o == nil || o.Dislike == nil {
		var ret int32
		return ret
	}
	return *o.Dislike
}

// GetDislikeOk returns a tuple with the Dislike field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReactionsForObjectCounter) GetDislikeOk() (*int32, bool) {
	if o == nil || o.Dislike == nil {
		return nil, false
	}
	return o.Dislike, true
}

// HasDislike returns a boolean if a field has been set.
func (o *ViewReactionsForObjectCounter) HasDislike() bool {
	if o != nil && o.Dislike != nil {
		return true
	}

	return false
}

// SetDislike gets a reference to the given int32 and assigns it to the Dislike field.
func (o *ViewReactionsForObjectCounter) SetDislike(v int32) {
	o.Dislike = &v
}

// GetFrown returns the Frown field value if set, zero value otherwise.
func (o *ViewReactionsForObjectCounter) GetFrown() int32 {
	if o == nil || o.Frown == nil {
		var ret int32
		return ret
	}
	return *o.Frown
}

// GetFrownOk returns a tuple with the Frown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReactionsForObjectCounter) GetFrownOk() (*int32, bool) {
	if o == nil || o.Frown == nil {
		return nil, false
	}
	return o.Frown, true
}

// HasFrown returns a boolean if a field has been set.
func (o *ViewReactionsForObjectCounter) HasFrown() bool {
	if o != nil && o.Frown != nil {
		return true
	}

	return false
}

// SetFrown gets a reference to the given int32 and assigns it to the Frown field.
func (o *ViewReactionsForObjectCounter) SetFrown(v int32) {
	o.Frown = &v
}

// GetHeart returns the Heart field value if set, zero value otherwise.
func (o *ViewReactionsForObjectCounter) GetHeart() int32 {
	if o == nil || o.Heart == nil {
		var ret int32
		return ret
	}
	return *o.Heart
}

// GetHeartOk returns a tuple with the Heart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReactionsForObjectCounter) GetHeartOk() (*int32, bool) {
	if o == nil || o.Heart == nil {
		return nil, false
	}
	return o.Heart, true
}

// HasHeart returns a boolean if a field has been set.
func (o *ViewReactionsForObjectCounter) HasHeart() bool {
	if o != nil && o.Heart != nil {
		return true
	}

	return false
}

// SetHeart gets a reference to the given int32 and assigns it to the Heart field.
func (o *ViewReactionsForObjectCounter) SetHeart(v int32) {
	o.Heart = &v
}

// GetJoy returns the Joy field value if set, zero value otherwise.
func (o *ViewReactionsForObjectCounter) GetJoy() int32 {
	if o == nil || o.Joy == nil {
		var ret int32
		return ret
	}
	return *o.Joy
}

// GetJoyOk returns a tuple with the Joy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReactionsForObjectCounter) GetJoyOk() (*int32, bool) {
	if o == nil || o.Joy == nil {
		return nil, false
	}
	return o.Joy, true
}

// HasJoy returns a boolean if a field has been set.
func (o *ViewReactionsForObjectCounter) HasJoy() bool {
	if o != nil && o.Joy != nil {
		return true
	}

	return false
}

// SetJoy gets a reference to the given int32 and assigns it to the Joy field.
func (o *ViewReactionsForObjectCounter) SetJoy(v int32) {
	o.Joy = &v
}

// GetLike returns the Like field value if set, zero value otherwise.
func (o *ViewReactionsForObjectCounter) GetLike() int32 {
	if o == nil || o.Like == nil {
		var ret int32
		return ret
	}
	return *o.Like
}

// GetLikeOk returns a tuple with the Like field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewReactionsForObjectCounter) GetLikeOk() (*int32, bool) {
	if o == nil || o.Like == nil {
		return nil, false
	}
	return o.Like, true
}

// HasLike returns a boolean if a field has been set.
func (o *ViewReactionsForObjectCounter) HasLike() bool {
	if o != nil && o.Like != nil {
		return true
	}

	return false
}

// SetLike gets a reference to the given int32 and assigns it to the Like field.
func (o *ViewReactionsForObjectCounter) SetLike(v int32) {
	o.Like = &v
}

func (o ViewReactionsForObjectCounter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dislike != nil {
		toSerialize["dislike"] = o.Dislike
	}
	if o.Frown != nil {
		toSerialize["frown"] = o.Frown
	}
	if o.Heart != nil {
		toSerialize["heart"] = o.Heart
	}
	if o.Joy != nil {
		toSerialize["joy"] = o.Joy
	}
	if o.Like != nil {
		toSerialize["like"] = o.Like
	}
	return json.Marshal(toSerialize)
}

type NullableViewReactionsForObjectCounter struct {
	value *ViewReactionsForObjectCounter
	isSet bool
}

func (v NullableViewReactionsForObjectCounter) Get() *ViewReactionsForObjectCounter {
	return v.value
}

func (v *NullableViewReactionsForObjectCounter) Set(val *ViewReactionsForObjectCounter) {
	v.value = val
	v.isSet = true
}

func (v NullableViewReactionsForObjectCounter) IsSet() bool {
	return v.isSet
}

func (v *NullableViewReactionsForObjectCounter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewReactionsForObjectCounter(val *ViewReactionsForObjectCounter) *NullableViewReactionsForObjectCounter {
	return &NullableViewReactionsForObjectCounter{value: val, isSet: true}
}

func (v NullableViewReactionsForObjectCounter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewReactionsForObjectCounter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


