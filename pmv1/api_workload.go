/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// WorkloadApiService WorkloadApi service
type WorkloadApiService service

type ApiGETWorkloadJsonRequest struct {
	ctx _context.Context
	ApiService *WorkloadApiService
	startDate *string
	endDate *string
	includeTasksWithoutDates *bool
	distributeEstimatedTimeToAssignees *bool
	prorataEstimatedTime *string
	page *int32
	pageSize *int32
	sortBy *string
	tagIds *int32
	matchAllTags *bool
	excludeTagIds *int32
	matchAllExcludedTags *bool
	onlyUntaggedTasks *bool
	includeCapacity *bool
	showOnlyUsersWithRemainingCapacity *bool
	includeAllUsers *bool
	userIdsToInclude *string
	userCompanyIds *string
	userSortBy *string
	searchUserName *string
}

func (r ApiGETWorkloadJsonRequest) StartDate(startDate string) ApiGETWorkloadJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETWorkloadJsonRequest) EndDate(endDate string) ApiGETWorkloadJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETWorkloadJsonRequest) IncludeTasksWithoutDates(includeTasksWithoutDates bool) ApiGETWorkloadJsonRequest {
	r.includeTasksWithoutDates = &includeTasksWithoutDates
	return r
}
func (r ApiGETWorkloadJsonRequest) DistributeEstimatedTimeToAssignees(distributeEstimatedTimeToAssignees bool) ApiGETWorkloadJsonRequest {
	r.distributeEstimatedTimeToAssignees = &distributeEstimatedTimeToAssignees
	return r
}
func (r ApiGETWorkloadJsonRequest) ProrataEstimatedTime(prorataEstimatedTime string) ApiGETWorkloadJsonRequest {
	r.prorataEstimatedTime = &prorataEstimatedTime
	return r
}
func (r ApiGETWorkloadJsonRequest) Page(page int32) ApiGETWorkloadJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETWorkloadJsonRequest) PageSize(pageSize int32) ApiGETWorkloadJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETWorkloadJsonRequest) SortBy(sortBy string) ApiGETWorkloadJsonRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETWorkloadJsonRequest) TagIds(tagIds int32) ApiGETWorkloadJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETWorkloadJsonRequest) MatchAllTags(matchAllTags bool) ApiGETWorkloadJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETWorkloadJsonRequest) ExcludeTagIds(excludeTagIds int32) ApiGETWorkloadJsonRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETWorkloadJsonRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETWorkloadJsonRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETWorkloadJsonRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETWorkloadJsonRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETWorkloadJsonRequest) IncludeCapacity(includeCapacity bool) ApiGETWorkloadJsonRequest {
	r.includeCapacity = &includeCapacity
	return r
}
func (r ApiGETWorkloadJsonRequest) ShowOnlyUsersWithRemainingCapacity(showOnlyUsersWithRemainingCapacity bool) ApiGETWorkloadJsonRequest {
	r.showOnlyUsersWithRemainingCapacity = &showOnlyUsersWithRemainingCapacity
	return r
}
func (r ApiGETWorkloadJsonRequest) IncludeAllUsers(includeAllUsers bool) ApiGETWorkloadJsonRequest {
	r.includeAllUsers = &includeAllUsers
	return r
}
func (r ApiGETWorkloadJsonRequest) UserIdsToInclude(userIdsToInclude string) ApiGETWorkloadJsonRequest {
	r.userIdsToInclude = &userIdsToInclude
	return r
}
func (r ApiGETWorkloadJsonRequest) UserCompanyIds(userCompanyIds string) ApiGETWorkloadJsonRequest {
	r.userCompanyIds = &userCompanyIds
	return r
}
func (r ApiGETWorkloadJsonRequest) UserSortBy(userSortBy string) ApiGETWorkloadJsonRequest {
	r.userSortBy = &userSortBy
	return r
}
func (r ApiGETWorkloadJsonRequest) SearchUserName(searchUserName string) ApiGETWorkloadJsonRequest {
	r.searchUserName = &searchUserName
	return r
}

func (r ApiGETWorkloadJsonRequest) Execute() (InlineResponse200120, *_nethttp.Response, error) {
	return r.ApiService.GETWorkloadJsonExecute(r)
}

/*
 * GETWorkloadJson Get Workload
 * List the workload across all projects, sort by Users, Company or Project.

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETWorkloadJsonRequest
 */
func (a *WorkloadApiService) GETWorkloadJson(ctx _context.Context) ApiGETWorkloadJsonRequest {
	return ApiGETWorkloadJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse200120
 */
func (a *WorkloadApiService) GETWorkloadJsonExecute(r ApiGETWorkloadJsonRequest) (InlineResponse200120, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200120
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadApiService.GETWorkloadJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workload.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}

	localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	if r.includeTasksWithoutDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDates", parameterToString(*r.includeTasksWithoutDates, ""))
	}
	if r.distributeEstimatedTimeToAssignees != nil {
		localVarQueryParams.Add("distributeEstimatedTimeToAssignees", parameterToString(*r.distributeEstimatedTimeToAssignees, ""))
	}
	if r.prorataEstimatedTime != nil {
		localVarQueryParams.Add("prorataEstimatedTime", parameterToString(*r.prorataEstimatedTime, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.includeCapacity != nil {
		localVarQueryParams.Add("includeCapacity", parameterToString(*r.includeCapacity, ""))
	}
	if r.showOnlyUsersWithRemainingCapacity != nil {
		localVarQueryParams.Add("showOnlyUsersWithRemainingCapacity", parameterToString(*r.showOnlyUsersWithRemainingCapacity, ""))
	}
	if r.includeAllUsers != nil {
		localVarQueryParams.Add("includeAllUsers", parameterToString(*r.includeAllUsers, ""))
	}
	if r.userIdsToInclude != nil {
		localVarQueryParams.Add("userIdsToInclude", parameterToString(*r.userIdsToInclude, ""))
	}
	if r.userCompanyIds != nil {
		localVarQueryParams.Add("userCompanyIds", parameterToString(*r.userCompanyIds, ""))
	}
	if r.userSortBy != nil {
		localVarQueryParams.Add("userSortBy", parameterToString(*r.userSortBy, ""))
	}
	if r.searchUserName != nil {
		localVarQueryParams.Add("searchUserName", parameterToString(*r.searchUserName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
