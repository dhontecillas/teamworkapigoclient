/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewUserGroups UserGroups are common lists for storing users, companies and teams ids together.
type ViewUserGroups struct {
	Companies *[]ViewRelationship `json:"companies,omitempty"`
	CompanyIds *[]int32 `json:"companyIds,omitempty"`
	TeamIds *[]int32 `json:"teamIds,omitempty"`
	Teams *[]ViewRelationship `json:"teams,omitempty"`
	UserIds *[]int32 `json:"userIds,omitempty"`
	Users *[]ViewRelationship `json:"users,omitempty"`
}

// NewViewUserGroups instantiates a new ViewUserGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewUserGroups() *ViewUserGroups {
	this := ViewUserGroups{}
	return &this
}

// NewViewUserGroupsWithDefaults instantiates a new ViewUserGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewUserGroupsWithDefaults() *ViewUserGroups {
	this := ViewUserGroups{}
	return &this
}

// GetCompanies returns the Companies field value if set, zero value otherwise.
func (o *ViewUserGroups) GetCompanies() []ViewRelationship {
	if o == nil || o.Companies == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Companies
}

// GetCompaniesOk returns a tuple with the Companies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserGroups) GetCompaniesOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Companies == nil {
		return nil, false
	}
	return o.Companies, true
}

// HasCompanies returns a boolean if a field has been set.
func (o *ViewUserGroups) HasCompanies() bool {
	if o != nil && o.Companies != nil {
		return true
	}

	return false
}

// SetCompanies gets a reference to the given []ViewRelationship and assigns it to the Companies field.
func (o *ViewUserGroups) SetCompanies(v []ViewRelationship) {
	o.Companies = &v
}

// GetCompanyIds returns the CompanyIds field value if set, zero value otherwise.
func (o *ViewUserGroups) GetCompanyIds() []int32 {
	if o == nil || o.CompanyIds == nil {
		var ret []int32
		return ret
	}
	return *o.CompanyIds
}

// GetCompanyIdsOk returns a tuple with the CompanyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserGroups) GetCompanyIdsOk() (*[]int32, bool) {
	if o == nil || o.CompanyIds == nil {
		return nil, false
	}
	return o.CompanyIds, true
}

// HasCompanyIds returns a boolean if a field has been set.
func (o *ViewUserGroups) HasCompanyIds() bool {
	if o != nil && o.CompanyIds != nil {
		return true
	}

	return false
}

// SetCompanyIds gets a reference to the given []int32 and assigns it to the CompanyIds field.
func (o *ViewUserGroups) SetCompanyIds(v []int32) {
	o.CompanyIds = &v
}

// GetTeamIds returns the TeamIds field value if set, zero value otherwise.
func (o *ViewUserGroups) GetTeamIds() []int32 {
	if o == nil || o.TeamIds == nil {
		var ret []int32
		return ret
	}
	return *o.TeamIds
}

// GetTeamIdsOk returns a tuple with the TeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserGroups) GetTeamIdsOk() (*[]int32, bool) {
	if o == nil || o.TeamIds == nil {
		return nil, false
	}
	return o.TeamIds, true
}

// HasTeamIds returns a boolean if a field has been set.
func (o *ViewUserGroups) HasTeamIds() bool {
	if o != nil && o.TeamIds != nil {
		return true
	}

	return false
}

// SetTeamIds gets a reference to the given []int32 and assigns it to the TeamIds field.
func (o *ViewUserGroups) SetTeamIds(v []int32) {
	o.TeamIds = &v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *ViewUserGroups) GetTeams() []ViewRelationship {
	if o == nil || o.Teams == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserGroups) GetTeamsOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Teams == nil {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *ViewUserGroups) HasTeams() bool {
	if o != nil && o.Teams != nil {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []ViewRelationship and assigns it to the Teams field.
func (o *ViewUserGroups) SetTeams(v []ViewRelationship) {
	o.Teams = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *ViewUserGroups) GetUserIds() []int32 {
	if o == nil || o.UserIds == nil {
		var ret []int32
		return ret
	}
	return *o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserGroups) GetUserIdsOk() (*[]int32, bool) {
	if o == nil || o.UserIds == nil {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *ViewUserGroups) HasUserIds() bool {
	if o != nil && o.UserIds != nil {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []int32 and assigns it to the UserIds field.
func (o *ViewUserGroups) SetUserIds(v []int32) {
	o.UserIds = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *ViewUserGroups) GetUsers() []ViewRelationship {
	if o == nil || o.Users == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserGroups) GetUsersOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *ViewUserGroups) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []ViewRelationship and assigns it to the Users field.
func (o *ViewUserGroups) SetUsers(v []ViewRelationship) {
	o.Users = &v
}

func (o ViewUserGroups) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Companies != nil {
		toSerialize["companies"] = o.Companies
	}
	if o.CompanyIds != nil {
		toSerialize["companyIds"] = o.CompanyIds
	}
	if o.TeamIds != nil {
		toSerialize["teamIds"] = o.TeamIds
	}
	if o.Teams != nil {
		toSerialize["teams"] = o.Teams
	}
	if o.UserIds != nil {
		toSerialize["userIds"] = o.UserIds
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableViewUserGroups struct {
	value *ViewUserGroups
	isSet bool
}

func (v NullableViewUserGroups) Get() *ViewUserGroups {
	return v.value
}

func (v *NullableViewUserGroups) Set(val *ViewUserGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUserGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUserGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUserGroups(val *ViewUserGroups) *NullableViewUserGroups {
	return &NullableViewUserGroups{value: val, isSet: true}
}

func (v NullableViewUserGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUserGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


