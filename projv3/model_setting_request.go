/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// SettingRequest Request contains information of a setting to be created or updated.
type SettingRequest struct {
	Appsetting *SettingAppSetting `json:"appsetting,omitempty"`
}

// NewSettingRequest instantiates a new SettingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingRequest() *SettingRequest {
	this := SettingRequest{}
	return &this
}

// NewSettingRequestWithDefaults instantiates a new SettingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingRequestWithDefaults() *SettingRequest {
	this := SettingRequest{}
	return &this
}

// GetAppsetting returns the Appsetting field value if set, zero value otherwise.
func (o *SettingRequest) GetAppsetting() SettingAppSetting {
	if o == nil || o.Appsetting == nil {
		var ret SettingAppSetting
		return ret
	}
	return *o.Appsetting
}

// GetAppsettingOk returns a tuple with the Appsetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingRequest) GetAppsettingOk() (*SettingAppSetting, bool) {
	if o == nil || o.Appsetting == nil {
		return nil, false
	}
	return o.Appsetting, true
}

// HasAppsetting returns a boolean if a field has been set.
func (o *SettingRequest) HasAppsetting() bool {
	if o != nil && o.Appsetting != nil {
		return true
	}

	return false
}

// SetAppsetting gets a reference to the given SettingAppSetting and assigns it to the Appsetting field.
func (o *SettingRequest) SetAppsetting(v SettingAppSetting) {
	o.Appsetting = &v
}

func (o SettingRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Appsetting != nil {
		toSerialize["appsetting"] = o.Appsetting
	}
	return json.Marshal(toSerialize)
}

type NullableSettingRequest struct {
	value *SettingRequest
	isSet bool
}

func (v NullableSettingRequest) Get() *SettingRequest {
	return v.value
}

func (v *NullableSettingRequest) Set(val *SettingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingRequest(val *SettingRequest) *NullableSettingRequest {
	return &NullableSettingRequest{value: val, isSet: true}
}

func (v NullableSettingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


