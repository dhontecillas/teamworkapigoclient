/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// TimelogTimelogsResponseIncluded struct for TimelogTimelogsResponseIncluded
type TimelogTimelogsResponseIncluded struct {
	Projects *map[string]ViewProject `json:"projects,omitempty"`
	Tags *map[string]ViewTag `json:"tags,omitempty"`
	Tasklists *map[string]ViewTasklist `json:"tasklists,omitempty"`
	Tasks *map[string]ViewTask `json:"tasks,omitempty"`
	Users *map[string]ViewUser `json:"users,omitempty"`
}

// NewTimelogTimelogsResponseIncluded instantiates a new TimelogTimelogsResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelogTimelogsResponseIncluded() *TimelogTimelogsResponseIncluded {
	this := TimelogTimelogsResponseIncluded{}
	return &this
}

// NewTimelogTimelogsResponseIncludedWithDefaults instantiates a new TimelogTimelogsResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelogTimelogsResponseIncludedWithDefaults() *TimelogTimelogsResponseIncluded {
	this := TimelogTimelogsResponseIncluded{}
	return &this
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *TimelogTimelogsResponseIncluded) GetProjects() map[string]ViewProject {
	if o == nil || o.Projects == nil {
		var ret map[string]ViewProject
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelogTimelogsResponseIncluded) GetProjectsOk() (*map[string]ViewProject, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *TimelogTimelogsResponseIncluded) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given map[string]ViewProject and assigns it to the Projects field.
func (o *TimelogTimelogsResponseIncluded) SetProjects(v map[string]ViewProject) {
	o.Projects = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TimelogTimelogsResponseIncluded) GetTags() map[string]ViewTag {
	if o == nil || o.Tags == nil {
		var ret map[string]ViewTag
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelogTimelogsResponseIncluded) GetTagsOk() (*map[string]ViewTag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TimelogTimelogsResponseIncluded) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]ViewTag and assigns it to the Tags field.
func (o *TimelogTimelogsResponseIncluded) SetTags(v map[string]ViewTag) {
	o.Tags = &v
}

// GetTasklists returns the Tasklists field value if set, zero value otherwise.
func (o *TimelogTimelogsResponseIncluded) GetTasklists() map[string]ViewTasklist {
	if o == nil || o.Tasklists == nil {
		var ret map[string]ViewTasklist
		return ret
	}
	return *o.Tasklists
}

// GetTasklistsOk returns a tuple with the Tasklists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelogTimelogsResponseIncluded) GetTasklistsOk() (*map[string]ViewTasklist, bool) {
	if o == nil || o.Tasklists == nil {
		return nil, false
	}
	return o.Tasklists, true
}

// HasTasklists returns a boolean if a field has been set.
func (o *TimelogTimelogsResponseIncluded) HasTasklists() bool {
	if o != nil && o.Tasklists != nil {
		return true
	}

	return false
}

// SetTasklists gets a reference to the given map[string]ViewTasklist and assigns it to the Tasklists field.
func (o *TimelogTimelogsResponseIncluded) SetTasklists(v map[string]ViewTasklist) {
	o.Tasklists = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *TimelogTimelogsResponseIncluded) GetTasks() map[string]ViewTask {
	if o == nil || o.Tasks == nil {
		var ret map[string]ViewTask
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelogTimelogsResponseIncluded) GetTasksOk() (*map[string]ViewTask, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *TimelogTimelogsResponseIncluded) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given map[string]ViewTask and assigns it to the Tasks field.
func (o *TimelogTimelogsResponseIncluded) SetTasks(v map[string]ViewTask) {
	o.Tasks = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *TimelogTimelogsResponseIncluded) GetUsers() map[string]ViewUser {
	if o == nil || o.Users == nil {
		var ret map[string]ViewUser
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelogTimelogsResponseIncluded) GetUsersOk() (*map[string]ViewUser, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *TimelogTimelogsResponseIncluded) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given map[string]ViewUser and assigns it to the Users field.
func (o *TimelogTimelogsResponseIncluded) SetUsers(v map[string]ViewUser) {
	o.Users = &v
}

func (o TimelogTimelogsResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Tasklists != nil {
		toSerialize["tasklists"] = o.Tasklists
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableTimelogTimelogsResponseIncluded struct {
	value *TimelogTimelogsResponseIncluded
	isSet bool
}

func (v NullableTimelogTimelogsResponseIncluded) Get() *TimelogTimelogsResponseIncluded {
	return v.value
}

func (v *NullableTimelogTimelogsResponseIncluded) Set(val *TimelogTimelogsResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelogTimelogsResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelogTimelogsResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelogTimelogsResponseIncluded(val *TimelogTimelogsResponseIncluded) *NullableTimelogTimelogsResponseIncluded {
	return &NullableTimelogTimelogsResponseIncluded{value: val, isSet: true}
}

func (v NullableTimelogTimelogsResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelogTimelogsResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


