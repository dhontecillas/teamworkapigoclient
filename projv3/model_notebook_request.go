/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// NotebookRequest Request contains information of a notebook to be created or updated.
type NotebookRequest struct {
	Notebook *NotebookNotebook `json:"notebook,omitempty"`
}

// NewNotebookRequest instantiates a new NotebookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotebookRequest() *NotebookRequest {
	this := NotebookRequest{}
	return &this
}

// NewNotebookRequestWithDefaults instantiates a new NotebookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotebookRequestWithDefaults() *NotebookRequest {
	this := NotebookRequest{}
	return &this
}

// GetNotebook returns the Notebook field value if set, zero value otherwise.
func (o *NotebookRequest) GetNotebook() NotebookNotebook {
	if o == nil || o.Notebook == nil {
		var ret NotebookNotebook
		return ret
	}
	return *o.Notebook
}

// GetNotebookOk returns a tuple with the Notebook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookRequest) GetNotebookOk() (*NotebookNotebook, bool) {
	if o == nil || o.Notebook == nil {
		return nil, false
	}
	return o.Notebook, true
}

// HasNotebook returns a boolean if a field has been set.
func (o *NotebookRequest) HasNotebook() bool {
	if o != nil && o.Notebook != nil {
		return true
	}

	return false
}

// SetNotebook gets a reference to the given NotebookNotebook and assigns it to the Notebook field.
func (o *NotebookRequest) SetNotebook(v NotebookNotebook) {
	o.Notebook = &v
}

func (o NotebookRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Notebook != nil {
		toSerialize["notebook"] = o.Notebook
	}
	return json.Marshal(toSerialize)
}

type NullableNotebookRequest struct {
	value *NotebookRequest
	isSet bool
}

func (v NullableNotebookRequest) Get() *NotebookRequest {
	return v.value
}

func (v *NullableNotebookRequest) Set(val *NotebookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNotebookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNotebookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotebookRequest(val *NotebookRequest) *NullableNotebookRequest {
	return &NullableNotebookRequest{value: val, isSet: true}
}

func (v NullableNotebookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotebookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


