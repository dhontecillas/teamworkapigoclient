/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewWorkingHour WorkingHour stores the the working hours of an entity (user, team, etc).
type ViewWorkingHour struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	DateCreated *string `json:"dateCreated,omitempty"`
	DateUpdated *string `json:"dateUpdated,omitempty"`
	Description *string `json:"description,omitempty"`
	Entries *[]ViewRelationship `json:"entries,omitempty"`
	EntryIds *[]int32 `json:"entryIds,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Object *ViewRelationship `json:"object,omitempty"`
	ObjectId *int32 `json:"objectId,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// NewViewWorkingHour instantiates a new ViewWorkingHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewWorkingHour() *ViewWorkingHour {
	this := ViewWorkingHour{}
	return &this
}

// NewViewWorkingHourWithDefaults instantiates a new ViewWorkingHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewWorkingHourWithDefaults() *ViewWorkingHour {
	this := ViewWorkingHour{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ViewWorkingHour) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetDateCreated() string {
	if o == nil || o.DateCreated == nil {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetDateCreatedOk() (*string, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *ViewWorkingHour) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateUpdated returns the DateUpdated field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetDateUpdated() string {
	if o == nil || o.DateUpdated == nil {
		var ret string
		return ret
	}
	return *o.DateUpdated
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetDateUpdatedOk() (*string, bool) {
	if o == nil || o.DateUpdated == nil {
		return nil, false
	}
	return o.DateUpdated, true
}

// HasDateUpdated returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasDateUpdated() bool {
	if o != nil && o.DateUpdated != nil {
		return true
	}

	return false
}

// SetDateUpdated gets a reference to the given string and assigns it to the DateUpdated field.
func (o *ViewWorkingHour) SetDateUpdated(v string) {
	o.DateUpdated = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ViewWorkingHour) SetDescription(v string) {
	o.Description = &v
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetEntries() []ViewRelationship {
	if o == nil || o.Entries == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetEntriesOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Entries == nil {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasEntries() bool {
	if o != nil && o.Entries != nil {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []ViewRelationship and assigns it to the Entries field.
func (o *ViewWorkingHour) SetEntries(v []ViewRelationship) {
	o.Entries = &v
}

// GetEntryIds returns the EntryIds field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetEntryIds() []int32 {
	if o == nil || o.EntryIds == nil {
		var ret []int32
		return ret
	}
	return *o.EntryIds
}

// GetEntryIdsOk returns a tuple with the EntryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetEntryIdsOk() (*[]int32, bool) {
	if o == nil || o.EntryIds == nil {
		return nil, false
	}
	return o.EntryIds, true
}

// HasEntryIds returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasEntryIds() bool {
	if o != nil && o.EntryIds != nil {
		return true
	}

	return false
}

// SetEntryIds gets a reference to the given []int32 and assigns it to the EntryIds field.
func (o *ViewWorkingHour) SetEntryIds(v []int32) {
	o.EntryIds = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewWorkingHour) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewWorkingHour) SetName(v string) {
	o.Name = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetObject() ViewRelationship {
	if o == nil || o.Object == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetObjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given ViewRelationship and assigns it to the Object field.
func (o *ViewWorkingHour) SetObject(v ViewRelationship) {
	o.Object = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetObjectId() int32 {
	if o == nil || o.ObjectId == nil {
		var ret int32
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetObjectIdOk() (*int32, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given int32 and assigns it to the ObjectId field.
func (o *ViewWorkingHour) SetObjectId(v int32) {
	o.ObjectId = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *ViewWorkingHour) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewWorkingHour) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewWorkingHour) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewWorkingHour) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewWorkingHour) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o ViewWorkingHour) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.DateUpdated != nil {
		toSerialize["dateUpdated"] = o.DateUpdated
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Entries != nil {
		toSerialize["entries"] = o.Entries
	}
	if o.EntryIds != nil {
		toSerialize["entryIds"] = o.EntryIds
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	if o.ObjectId != nil {
		toSerialize["objectId"] = o.ObjectId
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableViewWorkingHour struct {
	value *ViewWorkingHour
	isSet bool
}

func (v NullableViewWorkingHour) Get() *ViewWorkingHour {
	return v.value
}

func (v *NullableViewWorkingHour) Set(val *ViewWorkingHour) {
	v.value = val
	v.isSet = true
}

func (v NullableViewWorkingHour) IsSet() bool {
	return v.isSet
}

func (v *NullableViewWorkingHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewWorkingHour(val *ViewWorkingHour) *NullableViewWorkingHour {
	return &NullableViewWorkingHour{value: val, isSet: true}
}

func (v NullableViewWorkingHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewWorkingHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


