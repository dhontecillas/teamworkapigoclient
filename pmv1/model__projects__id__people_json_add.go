/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// ProjectsIdPeopleJsonAdd struct for ProjectsIdPeopleJsonAdd
type ProjectsIdPeopleJsonAdd struct {
	UserIdList *string `json:"userIdList,omitempty"`
}

// NewProjectsIdPeopleJsonAdd instantiates a new ProjectsIdPeopleJsonAdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsIdPeopleJsonAdd() *ProjectsIdPeopleJsonAdd {
	this := ProjectsIdPeopleJsonAdd{}
	return &this
}

// NewProjectsIdPeopleJsonAddWithDefaults instantiates a new ProjectsIdPeopleJsonAdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsIdPeopleJsonAddWithDefaults() *ProjectsIdPeopleJsonAdd {
	this := ProjectsIdPeopleJsonAdd{}
	return &this
}

// GetUserIdList returns the UserIdList field value if set, zero value otherwise.
func (o *ProjectsIdPeopleJsonAdd) GetUserIdList() string {
	if o == nil || o.UserIdList == nil {
		var ret string
		return ret
	}
	return *o.UserIdList
}

// GetUserIdListOk returns a tuple with the UserIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsIdPeopleJsonAdd) GetUserIdListOk() (*string, bool) {
	if o == nil || o.UserIdList == nil {
		return nil, false
	}
	return o.UserIdList, true
}

// HasUserIdList returns a boolean if a field has been set.
func (o *ProjectsIdPeopleJsonAdd) HasUserIdList() bool {
	if o != nil && o.UserIdList != nil {
		return true
	}

	return false
}

// SetUserIdList gets a reference to the given string and assigns it to the UserIdList field.
func (o *ProjectsIdPeopleJsonAdd) SetUserIdList(v string) {
	o.UserIdList = &v
}

func (o ProjectsIdPeopleJsonAdd) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserIdList != nil {
		toSerialize["userIdList"] = o.UserIdList
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsIdPeopleJsonAdd struct {
	value *ProjectsIdPeopleJsonAdd
	isSet bool
}

func (v NullableProjectsIdPeopleJsonAdd) Get() *ProjectsIdPeopleJsonAdd {
	return v.value
}

func (v *NullableProjectsIdPeopleJsonAdd) Set(val *ProjectsIdPeopleJsonAdd) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsIdPeopleJsonAdd) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsIdPeopleJsonAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsIdPeopleJsonAdd(val *ProjectsIdPeopleJsonAdd) *NullableProjectsIdPeopleJsonAdd {
	return &NullableProjectsIdPeopleJsonAdd{value: val, isSet: true}
}

func (v NullableProjectsIdPeopleJsonAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsIdPeopleJsonAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


