/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv2

import (
	"encoding/json"
)

// PeopleWorkingHours struct for PeopleWorkingHours
type PeopleWorkingHours struct {
	Friday *PeopleWorkingHoursEntry `json:"friday,omitempty"`
	Monday *PeopleWorkingHoursEntry `json:"monday,omitempty"`
	Saturday *PeopleWorkingHoursEntry `json:"saturday,omitempty"`
	Sunday *PeopleWorkingHoursEntry `json:"sunday,omitempty"`
	Thursday *PeopleWorkingHoursEntry `json:"thursday,omitempty"`
	Tuesday *PeopleWorkingHoursEntry `json:"tuesday,omitempty"`
	Wednesday *PeopleWorkingHoursEntry `json:"wednesday,omitempty"`
}

// NewPeopleWorkingHours instantiates a new PeopleWorkingHours object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleWorkingHours() *PeopleWorkingHours {
	this := PeopleWorkingHours{}
	return &this
}

// NewPeopleWorkingHoursWithDefaults instantiates a new PeopleWorkingHours object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleWorkingHoursWithDefaults() *PeopleWorkingHours {
	this := PeopleWorkingHours{}
	return &this
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *PeopleWorkingHours) GetFriday() PeopleWorkingHoursEntry {
	if o == nil || o.Friday == nil {
		var ret PeopleWorkingHoursEntry
		return ret
	}
	return *o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHours) GetFridayOk() (*PeopleWorkingHoursEntry, bool) {
	if o == nil || o.Friday == nil {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *PeopleWorkingHours) HasFriday() bool {
	if o != nil && o.Friday != nil {
		return true
	}

	return false
}

// SetFriday gets a reference to the given PeopleWorkingHoursEntry and assigns it to the Friday field.
func (o *PeopleWorkingHours) SetFriday(v PeopleWorkingHoursEntry) {
	o.Friday = &v
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *PeopleWorkingHours) GetMonday() PeopleWorkingHoursEntry {
	if o == nil || o.Monday == nil {
		var ret PeopleWorkingHoursEntry
		return ret
	}
	return *o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHours) GetMondayOk() (*PeopleWorkingHoursEntry, bool) {
	if o == nil || o.Monday == nil {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *PeopleWorkingHours) HasMonday() bool {
	if o != nil && o.Monday != nil {
		return true
	}

	return false
}

// SetMonday gets a reference to the given PeopleWorkingHoursEntry and assigns it to the Monday field.
func (o *PeopleWorkingHours) SetMonday(v PeopleWorkingHoursEntry) {
	o.Monday = &v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *PeopleWorkingHours) GetSaturday() PeopleWorkingHoursEntry {
	if o == nil || o.Saturday == nil {
		var ret PeopleWorkingHoursEntry
		return ret
	}
	return *o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHours) GetSaturdayOk() (*PeopleWorkingHoursEntry, bool) {
	if o == nil || o.Saturday == nil {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *PeopleWorkingHours) HasSaturday() bool {
	if o != nil && o.Saturday != nil {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given PeopleWorkingHoursEntry and assigns it to the Saturday field.
func (o *PeopleWorkingHours) SetSaturday(v PeopleWorkingHoursEntry) {
	o.Saturday = &v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *PeopleWorkingHours) GetSunday() PeopleWorkingHoursEntry {
	if o == nil || o.Sunday == nil {
		var ret PeopleWorkingHoursEntry
		return ret
	}
	return *o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHours) GetSundayOk() (*PeopleWorkingHoursEntry, bool) {
	if o == nil || o.Sunday == nil {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *PeopleWorkingHours) HasSunday() bool {
	if o != nil && o.Sunday != nil {
		return true
	}

	return false
}

// SetSunday gets a reference to the given PeopleWorkingHoursEntry and assigns it to the Sunday field.
func (o *PeopleWorkingHours) SetSunday(v PeopleWorkingHoursEntry) {
	o.Sunday = &v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *PeopleWorkingHours) GetThursday() PeopleWorkingHoursEntry {
	if o == nil || o.Thursday == nil {
		var ret PeopleWorkingHoursEntry
		return ret
	}
	return *o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHours) GetThursdayOk() (*PeopleWorkingHoursEntry, bool) {
	if o == nil || o.Thursday == nil {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *PeopleWorkingHours) HasThursday() bool {
	if o != nil && o.Thursday != nil {
		return true
	}

	return false
}

// SetThursday gets a reference to the given PeopleWorkingHoursEntry and assigns it to the Thursday field.
func (o *PeopleWorkingHours) SetThursday(v PeopleWorkingHoursEntry) {
	o.Thursday = &v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *PeopleWorkingHours) GetTuesday() PeopleWorkingHoursEntry {
	if o == nil || o.Tuesday == nil {
		var ret PeopleWorkingHoursEntry
		return ret
	}
	return *o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHours) GetTuesdayOk() (*PeopleWorkingHoursEntry, bool) {
	if o == nil || o.Tuesday == nil {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *PeopleWorkingHours) HasTuesday() bool {
	if o != nil && o.Tuesday != nil {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given PeopleWorkingHoursEntry and assigns it to the Tuesday field.
func (o *PeopleWorkingHours) SetTuesday(v PeopleWorkingHoursEntry) {
	o.Tuesday = &v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *PeopleWorkingHours) GetWednesday() PeopleWorkingHoursEntry {
	if o == nil || o.Wednesday == nil {
		var ret PeopleWorkingHoursEntry
		return ret
	}
	return *o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHours) GetWednesdayOk() (*PeopleWorkingHoursEntry, bool) {
	if o == nil || o.Wednesday == nil {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *PeopleWorkingHours) HasWednesday() bool {
	if o != nil && o.Wednesday != nil {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given PeopleWorkingHoursEntry and assigns it to the Wednesday field.
func (o *PeopleWorkingHours) SetWednesday(v PeopleWorkingHoursEntry) {
	o.Wednesday = &v
}

func (o PeopleWorkingHours) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Friday != nil {
		toSerialize["friday"] = o.Friday
	}
	if o.Monday != nil {
		toSerialize["monday"] = o.Monday
	}
	if o.Saturday != nil {
		toSerialize["saturday"] = o.Saturday
	}
	if o.Sunday != nil {
		toSerialize["sunday"] = o.Sunday
	}
	if o.Thursday != nil {
		toSerialize["thursday"] = o.Thursday
	}
	if o.Tuesday != nil {
		toSerialize["tuesday"] = o.Tuesday
	}
	if o.Wednesday != nil {
		toSerialize["wednesday"] = o.Wednesday
	}
	return json.Marshal(toSerialize)
}

type NullablePeopleWorkingHours struct {
	value *PeopleWorkingHours
	isSet bool
}

func (v NullablePeopleWorkingHours) Get() *PeopleWorkingHours {
	return v.value
}

func (v *NullablePeopleWorkingHours) Set(val *PeopleWorkingHours) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleWorkingHours) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleWorkingHours) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleWorkingHours(val *PeopleWorkingHours) *NullablePeopleWorkingHours {
	return &NullablePeopleWorkingHours{value: val, isSet: true}
}

func (v NullablePeopleWorkingHours) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleWorkingHours) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


