/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AllocationsApiService AllocationsApi service
type AllocationsApiService service

type ApiDELETEProjectsApiV3AllocationsallocationIdJsonRequest struct {
	ctx _context.Context
	ApiService *AllocationsApiService
	allocationId int32
	allocationDeleteRequest *AllocationDeleteRequest
}

func (r ApiDELETEProjectsApiV3AllocationsallocationIdJsonRequest) AllocationDeleteRequest(allocationDeleteRequest AllocationDeleteRequest) ApiDELETEProjectsApiV3AllocationsallocationIdJsonRequest {
	r.allocationDeleteRequest = &allocationDeleteRequest
	return r
}

func (r ApiDELETEProjectsApiV3AllocationsallocationIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3AllocationsallocationIdJsonExecute(r)
}

/*
 * DELETEProjectsApiV3AllocationsallocationIdJson Delete an existing allocation.
 * Removes an allocation. It's still possible to recover the allocation. To
remove a allocation definitely provide the "hardDelete" flag.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param allocationId
 * @return ApiDELETEProjectsApiV3AllocationsallocationIdJsonRequest
 */
func (a *AllocationsApiService) DELETEProjectsApiV3AllocationsallocationIdJson(ctx _context.Context, allocationId int32) ApiDELETEProjectsApiV3AllocationsallocationIdJsonRequest {
	return ApiDELETEProjectsApiV3AllocationsallocationIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		allocationId: allocationId,
	}
}

/*
 * Execute executes the request
 */
func (a *AllocationsApiService) DELETEProjectsApiV3AllocationsallocationIdJsonExecute(r ApiDELETEProjectsApiV3AllocationsallocationIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllocationsApiService.DELETEProjectsApiV3AllocationsallocationIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/allocations/{allocationId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"allocationId"+"}", _neturl.PathEscape(parameterToString(r.allocationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.allocationDeleteRequest == nil {
		return nil, reportError("allocationDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.allocationDeleteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3AllocationsJsonRequest struct {
	ctx _context.Context
	ApiService *AllocationsApiService
	startDate *string
	searchTerm *string
	projectStatus *string
	orderMode *string
	orderBy *string
	endDate *string
	projectHealths *int32
	pageSize *int32
	page *int32
	onlyStarredProjects *bool
	onlyProjectsWithExplicitMembership *bool
	matchAllProjectTags *bool
	hideObservedProjects *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsProjects *[]string
	fieldsCompanies *[]string
	fieldsAllocations *[]string
	assignedUserIds *[]int32
}

func (r ApiGETProjectsApiV3AllocationsJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) Page(page int32) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) OnlyProjectsWithExplicitMembership(onlyProjectsWithExplicitMembership bool) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.onlyProjectsWithExplicitMembership = &onlyProjectsWithExplicitMembership
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) HideObservedProjects(hideObservedProjects bool) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.hideObservedProjects = &hideObservedProjects
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) Include(include []string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) FieldsAllocations(fieldsAllocations []string) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.fieldsAllocations = &fieldsAllocations
	return r
}
func (r ApiGETProjectsApiV3AllocationsJsonRequest) AssignedUserIds(assignedUserIds []int32) ApiGETProjectsApiV3AllocationsJsonRequest {
	r.assignedUserIds = &assignedUserIds
	return r
}

func (r ApiGETProjectsApiV3AllocationsJsonRequest) Execute() (AllocationAllocationsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3AllocationsJsonExecute(r)
}

/*
 * GETProjectsApiV3AllocationsJson Get all allocations.
 * Return all allocations that matches with the provided filters.


On this endpoint you can filter by project custom fields. The syntax for the
query parameter is the following:

    projectCustomField[id][op]=value

Where:
  - [id] is the custom field ID
  - [op] is the operator to apply when filtering, different operators are
    allowed according to the custom field type
  - [value] is the value to apply when filtering

For example, if I want to filter a dropdown custom field with ID 10 to only
return entries that have the value "Option1" we would do the following:

    projectCustomField[10][eq]=Option1

The allowed operators are:
  - like
  - not-like
  - eq
  - not
  - lt
  - gt
  - any
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3AllocationsJsonRequest
 */
func (a *AllocationsApiService) GETProjectsApiV3AllocationsJson(ctx _context.Context) ApiGETProjectsApiV3AllocationsJsonRequest {
	return ApiGETProjectsApiV3AllocationsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AllocationAllocationsResponse
 */
func (a *AllocationsApiService) GETProjectsApiV3AllocationsJsonExecute(r ApiGETProjectsApiV3AllocationsJsonRequest) (AllocationAllocationsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AllocationAllocationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllocationsApiService.GETProjectsApiV3AllocationsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/allocations.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyProjectsWithExplicitMembership != nil {
		localVarQueryParams.Add("onlyProjectsWithExplicitMembership", parameterToString(*r.onlyProjectsWithExplicitMembership, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.hideObservedProjects != nil {
		localVarQueryParams.Add("hideObservedProjects", parameterToString(*r.hideObservedProjects, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.fieldsAllocations != nil {
		localVarQueryParams.Add("fields[allocations]", parameterToString(*r.fieldsAllocations, "csv"))
	}
	if r.assignedUserIds != nil {
		localVarQueryParams.Add("assignedUserIds", parameterToString(*r.assignedUserIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3AllocationsallocationIdJsonRequest struct {
	ctx _context.Context
	ApiService *AllocationsApiService
	allocationId int32
}


func (r ApiGETProjectsApiV3AllocationsallocationIdJsonRequest) Execute() (AllocationResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3AllocationsallocationIdJsonExecute(r)
}

/*
 * GETProjectsApiV3AllocationsallocationIdJson Get a specific allocation.
 * Retrieve an allocation by the identifier.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param allocationId
 * @return ApiGETProjectsApiV3AllocationsallocationIdJsonRequest
 */
func (a *AllocationsApiService) GETProjectsApiV3AllocationsallocationIdJson(ctx _context.Context, allocationId int32) ApiGETProjectsApiV3AllocationsallocationIdJsonRequest {
	return ApiGETProjectsApiV3AllocationsallocationIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		allocationId: allocationId,
	}
}

/*
 * Execute executes the request
 * @return AllocationResponse
 */
func (a *AllocationsApiService) GETProjectsApiV3AllocationsallocationIdJsonExecute(r ApiGETProjectsApiV3AllocationsallocationIdJsonRequest) (AllocationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AllocationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllocationsApiService.GETProjectsApiV3AllocationsallocationIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/allocations/{allocationId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"allocationId"+"}", _neturl.PathEscape(parameterToString(r.allocationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHProjectsApiV3AllocationsallocationIdJsonRequest struct {
	ctx _context.Context
	ApiService *AllocationsApiService
	allocationId int32
	allocationRequest *AllocationRequest
}

func (r ApiPATCHProjectsApiV3AllocationsallocationIdJsonRequest) AllocationRequest(allocationRequest AllocationRequest) ApiPATCHProjectsApiV3AllocationsallocationIdJsonRequest {
	r.allocationRequest = &allocationRequest
	return r
}

func (r ApiPATCHProjectsApiV3AllocationsallocationIdJsonRequest) Execute() (AllocationResponse, *_nethttp.Response, error) {
	return r.ApiService.PATCHProjectsApiV3AllocationsallocationIdJsonExecute(r)
}

/*
 * PATCHProjectsApiV3AllocationsallocationIdJson Update an existing allocation.
 * Updates an existing allocation for resource scheduling. If the allocation
start/end date conflicts with another allocation on the same project an error
will be returned. You can bypass this error with the "ignoreCollisions"
field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param allocationId
 * @return ApiPATCHProjectsApiV3AllocationsallocationIdJsonRequest
 */
func (a *AllocationsApiService) PATCHProjectsApiV3AllocationsallocationIdJson(ctx _context.Context, allocationId int32) ApiPATCHProjectsApiV3AllocationsallocationIdJsonRequest {
	return ApiPATCHProjectsApiV3AllocationsallocationIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		allocationId: allocationId,
	}
}

/*
 * Execute executes the request
 * @return AllocationResponse
 */
func (a *AllocationsApiService) PATCHProjectsApiV3AllocationsallocationIdJsonExecute(r ApiPATCHProjectsApiV3AllocationsallocationIdJsonRequest) (AllocationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AllocationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllocationsApiService.PATCHProjectsApiV3AllocationsallocationIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/allocations/{allocationId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"allocationId"+"}", _neturl.PathEscape(parameterToString(r.allocationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.allocationRequest == nil {
		return localVarReturnValue, nil, reportError("allocationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.allocationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3AllocationsBulkDeleteJsonRequest struct {
	ctx _context.Context
	ApiService *AllocationsApiService
	allocationBulkDeleteRequest *AllocationBulkDeleteRequest
}

func (r ApiPOSTProjectsApiV3AllocationsBulkDeleteJsonRequest) AllocationBulkDeleteRequest(allocationBulkDeleteRequest AllocationBulkDeleteRequest) ApiPOSTProjectsApiV3AllocationsBulkDeleteJsonRequest {
	r.allocationBulkDeleteRequest = &allocationBulkDeleteRequest
	return r
}

func (r ApiPOSTProjectsApiV3AllocationsBulkDeleteJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3AllocationsBulkDeleteJsonExecute(r)
}

/*
 * POSTProjectsApiV3AllocationsBulkDeleteJson Delete many allocations at once.
 * Remove multiple allocations at once. It's still possible to recover those
allocations. To remove all allocations definitely provide the "hardDelete"
flag.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3AllocationsBulkDeleteJsonRequest
 */
func (a *AllocationsApiService) POSTProjectsApiV3AllocationsBulkDeleteJson(ctx _context.Context) ApiPOSTProjectsApiV3AllocationsBulkDeleteJsonRequest {
	return ApiPOSTProjectsApiV3AllocationsBulkDeleteJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *AllocationsApiService) POSTProjectsApiV3AllocationsBulkDeleteJsonExecute(r ApiPOSTProjectsApiV3AllocationsBulkDeleteJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllocationsApiService.POSTProjectsApiV3AllocationsBulkDeleteJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/allocations/bulk/delete.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.allocationBulkDeleteRequest == nil {
		return nil, reportError("allocationBulkDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.allocationBulkDeleteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3AllocationsJsonRequest struct {
	ctx _context.Context
	ApiService *AllocationsApiService
	allocationRequest *AllocationRequest
}

func (r ApiPOSTProjectsApiV3AllocationsJsonRequest) AllocationRequest(allocationRequest AllocationRequest) ApiPOSTProjectsApiV3AllocationsJsonRequest {
	r.allocationRequest = &allocationRequest
	return r
}

func (r ApiPOSTProjectsApiV3AllocationsJsonRequest) Execute() (AllocationResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3AllocationsJsonExecute(r)
}

/*
 * POSTProjectsApiV3AllocationsJson Create a new allocation.
 * Creates a new allocation for resource scheduling. If the allocation start/end
date conflicts with another allocation on the same project an error will be
returned. You can bypass this error with the "ignoreCollisions" field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3AllocationsJsonRequest
 */
func (a *AllocationsApiService) POSTProjectsApiV3AllocationsJson(ctx _context.Context) ApiPOSTProjectsApiV3AllocationsJsonRequest {
	return ApiPOSTProjectsApiV3AllocationsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AllocationResponse
 */
func (a *AllocationsApiService) POSTProjectsApiV3AllocationsJsonExecute(r ApiPOSTProjectsApiV3AllocationsJsonRequest) (AllocationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AllocationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllocationsApiService.POSTProjectsApiV3AllocationsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/allocations.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.allocationRequest == nil {
		return localVarReturnValue, nil, reportError("allocationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.allocationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3AllocationsallocationIdJsonRequest struct {
	ctx _context.Context
	ApiService *AllocationsApiService
	allocationId int32
	allocationRequest *AllocationRequest
}

func (r ApiPUTProjectsApiV3AllocationsallocationIdJsonRequest) AllocationRequest(allocationRequest AllocationRequest) ApiPUTProjectsApiV3AllocationsallocationIdJsonRequest {
	r.allocationRequest = &allocationRequest
	return r
}

func (r ApiPUTProjectsApiV3AllocationsallocationIdJsonRequest) Execute() (AllocationResponse, *_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3AllocationsallocationIdJsonExecute(r)
}

/*
 * PUTProjectsApiV3AllocationsallocationIdJson Update an existing allocation.
 * Updates an existing allocation for resource scheduling. If the allocation
start/end date conflicts with another allocation on the same project an error
will be returned. You can bypass this error with the "ignoreCollisions"
field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param allocationId
 * @return ApiPUTProjectsApiV3AllocationsallocationIdJsonRequest
 */
func (a *AllocationsApiService) PUTProjectsApiV3AllocationsallocationIdJson(ctx _context.Context, allocationId int32) ApiPUTProjectsApiV3AllocationsallocationIdJsonRequest {
	return ApiPUTProjectsApiV3AllocationsallocationIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		allocationId: allocationId,
	}
}

/*
 * Execute executes the request
 * @return AllocationResponse
 */
func (a *AllocationsApiService) PUTProjectsApiV3AllocationsallocationIdJsonExecute(r ApiPUTProjectsApiV3AllocationsallocationIdJsonRequest) (AllocationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AllocationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllocationsApiService.PUTProjectsApiV3AllocationsallocationIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/allocations/{allocationId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"allocationId"+"}", _neturl.PathEscape(parameterToString(r.allocationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.allocationRequest == nil {
		return localVarReturnValue, nil, reportError("allocationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.allocationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3AllocationsallocationIdRestoreJsonRequest struct {
	ctx _context.Context
	ApiService *AllocationsApiService
	allocationId int32
}


func (r ApiPUTProjectsApiV3AllocationsallocationIdRestoreJsonRequest) Execute() (AllocationResponse, *_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3AllocationsallocationIdRestoreJsonExecute(r)
}

/*
 * PUTProjectsApiV3AllocationsallocationIdRestoreJson Restore a soft deleted allocation.
 * Restore an allocation by the identifier.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param allocationId
 * @return ApiPUTProjectsApiV3AllocationsallocationIdRestoreJsonRequest
 */
func (a *AllocationsApiService) PUTProjectsApiV3AllocationsallocationIdRestoreJson(ctx _context.Context, allocationId int32) ApiPUTProjectsApiV3AllocationsallocationIdRestoreJsonRequest {
	return ApiPUTProjectsApiV3AllocationsallocationIdRestoreJsonRequest{
		ApiService: a,
		ctx: ctx,
		allocationId: allocationId,
	}
}

/*
 * Execute executes the request
 * @return AllocationResponse
 */
func (a *AllocationsApiService) PUTProjectsApiV3AllocationsallocationIdRestoreJsonExecute(r ApiPUTProjectsApiV3AllocationsallocationIdRestoreJsonRequest) (AllocationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AllocationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllocationsApiService.PUTProjectsApiV3AllocationsallocationIdRestoreJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/allocations/{allocationId}/restore.json"
	localVarPath = strings.Replace(localVarPath, "{"+"allocationId"+"}", _neturl.PathEscape(parameterToString(r.allocationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3AllocationsallocationIdSplitJsonRequest struct {
	ctx _context.Context
	ApiService *AllocationsApiService
	allocationId int32
	allocationSplitRequest *AllocationSplitRequest
}

func (r ApiPUTProjectsApiV3AllocationsallocationIdSplitJsonRequest) AllocationSplitRequest(allocationSplitRequest AllocationSplitRequest) ApiPUTProjectsApiV3AllocationsallocationIdSplitJsonRequest {
	r.allocationSplitRequest = &allocationSplitRequest
	return r
}

func (r ApiPUTProjectsApiV3AllocationsallocationIdSplitJsonRequest) Execute() (AllocationAllocationsResponse, *_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3AllocationsallocationIdSplitJsonExecute(r)
}

/*
 * PUTProjectsApiV3AllocationsallocationIdSplitJson Split an allocation in two
 * Split an allocation by the identifier.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param allocationId
 * @return ApiPUTProjectsApiV3AllocationsallocationIdSplitJsonRequest
 */
func (a *AllocationsApiService) PUTProjectsApiV3AllocationsallocationIdSplitJson(ctx _context.Context, allocationId int32) ApiPUTProjectsApiV3AllocationsallocationIdSplitJsonRequest {
	return ApiPUTProjectsApiV3AllocationsallocationIdSplitJsonRequest{
		ApiService: a,
		ctx: ctx,
		allocationId: allocationId,
	}
}

/*
 * Execute executes the request
 * @return AllocationAllocationsResponse
 */
func (a *AllocationsApiService) PUTProjectsApiV3AllocationsallocationIdSplitJsonExecute(r ApiPUTProjectsApiV3AllocationsallocationIdSplitJsonRequest) (AllocationAllocationsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AllocationAllocationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllocationsApiService.PUTProjectsApiV3AllocationsallocationIdSplitJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/allocations/{allocationId}/split.json"
	localVarPath = strings.Replace(localVarPath, "{"+"allocationId"+"}", _neturl.PathEscape(parameterToString(r.allocationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.allocationSplitRequest == nil {
		return localVarReturnValue, nil, reportError("allocationSplitRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.allocationSplitRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
