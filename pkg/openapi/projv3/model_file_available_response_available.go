/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileAvailableResponseAvailable struct for FileAvailableResponseAvailable
type FileAvailableResponseAvailable struct {
	Bytes *int32 `json:"bytes,omitempty"`
}

// NewFileAvailableResponseAvailable instantiates a new FileAvailableResponseAvailable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileAvailableResponseAvailable() *FileAvailableResponseAvailable {
	this := FileAvailableResponseAvailable{}
	return &this
}

// NewFileAvailableResponseAvailableWithDefaults instantiates a new FileAvailableResponseAvailable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileAvailableResponseAvailableWithDefaults() *FileAvailableResponseAvailable {
	this := FileAvailableResponseAvailable{}
	return &this
}

// GetBytes returns the Bytes field value if set, zero value otherwise.
func (o *FileAvailableResponseAvailable) GetBytes() int32 {
	if o == nil || o.Bytes == nil {
		var ret int32
		return ret
	}
	return *o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileAvailableResponseAvailable) GetBytesOk() (*int32, bool) {
	if o == nil || o.Bytes == nil {
		return nil, false
	}
	return o.Bytes, true
}

// HasBytes returns a boolean if a field has been set.
func (o *FileAvailableResponseAvailable) HasBytes() bool {
	if o != nil && o.Bytes != nil {
		return true
	}

	return false
}

// SetBytes gets a reference to the given int32 and assigns it to the Bytes field.
func (o *FileAvailableResponseAvailable) SetBytes(v int32) {
	o.Bytes = &v
}

func (o FileAvailableResponseAvailable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bytes != nil {
		toSerialize["bytes"] = o.Bytes
	}
	return json.Marshal(toSerialize)
}

type NullableFileAvailableResponseAvailable struct {
	value *FileAvailableResponseAvailable
	isSet bool
}

func (v NullableFileAvailableResponseAvailable) Get() *FileAvailableResponseAvailable {
	return v.value
}

func (v *NullableFileAvailableResponseAvailable) Set(val *FileAvailableResponseAvailable) {
	v.value = val
	v.isSet = true
}

func (v NullableFileAvailableResponseAvailable) IsSet() bool {
	return v.isSet
}

func (v *NullableFileAvailableResponseAvailable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileAvailableResponseAvailable(val *FileAvailableResponseAvailable) *NullableFileAvailableResponseAvailable {
	return &NullableFileAvailableResponseAvailable{value: val, isSet: true}
}

func (v NullableFileAvailableResponseAvailable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileAvailableResponseAvailable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


