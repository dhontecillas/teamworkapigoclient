/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv2

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiGETProjectsApiV2PeopleuserIdAvatarRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	userId int32
}


func (r ApiGETProjectsApiV2PeopleuserIdAvatarRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2PeopleuserIdAvatarExecute(r)
}

/*
 * GETProjectsApiV2PeopleuserIdAvatar Get user avatar
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param userId
 * @return ApiGETProjectsApiV2PeopleuserIdAvatarRequest
 */
func (a *DefaultApiService) GETProjectsApiV2PeopleuserIdAvatar(ctx _context.Context, userId int32) ApiGETProjectsApiV2PeopleuserIdAvatarRequest {
	return ApiGETProjectsApiV2PeopleuserIdAvatarRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) GETProjectsApiV2PeopleuserIdAvatarExecute(r ApiGETProjectsApiV2PeopleuserIdAvatarRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GETProjectsApiV2PeopleuserIdAvatar")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/people/{userId}/avatar"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	userIds int32
	projectId int32
	updatedAfterDateTime *string
	updatedAfterDate *string
	type_ *string
	sortOrder *string
	sort *string
	searchTerm *string
	projectType *string
	inviteStatus *string
	firstLetter *string
	emailAddress *string
	dataSet *string
	projectId2 *int32
	projectCompanyId *int32
	pageSize *int32
	page *int32
	excludeProjectId *int32
	showDeleted *bool
	returnTeams *bool
	returnProjectIds *bool
	returnLetters *bool
	ownerCompanyFirst *bool
	onlyids *bool
	includeTags *bool
	includeObservers *bool
	includeContacts *bool
	includeCompanyDetails *bool
	includeClockIn *bool
	includeClients *bool
	groupByCompany *bool
	getProjectRoles *bool
	getCounts *bool
	fullprofile *bool
	countOnly *bool
	userIds2 *[]int32
	companyId *[]int32
}

func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) UpdatedAfterDateTime(updatedAfterDateTime string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.updatedAfterDateTime = &updatedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) Type_(type_ string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.type_ = &type_
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) Sort(sort string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) ProjectType(projectType string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.projectType = &projectType
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) InviteStatus(inviteStatus string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.inviteStatus = &inviteStatus
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) FirstLetter(firstLetter string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.firstLetter = &firstLetter
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) EmailAddress(emailAddress string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.emailAddress = &emailAddress
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) DataSet(dataSet string) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) ProjectId2(projectId2 int32) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.projectId2 = &projectId2
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) ProjectCompanyId(projectCompanyId int32) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.projectCompanyId = &projectCompanyId
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) Page(page int32) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) ExcludeProjectId(excludeProjectId int32) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.excludeProjectId = &excludeProjectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) ReturnTeams(returnTeams bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.returnTeams = &returnTeams
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) ReturnProjectIds(returnProjectIds bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.returnProjectIds = &returnProjectIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) ReturnLetters(returnLetters bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.returnLetters = &returnLetters
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) OwnerCompanyFirst(ownerCompanyFirst bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.ownerCompanyFirst = &ownerCompanyFirst
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) Onlyids(onlyids bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.onlyids = &onlyids
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) IncludeObservers(includeObservers bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.includeObservers = &includeObservers
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) IncludeContacts(includeContacts bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.includeContacts = &includeContacts
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) IncludeCompanyDetails(includeCompanyDetails bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.includeCompanyDetails = &includeCompanyDetails
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) IncludeClockIn(includeClockIn bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.includeClockIn = &includeClockIn
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) IncludeClients(includeClients bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.includeClients = &includeClients
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) GroupByCompany(groupByCompany bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.groupByCompany = &groupByCompany
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) GetProjectRoles(getProjectRoles bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.getProjectRoles = &getProjectRoles
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) GetCounts(getCounts bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.getCounts = &getCounts
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) Fullprofile(fullprofile bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.fullprofile = &fullprofile
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) CountOnly(countOnly bool) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) UserIds2(userIds2 []int32) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.userIds2 = &userIds2
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) Execute() (PeopleResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsprojectIdPeopleuserIdsExecute(r)
}

/*
 * GETProjectsApiV2ProjectsprojectIdPeopleuserIds Get people project
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param userIds
 * @param projectId
 * @return ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest
 */
func (a *DefaultApiService) GETProjectsApiV2ProjectsprojectIdPeopleuserIds(ctx _context.Context, userIds int32, projectId int32) ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest {
	return ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest{
		ApiService: a,
		ctx: ctx,
		userIds: userIds,
		projectId: projectId,
	}
}

/*
 * Execute executes the request
 * @return PeopleResponse
 */
func (a *DefaultApiService) GETProjectsApiV2ProjectsprojectIdPeopleuserIdsExecute(r ApiGETProjectsApiV2ProjectsprojectIdPeopleuserIdsRequest) (PeopleResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PeopleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GETProjectsApiV2ProjectsprojectIdPeopleuserIds")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/{projectId}/people/{userIds}"
	localVarPath = strings.Replace(localVarPath, "{"+"userIds"+"}", _neturl.PathEscape(parameterToString(r.userIds, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDateTime != nil {
		localVarQueryParams.Add("updatedAfterDateTime", parameterToString(*r.updatedAfterDateTime, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectType != nil {
		localVarQueryParams.Add("projectType", parameterToString(*r.projectType, ""))
	}
	if r.inviteStatus != nil {
		localVarQueryParams.Add("inviteStatus", parameterToString(*r.inviteStatus, ""))
	}
	if r.firstLetter != nil {
		localVarQueryParams.Add("firstLetter", parameterToString(*r.firstLetter, ""))
	}
	if r.emailAddress != nil {
		localVarQueryParams.Add("emailAddress", parameterToString(*r.emailAddress, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.projectId2 != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId2, ""))
	}
	if r.projectCompanyId != nil {
		localVarQueryParams.Add("projectCompanyId", parameterToString(*r.projectCompanyId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.excludeProjectId != nil {
		localVarQueryParams.Add("excludeProjectId", parameterToString(*r.excludeProjectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.returnTeams != nil {
		localVarQueryParams.Add("returnTeams", parameterToString(*r.returnTeams, ""))
	}
	if r.returnProjectIds != nil {
		localVarQueryParams.Add("returnProjectIds", parameterToString(*r.returnProjectIds, ""))
	}
	if r.returnLetters != nil {
		localVarQueryParams.Add("returnLetters", parameterToString(*r.returnLetters, ""))
	}
	if r.ownerCompanyFirst != nil {
		localVarQueryParams.Add("ownerCompanyFirst", parameterToString(*r.ownerCompanyFirst, ""))
	}
	if r.onlyids != nil {
		localVarQueryParams.Add("onlyids", parameterToString(*r.onlyids, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeObservers != nil {
		localVarQueryParams.Add("includeObservers", parameterToString(*r.includeObservers, ""))
	}
	if r.includeContacts != nil {
		localVarQueryParams.Add("includeContacts", parameterToString(*r.includeContacts, ""))
	}
	if r.includeCompanyDetails != nil {
		localVarQueryParams.Add("includeCompanyDetails", parameterToString(*r.includeCompanyDetails, ""))
	}
	if r.includeClockIn != nil {
		localVarQueryParams.Add("includeClockIn", parameterToString(*r.includeClockIn, ""))
	}
	if r.includeClients != nil {
		localVarQueryParams.Add("includeClients", parameterToString(*r.includeClients, ""))
	}
	if r.groupByCompany != nil {
		localVarQueryParams.Add("groupByCompany", parameterToString(*r.groupByCompany, ""))
	}
	if r.getProjectRoles != nil {
		localVarQueryParams.Add("getProjectRoles", parameterToString(*r.getProjectRoles, ""))
	}
	if r.getCounts != nil {
		localVarQueryParams.Add("getCounts", parameterToString(*r.getCounts, ""))
	}
	if r.fullprofile != nil {
		localVarQueryParams.Add("fullprofile", parameterToString(*r.fullprofile, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.userIds2 != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds2, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	projectId int32
	updatedAfterDate *string
	today *string
	tagIds *string
	startDate *string
	sort *string
	responsiblePartyIds *string
	projectStatus *string
	include *string
	followedByUserIds *string
	filter *string
	endDate *string
	dataSet *string
	creatorIds *string
	createdBeforeDate *string
	createdAfterDate *string
	completedBeforeDate *string
	completedAfterDate *string
	callback *string
	tasklistId *int32
	taskId *int32
	projectCategoryId *int32
	parentTaskId *int32
	pageSize *int32
	page *int32
	includeTaskId *int32
	companyId *int32
	useStartDatesForTodaysTasks *bool
	useAllProjects *bool
	starredProjectsOnly *bool
	showDeleted *bool
	showCompletedLists *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	nestSubTasks *bool
	matchAllProjectTags *bool
	includeUntaggedTasks *bool
	includeToday *bool
	includeTasksWithoutDueDates *bool
	includeTasksFromDeletedLists *bool
	includeReminders *bool
	includeLoggedTime *bool
	includeCompletedTasks *bool
	includeCompletedSubtasks *bool
	includeCompletedPredecessors *bool
	includeArchivedProjects *bool
	ignoreStartDates *bool
	getSubTasks *bool
	getFiles *bool
	countOnly *bool
	allowTemplateTasks *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId2 *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
}

func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) Today(today string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) TagIds(tagIds string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) StartDate(startDate string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) Sort(sort string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ResponsiblePartyIds(responsiblePartyIds string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) Include(include string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) FollowedByUserIds(followedByUserIds string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.followedByUserIds = &followedByUserIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) Filter(filter string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) EndDate(endDate string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) DataSet(dataSet string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) CreatorIds(creatorIds string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) Callback(callback string) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) TaskId(taskId int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ProjectCategoryId(projectCategoryId int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) Page(page int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) CompanyId(companyId int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeCompletedPredecessors(includeCompletedPredecessors bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeCompletedPredecessors = &includeCompletedPredecessors
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) GetFiles(getFiles bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) CountOnly(countOnly bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ProjectId2(projectId2 []int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.projectId2 = &projectId2
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsprojectIdTasksGanttExecute(r)
}

/*
 * GETProjectsApiV2ProjectsprojectIdTasksGantt Will return the total for all sub-tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @return ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest
 */
func (a *DefaultApiService) GETProjectsApiV2ProjectsprojectIdTasksGantt(ctx _context.Context, projectId int32) ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest {
	return ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) GETProjectsApiV2ProjectsprojectIdTasksGanttExecute(r ApiGETProjectsApiV2ProjectsprojectIdTasksGanttRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GETProjectsApiV2ProjectsprojectIdTasksGantt")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/{projectId}/tasks/gantt"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsible-party-ids", parameterToString(*r.responsiblePartyIds, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.followedByUserIds != nil {
		localVarQueryParams.Add("followedByUserIds", parameterToString(*r.followedByUserIds, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creator-ids", parameterToString(*r.creatorIds, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompletedPredecessors != nil {
		localVarQueryParams.Add("includeCompletedPredecessors", parameterToString(*r.includeCompletedPredecessors, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignore-start-dates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId2 != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId2, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
