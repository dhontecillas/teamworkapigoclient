/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// CFPortApiService CFPortApi service
type CFPortApiService service

type ApiGETProjectsApiV1CompletedtasksRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	updatedAfterDate *string
	type_ *string
	startDate *string
	sortOrder *string
	sortBy *string
	searchTerm *string
	reportFormat *string
	projectStatus *string
	priority *string
	filterBy *string
	endDate *string
	dateType *string
	userId *int32
	pageSize *int32
	page *int32
	starredProjectsOnly *bool
	onlyUntaggedTasks *bool
	onlyTasksWithTickets *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	matchAllExcludedTags *bool
	isReportDownload *bool
	includeTags *bool
	includeAssigneeTeams *bool
	includeAssigneeCompanies *bool
	includeArchivedProjects *bool
	tagIds *[]int32
	responsiblePartyIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	followerIds *[]int32
	excludeTagIds *[]int32
	creatorIds *[]int32
	completedByIds *[]int32
	assigneeTeamIds *[]int32
	assigneeCompanyIds *[]int32
}

func (r ApiGETProjectsApiV1CompletedtasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) Type_(type_ string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.type_ = &type_
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) StartDate(startDate string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) SortOrder(sortOrder string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) SortBy(sortBy string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) Priority(priority string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) FilterBy(filterBy string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.filterBy = &filterBy
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) EndDate(endDate string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) DateType(dateType string) ApiGETProjectsApiV1CompletedtasksRequest {
	r.dateType = &dateType
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) UserId(userId int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) Page(page int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1CompletedtasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) TagIds(tagIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ProjectId(projectId []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) CompletedByIds(completedByIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.completedByIds = &completedByIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV1CompletedtasksRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV1CompletedtasksRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV1CompletedtasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1CompletedtasksExecute(r)
}

/*
 * GETProjectsApiV1Completedtasks Will return the completed tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV1CompletedtasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV1Completedtasks(ctx _context.Context) ApiGETProjectsApiV1CompletedtasksRequest {
	return ApiGETProjectsApiV1CompletedtasksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1CompletedtasksExecute(r ApiGETProjectsApiV1CompletedtasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1Completedtasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/completedtasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.filterBy != nil {
		localVarQueryParams.Add("filterBy", parameterToString(*r.filterBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.dateType != nil {
		localVarQueryParams.Add("dateType", parameterToString(*r.dateType, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("followerIds", parameterToString(*r.followerIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.completedByIds != nil {
		localVarQueryParams.Add("completedByIds", parameterToString(*r.completedByIds, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1PendingfilesPresignedurlRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	fileName *string
	fileSize *int32
}

func (r ApiGETProjectsApiV1PendingfilesPresignedurlRequest) FileName(fileName string) ApiGETProjectsApiV1PendingfilesPresignedurlRequest {
	r.fileName = &fileName
	return r
}
func (r ApiGETProjectsApiV1PendingfilesPresignedurlRequest) FileSize(fileSize int32) ApiGETProjectsApiV1PendingfilesPresignedurlRequest {
	r.fileSize = &fileSize
	return r
}

func (r ApiGETProjectsApiV1PendingfilesPresignedurlRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1PendingfilesPresignedurlExecute(r)
}

/*
 * GETProjectsApiV1PendingfilesPresignedurl Get Presigned Url for Pending files
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV1PendingfilesPresignedurlRequest
 */
func (a *CFPortApiService) GETProjectsApiV1PendingfilesPresignedurl(ctx _context.Context) ApiGETProjectsApiV1PendingfilesPresignedurlRequest {
	return ApiGETProjectsApiV1PendingfilesPresignedurlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1PendingfilesPresignedurlExecute(r ApiGETProjectsApiV1PendingfilesPresignedurlRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1PendingfilesPresignedurl")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/pendingfiles/presignedurl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fileName != nil {
		localVarQueryParams.Add("fileName", parameterToString(*r.fileName, ""))
	}
	if r.fileSize != nil {
		localVarQueryParams.Add("fileSize", parameterToString(*r.fileSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	projectCategoryId int32
	updatedAfterDate *string
	today *string
	tagIds *string
	startDate *string
	sort *string
	responsiblePartyIds *string
	projectStatus *string
	include *string
	followedByUserIds *string
	filter *string
	endDate *string
	dataSet *string
	creatorIds *string
	createdBeforeDate *string
	createdAfterDate *string
	completedBeforeDate *string
	completedAfterDate *string
	callback *string
	tasklistId *int32
	taskId *int32
	projectCategoryId2 *int32
	parentTaskId *int32
	pageSize *int32
	page *int32
	includeTaskId *int32
	companyId *int32
	useStartDatesForTodaysTasks *bool
	useAllProjects *bool
	starredProjectsOnly *bool
	showDeleted *bool
	showCompletedLists *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	nestSubTasks *bool
	matchAllProjectTags *bool
	includeUntaggedTasks *bool
	includeToday *bool
	includeTasksWithoutDueDates *bool
	includeTasksFromDeletedLists *bool
	includeReminders *bool
	includeLoggedTime *bool
	includeCompletedTasks *bool
	includeCompletedSubtasks *bool
	includeCompletedPredecessors *bool
	includeArchivedProjects *bool
	ignoreStartDates *bool
	getSubTasks *bool
	getFiles *bool
	countOnly *bool
	allowTemplateTasks *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
}

func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) Today(today string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) TagIds(tagIds string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) StartDate(startDate string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) Sort(sort string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ResponsiblePartyIds(responsiblePartyIds string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) Include(include string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) FollowedByUserIds(followedByUserIds string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.followedByUserIds = &followedByUserIds
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) Filter(filter string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) EndDate(endDate string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) DataSet(dataSet string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) CreatorIds(creatorIds string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) Callback(callback string) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) TaskId(taskId int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ProjectCategoryId2(projectCategoryId2 int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.projectCategoryId2 = &projectCategoryId2
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) Page(page int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) CompanyId(companyId int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeCompletedPredecessors(includeCompletedPredecessors bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeCompletedPredecessors = &includeCompletedPredecessors
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) GetFiles(getFiles bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) CountOnly(countOnly bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ProjectId(projectId []int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksExecute(r)
}

/*
 * GETProjectsApiV1ProjectcategoriesprojectCategoryIdTasks Will return the tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectCategoryId
 * @return ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV1ProjectcategoriesprojectCategoryIdTasks(ctx _context.Context, projectCategoryId int32) ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest {
	return ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest{
		ApiService: a,
		ctx: ctx,
		projectCategoryId: projectCategoryId,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksExecute(r ApiGETProjectsApiV1ProjectcategoriesprojectCategoryIdTasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1ProjectcategoriesprojectCategoryIdTasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/projectcategories/{projectCategoryId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"projectCategoryId"+"}", _neturl.PathEscape(parameterToString(r.projectCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsible-party-ids", parameterToString(*r.responsiblePartyIds, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.followedByUserIds != nil {
		localVarQueryParams.Add("followedByUserIds", parameterToString(*r.followedByUserIds, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creator-ids", parameterToString(*r.creatorIds, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectCategoryId2 != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId2, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompletedPredecessors != nil {
		localVarQueryParams.Add("includeCompletedPredecessors", parameterToString(*r.includeCompletedPredecessors, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignore-start-dates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	projectId int32
	updatedAfterDate *string
	type_ *string
	startDate *string
	sortOrder *string
	sortBy *string
	searchTerm *string
	reportFormat *string
	projectStatus *string
	priority *string
	filterBy *string
	endDate *string
	dateType *string
	userId *int32
	pageSize *int32
	page *int32
	starredProjectsOnly *bool
	onlyUntaggedTasks *bool
	onlyTasksWithTickets *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	matchAllExcludedTags *bool
	isReportDownload *bool
	includeTags *bool
	includeAssigneeTeams *bool
	includeAssigneeCompanies *bool
	includeArchivedProjects *bool
	tagIds *[]int32
	responsiblePartyIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId2 *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	followerIds *[]int32
	excludeTagIds *[]int32
	creatorIds *[]int32
	completedByIds *[]int32
	assigneeTeamIds *[]int32
	assigneeCompanyIds *[]int32
}

func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) Type_(type_ string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.type_ = &type_
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) StartDate(startDate string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) SortOrder(sortOrder string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) SortBy(sortBy string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) Priority(priority string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) FilterBy(filterBy string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.filterBy = &filterBy
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) EndDate(endDate string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) DateType(dateType string) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.dateType = &dateType
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) UserId(userId int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) Page(page int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) TagIds(tagIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ProjectId2(projectId2 []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.projectId2 = &projectId2
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) CompletedByIds(completedByIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.completedByIds = &completedByIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1ProjectprojectIdCompletedtasksExecute(r)
}

/*
 * GETProjectsApiV1ProjectprojectIdCompletedtasks Will return the project completed tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @return ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV1ProjectprojectIdCompletedtasks(ctx _context.Context, projectId int32) ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest {
	return ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1ProjectprojectIdCompletedtasksExecute(r ApiGETProjectsApiV1ProjectprojectIdCompletedtasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1ProjectprojectIdCompletedtasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/project/{projectId}/completedtasks"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.filterBy != nil {
		localVarQueryParams.Add("filterBy", parameterToString(*r.filterBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.dateType != nil {
		localVarQueryParams.Add("dateType", parameterToString(*r.dateType, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId2 != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId2, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("followerIds", parameterToString(*r.followerIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.completedByIds != nil {
		localVarQueryParams.Add("completedByIds", parameterToString(*r.completedByIds, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1ProjectsRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	updatedAfterDateTime *string
	updatedAfterDate *string
	status *string
	searchTerm *string
	projectStatus *string
	orderMode *string
	orderBy *string
	get *string
	firstLetter *string
	dataSet *string
	createdAfterDateTime *string
	createdAfterDate *string
	completedBeforeDateTime *string
	completedAfterDateTime *string
	userId *int32
	pageSize *int32
	page *int32
	searchCompany *bool
	returnLetters *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	includeUpdates *bool
	includeTopPeople *bool
	includeTags *bool
	includeProjectOwner *bool
	includePeople *bool
	includeArchivedProjects *bool
	hideDesc *bool
	getTruePermissions *bool
	getPermissions *bool
	getNotificationSettings *bool
	getDeleted *bool
	getCounts *bool
	getCategoryPath *bool
	getAll *bool
	getActivePages *bool
	formatMarkdown *bool
	skipIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectHealths *[]int32
	projectHealth *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	filterTagIds *[]int32
	featuresEnabledOnProject *[]string
	companyId *[]int32
	categoryId *[]int32
	catId *[]int32
}

func (r ApiGETProjectsApiV1ProjectsRequest) UpdatedAfterDateTime(updatedAfterDateTime string) ApiGETProjectsApiV1ProjectsRequest {
	r.updatedAfterDateTime = &updatedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1ProjectsRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) Status(status string) ApiGETProjectsApiV1ProjectsRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV1ProjectsRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1ProjectsRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) OrderMode(orderMode string) ApiGETProjectsApiV1ProjectsRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) OrderBy(orderBy string) ApiGETProjectsApiV1ProjectsRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) Get(get string) ApiGETProjectsApiV1ProjectsRequest {
	r.get = &get
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) FirstLetter(firstLetter string) ApiGETProjectsApiV1ProjectsRequest {
	r.firstLetter = &firstLetter
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) DataSet(dataSet string) ApiGETProjectsApiV1ProjectsRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) CreatedAfterDateTime(createdAfterDateTime string) ApiGETProjectsApiV1ProjectsRequest {
	r.createdAfterDateTime = &createdAfterDateTime
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV1ProjectsRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) CompletedBeforeDateTime(completedBeforeDateTime string) ApiGETProjectsApiV1ProjectsRequest {
	r.completedBeforeDateTime = &completedBeforeDateTime
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) CompletedAfterDateTime(completedAfterDateTime string) ApiGETProjectsApiV1ProjectsRequest {
	r.completedAfterDateTime = &completedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) UserId(userId int32) ApiGETProjectsApiV1ProjectsRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) PageSize(pageSize int32) ApiGETProjectsApiV1ProjectsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) Page(page int32) ApiGETProjectsApiV1ProjectsRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) SearchCompany(searchCompany bool) ApiGETProjectsApiV1ProjectsRequest {
	r.searchCompany = &searchCompany
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) ReturnLetters(returnLetters bool) ApiGETProjectsApiV1ProjectsRequest {
	r.returnLetters = &returnLetters
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1ProjectsRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV1ProjectsRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV1ProjectsRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1ProjectsRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV1ProjectsRequest {
	r.includeUpdates = &includeUpdates
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) IncludeTopPeople(includeTopPeople bool) ApiGETProjectsApiV1ProjectsRequest {
	r.includeTopPeople = &includeTopPeople
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV1ProjectsRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) IncludeProjectOwner(includeProjectOwner bool) ApiGETProjectsApiV1ProjectsRequest {
	r.includeProjectOwner = &includeProjectOwner
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV1ProjectsRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1ProjectsRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) HideDesc(hideDesc bool) ApiGETProjectsApiV1ProjectsRequest {
	r.hideDesc = &hideDesc
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV1ProjectsRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV1ProjectsRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV1ProjectsRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) GetDeleted(getDeleted bool) ApiGETProjectsApiV1ProjectsRequest {
	r.getDeleted = &getDeleted
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) GetCounts(getCounts bool) ApiGETProjectsApiV1ProjectsRequest {
	r.getCounts = &getCounts
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) GetCategoryPath(getCategoryPath bool) ApiGETProjectsApiV1ProjectsRequest {
	r.getCategoryPath = &getCategoryPath
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) GetAll(getAll bool) ApiGETProjectsApiV1ProjectsRequest {
	r.getAll = &getAll
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV1ProjectsRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV1ProjectsRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) SkipIds(skipIds []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.skipIds = &skipIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) FilterTagIds(filterTagIds []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.filterTagIds = &filterTagIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) FeaturesEnabledOnProject(featuresEnabledOnProject []string) ApiGETProjectsApiV1ProjectsRequest {
	r.featuresEnabledOnProject = &featuresEnabledOnProject
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) CompanyId(companyId []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) CategoryId(categoryId []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.categoryId = &categoryId
	return r
}
func (r ApiGETProjectsApiV1ProjectsRequest) CatId(catId []int32) ApiGETProjectsApiV1ProjectsRequest {
	r.catId = &catId
	return r
}

func (r ApiGETProjectsApiV1ProjectsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1ProjectsExecute(r)
}

/*
 * GETProjectsApiV1Projects Get Projects (APICall_GET_projects)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV1ProjectsRequest
 */
func (a *CFPortApiService) GETProjectsApiV1Projects(ctx _context.Context) ApiGETProjectsApiV1ProjectsRequest {
	return ApiGETProjectsApiV1ProjectsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1ProjectsExecute(r ApiGETProjectsApiV1ProjectsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1Projects")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/projects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDateTime != nil {
		localVarQueryParams.Add("updatedAfterDateTime", parameterToString(*r.updatedAfterDateTime, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.get != nil {
		localVarQueryParams.Add("get", parameterToString(*r.get, ""))
	}
	if r.firstLetter != nil {
		localVarQueryParams.Add("firstLetter", parameterToString(*r.firstLetter, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdAfterDateTime != nil {
		localVarQueryParams.Add("createdAfterDateTime", parameterToString(*r.createdAfterDateTime, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDateTime != nil {
		localVarQueryParams.Add("completedBeforeDateTime", parameterToString(*r.completedBeforeDateTime, ""))
	}
	if r.completedAfterDateTime != nil {
		localVarQueryParams.Add("completedAfterDateTime", parameterToString(*r.completedAfterDateTime, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.searchCompany != nil {
		localVarQueryParams.Add("searchCompany", parameterToString(*r.searchCompany, ""))
	}
	if r.returnLetters != nil {
		localVarQueryParams.Add("returnLetters", parameterToString(*r.returnLetters, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	if r.includeTopPeople != nil {
		localVarQueryParams.Add("includeTopPeople", parameterToString(*r.includeTopPeople, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProjectOwner != nil {
		localVarQueryParams.Add("includeProjectOwner", parameterToString(*r.includeProjectOwner, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.hideDesc != nil {
		localVarQueryParams.Add("hideDesc", parameterToString(*r.hideDesc, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getDeleted != nil {
		localVarQueryParams.Add("getDeleted", parameterToString(*r.getDeleted, ""))
	}
	if r.getCounts != nil {
		localVarQueryParams.Add("getCounts", parameterToString(*r.getCounts, ""))
	}
	if r.getCategoryPath != nil {
		localVarQueryParams.Add("getCategoryPath", parameterToString(*r.getCategoryPath, ""))
	}
	if r.getAll != nil {
		localVarQueryParams.Add("getAll", parameterToString(*r.getAll, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	if r.skipIds != nil {
		localVarQueryParams.Add("skipIds", parameterToString(*r.skipIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.filterTagIds != nil {
		localVarQueryParams.Add("filterTagIds", parameterToString(*r.filterTagIds, "csv"))
	}
	if r.featuresEnabledOnProject != nil {
		localVarQueryParams.Add("featuresEnabledOnProject", parameterToString(*r.featuresEnabledOnProject, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, "csv"))
	}
	if r.catId != nil {
		localVarQueryParams.Add("catId", parameterToString(*r.catId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	projectId int32
	updatedAfterDate *string
	status *string
	status2 *string
	sortBy *string
	searchTerm *string
	projectStatus *string
	filterText *string
	filter *string
	dataSet *string
	userId *int32
	tasklistId *int32
	responsiblePartyId *int32
	pageSize *int32
	page *int32
	onlyUnattachedExceptMilestoneId *int32
	showPrivate *bool
	showMilestones *bool
	showDeleted *bool
	showCompleted *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	matchAllProjectTags *bool
	includeTags *bool
	includeCustomFields *bool
	includeArchivedProjects *bool
	getTasks *bool
	getOverdueCount *bool
	getNewTaskDefaults *bool
	getEmptyLists *bool
	getDLMs *bool
	getCompletedCount *bool
	getCategoryPath *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId2 *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
}

func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) Status(status string) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) Status2(status2 string) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.status2 = &status2
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) SortBy(sortBy string) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) FilterText(filterText string) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) Filter(filter string) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) DataSet(dataSet string) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) UserId(userId int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ResponsiblePartyId(responsiblePartyId int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.responsiblePartyId = &responsiblePartyId
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) PageSize(pageSize int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) Page(page int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) OnlyUnattachedExceptMilestoneId(onlyUnattachedExceptMilestoneId int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.onlyUnattachedExceptMilestoneId = &onlyUnattachedExceptMilestoneId
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ShowPrivate(showPrivate bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.showPrivate = &showPrivate
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ShowMilestones(showMilestones bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.showMilestones = &showMilestones
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ShowCompleted(showCompleted bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.showCompleted = &showCompleted
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) GetTasks(getTasks bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.getTasks = &getTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) GetOverdueCount(getOverdueCount bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.getOverdueCount = &getOverdueCount
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) GetNewTaskDefaults(getNewTaskDefaults bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.getNewTaskDefaults = &getNewTaskDefaults
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) GetEmptyLists(getEmptyLists bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.getEmptyLists = &getEmptyLists
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) GetDLMs(getDLMs bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.getDLMs = &getDLMs
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) GetCompletedCount(getCompletedCount bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.getCompletedCount = &getCompletedCount
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) GetCategoryPath(getCategoryPath bool) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.getCategoryPath = &getCategoryPath
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ProjectId2(projectId2 []int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.projectId2 = &projectId2
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1ProjectsprojectIdTasklistsExecute(r)
}

/*
 * GETProjectsApiV1ProjectsprojectIdTasklists Get tasklists
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @return ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest
 */
func (a *CFPortApiService) GETProjectsApiV1ProjectsprojectIdTasklists(ctx _context.Context, projectId int32) ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest {
	return ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1ProjectsprojectIdTasklistsExecute(r ApiGETProjectsApiV1ProjectsprojectIdTasklistsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1ProjectsprojectIdTasklists")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/projects/{projectId}/tasklists"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.status2 != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status2, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.responsiblePartyId != nil {
		localVarQueryParams.Add("responsiblePartyId", parameterToString(*r.responsiblePartyId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.onlyUnattachedExceptMilestoneId != nil {
		localVarQueryParams.Add("onlyUnattachedExceptMilestoneId", parameterToString(*r.onlyUnattachedExceptMilestoneId, ""))
	}
	if r.showPrivate != nil {
		localVarQueryParams.Add("showPrivate", parameterToString(*r.showPrivate, ""))
	}
	if r.showMilestones != nil {
		localVarQueryParams.Add("showMilestones", parameterToString(*r.showMilestones, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompleted != nil {
		localVarQueryParams.Add("showCompleted", parameterToString(*r.showCompleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.getTasks != nil {
		localVarQueryParams.Add("getTasks", parameterToString(*r.getTasks, ""))
	}
	if r.getOverdueCount != nil {
		localVarQueryParams.Add("getOverdueCount", parameterToString(*r.getOverdueCount, ""))
	}
	if r.getNewTaskDefaults != nil {
		localVarQueryParams.Add("getNewTaskDefaults", parameterToString(*r.getNewTaskDefaults, ""))
	}
	if r.getEmptyLists != nil {
		localVarQueryParams.Add("getEmptyLists", parameterToString(*r.getEmptyLists, ""))
	}
	if r.getDLMs != nil {
		localVarQueryParams.Add("getDLMs", parameterToString(*r.getDLMs, ""))
	}
	if r.getCompletedCount != nil {
		localVarQueryParams.Add("getCompletedCount", parameterToString(*r.getCompletedCount, ""))
	}
	if r.getCategoryPath != nil {
		localVarQueryParams.Add("getCategoryPath", parameterToString(*r.getCategoryPath, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId2 != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId2, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1ProjectsprojectIdTasksRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	projectId int32
	updatedAfterDate *string
	today *string
	tagIds *string
	startDate *string
	sort *string
	responsiblePartyIds *string
	projectStatus *string
	include *string
	followedByUserIds *string
	filter *string
	endDate *string
	dataSet *string
	creatorIds *string
	createdBeforeDate *string
	createdAfterDate *string
	completedBeforeDate *string
	completedAfterDate *string
	callback *string
	tasklistId *int32
	taskId *int32
	projectCategoryId *int32
	parentTaskId *int32
	pageSize *int32
	page *int32
	includeTaskId *int32
	companyId *int32
	useStartDatesForTodaysTasks *bool
	useAllProjects *bool
	starredProjectsOnly *bool
	showDeleted *bool
	showCompletedLists *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	nestSubTasks *bool
	matchAllProjectTags *bool
	includeUntaggedTasks *bool
	includeToday *bool
	includeTasksWithoutDueDates *bool
	includeTasksFromDeletedLists *bool
	includeReminders *bool
	includeLoggedTime *bool
	includeCompletedTasks *bool
	includeCompletedSubtasks *bool
	includeCompletedPredecessors *bool
	includeArchivedProjects *bool
	ignoreStartDates *bool
	getSubTasks *bool
	getFiles *bool
	countOnly *bool
	allowTemplateTasks *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId2 *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
}

func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) Today(today string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) TagIds(tagIds string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) StartDate(startDate string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) Sort(sort string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ResponsiblePartyIds(responsiblePartyIds string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) Include(include string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) FollowedByUserIds(followedByUserIds string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.followedByUserIds = &followedByUserIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) Filter(filter string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) EndDate(endDate string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) DataSet(dataSet string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) CreatorIds(creatorIds string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) Callback(callback string) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) TaskId(taskId int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ProjectCategoryId(projectCategoryId int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) Page(page int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) CompanyId(companyId int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeCompletedPredecessors(includeCompletedPredecessors bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeCompletedPredecessors = &includeCompletedPredecessors
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) GetFiles(getFiles bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) CountOnly(countOnly bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ProjectId2(projectId2 []int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.projectId2 = &projectId2
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1ProjectsprojectIdTasksExecute(r)
}

/*
 * GETProjectsApiV1ProjectsprojectIdTasks Will return the tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @return ApiGETProjectsApiV1ProjectsprojectIdTasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV1ProjectsprojectIdTasks(ctx _context.Context, projectId int32) ApiGETProjectsApiV1ProjectsprojectIdTasksRequest {
	return ApiGETProjectsApiV1ProjectsprojectIdTasksRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1ProjectsprojectIdTasksExecute(r ApiGETProjectsApiV1ProjectsprojectIdTasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1ProjectsprojectIdTasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/projects/{projectId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsible-party-ids", parameterToString(*r.responsiblePartyIds, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.followedByUserIds != nil {
		localVarQueryParams.Add("followedByUserIds", parameterToString(*r.followedByUserIds, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creator-ids", parameterToString(*r.creatorIds, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompletedPredecessors != nil {
		localVarQueryParams.Add("includeCompletedPredecessors", parameterToString(*r.includeCompletedPredecessors, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignore-start-dates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId2 != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId2, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1TasklistsRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	updatedAfterDate *string
	status *string
	status2 *string
	sortBy *string
	searchTerm *string
	projectStatus *string
	filterText *string
	filter *string
	dataSet *string
	userId *int32
	tasklistId *int32
	responsiblePartyId *int32
	pageSize *int32
	page *int32
	onlyUnattachedExceptMilestoneId *int32
	showPrivate *bool
	showMilestones *bool
	showDeleted *bool
	showCompleted *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	matchAllProjectTags *bool
	includeTags *bool
	includeCustomFields *bool
	includeArchivedProjects *bool
	getTasks *bool
	getOverdueCount *bool
	getNewTaskDefaults *bool
	getEmptyLists *bool
	getDLMs *bool
	getCompletedCount *bool
	getCategoryPath *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
}

func (r ApiGETProjectsApiV1TasklistsRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1TasklistsRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) Status(status string) ApiGETProjectsApiV1TasklistsRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) Status2(status2 string) ApiGETProjectsApiV1TasklistsRequest {
	r.status2 = &status2
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) SortBy(sortBy string) ApiGETProjectsApiV1TasklistsRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV1TasklistsRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1TasklistsRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) FilterText(filterText string) ApiGETProjectsApiV1TasklistsRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) Filter(filter string) ApiGETProjectsApiV1TasklistsRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) DataSet(dataSet string) ApiGETProjectsApiV1TasklistsRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) UserId(userId int32) ApiGETProjectsApiV1TasklistsRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV1TasklistsRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ResponsiblePartyId(responsiblePartyId int32) ApiGETProjectsApiV1TasklistsRequest {
	r.responsiblePartyId = &responsiblePartyId
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) PageSize(pageSize int32) ApiGETProjectsApiV1TasklistsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) Page(page int32) ApiGETProjectsApiV1TasklistsRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) OnlyUnattachedExceptMilestoneId(onlyUnattachedExceptMilestoneId int32) ApiGETProjectsApiV1TasklistsRequest {
	r.onlyUnattachedExceptMilestoneId = &onlyUnattachedExceptMilestoneId
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ShowPrivate(showPrivate bool) ApiGETProjectsApiV1TasklistsRequest {
	r.showPrivate = &showPrivate
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ShowMilestones(showMilestones bool) ApiGETProjectsApiV1TasklistsRequest {
	r.showMilestones = &showMilestones
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1TasklistsRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ShowCompleted(showCompleted bool) ApiGETProjectsApiV1TasklistsRequest {
	r.showCompleted = &showCompleted
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1TasklistsRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV1TasklistsRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1TasklistsRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV1TasklistsRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV1TasklistsRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1TasklistsRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) GetTasks(getTasks bool) ApiGETProjectsApiV1TasklistsRequest {
	r.getTasks = &getTasks
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) GetOverdueCount(getOverdueCount bool) ApiGETProjectsApiV1TasklistsRequest {
	r.getOverdueCount = &getOverdueCount
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) GetNewTaskDefaults(getNewTaskDefaults bool) ApiGETProjectsApiV1TasklistsRequest {
	r.getNewTaskDefaults = &getNewTaskDefaults
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) GetEmptyLists(getEmptyLists bool) ApiGETProjectsApiV1TasklistsRequest {
	r.getEmptyLists = &getEmptyLists
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) GetDLMs(getDLMs bool) ApiGETProjectsApiV1TasklistsRequest {
	r.getDLMs = &getDLMs
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) GetCompletedCount(getCompletedCount bool) ApiGETProjectsApiV1TasklistsRequest {
	r.getCompletedCount = &getCompletedCount
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) GetCategoryPath(getCategoryPath bool) ApiGETProjectsApiV1TasklistsRequest {
	r.getCategoryPath = &getCategoryPath
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1TasklistsRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1TasklistsRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1TasklistsRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ProjectId(projectId []int32) ApiGETProjectsApiV1TasklistsRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1TasklistsRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1TasklistsRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1TasklistsRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1TasklistsRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV1TasklistsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1TasklistsExecute(r)
}

/*
 * GETProjectsApiV1Tasklists Get tasklists
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV1TasklistsRequest
 */
func (a *CFPortApiService) GETProjectsApiV1Tasklists(ctx _context.Context) ApiGETProjectsApiV1TasklistsRequest {
	return ApiGETProjectsApiV1TasklistsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1TasklistsExecute(r ApiGETProjectsApiV1TasklistsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1Tasklists")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/tasklists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.status2 != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status2, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.responsiblePartyId != nil {
		localVarQueryParams.Add("responsiblePartyId", parameterToString(*r.responsiblePartyId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.onlyUnattachedExceptMilestoneId != nil {
		localVarQueryParams.Add("onlyUnattachedExceptMilestoneId", parameterToString(*r.onlyUnattachedExceptMilestoneId, ""))
	}
	if r.showPrivate != nil {
		localVarQueryParams.Add("showPrivate", parameterToString(*r.showPrivate, ""))
	}
	if r.showMilestones != nil {
		localVarQueryParams.Add("showMilestones", parameterToString(*r.showMilestones, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompleted != nil {
		localVarQueryParams.Add("showCompleted", parameterToString(*r.showCompleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.getTasks != nil {
		localVarQueryParams.Add("getTasks", parameterToString(*r.getTasks, ""))
	}
	if r.getOverdueCount != nil {
		localVarQueryParams.Add("getOverdueCount", parameterToString(*r.getOverdueCount, ""))
	}
	if r.getNewTaskDefaults != nil {
		localVarQueryParams.Add("getNewTaskDefaults", parameterToString(*r.getNewTaskDefaults, ""))
	}
	if r.getEmptyLists != nil {
		localVarQueryParams.Add("getEmptyLists", parameterToString(*r.getEmptyLists, ""))
	}
	if r.getDLMs != nil {
		localVarQueryParams.Add("getDLMs", parameterToString(*r.getDLMs, ""))
	}
	if r.getCompletedCount != nil {
		localVarQueryParams.Add("getCompletedCount", parameterToString(*r.getCompletedCount, ""))
	}
	if r.getCategoryPath != nil {
		localVarQueryParams.Add("getCategoryPath", parameterToString(*r.getCategoryPath, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1TaskliststasklistIdRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	tasklistId2 int32
	updatedAfterDate *string
	status *string
	status2 *string
	sortBy *string
	searchTerm *string
	projectStatus *string
	filterText *string
	filter *string
	dataSet *string
	userId *int32
	tasklistId *int32
	responsiblePartyId *int32
	pageSize *int32
	page *int32
	onlyUnattachedExceptMilestoneId *int32
	showPrivate *bool
	showMilestones *bool
	showDeleted *bool
	showCompleted *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	matchAllProjectTags *bool
	includeTags *bool
	includeCustomFields *bool
	includeArchivedProjects *bool
	getTasks *bool
	getOverdueCount *bool
	getNewTaskDefaults *bool
	getEmptyLists *bool
	getDLMs *bool
	getCompletedCount *bool
	getCategoryPath *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
}

func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) Status(status string) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) Status2(status2 string) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.status2 = &status2
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) SortBy(sortBy string) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) FilterText(filterText string) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) Filter(filter string) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) DataSet(dataSet string) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) UserId(userId int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ResponsiblePartyId(responsiblePartyId int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.responsiblePartyId = &responsiblePartyId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) PageSize(pageSize int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) Page(page int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) OnlyUnattachedExceptMilestoneId(onlyUnattachedExceptMilestoneId int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.onlyUnattachedExceptMilestoneId = &onlyUnattachedExceptMilestoneId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ShowPrivate(showPrivate bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.showPrivate = &showPrivate
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ShowMilestones(showMilestones bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.showMilestones = &showMilestones
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ShowCompleted(showCompleted bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.showCompleted = &showCompleted
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) GetTasks(getTasks bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.getTasks = &getTasks
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) GetOverdueCount(getOverdueCount bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.getOverdueCount = &getOverdueCount
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) GetNewTaskDefaults(getNewTaskDefaults bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.getNewTaskDefaults = &getNewTaskDefaults
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) GetEmptyLists(getEmptyLists bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.getEmptyLists = &getEmptyLists
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) GetDLMs(getDLMs bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.getDLMs = &getDLMs
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) GetCompletedCount(getCompletedCount bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.getCompletedCount = &getCompletedCount
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) GetCategoryPath(getCategoryPath bool) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.getCategoryPath = &getCategoryPath
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ProjectId(projectId []int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV1TaskliststasklistIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1TaskliststasklistIdExecute(r)
}

/*
 * GETProjectsApiV1TaskliststasklistId Get tasklists
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tasklistId2
 * @return ApiGETProjectsApiV1TaskliststasklistIdRequest
 */
func (a *CFPortApiService) GETProjectsApiV1TaskliststasklistId(ctx _context.Context, tasklistId2 int32) ApiGETProjectsApiV1TaskliststasklistIdRequest {
	return ApiGETProjectsApiV1TaskliststasklistIdRequest{
		ApiService: a,
		ctx: ctx,
		tasklistId2: tasklistId2,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1TaskliststasklistIdExecute(r ApiGETProjectsApiV1TaskliststasklistIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1TaskliststasklistId")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/tasklists/{tasklistId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tasklistId"+"}", _neturl.PathEscape(parameterToString(r.tasklistId2, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.status2 != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status2, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.responsiblePartyId != nil {
		localVarQueryParams.Add("responsiblePartyId", parameterToString(*r.responsiblePartyId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.onlyUnattachedExceptMilestoneId != nil {
		localVarQueryParams.Add("onlyUnattachedExceptMilestoneId", parameterToString(*r.onlyUnattachedExceptMilestoneId, ""))
	}
	if r.showPrivate != nil {
		localVarQueryParams.Add("showPrivate", parameterToString(*r.showPrivate, ""))
	}
	if r.showMilestones != nil {
		localVarQueryParams.Add("showMilestones", parameterToString(*r.showMilestones, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompleted != nil {
		localVarQueryParams.Add("showCompleted", parameterToString(*r.showCompleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.getTasks != nil {
		localVarQueryParams.Add("getTasks", parameterToString(*r.getTasks, ""))
	}
	if r.getOverdueCount != nil {
		localVarQueryParams.Add("getOverdueCount", parameterToString(*r.getOverdueCount, ""))
	}
	if r.getNewTaskDefaults != nil {
		localVarQueryParams.Add("getNewTaskDefaults", parameterToString(*r.getNewTaskDefaults, ""))
	}
	if r.getEmptyLists != nil {
		localVarQueryParams.Add("getEmptyLists", parameterToString(*r.getEmptyLists, ""))
	}
	if r.getDLMs != nil {
		localVarQueryParams.Add("getDLMs", parameterToString(*r.getDLMs, ""))
	}
	if r.getCompletedCount != nil {
		localVarQueryParams.Add("getCompletedCount", parameterToString(*r.getCompletedCount, ""))
	}
	if r.getCategoryPath != nil {
		localVarQueryParams.Add("getCategoryPath", parameterToString(*r.getCategoryPath, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1TaskliststasklistIdTasksRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	tasklistId int32
	updatedAfterDate *string
	today *string
	tagIds *string
	startDate *string
	sort *string
	responsiblePartyIds *string
	projectStatus *string
	include *string
	followedByUserIds *string
	filter *string
	endDate *string
	dataSet *string
	creatorIds *string
	createdBeforeDate *string
	createdAfterDate *string
	completedBeforeDate *string
	completedAfterDate *string
	callback *string
	tasklistId2 *int32
	taskId *int32
	projectCategoryId *int32
	parentTaskId *int32
	pageSize *int32
	page *int32
	includeTaskId *int32
	companyId *int32
	useStartDatesForTodaysTasks *bool
	useAllProjects *bool
	starredProjectsOnly *bool
	showDeleted *bool
	showCompletedLists *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	nestSubTasks *bool
	matchAllProjectTags *bool
	includeUntaggedTasks *bool
	includeToday *bool
	includeTasksWithoutDueDates *bool
	includeTasksFromDeletedLists *bool
	includeReminders *bool
	includeLoggedTime *bool
	includeCompletedTasks *bool
	includeCompletedSubtasks *bool
	includeCompletedPredecessors *bool
	includeArchivedProjects *bool
	ignoreStartDates *bool
	getSubTasks *bool
	getFiles *bool
	countOnly *bool
	allowTemplateTasks *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
}

func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) Today(today string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) TagIds(tagIds string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) StartDate(startDate string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) Sort(sort string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ResponsiblePartyIds(responsiblePartyIds string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) Include(include string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) FollowedByUserIds(followedByUserIds string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.followedByUserIds = &followedByUserIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) Filter(filter string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) EndDate(endDate string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) DataSet(dataSet string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) CreatorIds(creatorIds string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) Callback(callback string) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) TasklistId2(tasklistId2 int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.tasklistId2 = &tasklistId2
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) TaskId(taskId int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ProjectCategoryId(projectCategoryId int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) Page(page int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) CompanyId(companyId int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeCompletedPredecessors(includeCompletedPredecessors bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeCompletedPredecessors = &includeCompletedPredecessors
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) GetFiles(getFiles bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) CountOnly(countOnly bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ProjectId(projectId []int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1TaskliststasklistIdTasksExecute(r)
}

/*
 * GETProjectsApiV1TaskliststasklistIdTasks Will return the tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tasklistId
 * @return ApiGETProjectsApiV1TaskliststasklistIdTasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV1TaskliststasklistIdTasks(ctx _context.Context, tasklistId int32) ApiGETProjectsApiV1TaskliststasklistIdTasksRequest {
	return ApiGETProjectsApiV1TaskliststasklistIdTasksRequest{
		ApiService: a,
		ctx: ctx,
		tasklistId: tasklistId,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1TaskliststasklistIdTasksExecute(r ApiGETProjectsApiV1TaskliststasklistIdTasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1TaskliststasklistIdTasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/tasklists/{tasklistId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"tasklistId"+"}", _neturl.PathEscape(parameterToString(r.tasklistId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsible-party-ids", parameterToString(*r.responsiblePartyIds, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.followedByUserIds != nil {
		localVarQueryParams.Add("followedByUserIds", parameterToString(*r.followedByUserIds, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creator-ids", parameterToString(*r.creatorIds, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.tasklistId2 != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId2, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompletedPredecessors != nil {
		localVarQueryParams.Add("includeCompletedPredecessors", parameterToString(*r.includeCompletedPredecessors, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignore-start-dates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1TasksRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	updatedAfterDate *string
	today *string
	tagIds *string
	startDate *string
	sort *string
	responsiblePartyIds *string
	projectStatus *string
	include *string
	followedByUserIds *string
	filter *string
	endDate *string
	dataSet *string
	creatorIds *string
	createdBeforeDate *string
	createdAfterDate *string
	completedBeforeDate *string
	completedAfterDate *string
	callback *string
	tasklistId *int32
	taskId *int32
	projectCategoryId *int32
	parentTaskId *int32
	pageSize *int32
	page *int32
	includeTaskId *int32
	companyId *int32
	useStartDatesForTodaysTasks *bool
	useAllProjects *bool
	starredProjectsOnly *bool
	showDeleted *bool
	showCompletedLists *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	nestSubTasks *bool
	matchAllProjectTags *bool
	includeUntaggedTasks *bool
	includeToday *bool
	includeTasksWithoutDueDates *bool
	includeTasksFromDeletedLists *bool
	includeReminders *bool
	includeLoggedTime *bool
	includeCompletedTasks *bool
	includeCompletedSubtasks *bool
	includeCompletedPredecessors *bool
	includeArchivedProjects *bool
	ignoreStartDates *bool
	getSubTasks *bool
	getFiles *bool
	countOnly *bool
	allowTemplateTasks *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
}

func (r ApiGETProjectsApiV1TasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1TasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) Today(today string) ApiGETProjectsApiV1TasksRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) TagIds(tagIds string) ApiGETProjectsApiV1TasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) StartDate(startDate string) ApiGETProjectsApiV1TasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) Sort(sort string) ApiGETProjectsApiV1TasksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ResponsiblePartyIds(responsiblePartyIds string) ApiGETProjectsApiV1TasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1TasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) Include(include string) ApiGETProjectsApiV1TasksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) FollowedByUserIds(followedByUserIds string) ApiGETProjectsApiV1TasksRequest {
	r.followedByUserIds = &followedByUserIds
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) Filter(filter string) ApiGETProjectsApiV1TasksRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) EndDate(endDate string) ApiGETProjectsApiV1TasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) DataSet(dataSet string) ApiGETProjectsApiV1TasksRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) CreatorIds(creatorIds string) ApiGETProjectsApiV1TasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV1TasksRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV1TasksRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV1TasksRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV1TasksRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) Callback(callback string) ApiGETProjectsApiV1TasksRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV1TasksRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) TaskId(taskId int32) ApiGETProjectsApiV1TasksRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ProjectCategoryId(projectCategoryId int32) ApiGETProjectsApiV1TasksRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV1TasksRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV1TasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) Page(page int32) ApiGETProjectsApiV1TasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV1TasksRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) CompanyId(companyId int32) ApiGETProjectsApiV1TasksRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV1TasksRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV1TasksRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV1TasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1TasksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV1TasksRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1TasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV1TasksRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV1TasksRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1TasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV1TasksRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV1TasksRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV1TasksRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV1TasksRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV1TasksRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV1TasksRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV1TasksRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV1TasksRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeCompletedPredecessors(includeCompletedPredecessors bool) ApiGETProjectsApiV1TasksRequest {
	r.includeCompletedPredecessors = &includeCompletedPredecessors
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1TasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV1TasksRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV1TasksRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) GetFiles(getFiles bool) ApiGETProjectsApiV1TasksRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) CountOnly(countOnly bool) ApiGETProjectsApiV1TasksRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV1TasksRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1TasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1TasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1TasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ProjectId(projectId []int32) ApiGETProjectsApiV1TasksRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1TasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1TasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1TasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1TasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV1TasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1TasksExecute(r)
}

/*
 * GETProjectsApiV1Tasks Will return the tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV1TasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV1Tasks(ctx _context.Context) ApiGETProjectsApiV1TasksRequest {
	return ApiGETProjectsApiV1TasksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1TasksExecute(r ApiGETProjectsApiV1TasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1Tasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsible-party-ids", parameterToString(*r.responsiblePartyIds, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.followedByUserIds != nil {
		localVarQueryParams.Add("followedByUserIds", parameterToString(*r.followedByUserIds, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creator-ids", parameterToString(*r.creatorIds, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompletedPredecessors != nil {
		localVarQueryParams.Add("includeCompletedPredecessors", parameterToString(*r.includeCompletedPredecessors, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignore-start-dates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1TaskstaskIdRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	taskId int32
	updatedAfterDate *string
	today *string
	tagIds *string
	startDate *string
	sort *string
	responsiblePartyIds *string
	projectStatus *string
	include *string
	followedByUserIds *string
	filter *string
	endDate *string
	dataSet *string
	creatorIds *string
	createdBeforeDate *string
	createdAfterDate *string
	completedBeforeDate *string
	completedAfterDate *string
	callback *string
	tasklistId *int32
	taskId2 *int32
	projectCategoryId *int32
	parentTaskId *int32
	pageSize *int32
	page *int32
	includeTaskId *int32
	companyId *int32
	useStartDatesForTodaysTasks *bool
	useAllProjects *bool
	starredProjectsOnly *bool
	showDeleted *bool
	showCompletedLists *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	nestSubTasks *bool
	matchAllProjectTags *bool
	includeUntaggedTasks *bool
	includeToday *bool
	includeTasksWithoutDueDates *bool
	includeTasksFromDeletedLists *bool
	includeReminders *bool
	includeLoggedTime *bool
	includeCompletedTasks *bool
	includeCompletedSubtasks *bool
	includeCompletedPredecessors *bool
	includeArchivedProjects *bool
	ignoreStartDates *bool
	getSubTasks *bool
	getFiles *bool
	countOnly *bool
	allowTemplateTasks *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
}

func (r ApiGETProjectsApiV1TaskstaskIdRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) Today(today string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) TagIds(tagIds string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) StartDate(startDate string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) Sort(sort string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ResponsiblePartyIds(responsiblePartyIds string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) Include(include string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) FollowedByUserIds(followedByUserIds string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.followedByUserIds = &followedByUserIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) Filter(filter string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) EndDate(endDate string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) DataSet(dataSet string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) CreatorIds(creatorIds string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) Callback(callback string) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) TaskId2(taskId2 int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.taskId2 = &taskId2
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ProjectCategoryId(projectCategoryId int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) PageSize(pageSize int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) Page(page int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) CompanyId(companyId int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeCompletedPredecessors(includeCompletedPredecessors bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeCompletedPredecessors = &includeCompletedPredecessors
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) GetFiles(getFiles bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) CountOnly(countOnly bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ProjectId(projectId []int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV1TaskstaskIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1TaskstaskIdExecute(r)
}

/*
 * GETProjectsApiV1TaskstaskId Will return the tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId
 * @return ApiGETProjectsApiV1TaskstaskIdRequest
 */
func (a *CFPortApiService) GETProjectsApiV1TaskstaskId(ctx _context.Context, taskId int32) ApiGETProjectsApiV1TaskstaskIdRequest {
	return ApiGETProjectsApiV1TaskstaskIdRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1TaskstaskIdExecute(r ApiGETProjectsApiV1TaskstaskIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1TaskstaskId")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/tasks/{taskId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsible-party-ids", parameterToString(*r.responsiblePartyIds, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.followedByUserIds != nil {
		localVarQueryParams.Add("followedByUserIds", parameterToString(*r.followedByUserIds, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creator-ids", parameterToString(*r.creatorIds, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.taskId2 != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId2, ""))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompletedPredecessors != nil {
		localVarQueryParams.Add("includeCompletedPredecessors", parameterToString(*r.includeCompletedPredecessors, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignore-start-dates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1TaskstaskIdDependentsRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	taskId int32
}


func (r ApiGETProjectsApiV1TaskstaskIdDependentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1TaskstaskIdDependentsExecute(r)
}

/*
 * GETProjectsApiV1TaskstaskIdDependents Will return the tasks dependents tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId
 * @return ApiGETProjectsApiV1TaskstaskIdDependentsRequest
 */
func (a *CFPortApiService) GETProjectsApiV1TaskstaskIdDependents(ctx _context.Context, taskId int32) ApiGETProjectsApiV1TaskstaskIdDependentsRequest {
	return ApiGETProjectsApiV1TaskstaskIdDependentsRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1TaskstaskIdDependentsExecute(r ApiGETProjectsApiV1TaskstaskIdDependentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1TaskstaskIdDependents")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/tasks/{taskId}/dependents"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1TaskstaskIdPredecessorsRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	taskId int32
}


func (r ApiGETProjectsApiV1TaskstaskIdPredecessorsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1TaskstaskIdPredecessorsExecute(r)
}

/*
 * GETProjectsApiV1TaskstaskIdPredecessors Will return the tasks predecessor tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId
 * @return ApiGETProjectsApiV1TaskstaskIdPredecessorsRequest
 */
func (a *CFPortApiService) GETProjectsApiV1TaskstaskIdPredecessors(ctx _context.Context, taskId int32) ApiGETProjectsApiV1TaskstaskIdPredecessorsRequest {
	return ApiGETProjectsApiV1TaskstaskIdPredecessorsRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1TaskstaskIdPredecessorsExecute(r ApiGETProjectsApiV1TaskstaskIdPredecessorsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1TaskstaskIdPredecessors")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/tasks/{taskId}/predecessors"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1TaskstaskIdSubtasksRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	taskId int32
	updatedAfterDate *string
	today *string
	tagIds *string
	startDate *string
	sort *string
	responsiblePartyIds *string
	projectStatus *string
	include *string
	followedByUserIds *string
	filter *string
	endDate *string
	dataSet *string
	creatorIds *string
	createdBeforeDate *string
	createdAfterDate *string
	completedBeforeDate *string
	completedAfterDate *string
	callback *string
	tasklistId *int32
	taskId2 *int32
	projectCategoryId *int32
	parentTaskId *int32
	pageSize *int32
	page *int32
	includeTaskId *int32
	companyId *int32
	useStartDatesForTodaysTasks *bool
	useAllProjects *bool
	starredProjectsOnly *bool
	showDeleted *bool
	showCompletedLists *bool
	onlyStarredProjects *bool
	onlyArchivedProjects *bool
	nestSubTasks *bool
	matchAllProjectTags *bool
	includeUntaggedTasks *bool
	includeToday *bool
	includeTasksWithoutDueDates *bool
	includeTasksFromDeletedLists *bool
	includeReminders *bool
	includeLoggedTime *bool
	includeCompletedTasks *bool
	includeCompletedSubtasks *bool
	includeCompletedPredecessors *bool
	includeArchivedProjects *bool
	ignoreStartDates *bool
	getSubTasks *bool
	getFiles *bool
	countOnly *bool
	allowTemplateTasks *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId *[]int32
	projectHealths *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
}

func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) Today(today string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) TagIds(tagIds string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) StartDate(startDate string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) Sort(sort string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ResponsiblePartyIds(responsiblePartyIds string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) Include(include string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) FollowedByUserIds(followedByUserIds string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.followedByUserIds = &followedByUserIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) Filter(filter string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) EndDate(endDate string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) DataSet(dataSet string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) CreatorIds(creatorIds string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) Callback(callback string) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) TaskId2(taskId2 int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.taskId2 = &taskId2
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ProjectCategoryId(projectCategoryId int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) Page(page int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) CompanyId(companyId int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeCompletedPredecessors(includeCompletedPredecessors bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeCompletedPredecessors = &includeCompletedPredecessors
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) GetFiles(getFiles bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) CountOnly(countOnly bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ProjectId(projectId []int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1TaskstaskIdSubtasksExecute(r)
}

/*
 * GETProjectsApiV1TaskstaskIdSubtasks Will return the tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId
 * @return ApiGETProjectsApiV1TaskstaskIdSubtasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV1TaskstaskIdSubtasks(ctx _context.Context, taskId int32) ApiGETProjectsApiV1TaskstaskIdSubtasksRequest {
	return ApiGETProjectsApiV1TaskstaskIdSubtasksRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1TaskstaskIdSubtasksExecute(r ApiGETProjectsApiV1TaskstaskIdSubtasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1TaskstaskIdSubtasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/tasks/{taskId}/subtasks"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsible-party-ids", parameterToString(*r.responsiblePartyIds, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.followedByUserIds != nil {
		localVarQueryParams.Add("followedByUserIds", parameterToString(*r.followedByUserIds, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creator-ids", parameterToString(*r.creatorIds, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.taskId2 != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId2, ""))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompletedPredecessors != nil {
		localVarQueryParams.Add("includeCompletedPredecessors", parameterToString(*r.includeCompletedPredecessors, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignore-start-dates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1TimeRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	updatedAfterDate *string
	toDate *string
	sortOrder *string
	sortBy *string
	projectStatus *string
	invoicedType *string
	fromDate *string
	billableType *string
	timeLogId *int32
	ticketId *int32
	pageSize *int32
	page *int32
	includeTimelogId *int32
	showDeleted *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	matchAllProjectTagIds *bool
	includeTags *bool
	includeMainTask *bool
	includeArchivedProjects *bool
	getTotals *bool
	userId *[]int32
	taskTagIds *[]int32
	tagIds *[]int32
	projectsFromCompanyId *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId *[]int32
	projectHealths *[]int32
	projectHealth *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	projectCategoryId *[]int32
	companyId *[]int32
}

func (r ApiGETProjectsApiV1TimeRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1TimeRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ToDate(toDate string) ApiGETProjectsApiV1TimeRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) SortOrder(sortOrder string) ApiGETProjectsApiV1TimeRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) SortBy(sortBy string) ApiGETProjectsApiV1TimeRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1TimeRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV1TimeRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) FromDate(fromDate string) ApiGETProjectsApiV1TimeRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) BillableType(billableType string) ApiGETProjectsApiV1TimeRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) TimeLogId(timeLogId int32) ApiGETProjectsApiV1TimeRequest {
	r.timeLogId = &timeLogId
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) TicketId(ticketId int32) ApiGETProjectsApiV1TimeRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) PageSize(pageSize int32) ApiGETProjectsApiV1TimeRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) Page(page int32) ApiGETProjectsApiV1TimeRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV1TimeRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1TimeRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1TimeRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV1TimeRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1TimeRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV1TimeRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV1TimeRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) IncludeMainTask(includeMainTask bool) ApiGETProjectsApiV1TimeRequest {
	r.includeMainTask = &includeMainTask
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1TimeRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) GetTotals(getTotals bool) ApiGETProjectsApiV1TimeRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) UserId(userId []int32) ApiGETProjectsApiV1TimeRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV1TimeRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) TagIds(tagIds []int32) ApiGETProjectsApiV1TimeRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectsFromCompanyId(projectsFromCompanyId []int32) ApiGETProjectsApiV1TimeRequest {
	r.projectsFromCompanyId = &projectsFromCompanyId
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1TimeRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1TimeRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1TimeRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectId(projectId []int32) ApiGETProjectsApiV1TimeRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1TimeRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV1TimeRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1TimeRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1TimeRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV1TimeRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV1TimeRequest) CompanyId(companyId []int32) ApiGETProjectsApiV1TimeRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV1TimeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1TimeExecute(r)
}

/*
 * GETProjectsApiV1Time APICall_GET_time_entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV1TimeRequest
 */
func (a *CFPortApiService) GETProjectsApiV1Time(ctx _context.Context) ApiGETProjectsApiV1TimeRequest {
	return ApiGETProjectsApiV1TimeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1TimeExecute(r ApiGETProjectsApiV1TimeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1Time")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/time"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.timeLogId != nil {
		localVarQueryParams.Add("timeLogId", parameterToString(*r.timeLogId, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeMainTask != nil {
		localVarQueryParams.Add("includeMainTask", parameterToString(*r.includeMainTask, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectsFromCompanyId != nil {
		localVarQueryParams.Add("projectsFromCompanyId", parameterToString(*r.projectsFromCompanyId, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV1TimeEntriesRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	updatedAfterDate *string
	toDate *string
	sortOrder *string
	sortBy *string
	projectStatus *string
	invoicedType *string
	fromDate *string
	billableType *string
	timeLogId *int32
	ticketId *int32
	pageSize *int32
	page *int32
	includeTimelogId *int32
	showDeleted *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	matchAllProjectTagIds *bool
	includeTags *bool
	includeMainTask *bool
	includeArchivedProjects *bool
	getTotals *bool
	userId *[]int32
	taskTagIds *[]int32
	tagIds *[]int32
	projectsFromCompanyId *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectId *[]int32
	projectHealths *[]int32
	projectHealth *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	projectCategoryId *[]int32
	companyId *[]int32
}

func (r ApiGETProjectsApiV1TimeEntriesRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV1TimeEntriesRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ToDate(toDate string) ApiGETProjectsApiV1TimeEntriesRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) SortOrder(sortOrder string) ApiGETProjectsApiV1TimeEntriesRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) SortBy(sortBy string) ApiGETProjectsApiV1TimeEntriesRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV1TimeEntriesRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) FromDate(fromDate string) ApiGETProjectsApiV1TimeEntriesRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) BillableType(billableType string) ApiGETProjectsApiV1TimeEntriesRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) TimeLogId(timeLogId int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.timeLogId = &timeLogId
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) TicketId(ticketId int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) PageSize(pageSize int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) Page(page int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV1TimeEntriesRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV1TimeEntriesRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV1TimeEntriesRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV1TimeEntriesRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV1TimeEntriesRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV1TimeEntriesRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) IncludeMainTask(includeMainTask bool) ApiGETProjectsApiV1TimeEntriesRequest {
	r.includeMainTask = &includeMainTask
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV1TimeEntriesRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) GetTotals(getTotals bool) ApiGETProjectsApiV1TimeEntriesRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) UserId(userId []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) TagIds(tagIds []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectsFromCompanyId(projectsFromCompanyId []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectsFromCompanyId = &projectsFromCompanyId
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectId(projectId []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV1TimeEntriesRequest) CompanyId(companyId []int32) ApiGETProjectsApiV1TimeEntriesRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV1TimeEntriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV1TimeEntriesExecute(r)
}

/*
 * GETProjectsApiV1TimeEntries APICall_GET_time_entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV1TimeEntriesRequest
 */
func (a *CFPortApiService) GETProjectsApiV1TimeEntries(ctx _context.Context) ApiGETProjectsApiV1TimeEntriesRequest {
	return ApiGETProjectsApiV1TimeEntriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV1TimeEntriesExecute(r ApiGETProjectsApiV1TimeEntriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV1TimeEntries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/time_entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.timeLogId != nil {
		localVarQueryParams.Add("timeLogId", parameterToString(*r.timeLogId, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeMainTask != nil {
		localVarQueryParams.Add("includeMainTask", parameterToString(*r.includeMainTask, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectsFromCompanyId != nil {
		localVarQueryParams.Add("projectsFromCompanyId", parameterToString(*r.projectsFromCompanyId, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV1PendingfilesRequest struct {
	ctx _context.Context
	ApiService *CFPortApiService
	type_ *string
	returnFormat *string
	imageType *string
	returnLocation *bool
	file *string
}

func (r ApiPOSTProjectsApiV1PendingfilesRequest) Type_(type_ string) ApiPOSTProjectsApiV1PendingfilesRequest {
	r.type_ = &type_
	return r
}
func (r ApiPOSTProjectsApiV1PendingfilesRequest) ReturnFormat(returnFormat string) ApiPOSTProjectsApiV1PendingfilesRequest {
	r.returnFormat = &returnFormat
	return r
}
func (r ApiPOSTProjectsApiV1PendingfilesRequest) ImageType(imageType string) ApiPOSTProjectsApiV1PendingfilesRequest {
	r.imageType = &imageType
	return r
}
func (r ApiPOSTProjectsApiV1PendingfilesRequest) ReturnLocation(returnLocation bool) ApiPOSTProjectsApiV1PendingfilesRequest {
	r.returnLocation = &returnLocation
	return r
}
func (r ApiPOSTProjectsApiV1PendingfilesRequest) File(file string) ApiPOSTProjectsApiV1PendingfilesRequest {
	r.file = &file
	return r
}

func (r ApiPOSTProjectsApiV1PendingfilesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV1PendingfilesExecute(r)
}

/*
 * POSTProjectsApiV1Pendingfiles Posts a pending file
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV1PendingfilesRequest
 */
func (a *CFPortApiService) POSTProjectsApiV1Pendingfiles(ctx _context.Context) ApiPOSTProjectsApiV1PendingfilesRequest {
	return ApiPOSTProjectsApiV1PendingfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) POSTProjectsApiV1PendingfilesExecute(r ApiPOSTProjectsApiV1PendingfilesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.POSTProjectsApiV1Pendingfiles")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v1/pendingfiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.returnFormat != nil {
		localVarQueryParams.Add("returnFormat", parameterToString(*r.returnFormat, ""))
	}
	if r.imageType != nil {
		localVarQueryParams.Add("imageType", parameterToString(*r.imageType, ""))
	}
	if r.returnLocation != nil {
		localVarQueryParams.Add("returnLocation", parameterToString(*r.returnLocation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.file != nil {
		localVarFormParams.Add("File", parameterToString(*r.file, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
