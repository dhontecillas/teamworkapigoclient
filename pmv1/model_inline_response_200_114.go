/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineResponse200114 struct for InlineResponse200114
type InlineResponse200114 struct {
	STATUS *string `json:"STATUS,omitempty"`
	Comments *[]map[string]interface{} `json:"comments,omitempty"`
	Files *[]map[string]interface{} `json:"files,omitempty"`
	Links *[]map[string]interface{} `json:"links,omitempty"`
	Messages *[]map[string]interface{} `json:"messages,omitempty"`
	Milestones *[]map[string]interface{} `json:"milestones,omitempty"`
	Notebooks *[]map[string]interface{} `json:"notebooks,omitempty"`
	Tasklists *[]map[string]interface{} `json:"tasklists,omitempty"`
	Tasks *[]map[string]interface{} `json:"tasks,omitempty"`
	Timelogs *[]map[string]interface{} `json:"timelogs,omitempty"`
}

// NewInlineResponse200114 instantiates a new InlineResponse200114 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200114() *InlineResponse200114 {
	this := InlineResponse200114{}
	return &this
}

// NewInlineResponse200114WithDefaults instantiates a new InlineResponse200114 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200114WithDefaults() *InlineResponse200114 {
	this := InlineResponse200114{}
	return &this
}

// GetSTATUS returns the STATUS field value if set, zero value otherwise.
func (o *InlineResponse200114) GetSTATUS() string {
	if o == nil || o.STATUS == nil {
		var ret string
		return ret
	}
	return *o.STATUS
}

// GetSTATUSOk returns a tuple with the STATUS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200114) GetSTATUSOk() (*string, bool) {
	if o == nil || o.STATUS == nil {
		return nil, false
	}
	return o.STATUS, true
}

// HasSTATUS returns a boolean if a field has been set.
func (o *InlineResponse200114) HasSTATUS() bool {
	if o != nil && o.STATUS != nil {
		return true
	}

	return false
}

// SetSTATUS gets a reference to the given string and assigns it to the STATUS field.
func (o *InlineResponse200114) SetSTATUS(v string) {
	o.STATUS = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *InlineResponse200114) GetComments() []map[string]interface{} {
	if o == nil || o.Comments == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200114) GetCommentsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *InlineResponse200114) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given []map[string]interface{} and assigns it to the Comments field.
func (o *InlineResponse200114) SetComments(v []map[string]interface{}) {
	o.Comments = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *InlineResponse200114) GetFiles() []map[string]interface{} {
	if o == nil || o.Files == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200114) GetFilesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *InlineResponse200114) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []map[string]interface{} and assigns it to the Files field.
func (o *InlineResponse200114) SetFiles(v []map[string]interface{}) {
	o.Files = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *InlineResponse200114) GetLinks() []map[string]interface{} {
	if o == nil || o.Links == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200114) GetLinksOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *InlineResponse200114) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []map[string]interface{} and assigns it to the Links field.
func (o *InlineResponse200114) SetLinks(v []map[string]interface{}) {
	o.Links = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *InlineResponse200114) GetMessages() []map[string]interface{} {
	if o == nil || o.Messages == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200114) GetMessagesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Messages == nil {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *InlineResponse200114) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []map[string]interface{} and assigns it to the Messages field.
func (o *InlineResponse200114) SetMessages(v []map[string]interface{}) {
	o.Messages = &v
}

// GetMilestones returns the Milestones field value if set, zero value otherwise.
func (o *InlineResponse200114) GetMilestones() []map[string]interface{} {
	if o == nil || o.Milestones == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Milestones
}

// GetMilestonesOk returns a tuple with the Milestones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200114) GetMilestonesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Milestones == nil {
		return nil, false
	}
	return o.Milestones, true
}

// HasMilestones returns a boolean if a field has been set.
func (o *InlineResponse200114) HasMilestones() bool {
	if o != nil && o.Milestones != nil {
		return true
	}

	return false
}

// SetMilestones gets a reference to the given []map[string]interface{} and assigns it to the Milestones field.
func (o *InlineResponse200114) SetMilestones(v []map[string]interface{}) {
	o.Milestones = &v
}

// GetNotebooks returns the Notebooks field value if set, zero value otherwise.
func (o *InlineResponse200114) GetNotebooks() []map[string]interface{} {
	if o == nil || o.Notebooks == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Notebooks
}

// GetNotebooksOk returns a tuple with the Notebooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200114) GetNotebooksOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Notebooks == nil {
		return nil, false
	}
	return o.Notebooks, true
}

// HasNotebooks returns a boolean if a field has been set.
func (o *InlineResponse200114) HasNotebooks() bool {
	if o != nil && o.Notebooks != nil {
		return true
	}

	return false
}

// SetNotebooks gets a reference to the given []map[string]interface{} and assigns it to the Notebooks field.
func (o *InlineResponse200114) SetNotebooks(v []map[string]interface{}) {
	o.Notebooks = &v
}

// GetTasklists returns the Tasklists field value if set, zero value otherwise.
func (o *InlineResponse200114) GetTasklists() []map[string]interface{} {
	if o == nil || o.Tasklists == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Tasklists
}

// GetTasklistsOk returns a tuple with the Tasklists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200114) GetTasklistsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Tasklists == nil {
		return nil, false
	}
	return o.Tasklists, true
}

// HasTasklists returns a boolean if a field has been set.
func (o *InlineResponse200114) HasTasklists() bool {
	if o != nil && o.Tasklists != nil {
		return true
	}

	return false
}

// SetTasklists gets a reference to the given []map[string]interface{} and assigns it to the Tasklists field.
func (o *InlineResponse200114) SetTasklists(v []map[string]interface{}) {
	o.Tasklists = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *InlineResponse200114) GetTasks() []map[string]interface{} {
	if o == nil || o.Tasks == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200114) GetTasksOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *InlineResponse200114) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []map[string]interface{} and assigns it to the Tasks field.
func (o *InlineResponse200114) SetTasks(v []map[string]interface{}) {
	o.Tasks = &v
}

// GetTimelogs returns the Timelogs field value if set, zero value otherwise.
func (o *InlineResponse200114) GetTimelogs() []map[string]interface{} {
	if o == nil || o.Timelogs == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Timelogs
}

// GetTimelogsOk returns a tuple with the Timelogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200114) GetTimelogsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Timelogs == nil {
		return nil, false
	}
	return o.Timelogs, true
}

// HasTimelogs returns a boolean if a field has been set.
func (o *InlineResponse200114) HasTimelogs() bool {
	if o != nil && o.Timelogs != nil {
		return true
	}

	return false
}

// SetTimelogs gets a reference to the given []map[string]interface{} and assigns it to the Timelogs field.
func (o *InlineResponse200114) SetTimelogs(v []map[string]interface{}) {
	o.Timelogs = &v
}

func (o InlineResponse200114) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.STATUS != nil {
		toSerialize["STATUS"] = o.STATUS
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	if o.Milestones != nil {
		toSerialize["milestones"] = o.Milestones
	}
	if o.Notebooks != nil {
		toSerialize["notebooks"] = o.Notebooks
	}
	if o.Tasklists != nil {
		toSerialize["tasklists"] = o.Tasklists
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	if o.Timelogs != nil {
		toSerialize["timelogs"] = o.Timelogs
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200114 struct {
	value *InlineResponse200114
	isSet bool
}

func (v NullableInlineResponse200114) Get() *InlineResponse200114 {
	return v.value
}

func (v *NullableInlineResponse200114) Set(val *InlineResponse200114) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200114) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200114) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200114(val *InlineResponse200114) *NullableInlineResponse200114 {
	return &NullableInlineResponse200114{value: val, isSet: true}
}

func (v NullableInlineResponse200114) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200114) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


