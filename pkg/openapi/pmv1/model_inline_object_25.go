/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineObject25 struct for InlineObject25
type InlineObject25 struct {
	Userstatus *MeStatusJsonUserstatus `json:"userstatus,omitempty"`
}

// NewInlineObject25 instantiates a new InlineObject25 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject25() *InlineObject25 {
	this := InlineObject25{}
	return &this
}

// NewInlineObject25WithDefaults instantiates a new InlineObject25 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject25WithDefaults() *InlineObject25 {
	this := InlineObject25{}
	return &this
}

// GetUserstatus returns the Userstatus field value if set, zero value otherwise.
func (o *InlineObject25) GetUserstatus() MeStatusJsonUserstatus {
	if o == nil || o.Userstatus == nil {
		var ret MeStatusJsonUserstatus
		return ret
	}
	return *o.Userstatus
}

// GetUserstatusOk returns a tuple with the Userstatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject25) GetUserstatusOk() (*MeStatusJsonUserstatus, bool) {
	if o == nil || o.Userstatus == nil {
		return nil, false
	}
	return o.Userstatus, true
}

// HasUserstatus returns a boolean if a field has been set.
func (o *InlineObject25) HasUserstatus() bool {
	if o != nil && o.Userstatus != nil {
		return true
	}

	return false
}

// SetUserstatus gets a reference to the given MeStatusJsonUserstatus and assigns it to the Userstatus field.
func (o *InlineObject25) SetUserstatus(v MeStatusJsonUserstatus) {
	o.Userstatus = &v
}

func (o InlineObject25) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Userstatus != nil {
		toSerialize["userstatus"] = o.Userstatus
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject25 struct {
	value *InlineObject25
	isSet bool
}

func (v NullableInlineObject25) Get() *InlineObject25 {
	return v.value
}

func (v *NullableInlineObject25) Set(val *InlineObject25) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject25) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject25) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject25(val *InlineObject25) *NullableInlineObject25 {
	return &NullableInlineObject25{value: val, isSet: true}
}

func (v NullableInlineObject25) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject25) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


