/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// PlannerWorkloadPlannersResponse WorkloadPlannersResponse contains information about a group of planners.
type PlannerWorkloadPlannersResponse struct {
	Included *PlannerWorkloadPlannersResponseIncluded `json:"included,omitempty"`
	Meta *ViewMeta `json:"meta,omitempty"`
	Planners *[]PlannerWorkloadPlanner `json:"planners,omitempty"`
}

// NewPlannerWorkloadPlannersResponse instantiates a new PlannerWorkloadPlannersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlannerWorkloadPlannersResponse() *PlannerWorkloadPlannersResponse {
	this := PlannerWorkloadPlannersResponse{}
	return &this
}

// NewPlannerWorkloadPlannersResponseWithDefaults instantiates a new PlannerWorkloadPlannersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlannerWorkloadPlannersResponseWithDefaults() *PlannerWorkloadPlannersResponse {
	this := PlannerWorkloadPlannersResponse{}
	return &this
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *PlannerWorkloadPlannersResponse) GetIncluded() PlannerWorkloadPlannersResponseIncluded {
	if o == nil || o.Included == nil {
		var ret PlannerWorkloadPlannersResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannerWorkloadPlannersResponse) GetIncludedOk() (*PlannerWorkloadPlannersResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *PlannerWorkloadPlannersResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given PlannerWorkloadPlannersResponseIncluded and assigns it to the Included field.
func (o *PlannerWorkloadPlannersResponse) SetIncluded(v PlannerWorkloadPlannersResponseIncluded) {
	o.Included = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *PlannerWorkloadPlannersResponse) GetMeta() ViewMeta {
	if o == nil || o.Meta == nil {
		var ret ViewMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannerWorkloadPlannersResponse) GetMetaOk() (*ViewMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *PlannerWorkloadPlannersResponse) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ViewMeta and assigns it to the Meta field.
func (o *PlannerWorkloadPlannersResponse) SetMeta(v ViewMeta) {
	o.Meta = &v
}

// GetPlanners returns the Planners field value if set, zero value otherwise.
func (o *PlannerWorkloadPlannersResponse) GetPlanners() []PlannerWorkloadPlanner {
	if o == nil || o.Planners == nil {
		var ret []PlannerWorkloadPlanner
		return ret
	}
	return *o.Planners
}

// GetPlannersOk returns a tuple with the Planners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannerWorkloadPlannersResponse) GetPlannersOk() (*[]PlannerWorkloadPlanner, bool) {
	if o == nil || o.Planners == nil {
		return nil, false
	}
	return o.Planners, true
}

// HasPlanners returns a boolean if a field has been set.
func (o *PlannerWorkloadPlannersResponse) HasPlanners() bool {
	if o != nil && o.Planners != nil {
		return true
	}

	return false
}

// SetPlanners gets a reference to the given []PlannerWorkloadPlanner and assigns it to the Planners field.
func (o *PlannerWorkloadPlannersResponse) SetPlanners(v []PlannerWorkloadPlanner) {
	o.Planners = &v
}

func (o PlannerWorkloadPlannersResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Planners != nil {
		toSerialize["planners"] = o.Planners
	}
	return json.Marshal(toSerialize)
}

type NullablePlannerWorkloadPlannersResponse struct {
	value *PlannerWorkloadPlannersResponse
	isSet bool
}

func (v NullablePlannerWorkloadPlannersResponse) Get() *PlannerWorkloadPlannersResponse {
	return v.value
}

func (v *NullablePlannerWorkloadPlannersResponse) Set(val *PlannerWorkloadPlannersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannerWorkloadPlannersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannerWorkloadPlannersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannerWorkloadPlannersResponse(val *PlannerWorkloadPlannersResponse) *NullablePlannerWorkloadPlannersResponse {
	return &NullablePlannerWorkloadPlannersResponse{value: val, isSet: true}
}

func (v NullablePlannerWorkloadPlannersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannerWorkloadPlannersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


