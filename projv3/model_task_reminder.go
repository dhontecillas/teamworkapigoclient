/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// TaskReminder Reminder stores all necessary information to create a task reminder.
type TaskReminder struct {
	IsRelative *bool `json:"isRelative,omitempty"`
	Note *string `json:"note,omitempty"`
	PeopleAssigned *bool `json:"peopleAssigned,omitempty"`
	RelativeNumberDays *int32 `json:"relativeNumberDays,omitempty"`
	RemindAt *string `json:"remindAt,omitempty"`
	Type *string `json:"type,omitempty"`
	UserId *int32 `json:"userId,omitempty"`
	UsingOffsetDueDate *bool `json:"usingOffsetDueDate,omitempty"`
}

// NewTaskReminder instantiates a new TaskReminder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskReminder() *TaskReminder {
	this := TaskReminder{}
	return &this
}

// NewTaskReminderWithDefaults instantiates a new TaskReminder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskReminderWithDefaults() *TaskReminder {
	this := TaskReminder{}
	return &this
}

// GetIsRelative returns the IsRelative field value if set, zero value otherwise.
func (o *TaskReminder) GetIsRelative() bool {
	if o == nil || o.IsRelative == nil {
		var ret bool
		return ret
	}
	return *o.IsRelative
}

// GetIsRelativeOk returns a tuple with the IsRelative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReminder) GetIsRelativeOk() (*bool, bool) {
	if o == nil || o.IsRelative == nil {
		return nil, false
	}
	return o.IsRelative, true
}

// HasIsRelative returns a boolean if a field has been set.
func (o *TaskReminder) HasIsRelative() bool {
	if o != nil && o.IsRelative != nil {
		return true
	}

	return false
}

// SetIsRelative gets a reference to the given bool and assigns it to the IsRelative field.
func (o *TaskReminder) SetIsRelative(v bool) {
	o.IsRelative = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *TaskReminder) GetNote() string {
	if o == nil || o.Note == nil {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReminder) GetNoteOk() (*string, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *TaskReminder) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *TaskReminder) SetNote(v string) {
	o.Note = &v
}

// GetPeopleAssigned returns the PeopleAssigned field value if set, zero value otherwise.
func (o *TaskReminder) GetPeopleAssigned() bool {
	if o == nil || o.PeopleAssigned == nil {
		var ret bool
		return ret
	}
	return *o.PeopleAssigned
}

// GetPeopleAssignedOk returns a tuple with the PeopleAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReminder) GetPeopleAssignedOk() (*bool, bool) {
	if o == nil || o.PeopleAssigned == nil {
		return nil, false
	}
	return o.PeopleAssigned, true
}

// HasPeopleAssigned returns a boolean if a field has been set.
func (o *TaskReminder) HasPeopleAssigned() bool {
	if o != nil && o.PeopleAssigned != nil {
		return true
	}

	return false
}

// SetPeopleAssigned gets a reference to the given bool and assigns it to the PeopleAssigned field.
func (o *TaskReminder) SetPeopleAssigned(v bool) {
	o.PeopleAssigned = &v
}

// GetRelativeNumberDays returns the RelativeNumberDays field value if set, zero value otherwise.
func (o *TaskReminder) GetRelativeNumberDays() int32 {
	if o == nil || o.RelativeNumberDays == nil {
		var ret int32
		return ret
	}
	return *o.RelativeNumberDays
}

// GetRelativeNumberDaysOk returns a tuple with the RelativeNumberDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReminder) GetRelativeNumberDaysOk() (*int32, bool) {
	if o == nil || o.RelativeNumberDays == nil {
		return nil, false
	}
	return o.RelativeNumberDays, true
}

// HasRelativeNumberDays returns a boolean if a field has been set.
func (o *TaskReminder) HasRelativeNumberDays() bool {
	if o != nil && o.RelativeNumberDays != nil {
		return true
	}

	return false
}

// SetRelativeNumberDays gets a reference to the given int32 and assigns it to the RelativeNumberDays field.
func (o *TaskReminder) SetRelativeNumberDays(v int32) {
	o.RelativeNumberDays = &v
}

// GetRemindAt returns the RemindAt field value if set, zero value otherwise.
func (o *TaskReminder) GetRemindAt() string {
	if o == nil || o.RemindAt == nil {
		var ret string
		return ret
	}
	return *o.RemindAt
}

// GetRemindAtOk returns a tuple with the RemindAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReminder) GetRemindAtOk() (*string, bool) {
	if o == nil || o.RemindAt == nil {
		return nil, false
	}
	return o.RemindAt, true
}

// HasRemindAt returns a boolean if a field has been set.
func (o *TaskReminder) HasRemindAt() bool {
	if o != nil && o.RemindAt != nil {
		return true
	}

	return false
}

// SetRemindAt gets a reference to the given string and assigns it to the RemindAt field.
func (o *TaskReminder) SetRemindAt(v string) {
	o.RemindAt = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TaskReminder) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReminder) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TaskReminder) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TaskReminder) SetType(v string) {
	o.Type = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *TaskReminder) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReminder) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *TaskReminder) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *TaskReminder) SetUserId(v int32) {
	o.UserId = &v
}

// GetUsingOffsetDueDate returns the UsingOffsetDueDate field value if set, zero value otherwise.
func (o *TaskReminder) GetUsingOffsetDueDate() bool {
	if o == nil || o.UsingOffsetDueDate == nil {
		var ret bool
		return ret
	}
	return *o.UsingOffsetDueDate
}

// GetUsingOffsetDueDateOk returns a tuple with the UsingOffsetDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReminder) GetUsingOffsetDueDateOk() (*bool, bool) {
	if o == nil || o.UsingOffsetDueDate == nil {
		return nil, false
	}
	return o.UsingOffsetDueDate, true
}

// HasUsingOffsetDueDate returns a boolean if a field has been set.
func (o *TaskReminder) HasUsingOffsetDueDate() bool {
	if o != nil && o.UsingOffsetDueDate != nil {
		return true
	}

	return false
}

// SetUsingOffsetDueDate gets a reference to the given bool and assigns it to the UsingOffsetDueDate field.
func (o *TaskReminder) SetUsingOffsetDueDate(v bool) {
	o.UsingOffsetDueDate = &v
}

func (o TaskReminder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsRelative != nil {
		toSerialize["isRelative"] = o.IsRelative
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if o.PeopleAssigned != nil {
		toSerialize["peopleAssigned"] = o.PeopleAssigned
	}
	if o.RelativeNumberDays != nil {
		toSerialize["relativeNumberDays"] = o.RelativeNumberDays
	}
	if o.RemindAt != nil {
		toSerialize["remindAt"] = o.RemindAt
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.UsingOffsetDueDate != nil {
		toSerialize["usingOffsetDueDate"] = o.UsingOffsetDueDate
	}
	return json.Marshal(toSerialize)
}

type NullableTaskReminder struct {
	value *TaskReminder
	isSet bool
}

func (v NullableTaskReminder) Get() *TaskReminder {
	return v.value
}

func (v *NullableTaskReminder) Set(val *TaskReminder) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskReminder) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskReminder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskReminder(val *TaskReminder) *NullableTaskReminder {
	return &NullableTaskReminder{value: val, isSet: true}
}

func (v NullableTaskReminder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskReminder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


