/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv2

import (
	"encoding/json"
)

// PeopleAddress struct for PeopleAddress
type PeopleAddress struct {
	City *string `json:"city,omitempty"`
	Country *string `json:"country,omitempty"`
	Countrycode *string `json:"countrycode,omitempty"`
	Line1 *string `json:"line1,omitempty"`
	Line2 *string `json:"line2,omitempty"`
	State *string `json:"state,omitempty"`
	Zipcode *string `json:"zipcode,omitempty"`
}

// NewPeopleAddress instantiates a new PeopleAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleAddress() *PeopleAddress {
	this := PeopleAddress{}
	return &this
}

// NewPeopleAddressWithDefaults instantiates a new PeopleAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleAddressWithDefaults() *PeopleAddress {
	this := PeopleAddress{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *PeopleAddress) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleAddress) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *PeopleAddress) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *PeopleAddress) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PeopleAddress) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleAddress) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PeopleAddress) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *PeopleAddress) SetCountry(v string) {
	o.Country = &v
}

// GetCountrycode returns the Countrycode field value if set, zero value otherwise.
func (o *PeopleAddress) GetCountrycode() string {
	if o == nil || o.Countrycode == nil {
		var ret string
		return ret
	}
	return *o.Countrycode
}

// GetCountrycodeOk returns a tuple with the Countrycode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleAddress) GetCountrycodeOk() (*string, bool) {
	if o == nil || o.Countrycode == nil {
		return nil, false
	}
	return o.Countrycode, true
}

// HasCountrycode returns a boolean if a field has been set.
func (o *PeopleAddress) HasCountrycode() bool {
	if o != nil && o.Countrycode != nil {
		return true
	}

	return false
}

// SetCountrycode gets a reference to the given string and assigns it to the Countrycode field.
func (o *PeopleAddress) SetCountrycode(v string) {
	o.Countrycode = &v
}

// GetLine1 returns the Line1 field value if set, zero value otherwise.
func (o *PeopleAddress) GetLine1() string {
	if o == nil || o.Line1 == nil {
		var ret string
		return ret
	}
	return *o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleAddress) GetLine1Ok() (*string, bool) {
	if o == nil || o.Line1 == nil {
		return nil, false
	}
	return o.Line1, true
}

// HasLine1 returns a boolean if a field has been set.
func (o *PeopleAddress) HasLine1() bool {
	if o != nil && o.Line1 != nil {
		return true
	}

	return false
}

// SetLine1 gets a reference to the given string and assigns it to the Line1 field.
func (o *PeopleAddress) SetLine1(v string) {
	o.Line1 = &v
}

// GetLine2 returns the Line2 field value if set, zero value otherwise.
func (o *PeopleAddress) GetLine2() string {
	if o == nil || o.Line2 == nil {
		var ret string
		return ret
	}
	return *o.Line2
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleAddress) GetLine2Ok() (*string, bool) {
	if o == nil || o.Line2 == nil {
		return nil, false
	}
	return o.Line2, true
}

// HasLine2 returns a boolean if a field has been set.
func (o *PeopleAddress) HasLine2() bool {
	if o != nil && o.Line2 != nil {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given string and assigns it to the Line2 field.
func (o *PeopleAddress) SetLine2(v string) {
	o.Line2 = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PeopleAddress) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleAddress) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PeopleAddress) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PeopleAddress) SetState(v string) {
	o.State = &v
}

// GetZipcode returns the Zipcode field value if set, zero value otherwise.
func (o *PeopleAddress) GetZipcode() string {
	if o == nil || o.Zipcode == nil {
		var ret string
		return ret
	}
	return *o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleAddress) GetZipcodeOk() (*string, bool) {
	if o == nil || o.Zipcode == nil {
		return nil, false
	}
	return o.Zipcode, true
}

// HasZipcode returns a boolean if a field has been set.
func (o *PeopleAddress) HasZipcode() bool {
	if o != nil && o.Zipcode != nil {
		return true
	}

	return false
}

// SetZipcode gets a reference to the given string and assigns it to the Zipcode field.
func (o *PeopleAddress) SetZipcode(v string) {
	o.Zipcode = &v
}

func (o PeopleAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Countrycode != nil {
		toSerialize["countrycode"] = o.Countrycode
	}
	if o.Line1 != nil {
		toSerialize["line1"] = o.Line1
	}
	if o.Line2 != nil {
		toSerialize["line2"] = o.Line2
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Zipcode != nil {
		toSerialize["zipcode"] = o.Zipcode
	}
	return json.Marshal(toSerialize)
}

type NullablePeopleAddress struct {
	value *PeopleAddress
	isSet bool
}

func (v NullablePeopleAddress) Get() *PeopleAddress {
	return v.value
}

func (v *NullablePeopleAddress) Set(val *PeopleAddress) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleAddress) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleAddress(val *PeopleAddress) *NullablePeopleAddress {
	return &NullablePeopleAddress{value: val, isSet: true}
}

func (v NullablePeopleAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


