/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// PeopleResponse Response contains information about a user.
type PeopleResponse struct {
	Included *PeopleMultiResponseIncluded `json:"included,omitempty"`
	Person *ViewUser `json:"person,omitempty"`
}

// NewPeopleResponse instantiates a new PeopleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleResponse() *PeopleResponse {
	this := PeopleResponse{}
	return &this
}

// NewPeopleResponseWithDefaults instantiates a new PeopleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleResponseWithDefaults() *PeopleResponse {
	this := PeopleResponse{}
	return &this
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *PeopleResponse) GetIncluded() PeopleMultiResponseIncluded {
	if o == nil || o.Included == nil {
		var ret PeopleMultiResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleResponse) GetIncludedOk() (*PeopleMultiResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *PeopleResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given PeopleMultiResponseIncluded and assigns it to the Included field.
func (o *PeopleResponse) SetIncluded(v PeopleMultiResponseIncluded) {
	o.Included = &v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *PeopleResponse) GetPerson() ViewUser {
	if o == nil || o.Person == nil {
		var ret ViewUser
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleResponse) GetPersonOk() (*ViewUser, bool) {
	if o == nil || o.Person == nil {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *PeopleResponse) HasPerson() bool {
	if o != nil && o.Person != nil {
		return true
	}

	return false
}

// SetPerson gets a reference to the given ViewUser and assigns it to the Person field.
func (o *PeopleResponse) SetPerson(v ViewUser) {
	o.Person = &v
}

func (o PeopleResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Person != nil {
		toSerialize["person"] = o.Person
	}
	return json.Marshal(toSerialize)
}

type NullablePeopleResponse struct {
	value *PeopleResponse
	isSet bool
}

func (v NullablePeopleResponse) Get() *PeopleResponse {
	return v.value
}

func (v *NullablePeopleResponse) Set(val *PeopleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleResponse(val *PeopleResponse) *NullablePeopleResponse {
	return &NullablePeopleResponse{value: val, isSet: true}
}

func (v NullablePeopleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


