/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// SettingResponse Response contains information about a specific setting.
type SettingResponse struct {
	Appsetting *ViewAppSetting `json:"appsetting,omitempty"`
}

// NewSettingResponse instantiates a new SettingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingResponse() *SettingResponse {
	this := SettingResponse{}
	return &this
}

// NewSettingResponseWithDefaults instantiates a new SettingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingResponseWithDefaults() *SettingResponse {
	this := SettingResponse{}
	return &this
}

// GetAppsetting returns the Appsetting field value if set, zero value otherwise.
func (o *SettingResponse) GetAppsetting() ViewAppSetting {
	if o == nil || o.Appsetting == nil {
		var ret ViewAppSetting
		return ret
	}
	return *o.Appsetting
}

// GetAppsettingOk returns a tuple with the Appsetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetAppsettingOk() (*ViewAppSetting, bool) {
	if o == nil || o.Appsetting == nil {
		return nil, false
	}
	return o.Appsetting, true
}

// HasAppsetting returns a boolean if a field has been set.
func (o *SettingResponse) HasAppsetting() bool {
	if o != nil && o.Appsetting != nil {
		return true
	}

	return false
}

// SetAppsetting gets a reference to the given ViewAppSetting and assigns it to the Appsetting field.
func (o *SettingResponse) SetAppsetting(v ViewAppSetting) {
	o.Appsetting = &v
}

func (o SettingResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Appsetting != nil {
		toSerialize["appsetting"] = o.Appsetting
	}
	return json.Marshal(toSerialize)
}

type NullableSettingResponse struct {
	value *SettingResponse
	isSet bool
}

func (v NullableSettingResponse) Get() *SettingResponse {
	return v.value
}

func (v *NullableSettingResponse) Set(val *SettingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingResponse(val *SettingResponse) *NullableSettingResponse {
	return &NullableSettingResponse{value: val, isSet: true}
}

func (v NullableSettingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


