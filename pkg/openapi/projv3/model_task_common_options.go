/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// TaskCommonOptions CommonOptions contains common options
type TaskCommonOptions struct {
	FireWebhook *bool `json:"fireWebhook,omitempty"`
	LogActivity *bool `json:"logActivity,omitempty"`
	UseNotifyViaTWIM *bool `json:"useNotifyViaTWIM,omitempty"`
}

// NewTaskCommonOptions instantiates a new TaskCommonOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskCommonOptions() *TaskCommonOptions {
	this := TaskCommonOptions{}
	return &this
}

// NewTaskCommonOptionsWithDefaults instantiates a new TaskCommonOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskCommonOptionsWithDefaults() *TaskCommonOptions {
	this := TaskCommonOptions{}
	return &this
}

// GetFireWebhook returns the FireWebhook field value if set, zero value otherwise.
func (o *TaskCommonOptions) GetFireWebhook() bool {
	if o == nil || o.FireWebhook == nil {
		var ret bool
		return ret
	}
	return *o.FireWebhook
}

// GetFireWebhookOk returns a tuple with the FireWebhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCommonOptions) GetFireWebhookOk() (*bool, bool) {
	if o == nil || o.FireWebhook == nil {
		return nil, false
	}
	return o.FireWebhook, true
}

// HasFireWebhook returns a boolean if a field has been set.
func (o *TaskCommonOptions) HasFireWebhook() bool {
	if o != nil && o.FireWebhook != nil {
		return true
	}

	return false
}

// SetFireWebhook gets a reference to the given bool and assigns it to the FireWebhook field.
func (o *TaskCommonOptions) SetFireWebhook(v bool) {
	o.FireWebhook = &v
}

// GetLogActivity returns the LogActivity field value if set, zero value otherwise.
func (o *TaskCommonOptions) GetLogActivity() bool {
	if o == nil || o.LogActivity == nil {
		var ret bool
		return ret
	}
	return *o.LogActivity
}

// GetLogActivityOk returns a tuple with the LogActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCommonOptions) GetLogActivityOk() (*bool, bool) {
	if o == nil || o.LogActivity == nil {
		return nil, false
	}
	return o.LogActivity, true
}

// HasLogActivity returns a boolean if a field has been set.
func (o *TaskCommonOptions) HasLogActivity() bool {
	if o != nil && o.LogActivity != nil {
		return true
	}

	return false
}

// SetLogActivity gets a reference to the given bool and assigns it to the LogActivity field.
func (o *TaskCommonOptions) SetLogActivity(v bool) {
	o.LogActivity = &v
}

// GetUseNotifyViaTWIM returns the UseNotifyViaTWIM field value if set, zero value otherwise.
func (o *TaskCommonOptions) GetUseNotifyViaTWIM() bool {
	if o == nil || o.UseNotifyViaTWIM == nil {
		var ret bool
		return ret
	}
	return *o.UseNotifyViaTWIM
}

// GetUseNotifyViaTWIMOk returns a tuple with the UseNotifyViaTWIM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCommonOptions) GetUseNotifyViaTWIMOk() (*bool, bool) {
	if o == nil || o.UseNotifyViaTWIM == nil {
		return nil, false
	}
	return o.UseNotifyViaTWIM, true
}

// HasUseNotifyViaTWIM returns a boolean if a field has been set.
func (o *TaskCommonOptions) HasUseNotifyViaTWIM() bool {
	if o != nil && o.UseNotifyViaTWIM != nil {
		return true
	}

	return false
}

// SetUseNotifyViaTWIM gets a reference to the given bool and assigns it to the UseNotifyViaTWIM field.
func (o *TaskCommonOptions) SetUseNotifyViaTWIM(v bool) {
	o.UseNotifyViaTWIM = &v
}

func (o TaskCommonOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FireWebhook != nil {
		toSerialize["fireWebhook"] = o.FireWebhook
	}
	if o.LogActivity != nil {
		toSerialize["logActivity"] = o.LogActivity
	}
	if o.UseNotifyViaTWIM != nil {
		toSerialize["useNotifyViaTWIM"] = o.UseNotifyViaTWIM
	}
	return json.Marshal(toSerialize)
}

type NullableTaskCommonOptions struct {
	value *TaskCommonOptions
	isSet bool
}

func (v NullableTaskCommonOptions) Get() *TaskCommonOptions {
	return v.value
}

func (v *NullableTaskCommonOptions) Set(val *TaskCommonOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskCommonOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskCommonOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskCommonOptions(val *TaskCommonOptions) *NullableTaskCommonOptions {
	return &NullableTaskCommonOptions{value: val, isSet: true}
}

func (v NullableTaskCommonOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskCommonOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


