/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PortfolioBoardsApiService PortfolioBoardsApi service
type PortfolioBoardsApiService service

type ApiDELETEPortfolioBoardsBoardIdJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	boardId string
}


func (r ApiDELETEPortfolioBoardsBoardIdJsonRequest) Execute() (InlineResponse2001, *_nethttp.Response, error) {
	return r.ApiService.DELETEPortfolioBoardsBoardIdJsonExecute(r)
}

/*
 * DELETEPortfolioBoardsBoardIdJson Delete a board
 * Deletes a given board.


---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param boardId
 * @return ApiDELETEPortfolioBoardsBoardIdJsonRequest
 */
func (a *PortfolioBoardsApiService) DELETEPortfolioBoardsBoardIdJson(ctx _context.Context, boardId string) ApiDELETEPortfolioBoardsBoardIdJsonRequest {
	return ApiDELETEPortfolioBoardsBoardIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		boardId: boardId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2001
 */
func (a *PortfolioBoardsApiService) DELETEPortfolioBoardsBoardIdJsonExecute(r ApiDELETEPortfolioBoardsBoardIdJsonRequest) (InlineResponse2001, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2001
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.DELETEPortfolioBoardsBoardIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/boards/{boardId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"boardId"+"}", _neturl.PathEscape(parameterToString(r.boardId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDELETEPortfolioCardsCardIdJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	cardId string
}


func (r ApiDELETEPortfolioCardsCardIdJsonRequest) Execute() (InlineResponse2001, *_nethttp.Response, error) {
	return r.ApiService.DELETEPortfolioCardsCardIdJsonExecute(r)
}

/*
 * DELETEPortfolioCardsCardIdJson Delete a Card in a Portfolio Column
 * Delete a card inside a column in a portfolio view. 

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cardId
 * @return ApiDELETEPortfolioCardsCardIdJsonRequest
 */
func (a *PortfolioBoardsApiService) DELETEPortfolioCardsCardIdJson(ctx _context.Context, cardId string) ApiDELETEPortfolioCardsCardIdJsonRequest {
	return ApiDELETEPortfolioCardsCardIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		cardId: cardId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2001
 */
func (a *PortfolioBoardsApiService) DELETEPortfolioCardsCardIdJsonExecute(r ApiDELETEPortfolioCardsCardIdJsonRequest) (InlineResponse2001, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2001
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.DELETEPortfolioCardsCardIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/cards/{cardId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"cardId"+"}", _neturl.PathEscape(parameterToString(r.cardId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDELETEPortfolioColumnsColumnIdJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	columnId string
}


func (r ApiDELETEPortfolioColumnsColumnIdJsonRequest) Execute() (InlineResponse2001, *_nethttp.Response, error) {
	return r.ApiService.DELETEPortfolioColumnsColumnIdJsonExecute(r)
}

/*
 * DELETEPortfolioColumnsColumnIdJson Delete a Portfolio Column
 * Delete a given column.

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param columnId
 * @return ApiDELETEPortfolioColumnsColumnIdJsonRequest
 */
func (a *PortfolioBoardsApiService) DELETEPortfolioColumnsColumnIdJson(ctx _context.Context, columnId string) ApiDELETEPortfolioColumnsColumnIdJsonRequest {
	return ApiDELETEPortfolioColumnsColumnIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		columnId: columnId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2001
 */
func (a *PortfolioBoardsApiService) DELETEPortfolioColumnsColumnIdJsonExecute(r ApiDELETEPortfolioColumnsColumnIdJsonRequest) (InlineResponse2001, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2001
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.DELETEPortfolioColumnsColumnIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/columns/{columnId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"columnId"+"}", _neturl.PathEscape(parameterToString(r.columnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETPortfolioBoardsBoardIdColumnsJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	boardId string
}


func (r ApiGETPortfolioBoardsBoardIdColumnsJsonRequest) Execute() (InlineResponse20044, *_nethttp.Response, error) {
	return r.ApiService.GETPortfolioBoardsBoardIdColumnsJsonExecute(r)
}

/*
 * GETPortfolioBoardsBoardIdColumnsJson Columns inside a Portfolio Board
 * This will return a list of columns in a specified board.

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param boardId
 * @return ApiGETPortfolioBoardsBoardIdColumnsJsonRequest
 */
func (a *PortfolioBoardsApiService) GETPortfolioBoardsBoardIdColumnsJson(ctx _context.Context, boardId string) ApiGETPortfolioBoardsBoardIdColumnsJsonRequest {
	return ApiGETPortfolioBoardsBoardIdColumnsJsonRequest{
		ApiService: a,
		ctx: ctx,
		boardId: boardId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20044
 */
func (a *PortfolioBoardsApiService) GETPortfolioBoardsBoardIdColumnsJsonExecute(r ApiGETPortfolioBoardsBoardIdColumnsJsonRequest) (InlineResponse20044, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20044
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.GETPortfolioBoardsBoardIdColumnsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/boards/{boardId}/columns.json"
	localVarPath = strings.Replace(localVarPath, "{"+"boardId"+"}", _neturl.PathEscape(parameterToString(r.boardId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETPortfolioBoardsBoardIdJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	boardId string
	body *InlineObject42
}

func (r ApiGETPortfolioBoardsBoardIdJsonRequest) Body(body InlineObject42) ApiGETPortfolioBoardsBoardIdJsonRequest {
	r.body = &body
	return r
}

func (r ApiGETPortfolioBoardsBoardIdJsonRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.GETPortfolioBoardsBoardIdJsonExecute(r)
}

/*
 * GETPortfolioBoardsBoardIdJson Get a specific Board
 * This call returns a specific board.

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param boardId
 * @return ApiGETPortfolioBoardsBoardIdJsonRequest
 */
func (a *PortfolioBoardsApiService) GETPortfolioBoardsBoardIdJson(ctx _context.Context, boardId string) ApiGETPortfolioBoardsBoardIdJsonRequest {
	return ApiGETPortfolioBoardsBoardIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		boardId: boardId,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *PortfolioBoardsApiService) GETPortfolioBoardsBoardIdJsonExecute(r ApiGETPortfolioBoardsBoardIdJsonRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.GETPortfolioBoardsBoardIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/boards/{boardId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"boardId"+"}", _neturl.PathEscape(parameterToString(r.boardId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETPortfolioBoardsJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
}


func (r ApiGETPortfolioBoardsJsonRequest) Execute() (InlineResponse20042, *_nethttp.Response, error) {
	return r.ApiService.GETPortfolioBoardsJsonExecute(r)
}

/*
 * GETPortfolioBoardsJson Boards in Portfolio View
 * This will return the list of boards in your portfolio view.

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETPortfolioBoardsJsonRequest
 */
func (a *PortfolioBoardsApiService) GETPortfolioBoardsJson(ctx _context.Context) ApiGETPortfolioBoardsJsonRequest {
	return ApiGETPortfolioBoardsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20042
 */
func (a *PortfolioBoardsApiService) GETPortfolioBoardsJsonExecute(r ApiGETPortfolioBoardsJsonRequest) (InlineResponse20042, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20042
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.GETPortfolioBoardsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/boards.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETPortfolioCardsCardIdJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	cardId string
}


func (r ApiGETPortfolioCardsCardIdJsonRequest) Execute() (InlineResponse20045, *_nethttp.Response, error) {
	return r.ApiService.GETPortfolioCardsCardIdJsonExecute(r)
}

/*
 * GETPortfolioCardsCardIdJson Get a specific Card inside a Column
 * Returns a specific card inside a column.

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cardId
 * @return ApiGETPortfolioCardsCardIdJsonRequest
 */
func (a *PortfolioBoardsApiService) GETPortfolioCardsCardIdJson(ctx _context.Context, cardId string) ApiGETPortfolioCardsCardIdJsonRequest {
	return ApiGETPortfolioCardsCardIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		cardId: cardId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20045
 */
func (a *PortfolioBoardsApiService) GETPortfolioCardsCardIdJsonExecute(r ApiGETPortfolioCardsCardIdJsonRequest) (InlineResponse20045, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20045
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.GETPortfolioCardsCardIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/cards/{cardId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"cardId"+"}", _neturl.PathEscape(parameterToString(r.cardId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETPortfolioColumnsColumnIdCardsJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	columnId string
}


func (r ApiGETPortfolioColumnsColumnIdCardsJsonRequest) Execute() (InlineResponse20046, *_nethttp.Response, error) {
	return r.ApiService.GETPortfolioColumnsColumnIdCardsJsonExecute(r)
}

/*
 * GETPortfolioColumnsColumnIdCardsJson Get Cards inside a Portfolio Column
 * This call will return the projects inside the given column id.

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param columnId
 * @return ApiGETPortfolioColumnsColumnIdCardsJsonRequest
 */
func (a *PortfolioBoardsApiService) GETPortfolioColumnsColumnIdCardsJson(ctx _context.Context, columnId string) ApiGETPortfolioColumnsColumnIdCardsJsonRequest {
	return ApiGETPortfolioColumnsColumnIdCardsJsonRequest{
		ApiService: a,
		ctx: ctx,
		columnId: columnId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20046
 */
func (a *PortfolioBoardsApiService) GETPortfolioColumnsColumnIdCardsJsonExecute(r ApiGETPortfolioColumnsColumnIdCardsJsonRequest) (InlineResponse20046, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20046
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.GETPortfolioColumnsColumnIdCardsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/columns/{columnId}/cards.json"
	localVarPath = strings.Replace(localVarPath, "{"+"columnId"+"}", _neturl.PathEscape(parameterToString(r.columnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTPortfolioBoardsBoardIdColumnsJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	boardId string
}


func (r ApiPOSTPortfolioBoardsBoardIdColumnsJsonRequest) Execute() (InlineResponse201, *_nethttp.Response, error) {
	return r.ApiService.POSTPortfolioBoardsBoardIdColumnsJsonExecute(r)
}

/*
 * POSTPortfolioBoardsBoardIdColumnsJson Add a column to the given Board
 * Adds a new column to a given board.

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param boardId
 * @return ApiPOSTPortfolioBoardsBoardIdColumnsJsonRequest
 */
func (a *PortfolioBoardsApiService) POSTPortfolioBoardsBoardIdColumnsJson(ctx _context.Context, boardId string) ApiPOSTPortfolioBoardsBoardIdColumnsJsonRequest {
	return ApiPOSTPortfolioBoardsBoardIdColumnsJsonRequest{
		ApiService: a,
		ctx: ctx,
		boardId: boardId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse201
 */
func (a *PortfolioBoardsApiService) POSTPortfolioBoardsBoardIdColumnsJsonExecute(r ApiPOSTPortfolioBoardsBoardIdColumnsJsonRequest) (InlineResponse201, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse201
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.POSTPortfolioBoardsBoardIdColumnsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/boards/{boardId}/columns.json"
	localVarPath = strings.Replace(localVarPath, "{"+"boardId"+"}", _neturl.PathEscape(parameterToString(r.boardId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTPortfolioBoardsJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	body *InlineObject41
}

func (r ApiPOSTPortfolioBoardsJsonRequest) Body(body InlineObject41) ApiPOSTPortfolioBoardsJsonRequest {
	r.body = &body
	return r
}

func (r ApiPOSTPortfolioBoardsJsonRequest) Execute() (InlineResponse20043, *_nethttp.Response, error) {
	return r.ApiService.POSTPortfolioBoardsJsonExecute(r)
}

/*
 * POSTPortfolioBoardsJson Create a new Board
 * Creates a new board.

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTPortfolioBoardsJsonRequest
 */
func (a *PortfolioBoardsApiService) POSTPortfolioBoardsJson(ctx _context.Context) ApiPOSTPortfolioBoardsJsonRequest {
	return ApiPOSTPortfolioBoardsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20043
 */
func (a *PortfolioBoardsApiService) POSTPortfolioBoardsJsonExecute(r ApiPOSTPortfolioBoardsJsonRequest) (InlineResponse20043, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20043
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.POSTPortfolioBoardsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/boards.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTPortfolioColumnsColumnIdCardsJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	columnId string
	body *InlineObject46
}

func (r ApiPOSTPortfolioColumnsColumnIdCardsJsonRequest) Body(body InlineObject46) ApiPOSTPortfolioColumnsColumnIdCardsJsonRequest {
	r.body = &body
	return r
}

func (r ApiPOSTPortfolioColumnsColumnIdCardsJsonRequest) Execute() (InlineResponse20047, *_nethttp.Response, error) {
	return r.ApiService.POSTPortfolioColumnsColumnIdCardsJsonExecute(r)
}

/*
 * POSTPortfolioColumnsColumnIdCardsJson Adding a Project to a Column from Backlog
 * This call will move the project from the back log to the column.  

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param columnId
 * @return ApiPOSTPortfolioColumnsColumnIdCardsJsonRequest
 */
func (a *PortfolioBoardsApiService) POSTPortfolioColumnsColumnIdCardsJson(ctx _context.Context, columnId string) ApiPOSTPortfolioColumnsColumnIdCardsJsonRequest {
	return ApiPOSTPortfolioColumnsColumnIdCardsJsonRequest{
		ApiService: a,
		ctx: ctx,
		columnId: columnId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20047
 */
func (a *PortfolioBoardsApiService) POSTPortfolioColumnsColumnIdCardsJsonExecute(r ApiPOSTPortfolioColumnsColumnIdCardsJsonRequest) (InlineResponse20047, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20047
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.POSTPortfolioColumnsColumnIdCardsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/columns/{columnId}/cards.json"
	localVarPath = strings.Replace(localVarPath, "{"+"columnId"+"}", _neturl.PathEscape(parameterToString(r.columnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTPortfolioBoardsBoardIdJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	boardId string
	body *InlineObject43
}

func (r ApiPUTPortfolioBoardsBoardIdJsonRequest) Body(body InlineObject43) ApiPUTPortfolioBoardsBoardIdJsonRequest {
	r.body = &body
	return r
}

func (r ApiPUTPortfolioBoardsBoardIdJsonRequest) Execute() (InlineResponse2001, *_nethttp.Response, error) {
	return r.ApiService.PUTPortfolioBoardsBoardIdJsonExecute(r)
}

/*
 * PUTPortfolioBoardsBoardIdJson Edit a Board
 * Updates a given board.

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param boardId
 * @return ApiPUTPortfolioBoardsBoardIdJsonRequest
 */
func (a *PortfolioBoardsApiService) PUTPortfolioBoardsBoardIdJson(ctx _context.Context, boardId string) ApiPUTPortfolioBoardsBoardIdJsonRequest {
	return ApiPUTPortfolioBoardsBoardIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		boardId: boardId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2001
 */
func (a *PortfolioBoardsApiService) PUTPortfolioBoardsBoardIdJsonExecute(r ApiPUTPortfolioBoardsBoardIdJsonRequest) (InlineResponse2001, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2001
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.PUTPortfolioBoardsBoardIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/boards/{boardId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"boardId"+"}", _neturl.PathEscape(parameterToString(r.boardId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTPortfolioCardsCardIdMoveJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	cardId string
	body *InlineObject44
}

func (r ApiPUTPortfolioCardsCardIdMoveJsonRequest) Body(body InlineObject44) ApiPUTPortfolioCardsCardIdMoveJsonRequest {
	r.body = &body
	return r
}

func (r ApiPUTPortfolioCardsCardIdMoveJsonRequest) Execute() (InlineResponse2001, *_nethttp.Response, error) {
	return r.ApiService.PUTPortfolioCardsCardIdMoveJsonExecute(r)
}

/*
 * PUTPortfolioCardsCardIdMoveJson Move Projects on a Portfolio Board
 * Move a project from one column to another. In order to do this you need to do a PUT Call to the endpoint. You'll need to pass in the column you want to move the card to and the column it's coming from.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cardId
 * @return ApiPUTPortfolioCardsCardIdMoveJsonRequest
 */
func (a *PortfolioBoardsApiService) PUTPortfolioCardsCardIdMoveJson(ctx _context.Context, cardId string) ApiPUTPortfolioCardsCardIdMoveJsonRequest {
	return ApiPUTPortfolioCardsCardIdMoveJsonRequest{
		ApiService: a,
		ctx: ctx,
		cardId: cardId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2001
 */
func (a *PortfolioBoardsApiService) PUTPortfolioCardsCardIdMoveJsonExecute(r ApiPUTPortfolioCardsCardIdMoveJsonRequest) (InlineResponse2001, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2001
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.PUTPortfolioCardsCardIdMoveJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/cards/{cardId}/move.json"
	localVarPath = strings.Replace(localVarPath, "{"+"cardId"+"}", _neturl.PathEscape(parameterToString(r.cardId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTPortfolioColumnsColumnIdJsonRequest struct {
	ctx _context.Context
	ApiService *PortfolioBoardsApiService
	columnId string
	body *InlineObject45
}

func (r ApiPUTPortfolioColumnsColumnIdJsonRequest) Body(body InlineObject45) ApiPUTPortfolioColumnsColumnIdJsonRequest {
	r.body = &body
	return r
}

func (r ApiPUTPortfolioColumnsColumnIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PUTPortfolioColumnsColumnIdJsonExecute(r)
}

/*
 * PUTPortfolioColumnsColumnIdJson Edit a Portfolio Column
 * Updates a given column based on the id. 

---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param columnId
 * @return ApiPUTPortfolioColumnsColumnIdJsonRequest
 */
func (a *PortfolioBoardsApiService) PUTPortfolioColumnsColumnIdJson(ctx _context.Context, columnId string) ApiPUTPortfolioColumnsColumnIdJsonRequest {
	return ApiPUTPortfolioColumnsColumnIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		columnId: columnId,
	}
}

/*
 * Execute executes the request
 */
func (a *PortfolioBoardsApiService) PUTPortfolioColumnsColumnIdJsonExecute(r ApiPUTPortfolioColumnsColumnIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioBoardsApiService.PUTPortfolioColumnsColumnIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/portfolio/columns/{columnId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"columnId"+"}", _neturl.PathEscape(parameterToString(r.columnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
