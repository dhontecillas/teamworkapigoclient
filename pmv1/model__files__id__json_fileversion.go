/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// FilesIdJsonFileversion struct for FilesIdJsonFileversion
type FilesIdJsonFileversion struct {
	Description *string `json:"description,omitempty"`
	PendingFileRef *string `json:"pendingFileRef,omitempty"`
}

// NewFilesIdJsonFileversion instantiates a new FilesIdJsonFileversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesIdJsonFileversion() *FilesIdJsonFileversion {
	this := FilesIdJsonFileversion{}
	return &this
}

// NewFilesIdJsonFileversionWithDefaults instantiates a new FilesIdJsonFileversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesIdJsonFileversionWithDefaults() *FilesIdJsonFileversion {
	this := FilesIdJsonFileversion{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FilesIdJsonFileversion) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesIdJsonFileversion) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FilesIdJsonFileversion) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FilesIdJsonFileversion) SetDescription(v string) {
	o.Description = &v
}

// GetPendingFileRef returns the PendingFileRef field value if set, zero value otherwise.
func (o *FilesIdJsonFileversion) GetPendingFileRef() string {
	if o == nil || o.PendingFileRef == nil {
		var ret string
		return ret
	}
	return *o.PendingFileRef
}

// GetPendingFileRefOk returns a tuple with the PendingFileRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesIdJsonFileversion) GetPendingFileRefOk() (*string, bool) {
	if o == nil || o.PendingFileRef == nil {
		return nil, false
	}
	return o.PendingFileRef, true
}

// HasPendingFileRef returns a boolean if a field has been set.
func (o *FilesIdJsonFileversion) HasPendingFileRef() bool {
	if o != nil && o.PendingFileRef != nil {
		return true
	}

	return false
}

// SetPendingFileRef gets a reference to the given string and assigns it to the PendingFileRef field.
func (o *FilesIdJsonFileversion) SetPendingFileRef(v string) {
	o.PendingFileRef = &v
}

func (o FilesIdJsonFileversion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.PendingFileRef != nil {
		toSerialize["pendingFileRef"] = o.PendingFileRef
	}
	return json.Marshal(toSerialize)
}

type NullableFilesIdJsonFileversion struct {
	value *FilesIdJsonFileversion
	isSet bool
}

func (v NullableFilesIdJsonFileversion) Get() *FilesIdJsonFileversion {
	return v.value
}

func (v *NullableFilesIdJsonFileversion) Set(val *FilesIdJsonFileversion) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesIdJsonFileversion) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesIdJsonFileversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesIdJsonFileversion(val *FilesIdJsonFileversion) *NullableFilesIdJsonFileversion {
	return &NullableFilesIdJsonFileversion{value: val, isSet: true}
}

func (v NullableFilesIdJsonFileversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesIdJsonFileversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


