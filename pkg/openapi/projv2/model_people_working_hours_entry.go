/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv2

import (
	"encoding/json"
)

// PeopleWorkingHoursEntry struct for PeopleWorkingHoursEntry
type PeopleWorkingHoursEntry struct {
	EndTime *string `json:"endTime,omitempty"`
	StartTime *string `json:"startTime,omitempty"`
	TaskHours *float32 `json:"taskHours,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
}

// NewPeopleWorkingHoursEntry instantiates a new PeopleWorkingHoursEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleWorkingHoursEntry() *PeopleWorkingHoursEntry {
	this := PeopleWorkingHoursEntry{}
	return &this
}

// NewPeopleWorkingHoursEntryWithDefaults instantiates a new PeopleWorkingHoursEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleWorkingHoursEntryWithDefaults() *PeopleWorkingHoursEntry {
	this := PeopleWorkingHoursEntry{}
	return &this
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *PeopleWorkingHoursEntry) GetEndTime() string {
	if o == nil || o.EndTime == nil {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHoursEntry) GetEndTimeOk() (*string, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *PeopleWorkingHoursEntry) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *PeopleWorkingHoursEntry) SetEndTime(v string) {
	o.EndTime = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *PeopleWorkingHoursEntry) GetStartTime() string {
	if o == nil || o.StartTime == nil {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHoursEntry) GetStartTimeOk() (*string, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *PeopleWorkingHoursEntry) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *PeopleWorkingHoursEntry) SetStartTime(v string) {
	o.StartTime = &v
}

// GetTaskHours returns the TaskHours field value if set, zero value otherwise.
func (o *PeopleWorkingHoursEntry) GetTaskHours() float32 {
	if o == nil || o.TaskHours == nil {
		var ret float32
		return ret
	}
	return *o.TaskHours
}

// GetTaskHoursOk returns a tuple with the TaskHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHoursEntry) GetTaskHoursOk() (*float32, bool) {
	if o == nil || o.TaskHours == nil {
		return nil, false
	}
	return o.TaskHours, true
}

// HasTaskHours returns a boolean if a field has been set.
func (o *PeopleWorkingHoursEntry) HasTaskHours() bool {
	if o != nil && o.TaskHours != nil {
		return true
	}

	return false
}

// SetTaskHours gets a reference to the given float32 and assigns it to the TaskHours field.
func (o *PeopleWorkingHoursEntry) SetTaskHours(v float32) {
	o.TaskHours = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *PeopleWorkingHoursEntry) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleWorkingHoursEntry) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *PeopleWorkingHoursEntry) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *PeopleWorkingHoursEntry) SetTimezone(v string) {
	o.Timezone = &v
}

func (o PeopleWorkingHoursEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndTime != nil {
		toSerialize["endTime"] = o.EndTime
	}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	if o.TaskHours != nil {
		toSerialize["taskHours"] = o.TaskHours
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	return json.Marshal(toSerialize)
}

type NullablePeopleWorkingHoursEntry struct {
	value *PeopleWorkingHoursEntry
	isSet bool
}

func (v NullablePeopleWorkingHoursEntry) Get() *PeopleWorkingHoursEntry {
	return v.value
}

func (v *NullablePeopleWorkingHoursEntry) Set(val *PeopleWorkingHoursEntry) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleWorkingHoursEntry) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleWorkingHoursEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleWorkingHoursEntry(val *PeopleWorkingHoursEntry) *NullablePeopleWorkingHoursEntry {
	return &NullablePeopleWorkingHoursEntry{value: val, isSet: true}
}

func (v NullablePeopleWorkingHoursEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleWorkingHoursEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


