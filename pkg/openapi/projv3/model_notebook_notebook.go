/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// NotebookNotebook Notebook contains all the information returned from a notebook.
type NotebookNotebook struct {
	CategoryId *int32 `json:"categoryId,omitempty"`
	Contents *string `json:"contents,omitempty"`
	Description *string `json:"description,omitempty"`
	IsPrivate *bool `json:"isPrivate,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	Name *string `json:"name,omitempty"`
	NewVersion *bool `json:"newVersion,omitempty"`
	Notify *PayloadNotify `json:"notify,omitempty"`
	NotifyCurrentUser *bool `json:"notifyCurrentUser,omitempty"`
	Privacy *PayloadPrivacy `json:"privacy,omitempty"`
	SecureContent *bool `json:"secureContent,omitempty"`
	SendDiff *bool `json:"sendDiff,omitempty"`
	TagIds *[]int32 `json:"tagIds,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewNotebookNotebook instantiates a new NotebookNotebook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotebookNotebook() *NotebookNotebook {
	this := NotebookNotebook{}
	return &this
}

// NewNotebookNotebookWithDefaults instantiates a new NotebookNotebook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotebookNotebookWithDefaults() *NotebookNotebook {
	this := NotebookNotebook{}
	return &this
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *NotebookNotebook) GetCategoryId() int32 {
	if o == nil || o.CategoryId == nil {
		var ret int32
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetCategoryIdOk() (*int32, bool) {
	if o == nil || o.CategoryId == nil {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *NotebookNotebook) HasCategoryId() bool {
	if o != nil && o.CategoryId != nil {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given int32 and assigns it to the CategoryId field.
func (o *NotebookNotebook) SetCategoryId(v int32) {
	o.CategoryId = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *NotebookNotebook) GetContents() string {
	if o == nil || o.Contents == nil {
		var ret string
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetContentsOk() (*string, bool) {
	if o == nil || o.Contents == nil {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *NotebookNotebook) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// SetContents gets a reference to the given string and assigns it to the Contents field.
func (o *NotebookNotebook) SetContents(v string) {
	o.Contents = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NotebookNotebook) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NotebookNotebook) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NotebookNotebook) SetDescription(v string) {
	o.Description = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *NotebookNotebook) GetIsPrivate() bool {
	if o == nil || o.IsPrivate == nil {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetIsPrivateOk() (*bool, bool) {
	if o == nil || o.IsPrivate == nil {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *NotebookNotebook) HasIsPrivate() bool {
	if o != nil && o.IsPrivate != nil {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *NotebookNotebook) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *NotebookNotebook) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *NotebookNotebook) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *NotebookNotebook) SetLocked(v bool) {
	o.Locked = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NotebookNotebook) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NotebookNotebook) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NotebookNotebook) SetName(v string) {
	o.Name = &v
}

// GetNewVersion returns the NewVersion field value if set, zero value otherwise.
func (o *NotebookNotebook) GetNewVersion() bool {
	if o == nil || o.NewVersion == nil {
		var ret bool
		return ret
	}
	return *o.NewVersion
}

// GetNewVersionOk returns a tuple with the NewVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetNewVersionOk() (*bool, bool) {
	if o == nil || o.NewVersion == nil {
		return nil, false
	}
	return o.NewVersion, true
}

// HasNewVersion returns a boolean if a field has been set.
func (o *NotebookNotebook) HasNewVersion() bool {
	if o != nil && o.NewVersion != nil {
		return true
	}

	return false
}

// SetNewVersion gets a reference to the given bool and assigns it to the NewVersion field.
func (o *NotebookNotebook) SetNewVersion(v bool) {
	o.NewVersion = &v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *NotebookNotebook) GetNotify() PayloadNotify {
	if o == nil || o.Notify == nil {
		var ret PayloadNotify
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetNotifyOk() (*PayloadNotify, bool) {
	if o == nil || o.Notify == nil {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *NotebookNotebook) HasNotify() bool {
	if o != nil && o.Notify != nil {
		return true
	}

	return false
}

// SetNotify gets a reference to the given PayloadNotify and assigns it to the Notify field.
func (o *NotebookNotebook) SetNotify(v PayloadNotify) {
	o.Notify = &v
}

// GetNotifyCurrentUser returns the NotifyCurrentUser field value if set, zero value otherwise.
func (o *NotebookNotebook) GetNotifyCurrentUser() bool {
	if o == nil || o.NotifyCurrentUser == nil {
		var ret bool
		return ret
	}
	return *o.NotifyCurrentUser
}

// GetNotifyCurrentUserOk returns a tuple with the NotifyCurrentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetNotifyCurrentUserOk() (*bool, bool) {
	if o == nil || o.NotifyCurrentUser == nil {
		return nil, false
	}
	return o.NotifyCurrentUser, true
}

// HasNotifyCurrentUser returns a boolean if a field has been set.
func (o *NotebookNotebook) HasNotifyCurrentUser() bool {
	if o != nil && o.NotifyCurrentUser != nil {
		return true
	}

	return false
}

// SetNotifyCurrentUser gets a reference to the given bool and assigns it to the NotifyCurrentUser field.
func (o *NotebookNotebook) SetNotifyCurrentUser(v bool) {
	o.NotifyCurrentUser = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *NotebookNotebook) GetPrivacy() PayloadPrivacy {
	if o == nil || o.Privacy == nil {
		var ret PayloadPrivacy
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetPrivacyOk() (*PayloadPrivacy, bool) {
	if o == nil || o.Privacy == nil {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *NotebookNotebook) HasPrivacy() bool {
	if o != nil && o.Privacy != nil {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given PayloadPrivacy and assigns it to the Privacy field.
func (o *NotebookNotebook) SetPrivacy(v PayloadPrivacy) {
	o.Privacy = &v
}

// GetSecureContent returns the SecureContent field value if set, zero value otherwise.
func (o *NotebookNotebook) GetSecureContent() bool {
	if o == nil || o.SecureContent == nil {
		var ret bool
		return ret
	}
	return *o.SecureContent
}

// GetSecureContentOk returns a tuple with the SecureContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetSecureContentOk() (*bool, bool) {
	if o == nil || o.SecureContent == nil {
		return nil, false
	}
	return o.SecureContent, true
}

// HasSecureContent returns a boolean if a field has been set.
func (o *NotebookNotebook) HasSecureContent() bool {
	if o != nil && o.SecureContent != nil {
		return true
	}

	return false
}

// SetSecureContent gets a reference to the given bool and assigns it to the SecureContent field.
func (o *NotebookNotebook) SetSecureContent(v bool) {
	o.SecureContent = &v
}

// GetSendDiff returns the SendDiff field value if set, zero value otherwise.
func (o *NotebookNotebook) GetSendDiff() bool {
	if o == nil || o.SendDiff == nil {
		var ret bool
		return ret
	}
	return *o.SendDiff
}

// GetSendDiffOk returns a tuple with the SendDiff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetSendDiffOk() (*bool, bool) {
	if o == nil || o.SendDiff == nil {
		return nil, false
	}
	return o.SendDiff, true
}

// HasSendDiff returns a boolean if a field has been set.
func (o *NotebookNotebook) HasSendDiff() bool {
	if o != nil && o.SendDiff != nil {
		return true
	}

	return false
}

// SetSendDiff gets a reference to the given bool and assigns it to the SendDiff field.
func (o *NotebookNotebook) SetSendDiff(v bool) {
	o.SendDiff = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *NotebookNotebook) GetTagIds() []int32 {
	if o == nil || o.TagIds == nil {
		var ret []int32
		return ret
	}
	return *o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetTagIdsOk() (*[]int32, bool) {
	if o == nil || o.TagIds == nil {
		return nil, false
	}
	return o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *NotebookNotebook) HasTagIds() bool {
	if o != nil && o.TagIds != nil {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []int32 and assigns it to the TagIds field.
func (o *NotebookNotebook) SetTagIds(v []int32) {
	o.TagIds = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NotebookNotebook) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebook) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NotebookNotebook) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NotebookNotebook) SetType(v string) {
	o.Type = &v
}

func (o NotebookNotebook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CategoryId != nil {
		toSerialize["categoryId"] = o.CategoryId
	}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.IsPrivate != nil {
		toSerialize["isPrivate"] = o.IsPrivate
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NewVersion != nil {
		toSerialize["newVersion"] = o.NewVersion
	}
	if o.Notify != nil {
		toSerialize["notify"] = o.Notify
	}
	if o.NotifyCurrentUser != nil {
		toSerialize["notifyCurrentUser"] = o.NotifyCurrentUser
	}
	if o.Privacy != nil {
		toSerialize["privacy"] = o.Privacy
	}
	if o.SecureContent != nil {
		toSerialize["secureContent"] = o.SecureContent
	}
	if o.SendDiff != nil {
		toSerialize["sendDiff"] = o.SendDiff
	}
	if o.TagIds != nil {
		toSerialize["tagIds"] = o.TagIds
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableNotebookNotebook struct {
	value *NotebookNotebook
	isSet bool
}

func (v NullableNotebookNotebook) Get() *NotebookNotebook {
	return v.value
}

func (v *NullableNotebookNotebook) Set(val *NotebookNotebook) {
	v.value = val
	v.isSet = true
}

func (v NullableNotebookNotebook) IsSet() bool {
	return v.isSet
}

func (v *NullableNotebookNotebook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotebookNotebook(val *NotebookNotebook) *NullableNotebookNotebook {
	return &NullableNotebookNotebook{value: val, isSet: true}
}

func (v NullableNotebookNotebook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotebookNotebook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


