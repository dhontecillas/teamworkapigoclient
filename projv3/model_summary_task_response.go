/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// SummaryTaskResponse TaskResponse contains counters for tasks.
type SummaryTaskResponse struct {
	Active *int32 `json:"active,omitempty"`
	Complete *int32 `json:"complete,omitempty"`
	Late *int32 `json:"late,omitempty"`
	Nodate *int32 `json:"nodate,omitempty"`
	Started *int32 `json:"started,omitempty"`
	Today *int32 `json:"today,omitempty"`
	Upcoming *int32 `json:"upcoming,omitempty"`
}

// NewSummaryTaskResponse instantiates a new SummaryTaskResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummaryTaskResponse() *SummaryTaskResponse {
	this := SummaryTaskResponse{}
	return &this
}

// NewSummaryTaskResponseWithDefaults instantiates a new SummaryTaskResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryTaskResponseWithDefaults() *SummaryTaskResponse {
	this := SummaryTaskResponse{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SummaryTaskResponse) GetActive() int32 {
	if o == nil || o.Active == nil {
		var ret int32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTaskResponse) GetActiveOk() (*int32, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SummaryTaskResponse) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given int32 and assigns it to the Active field.
func (o *SummaryTaskResponse) SetActive(v int32) {
	o.Active = &v
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *SummaryTaskResponse) GetComplete() int32 {
	if o == nil || o.Complete == nil {
		var ret int32
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTaskResponse) GetCompleteOk() (*int32, bool) {
	if o == nil || o.Complete == nil {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *SummaryTaskResponse) HasComplete() bool {
	if o != nil && o.Complete != nil {
		return true
	}

	return false
}

// SetComplete gets a reference to the given int32 and assigns it to the Complete field.
func (o *SummaryTaskResponse) SetComplete(v int32) {
	o.Complete = &v
}

// GetLate returns the Late field value if set, zero value otherwise.
func (o *SummaryTaskResponse) GetLate() int32 {
	if o == nil || o.Late == nil {
		var ret int32
		return ret
	}
	return *o.Late
}

// GetLateOk returns a tuple with the Late field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTaskResponse) GetLateOk() (*int32, bool) {
	if o == nil || o.Late == nil {
		return nil, false
	}
	return o.Late, true
}

// HasLate returns a boolean if a field has been set.
func (o *SummaryTaskResponse) HasLate() bool {
	if o != nil && o.Late != nil {
		return true
	}

	return false
}

// SetLate gets a reference to the given int32 and assigns it to the Late field.
func (o *SummaryTaskResponse) SetLate(v int32) {
	o.Late = &v
}

// GetNodate returns the Nodate field value if set, zero value otherwise.
func (o *SummaryTaskResponse) GetNodate() int32 {
	if o == nil || o.Nodate == nil {
		var ret int32
		return ret
	}
	return *o.Nodate
}

// GetNodateOk returns a tuple with the Nodate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTaskResponse) GetNodateOk() (*int32, bool) {
	if o == nil || o.Nodate == nil {
		return nil, false
	}
	return o.Nodate, true
}

// HasNodate returns a boolean if a field has been set.
func (o *SummaryTaskResponse) HasNodate() bool {
	if o != nil && o.Nodate != nil {
		return true
	}

	return false
}

// SetNodate gets a reference to the given int32 and assigns it to the Nodate field.
func (o *SummaryTaskResponse) SetNodate(v int32) {
	o.Nodate = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *SummaryTaskResponse) GetStarted() int32 {
	if o == nil || o.Started == nil {
		var ret int32
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTaskResponse) GetStartedOk() (*int32, bool) {
	if o == nil || o.Started == nil {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *SummaryTaskResponse) HasStarted() bool {
	if o != nil && o.Started != nil {
		return true
	}

	return false
}

// SetStarted gets a reference to the given int32 and assigns it to the Started field.
func (o *SummaryTaskResponse) SetStarted(v int32) {
	o.Started = &v
}

// GetToday returns the Today field value if set, zero value otherwise.
func (o *SummaryTaskResponse) GetToday() int32 {
	if o == nil || o.Today == nil {
		var ret int32
		return ret
	}
	return *o.Today
}

// GetTodayOk returns a tuple with the Today field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTaskResponse) GetTodayOk() (*int32, bool) {
	if o == nil || o.Today == nil {
		return nil, false
	}
	return o.Today, true
}

// HasToday returns a boolean if a field has been set.
func (o *SummaryTaskResponse) HasToday() bool {
	if o != nil && o.Today != nil {
		return true
	}

	return false
}

// SetToday gets a reference to the given int32 and assigns it to the Today field.
func (o *SummaryTaskResponse) SetToday(v int32) {
	o.Today = &v
}

// GetUpcoming returns the Upcoming field value if set, zero value otherwise.
func (o *SummaryTaskResponse) GetUpcoming() int32 {
	if o == nil || o.Upcoming == nil {
		var ret int32
		return ret
	}
	return *o.Upcoming
}

// GetUpcomingOk returns a tuple with the Upcoming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTaskResponse) GetUpcomingOk() (*int32, bool) {
	if o == nil || o.Upcoming == nil {
		return nil, false
	}
	return o.Upcoming, true
}

// HasUpcoming returns a boolean if a field has been set.
func (o *SummaryTaskResponse) HasUpcoming() bool {
	if o != nil && o.Upcoming != nil {
		return true
	}

	return false
}

// SetUpcoming gets a reference to the given int32 and assigns it to the Upcoming field.
func (o *SummaryTaskResponse) SetUpcoming(v int32) {
	o.Upcoming = &v
}

func (o SummaryTaskResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Complete != nil {
		toSerialize["complete"] = o.Complete
	}
	if o.Late != nil {
		toSerialize["late"] = o.Late
	}
	if o.Nodate != nil {
		toSerialize["nodate"] = o.Nodate
	}
	if o.Started != nil {
		toSerialize["started"] = o.Started
	}
	if o.Today != nil {
		toSerialize["today"] = o.Today
	}
	if o.Upcoming != nil {
		toSerialize["upcoming"] = o.Upcoming
	}
	return json.Marshal(toSerialize)
}

type NullableSummaryTaskResponse struct {
	value *SummaryTaskResponse
	isSet bool
}

func (v NullableSummaryTaskResponse) Get() *SummaryTaskResponse {
	return v.value
}

func (v *NullableSummaryTaskResponse) Set(val *SummaryTaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryTaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryTaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryTaskResponse(val *SummaryTaskResponse) *NullableSummaryTaskResponse {
	return &NullableSummaryTaskResponse{value: val, isSet: true}
}

func (v NullableSummaryTaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryTaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


