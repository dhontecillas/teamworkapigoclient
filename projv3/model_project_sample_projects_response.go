/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ProjectSampleProjectsResponse SampleProjectsResponse contains information about a group of sample projects.
type ProjectSampleProjectsResponse struct {
	Included *ProjectSampleProjectsResponseIncluded `json:"included,omitempty"`
	Meta *ViewMeta `json:"meta,omitempty"`
	Projects *[]ViewSampleProject `json:"projects,omitempty"`
}

// NewProjectSampleProjectsResponse instantiates a new ProjectSampleProjectsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSampleProjectsResponse() *ProjectSampleProjectsResponse {
	this := ProjectSampleProjectsResponse{}
	return &this
}

// NewProjectSampleProjectsResponseWithDefaults instantiates a new ProjectSampleProjectsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSampleProjectsResponseWithDefaults() *ProjectSampleProjectsResponse {
	this := ProjectSampleProjectsResponse{}
	return &this
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *ProjectSampleProjectsResponse) GetIncluded() ProjectSampleProjectsResponseIncluded {
	if o == nil || o.Included == nil {
		var ret ProjectSampleProjectsResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSampleProjectsResponse) GetIncludedOk() (*ProjectSampleProjectsResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *ProjectSampleProjectsResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given ProjectSampleProjectsResponseIncluded and assigns it to the Included field.
func (o *ProjectSampleProjectsResponse) SetIncluded(v ProjectSampleProjectsResponseIncluded) {
	o.Included = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ProjectSampleProjectsResponse) GetMeta() ViewMeta {
	if o == nil || o.Meta == nil {
		var ret ViewMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSampleProjectsResponse) GetMetaOk() (*ViewMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ProjectSampleProjectsResponse) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ViewMeta and assigns it to the Meta field.
func (o *ProjectSampleProjectsResponse) SetMeta(v ViewMeta) {
	o.Meta = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *ProjectSampleProjectsResponse) GetProjects() []ViewSampleProject {
	if o == nil || o.Projects == nil {
		var ret []ViewSampleProject
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSampleProjectsResponse) GetProjectsOk() (*[]ViewSampleProject, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *ProjectSampleProjectsResponse) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []ViewSampleProject and assigns it to the Projects field.
func (o *ProjectSampleProjectsResponse) SetProjects(v []ViewSampleProject) {
	o.Projects = &v
}

func (o ProjectSampleProjectsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	return json.Marshal(toSerialize)
}

type NullableProjectSampleProjectsResponse struct {
	value *ProjectSampleProjectsResponse
	isSet bool
}

func (v NullableProjectSampleProjectsResponse) Get() *ProjectSampleProjectsResponse {
	return v.value
}

func (v *NullableProjectSampleProjectsResponse) Set(val *ProjectSampleProjectsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSampleProjectsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSampleProjectsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSampleProjectsResponse(val *ProjectSampleProjectsResponse) *NullableProjectSampleProjectsResponse {
	return &NullableProjectSampleProjectsResponse{value: val, isSet: true}
}

func (v NullableProjectSampleProjectsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSampleProjectsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


