/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineObject110 struct for InlineObject110
type InlineObject110 struct {
	Tags *ResourceIdTagsJsonTags `json:"tags,omitempty"`
}

// NewInlineObject110 instantiates a new InlineObject110 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject110() *InlineObject110 {
	this := InlineObject110{}
	return &this
}

// NewInlineObject110WithDefaults instantiates a new InlineObject110 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject110WithDefaults() *InlineObject110 {
	this := InlineObject110{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *InlineObject110) GetTags() ResourceIdTagsJsonTags {
	if o == nil || o.Tags == nil {
		var ret ResourceIdTagsJsonTags
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject110) GetTagsOk() (*ResourceIdTagsJsonTags, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *InlineObject110) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given ResourceIdTagsJsonTags and assigns it to the Tags field.
func (o *InlineObject110) SetTags(v ResourceIdTagsJsonTags) {
	o.Tags = &v
}

func (o InlineObject110) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject110 struct {
	value *InlineObject110
	isSet bool
}

func (v NullableInlineObject110) Get() *InlineObject110 {
	return v.value
}

func (v *NullableInlineObject110) Set(val *InlineObject110) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject110) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject110) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject110(val *InlineObject110) *NullableInlineObject110 {
	return &NullableInlineObject110{value: val, isSet: true}
}

func (v NullableInlineObject110) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject110) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


