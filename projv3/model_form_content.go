/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FormContent Content contains information of a form content to be created or updated.
type FormContent struct {
	Banner *FormBanner `json:"banner,omitempty"`
	Definition *string `json:"definition,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewFormContent instantiates a new FormContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormContent() *FormContent {
	this := FormContent{}
	return &this
}

// NewFormContentWithDefaults instantiates a new FormContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormContentWithDefaults() *FormContent {
	this := FormContent{}
	return &this
}

// GetBanner returns the Banner field value if set, zero value otherwise.
func (o *FormContent) GetBanner() FormBanner {
	if o == nil || o.Banner == nil {
		var ret FormBanner
		return ret
	}
	return *o.Banner
}

// GetBannerOk returns a tuple with the Banner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormContent) GetBannerOk() (*FormBanner, bool) {
	if o == nil || o.Banner == nil {
		return nil, false
	}
	return o.Banner, true
}

// HasBanner returns a boolean if a field has been set.
func (o *FormContent) HasBanner() bool {
	if o != nil && o.Banner != nil {
		return true
	}

	return false
}

// SetBanner gets a reference to the given FormBanner and assigns it to the Banner field.
func (o *FormContent) SetBanner(v FormBanner) {
	o.Banner = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *FormContent) GetDefinition() string {
	if o == nil || o.Definition == nil {
		var ret string
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormContent) GetDefinitionOk() (*string, bool) {
	if o == nil || o.Definition == nil {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *FormContent) HasDefinition() bool {
	if o != nil && o.Definition != nil {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given string and assigns it to the Definition field.
func (o *FormContent) SetDefinition(v string) {
	o.Definition = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FormContent) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormContent) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FormContent) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FormContent) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FormContent) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormContent) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FormContent) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FormContent) SetName(v string) {
	o.Name = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FormContent) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormContent) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FormContent) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *FormContent) SetState(v string) {
	o.State = &v
}

func (o FormContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Banner != nil {
		toSerialize["banner"] = o.Banner
	}
	if o.Definition != nil {
		toSerialize["definition"] = o.Definition
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableFormContent struct {
	value *FormContent
	isSet bool
}

func (v NullableFormContent) Get() *FormContent {
	return v.value
}

func (v *NullableFormContent) Set(val *FormContent) {
	v.value = val
	v.isSet = true
}

func (v NullableFormContent) IsSet() bool {
	return v.isSet
}

func (v *NullableFormContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormContent(val *FormContent) *NullableFormContent {
	return &NullableFormContent{value: val, isSet: true}
}

func (v NullableFormContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


