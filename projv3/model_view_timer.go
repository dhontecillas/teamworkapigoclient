/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewTimer Timer contains all the information returned from a timer.
type ViewTimer struct {
	Billable *bool `json:"billable,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Description *string `json:"description,omitempty"`
	Duration *int32 `json:"duration,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Intervals *[]ViewTimerInterval `json:"intervals,omitempty"`
	LastStartedAt *string `json:"lastStartedAt,omitempty"`
	Project *ViewRelationship `json:"project,omitempty"`
	ProjectId *int32 `json:"projectId,omitempty"`
	Running *bool `json:"running,omitempty"`
	ServerTime *string `json:"serverTime,omitempty"`
	Task *ViewRelationship `json:"task,omitempty"`
	TaskId *int32 `json:"taskId,omitempty"`
	TimeLogId *int32 `json:"timeLogId,omitempty"`
	Timelog *ViewRelationship `json:"timelog,omitempty"`
	TimerLastIntervalEnd *string `json:"timerLastIntervalEnd,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	User *ViewRelationship `json:"user,omitempty"`
	UserId *int32 `json:"userId,omitempty"`
}

// NewViewTimer instantiates a new ViewTimer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewTimer() *ViewTimer {
	this := ViewTimer{}
	return &this
}

// NewViewTimerWithDefaults instantiates a new ViewTimer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewTimerWithDefaults() *ViewTimer {
	this := ViewTimer{}
	return &this
}

// GetBillable returns the Billable field value if set, zero value otherwise.
func (o *ViewTimer) GetBillable() bool {
	if o == nil || o.Billable == nil {
		var ret bool
		return ret
	}
	return *o.Billable
}

// GetBillableOk returns a tuple with the Billable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetBillableOk() (*bool, bool) {
	if o == nil || o.Billable == nil {
		return nil, false
	}
	return o.Billable, true
}

// HasBillable returns a boolean if a field has been set.
func (o *ViewTimer) HasBillable() bool {
	if o != nil && o.Billable != nil {
		return true
	}

	return false
}

// SetBillable gets a reference to the given bool and assigns it to the Billable field.
func (o *ViewTimer) SetBillable(v bool) {
	o.Billable = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ViewTimer) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ViewTimer) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ViewTimer) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *ViewTimer) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *ViewTimer) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *ViewTimer) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ViewTimer) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ViewTimer) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *ViewTimer) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ViewTimer) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ViewTimer) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ViewTimer) SetDescription(v string) {
	o.Description = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ViewTimer) GetDuration() int32 {
	if o == nil || o.Duration == nil {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetDurationOk() (*int32, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ViewTimer) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *ViewTimer) SetDuration(v int32) {
	o.Duration = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewTimer) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewTimer) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewTimer) SetId(v int32) {
	o.Id = &v
}

// GetIntervals returns the Intervals field value if set, zero value otherwise.
func (o *ViewTimer) GetIntervals() []ViewTimerInterval {
	if o == nil || o.Intervals == nil {
		var ret []ViewTimerInterval
		return ret
	}
	return *o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetIntervalsOk() (*[]ViewTimerInterval, bool) {
	if o == nil || o.Intervals == nil {
		return nil, false
	}
	return o.Intervals, true
}

// HasIntervals returns a boolean if a field has been set.
func (o *ViewTimer) HasIntervals() bool {
	if o != nil && o.Intervals != nil {
		return true
	}

	return false
}

// SetIntervals gets a reference to the given []ViewTimerInterval and assigns it to the Intervals field.
func (o *ViewTimer) SetIntervals(v []ViewTimerInterval) {
	o.Intervals = &v
}

// GetLastStartedAt returns the LastStartedAt field value if set, zero value otherwise.
func (o *ViewTimer) GetLastStartedAt() string {
	if o == nil || o.LastStartedAt == nil {
		var ret string
		return ret
	}
	return *o.LastStartedAt
}

// GetLastStartedAtOk returns a tuple with the LastStartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetLastStartedAtOk() (*string, bool) {
	if o == nil || o.LastStartedAt == nil {
		return nil, false
	}
	return o.LastStartedAt, true
}

// HasLastStartedAt returns a boolean if a field has been set.
func (o *ViewTimer) HasLastStartedAt() bool {
	if o != nil && o.LastStartedAt != nil {
		return true
	}

	return false
}

// SetLastStartedAt gets a reference to the given string and assigns it to the LastStartedAt field.
func (o *ViewTimer) SetLastStartedAt(v string) {
	o.LastStartedAt = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ViewTimer) GetProject() ViewRelationship {
	if o == nil || o.Project == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetProjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ViewTimer) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ViewRelationship and assigns it to the Project field.
func (o *ViewTimer) SetProject(v ViewRelationship) {
	o.Project = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ViewTimer) GetProjectId() int32 {
	if o == nil || o.ProjectId == nil {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetProjectIdOk() (*int32, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ViewTimer) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ViewTimer) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *ViewTimer) GetRunning() bool {
	if o == nil || o.Running == nil {
		var ret bool
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetRunningOk() (*bool, bool) {
	if o == nil || o.Running == nil {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *ViewTimer) HasRunning() bool {
	if o != nil && o.Running != nil {
		return true
	}

	return false
}

// SetRunning gets a reference to the given bool and assigns it to the Running field.
func (o *ViewTimer) SetRunning(v bool) {
	o.Running = &v
}

// GetServerTime returns the ServerTime field value if set, zero value otherwise.
func (o *ViewTimer) GetServerTime() string {
	if o == nil || o.ServerTime == nil {
		var ret string
		return ret
	}
	return *o.ServerTime
}

// GetServerTimeOk returns a tuple with the ServerTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetServerTimeOk() (*string, bool) {
	if o == nil || o.ServerTime == nil {
		return nil, false
	}
	return o.ServerTime, true
}

// HasServerTime returns a boolean if a field has been set.
func (o *ViewTimer) HasServerTime() bool {
	if o != nil && o.ServerTime != nil {
		return true
	}

	return false
}

// SetServerTime gets a reference to the given string and assigns it to the ServerTime field.
func (o *ViewTimer) SetServerTime(v string) {
	o.ServerTime = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *ViewTimer) GetTask() ViewRelationship {
	if o == nil || o.Task == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetTaskOk() (*ViewRelationship, bool) {
	if o == nil || o.Task == nil {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *ViewTimer) HasTask() bool {
	if o != nil && o.Task != nil {
		return true
	}

	return false
}

// SetTask gets a reference to the given ViewRelationship and assigns it to the Task field.
func (o *ViewTimer) SetTask(v ViewRelationship) {
	o.Task = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *ViewTimer) GetTaskId() int32 {
	if o == nil || o.TaskId == nil {
		var ret int32
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetTaskIdOk() (*int32, bool) {
	if o == nil || o.TaskId == nil {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *ViewTimer) HasTaskId() bool {
	if o != nil && o.TaskId != nil {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given int32 and assigns it to the TaskId field.
func (o *ViewTimer) SetTaskId(v int32) {
	o.TaskId = &v
}

// GetTimeLogId returns the TimeLogId field value if set, zero value otherwise.
func (o *ViewTimer) GetTimeLogId() int32 {
	if o == nil || o.TimeLogId == nil {
		var ret int32
		return ret
	}
	return *o.TimeLogId
}

// GetTimeLogIdOk returns a tuple with the TimeLogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetTimeLogIdOk() (*int32, bool) {
	if o == nil || o.TimeLogId == nil {
		return nil, false
	}
	return o.TimeLogId, true
}

// HasTimeLogId returns a boolean if a field has been set.
func (o *ViewTimer) HasTimeLogId() bool {
	if o != nil && o.TimeLogId != nil {
		return true
	}

	return false
}

// SetTimeLogId gets a reference to the given int32 and assigns it to the TimeLogId field.
func (o *ViewTimer) SetTimeLogId(v int32) {
	o.TimeLogId = &v
}

// GetTimelog returns the Timelog field value if set, zero value otherwise.
func (o *ViewTimer) GetTimelog() ViewRelationship {
	if o == nil || o.Timelog == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Timelog
}

// GetTimelogOk returns a tuple with the Timelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetTimelogOk() (*ViewRelationship, bool) {
	if o == nil || o.Timelog == nil {
		return nil, false
	}
	return o.Timelog, true
}

// HasTimelog returns a boolean if a field has been set.
func (o *ViewTimer) HasTimelog() bool {
	if o != nil && o.Timelog != nil {
		return true
	}

	return false
}

// SetTimelog gets a reference to the given ViewRelationship and assigns it to the Timelog field.
func (o *ViewTimer) SetTimelog(v ViewRelationship) {
	o.Timelog = &v
}

// GetTimerLastIntervalEnd returns the TimerLastIntervalEnd field value if set, zero value otherwise.
func (o *ViewTimer) GetTimerLastIntervalEnd() string {
	if o == nil || o.TimerLastIntervalEnd == nil {
		var ret string
		return ret
	}
	return *o.TimerLastIntervalEnd
}

// GetTimerLastIntervalEndOk returns a tuple with the TimerLastIntervalEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetTimerLastIntervalEndOk() (*string, bool) {
	if o == nil || o.TimerLastIntervalEnd == nil {
		return nil, false
	}
	return o.TimerLastIntervalEnd, true
}

// HasTimerLastIntervalEnd returns a boolean if a field has been set.
func (o *ViewTimer) HasTimerLastIntervalEnd() bool {
	if o != nil && o.TimerLastIntervalEnd != nil {
		return true
	}

	return false
}

// SetTimerLastIntervalEnd gets a reference to the given string and assigns it to the TimerLastIntervalEnd field.
func (o *ViewTimer) SetTimerLastIntervalEnd(v string) {
	o.TimerLastIntervalEnd = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewTimer) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewTimer) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewTimer) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ViewTimer) GetUser() ViewRelationship {
	if o == nil || o.User == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetUserOk() (*ViewRelationship, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ViewTimer) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given ViewRelationship and assigns it to the User field.
func (o *ViewTimer) SetUser(v ViewRelationship) {
	o.User = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ViewTimer) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTimer) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ViewTimer) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *ViewTimer) SetUserId(v int32) {
	o.UserId = &v
}

func (o ViewTimer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Billable != nil {
		toSerialize["billable"] = o.Billable
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Intervals != nil {
		toSerialize["intervals"] = o.Intervals
	}
	if o.LastStartedAt != nil {
		toSerialize["lastStartedAt"] = o.LastStartedAt
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.Running != nil {
		toSerialize["running"] = o.Running
	}
	if o.ServerTime != nil {
		toSerialize["serverTime"] = o.ServerTime
	}
	if o.Task != nil {
		toSerialize["task"] = o.Task
	}
	if o.TaskId != nil {
		toSerialize["taskId"] = o.TaskId
	}
	if o.TimeLogId != nil {
		toSerialize["timeLogId"] = o.TimeLogId
	}
	if o.Timelog != nil {
		toSerialize["timelog"] = o.Timelog
	}
	if o.TimerLastIntervalEnd != nil {
		toSerialize["timerLastIntervalEnd"] = o.TimerLastIntervalEnd
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableViewTimer struct {
	value *ViewTimer
	isSet bool
}

func (v NullableViewTimer) Get() *ViewTimer {
	return v.value
}

func (v *NullableViewTimer) Set(val *ViewTimer) {
	v.value = val
	v.isSet = true
}

func (v NullableViewTimer) IsSet() bool {
	return v.isSet
}

func (v *NullableViewTimer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewTimer(val *ViewTimer) *NullableViewTimer {
	return &NullableViewTimer{value: val, isSet: true}
}

func (v NullableViewTimer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewTimer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


