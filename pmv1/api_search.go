/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// SearchApiService SearchApi service
type SearchApiService service

type ApiGETSearchJsonRequest struct {
	ctx _context.Context
	ApiService *SearchApiService
	searchFor *string
	searchTerm *string
	projectId *string
	sortOrder *string
	includeArchivedProjects *string
	includeCompletedItems *string
	pageSize *string
}

func (r ApiGETSearchJsonRequest) SearchFor(searchFor string) ApiGETSearchJsonRequest {
	r.searchFor = &searchFor
	return r
}
func (r ApiGETSearchJsonRequest) SearchTerm(searchTerm string) ApiGETSearchJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETSearchJsonRequest) ProjectId(projectId string) ApiGETSearchJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETSearchJsonRequest) SortOrder(sortOrder string) ApiGETSearchJsonRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETSearchJsonRequest) IncludeArchivedProjects(includeArchivedProjects string) ApiGETSearchJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETSearchJsonRequest) IncludeCompletedItems(includeCompletedItems string) ApiGETSearchJsonRequest {
	r.includeCompletedItems = &includeCompletedItems
	return r
}
func (r ApiGETSearchJsonRequest) PageSize(pageSize string) ApiGETSearchJsonRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGETSearchJsonRequest) Execute() (InlineResponse20089, *_nethttp.Response, error) {
	return r.ApiService.GETSearchJsonExecute(r)
}

/*
 * GETSearchJson Search
 * Perform a search in one of several Projects settings.

With this call, the parameters seachFor and searchTerm are required. Your path will look like this:

/search.json?searchFor={resource}&searchTerm={search_term}

**Eg. Seaching using tags:**

To search for a resource with an attached tag of 'My Test', do the following:
To search for a Tag, you use a hash symbol and square brackets in the searchTerm, like this : #[My Test]
Then where performing a query to the API, you need to ASCII encode the # [ ] symbols, so a GET query to the API will look like this:

GET to /search.json?searchFor=messages&searchTerm=%23%5BMy+Test%5D

In the above example, #, [ and ] have been changed to %23, %5B and %5D respectively.

Resources that can be Searched:

- projects
- notebooks
- files
- tasks
- tasklists
- milestones
- messages
- links
- events
- people
- companies
- taskComments
- fileComments
- notebookComments
- milestoneComments
- linkComments


---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETSearchJsonRequest
 */
func (a *SearchApiService) GETSearchJson(ctx _context.Context) ApiGETSearchJsonRequest {
	return ApiGETSearchJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20089
 */
func (a *SearchApiService) GETSearchJsonExecute(r ApiGETSearchJsonRequest) (InlineResponse20089, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20089
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.GETSearchJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.searchFor == nil {
		return localVarReturnValue, nil, reportError("searchFor is required and must be specified")
	}
	if r.searchTerm == nil {
		return localVarReturnValue, nil, reportError("searchTerm is required and must be specified")
	}

	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.includeCompletedItems != nil {
		localVarQueryParams.Add("includeCompletedItems", parameterToString(*r.includeCompletedItems, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	localVarQueryParams.Add("searchFor", parameterToString(*r.searchFor, ""))
	localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
