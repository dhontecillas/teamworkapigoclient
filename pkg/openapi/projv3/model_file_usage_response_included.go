/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileUsageResponseIncluded struct for FileUsageResponseIncluded
type FileUsageResponseIncluded struct {
	Projects *map[string]ViewProject `json:"projects,omitempty"`
}

// NewFileUsageResponseIncluded instantiates a new FileUsageResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileUsageResponseIncluded() *FileUsageResponseIncluded {
	this := FileUsageResponseIncluded{}
	return &this
}

// NewFileUsageResponseIncludedWithDefaults instantiates a new FileUsageResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileUsageResponseIncludedWithDefaults() *FileUsageResponseIncluded {
	this := FileUsageResponseIncluded{}
	return &this
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *FileUsageResponseIncluded) GetProjects() map[string]ViewProject {
	if o == nil || o.Projects == nil {
		var ret map[string]ViewProject
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponseIncluded) GetProjectsOk() (*map[string]ViewProject, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *FileUsageResponseIncluded) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given map[string]ViewProject and assigns it to the Projects field.
func (o *FileUsageResponseIncluded) SetProjects(v map[string]ViewProject) {
	o.Projects = &v
}

func (o FileUsageResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	return json.Marshal(toSerialize)
}

type NullableFileUsageResponseIncluded struct {
	value *FileUsageResponseIncluded
	isSet bool
}

func (v NullableFileUsageResponseIncluded) Get() *FileUsageResponseIncluded {
	return v.value
}

func (v *NullableFileUsageResponseIncluded) Set(val *FileUsageResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUsageResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUsageResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUsageResponseIncluded(val *FileUsageResponseIncluded) *NullableFileUsageResponseIncluded {
	return &NullableFileUsageResponseIncluded{value: val, isSet: true}
}

func (v NullableFileUsageResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUsageResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


