/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ImporterImporter Importer single importer for response.
type ImporterImporter struct {
	Name *string `json:"name,omitempty"`
	Running *bool `json:"running,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewImporterImporter instantiates a new ImporterImporter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImporterImporter() *ImporterImporter {
	this := ImporterImporter{}
	return &this
}

// NewImporterImporterWithDefaults instantiates a new ImporterImporter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImporterImporterWithDefaults() *ImporterImporter {
	this := ImporterImporter{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImporterImporter) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImporterImporter) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImporterImporter) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImporterImporter) SetName(v string) {
	o.Name = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *ImporterImporter) GetRunning() bool {
	if o == nil || o.Running == nil {
		var ret bool
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImporterImporter) GetRunningOk() (*bool, bool) {
	if o == nil || o.Running == nil {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *ImporterImporter) HasRunning() bool {
	if o != nil && o.Running != nil {
		return true
	}

	return false
}

// SetRunning gets a reference to the given bool and assigns it to the Running field.
func (o *ImporterImporter) SetRunning(v bool) {
	o.Running = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ImporterImporter) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImporterImporter) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ImporterImporter) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ImporterImporter) SetStatus(v string) {
	o.Status = &v
}

func (o ImporterImporter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Running != nil {
		toSerialize["running"] = o.Running
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableImporterImporter struct {
	value *ImporterImporter
	isSet bool
}

func (v NullableImporterImporter) Get() *ImporterImporter {
	return v.value
}

func (v *NullableImporterImporter) Set(val *ImporterImporter) {
	v.value = val
	v.isSet = true
}

func (v NullableImporterImporter) IsSet() bool {
	return v.isSet
}

func (v *NullableImporterImporter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImporterImporter(val *ImporterImporter) *NullableImporterImporter {
	return &NullableImporterImporter{value: val, isSet: true}
}

func (v NullableImporterImporter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImporterImporter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


