/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewUserAvailabilityDate UserAvailabilityDate stores the user availability for a specific date.
type ViewUserAvailabilityDate struct {
	AvailableMinutes *int32 `json:"availableMinutes,omitempty"`
	UnavailableEventIds *[]int32 `json:"unavailableEventIds,omitempty"`
}

// NewViewUserAvailabilityDate instantiates a new ViewUserAvailabilityDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewUserAvailabilityDate() *ViewUserAvailabilityDate {
	this := ViewUserAvailabilityDate{}
	return &this
}

// NewViewUserAvailabilityDateWithDefaults instantiates a new ViewUserAvailabilityDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewUserAvailabilityDateWithDefaults() *ViewUserAvailabilityDate {
	this := ViewUserAvailabilityDate{}
	return &this
}

// GetAvailableMinutes returns the AvailableMinutes field value if set, zero value otherwise.
func (o *ViewUserAvailabilityDate) GetAvailableMinutes() int32 {
	if o == nil || o.AvailableMinutes == nil {
		var ret int32
		return ret
	}
	return *o.AvailableMinutes
}

// GetAvailableMinutesOk returns a tuple with the AvailableMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserAvailabilityDate) GetAvailableMinutesOk() (*int32, bool) {
	if o == nil || o.AvailableMinutes == nil {
		return nil, false
	}
	return o.AvailableMinutes, true
}

// HasAvailableMinutes returns a boolean if a field has been set.
func (o *ViewUserAvailabilityDate) HasAvailableMinutes() bool {
	if o != nil && o.AvailableMinutes != nil {
		return true
	}

	return false
}

// SetAvailableMinutes gets a reference to the given int32 and assigns it to the AvailableMinutes field.
func (o *ViewUserAvailabilityDate) SetAvailableMinutes(v int32) {
	o.AvailableMinutes = &v
}

// GetUnavailableEventIds returns the UnavailableEventIds field value if set, zero value otherwise.
func (o *ViewUserAvailabilityDate) GetUnavailableEventIds() []int32 {
	if o == nil || o.UnavailableEventIds == nil {
		var ret []int32
		return ret
	}
	return *o.UnavailableEventIds
}

// GetUnavailableEventIdsOk returns a tuple with the UnavailableEventIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserAvailabilityDate) GetUnavailableEventIdsOk() (*[]int32, bool) {
	if o == nil || o.UnavailableEventIds == nil {
		return nil, false
	}
	return o.UnavailableEventIds, true
}

// HasUnavailableEventIds returns a boolean if a field has been set.
func (o *ViewUserAvailabilityDate) HasUnavailableEventIds() bool {
	if o != nil && o.UnavailableEventIds != nil {
		return true
	}

	return false
}

// SetUnavailableEventIds gets a reference to the given []int32 and assigns it to the UnavailableEventIds field.
func (o *ViewUserAvailabilityDate) SetUnavailableEventIds(v []int32) {
	o.UnavailableEventIds = &v
}

func (o ViewUserAvailabilityDate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AvailableMinutes != nil {
		toSerialize["availableMinutes"] = o.AvailableMinutes
	}
	if o.UnavailableEventIds != nil {
		toSerialize["unavailableEventIds"] = o.UnavailableEventIds
	}
	return json.Marshal(toSerialize)
}

type NullableViewUserAvailabilityDate struct {
	value *ViewUserAvailabilityDate
	isSet bool
}

func (v NullableViewUserAvailabilityDate) Get() *ViewUserAvailabilityDate {
	return v.value
}

func (v *NullableViewUserAvailabilityDate) Set(val *ViewUserAvailabilityDate) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUserAvailabilityDate) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUserAvailabilityDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUserAvailabilityDate(val *ViewUserAvailabilityDate) *NullableViewUserAvailabilityDate {
	return &NullableViewUserAvailabilityDate{value: val, isSet: true}
}

func (v NullableViewUserAvailabilityDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUserAvailabilityDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


