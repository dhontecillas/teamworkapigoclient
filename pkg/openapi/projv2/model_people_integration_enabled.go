/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv2

import (
	"encoding/json"
)

// PeopleIntegrationEnabled struct for PeopleIntegrationEnabled
type PeopleIntegrationEnabled struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// NewPeopleIntegrationEnabled instantiates a new PeopleIntegrationEnabled object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleIntegrationEnabled() *PeopleIntegrationEnabled {
	this := PeopleIntegrationEnabled{}
	return &this
}

// NewPeopleIntegrationEnabledWithDefaults instantiates a new PeopleIntegrationEnabled object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleIntegrationEnabledWithDefaults() *PeopleIntegrationEnabled {
	this := PeopleIntegrationEnabled{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PeopleIntegrationEnabled) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleIntegrationEnabled) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PeopleIntegrationEnabled) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PeopleIntegrationEnabled) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o PeopleIntegrationEnabled) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullablePeopleIntegrationEnabled struct {
	value *PeopleIntegrationEnabled
	isSet bool
}

func (v NullablePeopleIntegrationEnabled) Get() *PeopleIntegrationEnabled {
	return v.value
}

func (v *NullablePeopleIntegrationEnabled) Set(val *PeopleIntegrationEnabled) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleIntegrationEnabled) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleIntegrationEnabled) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleIntegrationEnabled(val *PeopleIntegrationEnabled) *NullablePeopleIntegrationEnabled {
	return &NullablePeopleIntegrationEnabled{value: val, isSet: true}
}

func (v NullablePeopleIntegrationEnabled) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleIntegrationEnabled) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


