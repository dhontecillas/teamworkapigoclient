/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// SettingAppSetting AppSetting contains all the information returned from a setting.
type SettingAppSetting struct {
	Value *string `json:"value,omitempty"`
}

// NewSettingAppSetting instantiates a new SettingAppSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingAppSetting() *SettingAppSetting {
	this := SettingAppSetting{}
	return &this
}

// NewSettingAppSettingWithDefaults instantiates a new SettingAppSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingAppSettingWithDefaults() *SettingAppSetting {
	this := SettingAppSetting{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SettingAppSetting) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingAppSetting) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SettingAppSetting) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SettingAppSetting) SetValue(v string) {
	o.Value = &v
}

func (o SettingAppSetting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSettingAppSetting struct {
	value *SettingAppSetting
	isSet bool
}

func (v NullableSettingAppSetting) Get() *SettingAppSetting {
	return v.value
}

func (v *NullableSettingAppSetting) Set(val *SettingAppSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingAppSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingAppSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingAppSetting(val *SettingAppSetting) *NullableSettingAppSetting {
	return &NullableSettingAppSetting{value: val, isSet: true}
}

func (v NullableSettingAppSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingAppSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


