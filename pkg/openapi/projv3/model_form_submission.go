/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FormSubmission Submission contains information of a form submitted by a user.
type FormSubmission struct {
	Data *map[string]interface{} `json:"data,omitempty"`
	Version *int32 `json:"version,omitempty"`
}

// NewFormSubmission instantiates a new FormSubmission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormSubmission() *FormSubmission {
	this := FormSubmission{}
	return &this
}

// NewFormSubmissionWithDefaults instantiates a new FormSubmission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormSubmissionWithDefaults() *FormSubmission {
	this := FormSubmission{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *FormSubmission) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSubmission) GetDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *FormSubmission) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *FormSubmission) SetData(v map[string]interface{}) {
	o.Data = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FormSubmission) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSubmission) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FormSubmission) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *FormSubmission) SetVersion(v int32) {
	o.Version = &v
}

func (o FormSubmission) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableFormSubmission struct {
	value *FormSubmission
	isSet bool
}

func (v NullableFormSubmission) Get() *FormSubmission {
	return v.value
}

func (v *NullableFormSubmission) Set(val *FormSubmission) {
	v.value = val
	v.isSet = true
}

func (v NullableFormSubmission) IsSet() bool {
	return v.isSet
}

func (v *NullableFormSubmission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormSubmission(val *FormSubmission) *NullableFormSubmission {
	return &NullableFormSubmission{value: val, isSet: true}
}

func (v NullableFormSubmission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormSubmission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


