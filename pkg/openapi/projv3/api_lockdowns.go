/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// LockdownsApiService LockdownsApi service
type LockdownsApiService service

type ApiGETProjectsApiV3LockdownslockdownIdJsonRequest struct {
	ctx _context.Context
	ApiService *LockdownsApiService
	lockdownId int32
	id *int32
	includeItems *bool
	include *[]string
	fieldsUsers *[]string
	fieldsTeams *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsNotebooks *[]string
	fieldsMilestones *[]string
	fieldsMessages *[]string
	fieldsLockdowns *[]string
	fieldsLinks *[]string
	fieldsFiles *[]string
	fieldsCompanies *[]string
	fieldsComments *[]string
}

func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) Id(id int32) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.id = &id
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) IncludeItems(includeItems bool) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.includeItems = &includeItems
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) Include(include []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsTeams(fieldsTeams []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsTeams = &fieldsTeams
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsNotebooks(fieldsNotebooks []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsNotebooks = &fieldsNotebooks
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsMessages(fieldsMessages []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsMessages = &fieldsMessages
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsLockdowns(fieldsLockdowns []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsLockdowns = &fieldsLockdowns
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsLinks(fieldsLinks []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsLinks = &fieldsLinks
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsFiles(fieldsFiles []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsFiles = &fieldsFiles
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) FieldsComments(fieldsComments []string) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	r.fieldsComments = &fieldsComments
	return r
}

func (r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) Execute() (LockdownResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3LockdownslockdownIdJsonExecute(r)
}

/*
 * GETProjectsApiV3LockdownslockdownIdJson Get a specific lockdown.
 * Retrieve a lockdown information.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param lockdownId
 * @return ApiGETProjectsApiV3LockdownslockdownIdJsonRequest
 */
func (a *LockdownsApiService) GETProjectsApiV3LockdownslockdownIdJson(ctx _context.Context, lockdownId int32) ApiGETProjectsApiV3LockdownslockdownIdJsonRequest {
	return ApiGETProjectsApiV3LockdownslockdownIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		lockdownId: lockdownId,
	}
}

/*
 * Execute executes the request
 * @return LockdownResponse
 */
func (a *LockdownsApiService) GETProjectsApiV3LockdownslockdownIdJsonExecute(r ApiGETProjectsApiV3LockdownslockdownIdJsonRequest) (LockdownResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LockdownResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LockdownsApiService.GETProjectsApiV3LockdownslockdownIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/lockdowns/{lockdownId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"lockdownId"+"}", _neturl.PathEscape(parameterToString(r.lockdownId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.includeItems != nil {
		localVarQueryParams.Add("includeItems", parameterToString(*r.includeItems, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTeams != nil {
		localVarQueryParams.Add("fields[teams]", parameterToString(*r.fieldsTeams, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsNotebooks != nil {
		localVarQueryParams.Add("fields[notebooks]", parameterToString(*r.fieldsNotebooks, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsMessages != nil {
		localVarQueryParams.Add("fields[messages]", parameterToString(*r.fieldsMessages, "csv"))
	}
	if r.fieldsLockdowns != nil {
		localVarQueryParams.Add("fields[lockdowns]", parameterToString(*r.fieldsLockdowns, "csv"))
	}
	if r.fieldsLinks != nil {
		localVarQueryParams.Add("fields[links]", parameterToString(*r.fieldsLinks, "csv"))
	}
	if r.fieldsFiles != nil {
		localVarQueryParams.Add("fields[files]", parameterToString(*r.fieldsFiles, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.fieldsComments != nil {
		localVarQueryParams.Add("fields[comments]", parameterToString(*r.fieldsComments, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
