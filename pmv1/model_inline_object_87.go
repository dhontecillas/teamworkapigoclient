/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineObject87 struct for InlineObject87
type InlineObject87 struct {
	Tag *EventtypesJsonEventtype `json:"tag,omitempty"`
}

// NewInlineObject87 instantiates a new InlineObject87 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject87() *InlineObject87 {
	this := InlineObject87{}
	return &this
}

// NewInlineObject87WithDefaults instantiates a new InlineObject87 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject87WithDefaults() *InlineObject87 {
	this := InlineObject87{}
	return &this
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *InlineObject87) GetTag() EventtypesJsonEventtype {
	if o == nil || o.Tag == nil {
		var ret EventtypesJsonEventtype
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject87) GetTagOk() (*EventtypesJsonEventtype, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *InlineObject87) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given EventtypesJsonEventtype and assigns it to the Tag field.
func (o *InlineObject87) SetTag(v EventtypesJsonEventtype) {
	o.Tag = &v
}

func (o InlineObject87) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject87 struct {
	value *InlineObject87
	isSet bool
}

func (v NullableInlineObject87) Get() *InlineObject87 {
	return v.value
}

func (v *NullableInlineObject87) Set(val *InlineObject87) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject87) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject87) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject87(val *InlineObject87) *NullableInlineObject87 {
	return &NullableInlineObject87{value: val, isSet: true}
}

func (v NullableInlineObject87) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject87) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


