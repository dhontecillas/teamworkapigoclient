/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ActiveResponse Response contains information about a specific active.
type ActiveResponse struct {
	Data *ActiveProjectMetricActive `json:"data,omitempty"`
}

// NewActiveResponse instantiates a new ActiveResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveResponse() *ActiveResponse {
	this := ActiveResponse{}
	return &this
}

// NewActiveResponseWithDefaults instantiates a new ActiveResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveResponseWithDefaults() *ActiveResponse {
	this := ActiveResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ActiveResponse) GetData() ActiveProjectMetricActive {
	if o == nil || o.Data == nil {
		var ret ActiveProjectMetricActive
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveResponse) GetDataOk() (*ActiveProjectMetricActive, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ActiveResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given ActiveProjectMetricActive and assigns it to the Data field.
func (o *ActiveResponse) SetData(v ActiveProjectMetricActive) {
	o.Data = &v
}

func (o ActiveResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableActiveResponse struct {
	value *ActiveResponse
	isSet bool
}

func (v NullableActiveResponse) Get() *ActiveResponse {
	return v.value
}

func (v *NullableActiveResponse) Set(val *ActiveResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveResponse(val *ActiveResponse) *NullableActiveResponse {
	return &NullableActiveResponse{value: val, isSet: true}
}

func (v NullableActiveResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


