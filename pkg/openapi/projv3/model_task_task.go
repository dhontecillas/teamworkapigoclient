/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// TaskTask Task contains all the information returned from a task.
type TaskTask struct {
	Assignees *PayloadUserGroups `json:"assignees,omitempty"`
	AttachmentIds *[]int32 `json:"attachmentIds,omitempty"`
	ChangeFollowers *PayloadUserGroups `json:"changeFollowers,omitempty"`
	CommentFollowers *PayloadUserGroups `json:"commentFollowers,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	CreatedBy *int32 `json:"createdBy,omitempty"`
	CrmDealIds *[]int32 `json:"crmDealIds,omitempty"`
	CustomFields *[]TaskCustomFieldTask `json:"customFields,omitempty"`
	Description *string `json:"description,omitempty"`
	// Date unmarshals represents a Unified API Spec date format.
	DueAt *map[string]interface{} `json:"dueAt,omitempty"`
	EstimatedMinutes *int32 `json:"estimatedMinutes,omitempty"`
	GrantAccessTo *PayloadUserGroups `json:"grantAccessTo,omitempty"`
	Name *string `json:"name,omitempty"`
	ParentTaskId *int32 `json:"parentTaskId,omitempty"`
	Priority *string `json:"priority,omitempty"`
	Private *bool `json:"private,omitempty"`
	Progress *int32 `json:"progress,omitempty"`
	Reminders *[]TaskReminder `json:"reminders,omitempty"`
	RepeatOptions *TaskRepeatOptions `json:"repeatOptions,omitempty"`
	// Date unmarshals represents a Unified API Spec date format.
	StartAt *map[string]interface{} `json:"startAt,omitempty"`
	Status *string `json:"status,omitempty"`
	TagIds *[]int32 `json:"tagIds,omitempty"`
	TasklistId *int32 `json:"tasklistId,omitempty"`
	TemplateRoleName *string `json:"templateRoleName,omitempty"`
	TicketId *int32 `json:"ticketId,omitempty"`
}

// NewTaskTask instantiates a new TaskTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskTask() *TaskTask {
	this := TaskTask{}
	return &this
}

// NewTaskTaskWithDefaults instantiates a new TaskTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskTaskWithDefaults() *TaskTask {
	this := TaskTask{}
	return &this
}

// GetAssignees returns the Assignees field value if set, zero value otherwise.
func (o *TaskTask) GetAssignees() PayloadUserGroups {
	if o == nil || o.Assignees == nil {
		var ret PayloadUserGroups
		return ret
	}
	return *o.Assignees
}

// GetAssigneesOk returns a tuple with the Assignees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetAssigneesOk() (*PayloadUserGroups, bool) {
	if o == nil || o.Assignees == nil {
		return nil, false
	}
	return o.Assignees, true
}

// HasAssignees returns a boolean if a field has been set.
func (o *TaskTask) HasAssignees() bool {
	if o != nil && o.Assignees != nil {
		return true
	}

	return false
}

// SetAssignees gets a reference to the given PayloadUserGroups and assigns it to the Assignees field.
func (o *TaskTask) SetAssignees(v PayloadUserGroups) {
	o.Assignees = &v
}

// GetAttachmentIds returns the AttachmentIds field value if set, zero value otherwise.
func (o *TaskTask) GetAttachmentIds() []int32 {
	if o == nil || o.AttachmentIds == nil {
		var ret []int32
		return ret
	}
	return *o.AttachmentIds
}

// GetAttachmentIdsOk returns a tuple with the AttachmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetAttachmentIdsOk() (*[]int32, bool) {
	if o == nil || o.AttachmentIds == nil {
		return nil, false
	}
	return o.AttachmentIds, true
}

// HasAttachmentIds returns a boolean if a field has been set.
func (o *TaskTask) HasAttachmentIds() bool {
	if o != nil && o.AttachmentIds != nil {
		return true
	}

	return false
}

// SetAttachmentIds gets a reference to the given []int32 and assigns it to the AttachmentIds field.
func (o *TaskTask) SetAttachmentIds(v []int32) {
	o.AttachmentIds = &v
}

// GetChangeFollowers returns the ChangeFollowers field value if set, zero value otherwise.
func (o *TaskTask) GetChangeFollowers() PayloadUserGroups {
	if o == nil || o.ChangeFollowers == nil {
		var ret PayloadUserGroups
		return ret
	}
	return *o.ChangeFollowers
}

// GetChangeFollowersOk returns a tuple with the ChangeFollowers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetChangeFollowersOk() (*PayloadUserGroups, bool) {
	if o == nil || o.ChangeFollowers == nil {
		return nil, false
	}
	return o.ChangeFollowers, true
}

// HasChangeFollowers returns a boolean if a field has been set.
func (o *TaskTask) HasChangeFollowers() bool {
	if o != nil && o.ChangeFollowers != nil {
		return true
	}

	return false
}

// SetChangeFollowers gets a reference to the given PayloadUserGroups and assigns it to the ChangeFollowers field.
func (o *TaskTask) SetChangeFollowers(v PayloadUserGroups) {
	o.ChangeFollowers = &v
}

// GetCommentFollowers returns the CommentFollowers field value if set, zero value otherwise.
func (o *TaskTask) GetCommentFollowers() PayloadUserGroups {
	if o == nil || o.CommentFollowers == nil {
		var ret PayloadUserGroups
		return ret
	}
	return *o.CommentFollowers
}

// GetCommentFollowersOk returns a tuple with the CommentFollowers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetCommentFollowersOk() (*PayloadUserGroups, bool) {
	if o == nil || o.CommentFollowers == nil {
		return nil, false
	}
	return o.CommentFollowers, true
}

// HasCommentFollowers returns a boolean if a field has been set.
func (o *TaskTask) HasCommentFollowers() bool {
	if o != nil && o.CommentFollowers != nil {
		return true
	}

	return false
}

// SetCommentFollowers gets a reference to the given PayloadUserGroups and assigns it to the CommentFollowers field.
func (o *TaskTask) SetCommentFollowers(v PayloadUserGroups) {
	o.CommentFollowers = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TaskTask) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TaskTask) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *TaskTask) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TaskTask) GetCreatedBy() int32 {
	if o == nil || o.CreatedBy == nil {
		var ret int32
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetCreatedByOk() (*int32, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *TaskTask) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int32 and assigns it to the CreatedBy field.
func (o *TaskTask) SetCreatedBy(v int32) {
	o.CreatedBy = &v
}

// GetCrmDealIds returns the CrmDealIds field value if set, zero value otherwise.
func (o *TaskTask) GetCrmDealIds() []int32 {
	if o == nil || o.CrmDealIds == nil {
		var ret []int32
		return ret
	}
	return *o.CrmDealIds
}

// GetCrmDealIdsOk returns a tuple with the CrmDealIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetCrmDealIdsOk() (*[]int32, bool) {
	if o == nil || o.CrmDealIds == nil {
		return nil, false
	}
	return o.CrmDealIds, true
}

// HasCrmDealIds returns a boolean if a field has been set.
func (o *TaskTask) HasCrmDealIds() bool {
	if o != nil && o.CrmDealIds != nil {
		return true
	}

	return false
}

// SetCrmDealIds gets a reference to the given []int32 and assigns it to the CrmDealIds field.
func (o *TaskTask) SetCrmDealIds(v []int32) {
	o.CrmDealIds = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *TaskTask) GetCustomFields() []TaskCustomFieldTask {
	if o == nil || o.CustomFields == nil {
		var ret []TaskCustomFieldTask
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetCustomFieldsOk() (*[]TaskCustomFieldTask, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *TaskTask) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []TaskCustomFieldTask and assigns it to the CustomFields field.
func (o *TaskTask) SetCustomFields(v []TaskCustomFieldTask) {
	o.CustomFields = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TaskTask) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TaskTask) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TaskTask) SetDescription(v string) {
	o.Description = &v
}

// GetDueAt returns the DueAt field value if set, zero value otherwise.
func (o *TaskTask) GetDueAt() map[string]interface{} {
	if o == nil || o.DueAt == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.DueAt
}

// GetDueAtOk returns a tuple with the DueAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetDueAtOk() (*map[string]interface{}, bool) {
	if o == nil || o.DueAt == nil {
		return nil, false
	}
	return o.DueAt, true
}

// HasDueAt returns a boolean if a field has been set.
func (o *TaskTask) HasDueAt() bool {
	if o != nil && o.DueAt != nil {
		return true
	}

	return false
}

// SetDueAt gets a reference to the given map[string]interface{} and assigns it to the DueAt field.
func (o *TaskTask) SetDueAt(v map[string]interface{}) {
	o.DueAt = &v
}

// GetEstimatedMinutes returns the EstimatedMinutes field value if set, zero value otherwise.
func (o *TaskTask) GetEstimatedMinutes() int32 {
	if o == nil || o.EstimatedMinutes == nil {
		var ret int32
		return ret
	}
	return *o.EstimatedMinutes
}

// GetEstimatedMinutesOk returns a tuple with the EstimatedMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetEstimatedMinutesOk() (*int32, bool) {
	if o == nil || o.EstimatedMinutes == nil {
		return nil, false
	}
	return o.EstimatedMinutes, true
}

// HasEstimatedMinutes returns a boolean if a field has been set.
func (o *TaskTask) HasEstimatedMinutes() bool {
	if o != nil && o.EstimatedMinutes != nil {
		return true
	}

	return false
}

// SetEstimatedMinutes gets a reference to the given int32 and assigns it to the EstimatedMinutes field.
func (o *TaskTask) SetEstimatedMinutes(v int32) {
	o.EstimatedMinutes = &v
}

// GetGrantAccessTo returns the GrantAccessTo field value if set, zero value otherwise.
func (o *TaskTask) GetGrantAccessTo() PayloadUserGroups {
	if o == nil || o.GrantAccessTo == nil {
		var ret PayloadUserGroups
		return ret
	}
	return *o.GrantAccessTo
}

// GetGrantAccessToOk returns a tuple with the GrantAccessTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetGrantAccessToOk() (*PayloadUserGroups, bool) {
	if o == nil || o.GrantAccessTo == nil {
		return nil, false
	}
	return o.GrantAccessTo, true
}

// HasGrantAccessTo returns a boolean if a field has been set.
func (o *TaskTask) HasGrantAccessTo() bool {
	if o != nil && o.GrantAccessTo != nil {
		return true
	}

	return false
}

// SetGrantAccessTo gets a reference to the given PayloadUserGroups and assigns it to the GrantAccessTo field.
func (o *TaskTask) SetGrantAccessTo(v PayloadUserGroups) {
	o.GrantAccessTo = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaskTask) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaskTask) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaskTask) SetName(v string) {
	o.Name = &v
}

// GetParentTaskId returns the ParentTaskId field value if set, zero value otherwise.
func (o *TaskTask) GetParentTaskId() int32 {
	if o == nil || o.ParentTaskId == nil {
		var ret int32
		return ret
	}
	return *o.ParentTaskId
}

// GetParentTaskIdOk returns a tuple with the ParentTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetParentTaskIdOk() (*int32, bool) {
	if o == nil || o.ParentTaskId == nil {
		return nil, false
	}
	return o.ParentTaskId, true
}

// HasParentTaskId returns a boolean if a field has been set.
func (o *TaskTask) HasParentTaskId() bool {
	if o != nil && o.ParentTaskId != nil {
		return true
	}

	return false
}

// SetParentTaskId gets a reference to the given int32 and assigns it to the ParentTaskId field.
func (o *TaskTask) SetParentTaskId(v int32) {
	o.ParentTaskId = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *TaskTask) GetPriority() string {
	if o == nil || o.Priority == nil {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetPriorityOk() (*string, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *TaskTask) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *TaskTask) SetPriority(v string) {
	o.Priority = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *TaskTask) GetPrivate() bool {
	if o == nil || o.Private == nil {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetPrivateOk() (*bool, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *TaskTask) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *TaskTask) SetPrivate(v bool) {
	o.Private = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *TaskTask) GetProgress() int32 {
	if o == nil || o.Progress == nil {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetProgressOk() (*int32, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *TaskTask) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *TaskTask) SetProgress(v int32) {
	o.Progress = &v
}

// GetReminders returns the Reminders field value if set, zero value otherwise.
func (o *TaskTask) GetReminders() []TaskReminder {
	if o == nil || o.Reminders == nil {
		var ret []TaskReminder
		return ret
	}
	return *o.Reminders
}

// GetRemindersOk returns a tuple with the Reminders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetRemindersOk() (*[]TaskReminder, bool) {
	if o == nil || o.Reminders == nil {
		return nil, false
	}
	return o.Reminders, true
}

// HasReminders returns a boolean if a field has been set.
func (o *TaskTask) HasReminders() bool {
	if o != nil && o.Reminders != nil {
		return true
	}

	return false
}

// SetReminders gets a reference to the given []TaskReminder and assigns it to the Reminders field.
func (o *TaskTask) SetReminders(v []TaskReminder) {
	o.Reminders = &v
}

// GetRepeatOptions returns the RepeatOptions field value if set, zero value otherwise.
func (o *TaskTask) GetRepeatOptions() TaskRepeatOptions {
	if o == nil || o.RepeatOptions == nil {
		var ret TaskRepeatOptions
		return ret
	}
	return *o.RepeatOptions
}

// GetRepeatOptionsOk returns a tuple with the RepeatOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetRepeatOptionsOk() (*TaskRepeatOptions, bool) {
	if o == nil || o.RepeatOptions == nil {
		return nil, false
	}
	return o.RepeatOptions, true
}

// HasRepeatOptions returns a boolean if a field has been set.
func (o *TaskTask) HasRepeatOptions() bool {
	if o != nil && o.RepeatOptions != nil {
		return true
	}

	return false
}

// SetRepeatOptions gets a reference to the given TaskRepeatOptions and assigns it to the RepeatOptions field.
func (o *TaskTask) SetRepeatOptions(v TaskRepeatOptions) {
	o.RepeatOptions = &v
}

// GetStartAt returns the StartAt field value if set, zero value otherwise.
func (o *TaskTask) GetStartAt() map[string]interface{} {
	if o == nil || o.StartAt == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.StartAt
}

// GetStartAtOk returns a tuple with the StartAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetStartAtOk() (*map[string]interface{}, bool) {
	if o == nil || o.StartAt == nil {
		return nil, false
	}
	return o.StartAt, true
}

// HasStartAt returns a boolean if a field has been set.
func (o *TaskTask) HasStartAt() bool {
	if o != nil && o.StartAt != nil {
		return true
	}

	return false
}

// SetStartAt gets a reference to the given map[string]interface{} and assigns it to the StartAt field.
func (o *TaskTask) SetStartAt(v map[string]interface{}) {
	o.StartAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaskTask) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaskTask) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TaskTask) SetStatus(v string) {
	o.Status = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *TaskTask) GetTagIds() []int32 {
	if o == nil || o.TagIds == nil {
		var ret []int32
		return ret
	}
	return *o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetTagIdsOk() (*[]int32, bool) {
	if o == nil || o.TagIds == nil {
		return nil, false
	}
	return o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *TaskTask) HasTagIds() bool {
	if o != nil && o.TagIds != nil {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []int32 and assigns it to the TagIds field.
func (o *TaskTask) SetTagIds(v []int32) {
	o.TagIds = &v
}

// GetTasklistId returns the TasklistId field value if set, zero value otherwise.
func (o *TaskTask) GetTasklistId() int32 {
	if o == nil || o.TasklistId == nil {
		var ret int32
		return ret
	}
	return *o.TasklistId
}

// GetTasklistIdOk returns a tuple with the TasklistId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetTasklistIdOk() (*int32, bool) {
	if o == nil || o.TasklistId == nil {
		return nil, false
	}
	return o.TasklistId, true
}

// HasTasklistId returns a boolean if a field has been set.
func (o *TaskTask) HasTasklistId() bool {
	if o != nil && o.TasklistId != nil {
		return true
	}

	return false
}

// SetTasklistId gets a reference to the given int32 and assigns it to the TasklistId field.
func (o *TaskTask) SetTasklistId(v int32) {
	o.TasklistId = &v
}

// GetTemplateRoleName returns the TemplateRoleName field value if set, zero value otherwise.
func (o *TaskTask) GetTemplateRoleName() string {
	if o == nil || o.TemplateRoleName == nil {
		var ret string
		return ret
	}
	return *o.TemplateRoleName
}

// GetTemplateRoleNameOk returns a tuple with the TemplateRoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetTemplateRoleNameOk() (*string, bool) {
	if o == nil || o.TemplateRoleName == nil {
		return nil, false
	}
	return o.TemplateRoleName, true
}

// HasTemplateRoleName returns a boolean if a field has been set.
func (o *TaskTask) HasTemplateRoleName() bool {
	if o != nil && o.TemplateRoleName != nil {
		return true
	}

	return false
}

// SetTemplateRoleName gets a reference to the given string and assigns it to the TemplateRoleName field.
func (o *TaskTask) SetTemplateRoleName(v string) {
	o.TemplateRoleName = &v
}

// GetTicketId returns the TicketId field value if set, zero value otherwise.
func (o *TaskTask) GetTicketId() int32 {
	if o == nil || o.TicketId == nil {
		var ret int32
		return ret
	}
	return *o.TicketId
}

// GetTicketIdOk returns a tuple with the TicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTask) GetTicketIdOk() (*int32, bool) {
	if o == nil || o.TicketId == nil {
		return nil, false
	}
	return o.TicketId, true
}

// HasTicketId returns a boolean if a field has been set.
func (o *TaskTask) HasTicketId() bool {
	if o != nil && o.TicketId != nil {
		return true
	}

	return false
}

// SetTicketId gets a reference to the given int32 and assigns it to the TicketId field.
func (o *TaskTask) SetTicketId(v int32) {
	o.TicketId = &v
}

func (o TaskTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Assignees != nil {
		toSerialize["assignees"] = o.Assignees
	}
	if o.AttachmentIds != nil {
		toSerialize["attachmentIds"] = o.AttachmentIds
	}
	if o.ChangeFollowers != nil {
		toSerialize["changeFollowers"] = o.ChangeFollowers
	}
	if o.CommentFollowers != nil {
		toSerialize["commentFollowers"] = o.CommentFollowers
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CrmDealIds != nil {
		toSerialize["crmDealIds"] = o.CrmDealIds
	}
	if o.CustomFields != nil {
		toSerialize["customFields"] = o.CustomFields
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DueAt != nil {
		toSerialize["dueAt"] = o.DueAt
	}
	if o.EstimatedMinutes != nil {
		toSerialize["estimatedMinutes"] = o.EstimatedMinutes
	}
	if o.GrantAccessTo != nil {
		toSerialize["grantAccessTo"] = o.GrantAccessTo
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ParentTaskId != nil {
		toSerialize["parentTaskId"] = o.ParentTaskId
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	if o.Progress != nil {
		toSerialize["progress"] = o.Progress
	}
	if o.Reminders != nil {
		toSerialize["reminders"] = o.Reminders
	}
	if o.RepeatOptions != nil {
		toSerialize["repeatOptions"] = o.RepeatOptions
	}
	if o.StartAt != nil {
		toSerialize["startAt"] = o.StartAt
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.TagIds != nil {
		toSerialize["tagIds"] = o.TagIds
	}
	if o.TasklistId != nil {
		toSerialize["tasklistId"] = o.TasklistId
	}
	if o.TemplateRoleName != nil {
		toSerialize["templateRoleName"] = o.TemplateRoleName
	}
	if o.TicketId != nil {
		toSerialize["ticketId"] = o.TicketId
	}
	return json.Marshal(toSerialize)
}

type NullableTaskTask struct {
	value *TaskTask
	isSet bool
}

func (v NullableTaskTask) Get() *TaskTask {
	return v.value
}

func (v *NullableTaskTask) Set(val *TaskTask) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskTask(val *TaskTask) *NullableTaskTask {
	return &NullableTaskTask{value: val, isSet: true}
}

func (v NullableTaskTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


