/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// SummaryTimeCounterTotalResponse TimeCounterTotalResponse contains total counters for times.
type SummaryTimeCounterTotalResponse struct {
	BillableMinsSum *int32 `json:"billableMinsSum,omitempty"`
	BilledMinsSum *int32 `json:"billedMinsSum,omitempty"`
	NonBillableMinsSum *int32 `json:"nonBillableMinsSum,omitempty"`
	NonBilledMinsSum *int32 `json:"nonBilledMinsSum,omitempty"`
	TotalMinsSum *int32 `json:"totalMinsSum,omitempty"`
}

// NewSummaryTimeCounterTotalResponse instantiates a new SummaryTimeCounterTotalResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummaryTimeCounterTotalResponse() *SummaryTimeCounterTotalResponse {
	this := SummaryTimeCounterTotalResponse{}
	return &this
}

// NewSummaryTimeCounterTotalResponseWithDefaults instantiates a new SummaryTimeCounterTotalResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryTimeCounterTotalResponseWithDefaults() *SummaryTimeCounterTotalResponse {
	this := SummaryTimeCounterTotalResponse{}
	return &this
}

// GetBillableMinsSum returns the BillableMinsSum field value if set, zero value otherwise.
func (o *SummaryTimeCounterTotalResponse) GetBillableMinsSum() int32 {
	if o == nil || o.BillableMinsSum == nil {
		var ret int32
		return ret
	}
	return *o.BillableMinsSum
}

// GetBillableMinsSumOk returns a tuple with the BillableMinsSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTimeCounterTotalResponse) GetBillableMinsSumOk() (*int32, bool) {
	if o == nil || o.BillableMinsSum == nil {
		return nil, false
	}
	return o.BillableMinsSum, true
}

// HasBillableMinsSum returns a boolean if a field has been set.
func (o *SummaryTimeCounterTotalResponse) HasBillableMinsSum() bool {
	if o != nil && o.BillableMinsSum != nil {
		return true
	}

	return false
}

// SetBillableMinsSum gets a reference to the given int32 and assigns it to the BillableMinsSum field.
func (o *SummaryTimeCounterTotalResponse) SetBillableMinsSum(v int32) {
	o.BillableMinsSum = &v
}

// GetBilledMinsSum returns the BilledMinsSum field value if set, zero value otherwise.
func (o *SummaryTimeCounterTotalResponse) GetBilledMinsSum() int32 {
	if o == nil || o.BilledMinsSum == nil {
		var ret int32
		return ret
	}
	return *o.BilledMinsSum
}

// GetBilledMinsSumOk returns a tuple with the BilledMinsSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTimeCounterTotalResponse) GetBilledMinsSumOk() (*int32, bool) {
	if o == nil || o.BilledMinsSum == nil {
		return nil, false
	}
	return o.BilledMinsSum, true
}

// HasBilledMinsSum returns a boolean if a field has been set.
func (o *SummaryTimeCounterTotalResponse) HasBilledMinsSum() bool {
	if o != nil && o.BilledMinsSum != nil {
		return true
	}

	return false
}

// SetBilledMinsSum gets a reference to the given int32 and assigns it to the BilledMinsSum field.
func (o *SummaryTimeCounterTotalResponse) SetBilledMinsSum(v int32) {
	o.BilledMinsSum = &v
}

// GetNonBillableMinsSum returns the NonBillableMinsSum field value if set, zero value otherwise.
func (o *SummaryTimeCounterTotalResponse) GetNonBillableMinsSum() int32 {
	if o == nil || o.NonBillableMinsSum == nil {
		var ret int32
		return ret
	}
	return *o.NonBillableMinsSum
}

// GetNonBillableMinsSumOk returns a tuple with the NonBillableMinsSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTimeCounterTotalResponse) GetNonBillableMinsSumOk() (*int32, bool) {
	if o == nil || o.NonBillableMinsSum == nil {
		return nil, false
	}
	return o.NonBillableMinsSum, true
}

// HasNonBillableMinsSum returns a boolean if a field has been set.
func (o *SummaryTimeCounterTotalResponse) HasNonBillableMinsSum() bool {
	if o != nil && o.NonBillableMinsSum != nil {
		return true
	}

	return false
}

// SetNonBillableMinsSum gets a reference to the given int32 and assigns it to the NonBillableMinsSum field.
func (o *SummaryTimeCounterTotalResponse) SetNonBillableMinsSum(v int32) {
	o.NonBillableMinsSum = &v
}

// GetNonBilledMinsSum returns the NonBilledMinsSum field value if set, zero value otherwise.
func (o *SummaryTimeCounterTotalResponse) GetNonBilledMinsSum() int32 {
	if o == nil || o.NonBilledMinsSum == nil {
		var ret int32
		return ret
	}
	return *o.NonBilledMinsSum
}

// GetNonBilledMinsSumOk returns a tuple with the NonBilledMinsSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTimeCounterTotalResponse) GetNonBilledMinsSumOk() (*int32, bool) {
	if o == nil || o.NonBilledMinsSum == nil {
		return nil, false
	}
	return o.NonBilledMinsSum, true
}

// HasNonBilledMinsSum returns a boolean if a field has been set.
func (o *SummaryTimeCounterTotalResponse) HasNonBilledMinsSum() bool {
	if o != nil && o.NonBilledMinsSum != nil {
		return true
	}

	return false
}

// SetNonBilledMinsSum gets a reference to the given int32 and assigns it to the NonBilledMinsSum field.
func (o *SummaryTimeCounterTotalResponse) SetNonBilledMinsSum(v int32) {
	o.NonBilledMinsSum = &v
}

// GetTotalMinsSum returns the TotalMinsSum field value if set, zero value otherwise.
func (o *SummaryTimeCounterTotalResponse) GetTotalMinsSum() int32 {
	if o == nil || o.TotalMinsSum == nil {
		var ret int32
		return ret
	}
	return *o.TotalMinsSum
}

// GetTotalMinsSumOk returns a tuple with the TotalMinsSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTimeCounterTotalResponse) GetTotalMinsSumOk() (*int32, bool) {
	if o == nil || o.TotalMinsSum == nil {
		return nil, false
	}
	return o.TotalMinsSum, true
}

// HasTotalMinsSum returns a boolean if a field has been set.
func (o *SummaryTimeCounterTotalResponse) HasTotalMinsSum() bool {
	if o != nil && o.TotalMinsSum != nil {
		return true
	}

	return false
}

// SetTotalMinsSum gets a reference to the given int32 and assigns it to the TotalMinsSum field.
func (o *SummaryTimeCounterTotalResponse) SetTotalMinsSum(v int32) {
	o.TotalMinsSum = &v
}

func (o SummaryTimeCounterTotalResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BillableMinsSum != nil {
		toSerialize["billableMinsSum"] = o.BillableMinsSum
	}
	if o.BilledMinsSum != nil {
		toSerialize["billedMinsSum"] = o.BilledMinsSum
	}
	if o.NonBillableMinsSum != nil {
		toSerialize["nonBillableMinsSum"] = o.NonBillableMinsSum
	}
	if o.NonBilledMinsSum != nil {
		toSerialize["nonBilledMinsSum"] = o.NonBilledMinsSum
	}
	if o.TotalMinsSum != nil {
		toSerialize["totalMinsSum"] = o.TotalMinsSum
	}
	return json.Marshal(toSerialize)
}

type NullableSummaryTimeCounterTotalResponse struct {
	value *SummaryTimeCounterTotalResponse
	isSet bool
}

func (v NullableSummaryTimeCounterTotalResponse) Get() *SummaryTimeCounterTotalResponse {
	return v.value
}

func (v *NullableSummaryTimeCounterTotalResponse) Set(val *SummaryTimeCounterTotalResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryTimeCounterTotalResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryTimeCounterTotalResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryTimeCounterTotalResponse(val *SummaryTimeCounterTotalResponse) *NullableSummaryTimeCounterTotalResponse {
	return &NullableSummaryTimeCounterTotalResponse{value: val, isSet: true}
}

func (v NullableSummaryTimeCounterTotalResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryTimeCounterTotalResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


