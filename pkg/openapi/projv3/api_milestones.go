/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// MilestonesApiService MilestonesApi service
type MilestonesApiService service

type ApiGETProjectsApiV3MilestonesCsvRequest struct {
	ctx _context.Context
	ApiService *MilestonesApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	status *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	projectStatus *string
	orderMode *string
	orderBy *string
	dueBeforeDate *string
	dueBefore *string
	dueAfterDate *string
	dueAfter *string
	projectHealths *int32
	projectHealth *int32
	pageSize *int32
	page *int32
	showPrivate *bool
	showPercentageCompleted *bool
	showDeleted *bool
	showAttachedTasklists *bool
	searchCompaniesTeams *bool
	searchAssignees *bool
	progress *bool
	onlyStarredProjects *bool
	onlyMyProjects *bool
	onlyAdminProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeUpdate *bool
	includeToday *bool
	includeTeamUserIds *bool
	includeTags *bool
	includeProgress *bool
	includeCompleted *bool
	includeCompanyUserIds *bool
	includeAssigneeTeams *bool
	includeAssigneeCompanies *bool
	includeArchivedProjects *bool
	emoji *bool
	countUnreadComments *bool
	calendar *bool
	tagIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	ids *[]int32
	followerIds *[]int32
	fieldsUsers *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsMilestones *[]string
	fieldsCompanies *[]string
	creatorIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3MilestonesCsvRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) Status(status string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) OrderMode(orderMode string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) OrderBy(orderBy string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) DueBeforeDate(dueBeforeDate string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.dueBeforeDate = &dueBeforeDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) DueBefore(dueBefore string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.dueBefore = &dueBefore
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) DueAfterDate(dueAfterDate string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.dueAfterDate = &dueAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) DueAfter(dueAfter string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.dueAfter = &dueAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ProjectHealth(projectHealth int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) PageSize(pageSize int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) Page(page int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ShowPrivate(showPrivate bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.showPrivate = &showPrivate
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ShowPercentageCompleted(showPercentageCompleted bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.showPercentageCompleted = &showPercentageCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ShowAttachedTasklists(showAttachedTasklists bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.showAttachedTasklists = &showAttachedTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) SearchCompaniesTeams(searchCompaniesTeams bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.searchCompaniesTeams = &searchCompaniesTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) SearchAssignees(searchAssignees bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.searchAssignees = &searchAssignees
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) Progress(progress bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.progress = &progress
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) OnlyMyProjects(onlyMyProjects bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.onlyMyProjects = &onlyMyProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) OnlyAdminProjects(onlyAdminProjects bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.onlyAdminProjects = &onlyAdminProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IncludeUpdate(includeUpdate bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.includeUpdate = &includeUpdate
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IncludeProgress(includeProgress bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.includeProgress = &includeProgress
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IncludeCompleted(includeCompleted bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.includeCompleted = &includeCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) Emoji(emoji bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.emoji = &emoji
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) CountUnreadComments(countUnreadComments bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.countUnreadComments = &countUnreadComments
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) Calendar(calendar bool) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.calendar = &calendar
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) Include(include []string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) Ids(ids []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.ids = &ids
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesCsvRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3MilestonesCsvRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3MilestonesCsvRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3MilestonesCsvExecute(r)
}

/*
 * GETProjectsApiV3MilestonesCsv Generate milestone report in CSV format
 * Generates a milestone report in CSV format containing all milestones for the
provided filters. Only the milestones that the logged-in user can access will
be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3MilestonesCsvRequest
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesCsv(ctx _context.Context) ApiGETProjectsApiV3MilestonesCsvRequest {
	return ApiGETProjectsApiV3MilestonesCsvRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesCsvExecute(r ApiGETProjectsApiV3MilestonesCsvRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MilestonesApiService.GETProjectsApiV3MilestonesCsv")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/milestones.csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.dueBeforeDate != nil {
		localVarQueryParams.Add("dueBeforeDate", parameterToString(*r.dueBeforeDate, ""))
	}
	if r.dueBefore != nil {
		localVarQueryParams.Add("dueBefore", parameterToString(*r.dueBefore, ""))
	}
	if r.dueAfterDate != nil {
		localVarQueryParams.Add("dueAfterDate", parameterToString(*r.dueAfterDate, ""))
	}
	if r.dueAfter != nil {
		localVarQueryParams.Add("dueAfter", parameterToString(*r.dueAfter, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showPrivate != nil {
		localVarQueryParams.Add("showPrivate", parameterToString(*r.showPrivate, ""))
	}
	if r.showPercentageCompleted != nil {
		localVarQueryParams.Add("showPercentageCompleted", parameterToString(*r.showPercentageCompleted, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showAttachedTasklists != nil {
		localVarQueryParams.Add("showAttachedTasklists", parameterToString(*r.showAttachedTasklists, ""))
	}
	if r.searchCompaniesTeams != nil {
		localVarQueryParams.Add("searchCompaniesTeams", parameterToString(*r.searchCompaniesTeams, ""))
	}
	if r.searchAssignees != nil {
		localVarQueryParams.Add("searchAssignees", parameterToString(*r.searchAssignees, ""))
	}
	if r.progress != nil {
		localVarQueryParams.Add("progress", parameterToString(*r.progress, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyMyProjects != nil {
		localVarQueryParams.Add("onlyMyProjects", parameterToString(*r.onlyMyProjects, ""))
	}
	if r.onlyAdminProjects != nil {
		localVarQueryParams.Add("onlyAdminProjects", parameterToString(*r.onlyAdminProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUpdate != nil {
		localVarQueryParams.Add("includeUpdate", parameterToString(*r.includeUpdate, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProgress != nil {
		localVarQueryParams.Add("includeProgress", parameterToString(*r.includeProgress, ""))
	}
	if r.includeCompleted != nil {
		localVarQueryParams.Add("includeCompleted", parameterToString(*r.includeCompleted, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.emoji != nil {
		localVarQueryParams.Add("emoji", parameterToString(*r.emoji, ""))
	}
	if r.countUnreadComments != nil {
		localVarQueryParams.Add("countUnreadComments", parameterToString(*r.countUnreadComments, ""))
	}
	if r.calendar != nil {
		localVarQueryParams.Add("calendar", parameterToString(*r.calendar, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("followerIds", parameterToString(*r.followerIds, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3MilestonesHtmlRequest struct {
	ctx _context.Context
	ApiService *MilestonesApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	status *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	projectStatus *string
	orderMode *string
	orderBy *string
	dueBeforeDate *string
	dueBefore *string
	dueAfterDate *string
	dueAfter *string
	projectHealths *int32
	projectHealth *int32
	pageSize *int32
	page *int32
	showPrivate *bool
	showPercentageCompleted *bool
	showDeleted *bool
	showAttachedTasklists *bool
	searchCompaniesTeams *bool
	searchAssignees *bool
	progress *bool
	onlyStarredProjects *bool
	onlyMyProjects *bool
	onlyAdminProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeUpdate *bool
	includeToday *bool
	includeTeamUserIds *bool
	includeTags *bool
	includeProgress *bool
	includeCompleted *bool
	includeCompanyUserIds *bool
	includeAssigneeTeams *bool
	includeAssigneeCompanies *bool
	includeArchivedProjects *bool
	emoji *bool
	countUnreadComments *bool
	calendar *bool
	tagIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	ids *[]int32
	followerIds *[]int32
	fieldsUsers *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsMilestones *[]string
	fieldsCompanies *[]string
	creatorIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3MilestonesHtmlRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) Status(status string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) OrderMode(orderMode string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) OrderBy(orderBy string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) DueBeforeDate(dueBeforeDate string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.dueBeforeDate = &dueBeforeDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) DueBefore(dueBefore string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.dueBefore = &dueBefore
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) DueAfterDate(dueAfterDate string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.dueAfterDate = &dueAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) DueAfter(dueAfter string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.dueAfter = &dueAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ProjectHealth(projectHealth int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) PageSize(pageSize int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) Page(page int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ShowPrivate(showPrivate bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.showPrivate = &showPrivate
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ShowPercentageCompleted(showPercentageCompleted bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.showPercentageCompleted = &showPercentageCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ShowAttachedTasklists(showAttachedTasklists bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.showAttachedTasklists = &showAttachedTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) SearchCompaniesTeams(searchCompaniesTeams bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.searchCompaniesTeams = &searchCompaniesTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) SearchAssignees(searchAssignees bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.searchAssignees = &searchAssignees
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) Progress(progress bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.progress = &progress
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) OnlyMyProjects(onlyMyProjects bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.onlyMyProjects = &onlyMyProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) OnlyAdminProjects(onlyAdminProjects bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.onlyAdminProjects = &onlyAdminProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IncludeUpdate(includeUpdate bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.includeUpdate = &includeUpdate
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IncludeProgress(includeProgress bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.includeProgress = &includeProgress
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IncludeCompleted(includeCompleted bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.includeCompleted = &includeCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) Emoji(emoji bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.emoji = &emoji
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) CountUnreadComments(countUnreadComments bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.countUnreadComments = &countUnreadComments
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) Calendar(calendar bool) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.calendar = &calendar
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) Include(include []string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) Ids(ids []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.ids = &ids
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesHtmlRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3MilestonesHtmlRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3MilestonesHtmlRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3MilestonesHtmlExecute(r)
}

/*
 * GETProjectsApiV3MilestonesHtml Generate milestone report in HTML format
 * Generates a milestone report in HTML format containing all milestones for the
provided filters. Only the milestones that the logged-in user can access will
be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3MilestonesHtmlRequest
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesHtml(ctx _context.Context) ApiGETProjectsApiV3MilestonesHtmlRequest {
	return ApiGETProjectsApiV3MilestonesHtmlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesHtmlExecute(r ApiGETProjectsApiV3MilestonesHtmlRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MilestonesApiService.GETProjectsApiV3MilestonesHtml")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/milestones.html"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.dueBeforeDate != nil {
		localVarQueryParams.Add("dueBeforeDate", parameterToString(*r.dueBeforeDate, ""))
	}
	if r.dueBefore != nil {
		localVarQueryParams.Add("dueBefore", parameterToString(*r.dueBefore, ""))
	}
	if r.dueAfterDate != nil {
		localVarQueryParams.Add("dueAfterDate", parameterToString(*r.dueAfterDate, ""))
	}
	if r.dueAfter != nil {
		localVarQueryParams.Add("dueAfter", parameterToString(*r.dueAfter, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showPrivate != nil {
		localVarQueryParams.Add("showPrivate", parameterToString(*r.showPrivate, ""))
	}
	if r.showPercentageCompleted != nil {
		localVarQueryParams.Add("showPercentageCompleted", parameterToString(*r.showPercentageCompleted, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showAttachedTasklists != nil {
		localVarQueryParams.Add("showAttachedTasklists", parameterToString(*r.showAttachedTasklists, ""))
	}
	if r.searchCompaniesTeams != nil {
		localVarQueryParams.Add("searchCompaniesTeams", parameterToString(*r.searchCompaniesTeams, ""))
	}
	if r.searchAssignees != nil {
		localVarQueryParams.Add("searchAssignees", parameterToString(*r.searchAssignees, ""))
	}
	if r.progress != nil {
		localVarQueryParams.Add("progress", parameterToString(*r.progress, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyMyProjects != nil {
		localVarQueryParams.Add("onlyMyProjects", parameterToString(*r.onlyMyProjects, ""))
	}
	if r.onlyAdminProjects != nil {
		localVarQueryParams.Add("onlyAdminProjects", parameterToString(*r.onlyAdminProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUpdate != nil {
		localVarQueryParams.Add("includeUpdate", parameterToString(*r.includeUpdate, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProgress != nil {
		localVarQueryParams.Add("includeProgress", parameterToString(*r.includeProgress, ""))
	}
	if r.includeCompleted != nil {
		localVarQueryParams.Add("includeCompleted", parameterToString(*r.includeCompleted, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.emoji != nil {
		localVarQueryParams.Add("emoji", parameterToString(*r.emoji, ""))
	}
	if r.countUnreadComments != nil {
		localVarQueryParams.Add("countUnreadComments", parameterToString(*r.countUnreadComments, ""))
	}
	if r.calendar != nil {
		localVarQueryParams.Add("calendar", parameterToString(*r.calendar, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("followerIds", parameterToString(*r.followerIds, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3MilestonesIdJsonRequest struct {
	ctx _context.Context
	ApiService *MilestonesApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	status *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	projectStatus *string
	orderMode *string
	orderBy *string
	dueBeforeDate *string
	dueBefore *string
	dueAfterDate *string
	dueAfter *string
	projectHealths *int32
	projectHealth *int32
	pageSize *int32
	page *int32
	showPrivate *bool
	showPercentageCompleted *bool
	showDeleted *bool
	showAttachedTasklists *bool
	searchCompaniesTeams *bool
	searchAssignees *bool
	progress *bool
	onlyStarredProjects *bool
	onlyMyProjects *bool
	onlyAdminProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeUpdate *bool
	includeToday *bool
	includeTeamUserIds *bool
	includeTags *bool
	includeProgress *bool
	includeCompleted *bool
	includeCompanyUserIds *bool
	includeAssigneeTeams *bool
	includeAssigneeCompanies *bool
	includeArchivedProjects *bool
	emoji *bool
	countUnreadComments *bool
	calendar *bool
	tagIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	ids *[]int32
	followerIds *[]int32
	fieldsUsers *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsMilestones *[]string
	fieldsCompanies *[]string
	creatorIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) Status(status string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) DueBeforeDate(dueBeforeDate string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.dueBeforeDate = &dueBeforeDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) DueBefore(dueBefore string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.dueBefore = &dueBefore
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) DueAfterDate(dueAfterDate string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.dueAfterDate = &dueAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) DueAfter(dueAfter string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.dueAfter = &dueAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ProjectHealth(projectHealth int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) Page(page int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ShowPrivate(showPrivate bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.showPrivate = &showPrivate
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ShowPercentageCompleted(showPercentageCompleted bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.showPercentageCompleted = &showPercentageCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ShowAttachedTasklists(showAttachedTasklists bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.showAttachedTasklists = &showAttachedTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) SearchCompaniesTeams(searchCompaniesTeams bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.searchCompaniesTeams = &searchCompaniesTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) SearchAssignees(searchAssignees bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.searchAssignees = &searchAssignees
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) Progress(progress bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.progress = &progress
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) OnlyMyProjects(onlyMyProjects bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.onlyMyProjects = &onlyMyProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) OnlyAdminProjects(onlyAdminProjects bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.onlyAdminProjects = &onlyAdminProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IncludeUpdate(includeUpdate bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.includeUpdate = &includeUpdate
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IncludeProgress(includeProgress bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.includeProgress = &includeProgress
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IncludeCompleted(includeCompleted bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.includeCompleted = &includeCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) Emoji(emoji bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.emoji = &emoji
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) CountUnreadComments(countUnreadComments bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.countUnreadComments = &countUnreadComments
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) Calendar(calendar bool) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.calendar = &calendar
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) Include(include []string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) Ids(ids []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.ids = &ids
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3MilestonesIdJsonRequest) Execute() (MilestoneResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3MilestonesIdJsonExecute(r)
}

/*
 * GETProjectsApiV3MilestonesIdJson Get a milestone by id.
 * This returns all details about an individual milestone.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3MilestonesIdJsonRequest
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesIdJson(ctx _context.Context) ApiGETProjectsApiV3MilestonesIdJsonRequest {
	return ApiGETProjectsApiV3MilestonesIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MilestoneResponse
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesIdJsonExecute(r ApiGETProjectsApiV3MilestonesIdJsonRequest) (MilestoneResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MilestoneResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MilestonesApiService.GETProjectsApiV3MilestonesIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/milestones/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.dueBeforeDate != nil {
		localVarQueryParams.Add("dueBeforeDate", parameterToString(*r.dueBeforeDate, ""))
	}
	if r.dueBefore != nil {
		localVarQueryParams.Add("dueBefore", parameterToString(*r.dueBefore, ""))
	}
	if r.dueAfterDate != nil {
		localVarQueryParams.Add("dueAfterDate", parameterToString(*r.dueAfterDate, ""))
	}
	if r.dueAfter != nil {
		localVarQueryParams.Add("dueAfter", parameterToString(*r.dueAfter, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showPrivate != nil {
		localVarQueryParams.Add("showPrivate", parameterToString(*r.showPrivate, ""))
	}
	if r.showPercentageCompleted != nil {
		localVarQueryParams.Add("showPercentageCompleted", parameterToString(*r.showPercentageCompleted, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showAttachedTasklists != nil {
		localVarQueryParams.Add("showAttachedTasklists", parameterToString(*r.showAttachedTasklists, ""))
	}
	if r.searchCompaniesTeams != nil {
		localVarQueryParams.Add("searchCompaniesTeams", parameterToString(*r.searchCompaniesTeams, ""))
	}
	if r.searchAssignees != nil {
		localVarQueryParams.Add("searchAssignees", parameterToString(*r.searchAssignees, ""))
	}
	if r.progress != nil {
		localVarQueryParams.Add("progress", parameterToString(*r.progress, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyMyProjects != nil {
		localVarQueryParams.Add("onlyMyProjects", parameterToString(*r.onlyMyProjects, ""))
	}
	if r.onlyAdminProjects != nil {
		localVarQueryParams.Add("onlyAdminProjects", parameterToString(*r.onlyAdminProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUpdate != nil {
		localVarQueryParams.Add("includeUpdate", parameterToString(*r.includeUpdate, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProgress != nil {
		localVarQueryParams.Add("includeProgress", parameterToString(*r.includeProgress, ""))
	}
	if r.includeCompleted != nil {
		localVarQueryParams.Add("includeCompleted", parameterToString(*r.includeCompleted, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.emoji != nil {
		localVarQueryParams.Add("emoji", parameterToString(*r.emoji, ""))
	}
	if r.countUnreadComments != nil {
		localVarQueryParams.Add("countUnreadComments", parameterToString(*r.countUnreadComments, ""))
	}
	if r.calendar != nil {
		localVarQueryParams.Add("calendar", parameterToString(*r.calendar, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("followerIds", parameterToString(*r.followerIds, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3MilestonesJsonRequest struct {
	ctx _context.Context
	ApiService *MilestonesApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	status *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	projectStatus *string
	orderMode *string
	orderBy *string
	dueBeforeDate *string
	dueBefore *string
	dueAfterDate *string
	dueAfter *string
	projectHealths *int32
	projectHealth *int32
	pageSize *int32
	page *int32
	showPrivate *bool
	showPercentageCompleted *bool
	showDeleted *bool
	showAttachedTasklists *bool
	searchCompaniesTeams *bool
	searchAssignees *bool
	progress *bool
	onlyStarredProjects *bool
	onlyMyProjects *bool
	onlyAdminProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeUpdate *bool
	includeToday *bool
	includeTeamUserIds *bool
	includeTags *bool
	includeProgress *bool
	includeCompleted *bool
	includeCompanyUserIds *bool
	includeAssigneeTeams *bool
	includeAssigneeCompanies *bool
	includeArchivedProjects *bool
	emoji *bool
	countUnreadComments *bool
	calendar *bool
	tagIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	ids *[]int32
	followerIds *[]int32
	fieldsUsers *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsMilestones *[]string
	fieldsCompanies *[]string
	creatorIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3MilestonesJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) Status(status string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) DueBeforeDate(dueBeforeDate string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.dueBeforeDate = &dueBeforeDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) DueBefore(dueBefore string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.dueBefore = &dueBefore
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) DueAfterDate(dueAfterDate string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.dueAfterDate = &dueAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) DueAfter(dueAfter string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.dueAfter = &dueAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ProjectHealth(projectHealth int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) Page(page int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ShowPrivate(showPrivate bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.showPrivate = &showPrivate
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ShowPercentageCompleted(showPercentageCompleted bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.showPercentageCompleted = &showPercentageCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ShowAttachedTasklists(showAttachedTasklists bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.showAttachedTasklists = &showAttachedTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) SearchCompaniesTeams(searchCompaniesTeams bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.searchCompaniesTeams = &searchCompaniesTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) SearchAssignees(searchAssignees bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.searchAssignees = &searchAssignees
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) Progress(progress bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.progress = &progress
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) OnlyMyProjects(onlyMyProjects bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.onlyMyProjects = &onlyMyProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) OnlyAdminProjects(onlyAdminProjects bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.onlyAdminProjects = &onlyAdminProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IncludeUpdate(includeUpdate bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.includeUpdate = &includeUpdate
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IncludeProgress(includeProgress bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.includeProgress = &includeProgress
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IncludeCompleted(includeCompleted bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.includeCompleted = &includeCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) Emoji(emoji bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.emoji = &emoji
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) CountUnreadComments(countUnreadComments bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.countUnreadComments = &countUnreadComments
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) Calendar(calendar bool) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.calendar = &calendar
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) Include(include []string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) Ids(ids []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.ids = &ids
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesJsonRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3MilestonesJsonRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3MilestonesJsonRequest) Execute() (MilestoneMilestonesResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3MilestonesJsonExecute(r)
}

/*
 * GETProjectsApiV3MilestonesJson Get all milestones
 * All milestones are returned on projects that the authenticated user is
associated with. You can use the provided filters to return only those
milestones that are incomplete, completed, upcoming or late. All milestones
are returning in this call. This call uses pagination, returning 100
milestones per page by default.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3MilestonesJsonRequest
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesJson(ctx _context.Context) ApiGETProjectsApiV3MilestonesJsonRequest {
	return ApiGETProjectsApiV3MilestonesJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MilestoneMilestonesResponse
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesJsonExecute(r ApiGETProjectsApiV3MilestonesJsonRequest) (MilestoneMilestonesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MilestoneMilestonesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MilestonesApiService.GETProjectsApiV3MilestonesJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/milestones.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.dueBeforeDate != nil {
		localVarQueryParams.Add("dueBeforeDate", parameterToString(*r.dueBeforeDate, ""))
	}
	if r.dueBefore != nil {
		localVarQueryParams.Add("dueBefore", parameterToString(*r.dueBefore, ""))
	}
	if r.dueAfterDate != nil {
		localVarQueryParams.Add("dueAfterDate", parameterToString(*r.dueAfterDate, ""))
	}
	if r.dueAfter != nil {
		localVarQueryParams.Add("dueAfter", parameterToString(*r.dueAfter, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showPrivate != nil {
		localVarQueryParams.Add("showPrivate", parameterToString(*r.showPrivate, ""))
	}
	if r.showPercentageCompleted != nil {
		localVarQueryParams.Add("showPercentageCompleted", parameterToString(*r.showPercentageCompleted, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showAttachedTasklists != nil {
		localVarQueryParams.Add("showAttachedTasklists", parameterToString(*r.showAttachedTasklists, ""))
	}
	if r.searchCompaniesTeams != nil {
		localVarQueryParams.Add("searchCompaniesTeams", parameterToString(*r.searchCompaniesTeams, ""))
	}
	if r.searchAssignees != nil {
		localVarQueryParams.Add("searchAssignees", parameterToString(*r.searchAssignees, ""))
	}
	if r.progress != nil {
		localVarQueryParams.Add("progress", parameterToString(*r.progress, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyMyProjects != nil {
		localVarQueryParams.Add("onlyMyProjects", parameterToString(*r.onlyMyProjects, ""))
	}
	if r.onlyAdminProjects != nil {
		localVarQueryParams.Add("onlyAdminProjects", parameterToString(*r.onlyAdminProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUpdate != nil {
		localVarQueryParams.Add("includeUpdate", parameterToString(*r.includeUpdate, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProgress != nil {
		localVarQueryParams.Add("includeProgress", parameterToString(*r.includeProgress, ""))
	}
	if r.includeCompleted != nil {
		localVarQueryParams.Add("includeCompleted", parameterToString(*r.includeCompleted, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.emoji != nil {
		localVarQueryParams.Add("emoji", parameterToString(*r.emoji, ""))
	}
	if r.countUnreadComments != nil {
		localVarQueryParams.Add("countUnreadComments", parameterToString(*r.countUnreadComments, ""))
	}
	if r.calendar != nil {
		localVarQueryParams.Add("calendar", parameterToString(*r.calendar, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("followerIds", parameterToString(*r.followerIds, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3MilestonesMetricsDeadlinesJsonRequest struct {
	ctx _context.Context
	ApiService *MilestonesApiService
	startDate *string
	endDate *string
}

func (r ApiGETProjectsApiV3MilestonesMetricsDeadlinesJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3MilestonesMetricsDeadlinesJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesMetricsDeadlinesJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3MilestonesMetricsDeadlinesJsonRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGETProjectsApiV3MilestonesMetricsDeadlinesJsonRequest) Execute() (DeadlineMilestoneMetricDeadlinesResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3MilestonesMetricsDeadlinesJsonExecute(r)
}

/*
 * GETProjectsApiV3MilestonesMetricsDeadlinesJson Get milestones by due date in a time range
 * Count the number of milestones on each deadline date. Only the milestones
that the logged-in user can access will be included in the counting.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3MilestonesMetricsDeadlinesJsonRequest
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesMetricsDeadlinesJson(ctx _context.Context) ApiGETProjectsApiV3MilestonesMetricsDeadlinesJsonRequest {
	return ApiGETProjectsApiV3MilestonesMetricsDeadlinesJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return DeadlineMilestoneMetricDeadlinesResponse
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesMetricsDeadlinesJsonExecute(r ApiGETProjectsApiV3MilestonesMetricsDeadlinesJsonRequest) (DeadlineMilestoneMetricDeadlinesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DeadlineMilestoneMetricDeadlinesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MilestonesApiService.GETProjectsApiV3MilestonesMetricsDeadlinesJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/milestones/metrics/deadlines.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3MilestonesPdfRequest struct {
	ctx _context.Context
	ApiService *MilestonesApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	status *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	projectStatus *string
	orderMode *string
	orderBy *string
	dueBeforeDate *string
	dueBefore *string
	dueAfterDate *string
	dueAfter *string
	projectHealths *int32
	projectHealth *int32
	pageSize *int32
	page *int32
	showPrivate *bool
	showPercentageCompleted *bool
	showDeleted *bool
	showAttachedTasklists *bool
	searchCompaniesTeams *bool
	searchAssignees *bool
	progress *bool
	onlyStarredProjects *bool
	onlyMyProjects *bool
	onlyAdminProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeUpdate *bool
	includeToday *bool
	includeTeamUserIds *bool
	includeTags *bool
	includeProgress *bool
	includeCompleted *bool
	includeCompanyUserIds *bool
	includeAssigneeTeams *bool
	includeAssigneeCompanies *bool
	includeArchivedProjects *bool
	emoji *bool
	countUnreadComments *bool
	calendar *bool
	tagIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	ids *[]int32
	followerIds *[]int32
	fieldsUsers *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsMilestones *[]string
	fieldsCompanies *[]string
	creatorIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3MilestonesPdfRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) Status(status string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) OrderMode(orderMode string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) OrderBy(orderBy string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) DueBeforeDate(dueBeforeDate string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.dueBeforeDate = &dueBeforeDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) DueBefore(dueBefore string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.dueBefore = &dueBefore
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) DueAfterDate(dueAfterDate string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.dueAfterDate = &dueAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) DueAfter(dueAfter string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.dueAfter = &dueAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ProjectHealth(projectHealth int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) PageSize(pageSize int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) Page(page int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ShowPrivate(showPrivate bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.showPrivate = &showPrivate
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ShowPercentageCompleted(showPercentageCompleted bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.showPercentageCompleted = &showPercentageCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ShowAttachedTasklists(showAttachedTasklists bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.showAttachedTasklists = &showAttachedTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) SearchCompaniesTeams(searchCompaniesTeams bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.searchCompaniesTeams = &searchCompaniesTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) SearchAssignees(searchAssignees bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.searchAssignees = &searchAssignees
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) Progress(progress bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.progress = &progress
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) OnlyMyProjects(onlyMyProjects bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.onlyMyProjects = &onlyMyProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) OnlyAdminProjects(onlyAdminProjects bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.onlyAdminProjects = &onlyAdminProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IncludeUpdate(includeUpdate bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.includeUpdate = &includeUpdate
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IncludeProgress(includeProgress bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.includeProgress = &includeProgress
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IncludeCompleted(includeCompleted bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.includeCompleted = &includeCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) Emoji(emoji bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.emoji = &emoji
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) CountUnreadComments(countUnreadComments bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.countUnreadComments = &countUnreadComments
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) Calendar(calendar bool) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.calendar = &calendar
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) Include(include []string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) Ids(ids []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.ids = &ids
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesPdfRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3MilestonesPdfRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3MilestonesPdfRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3MilestonesPdfExecute(r)
}

/*
 * GETProjectsApiV3MilestonesPdf Generate milestone report in PDF format
 * Generates a milestone report in PDF format containing all milestones for the
provided filters. Only the milestones that the logged-in user can access will
be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3MilestonesPdfRequest
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesPdf(ctx _context.Context) ApiGETProjectsApiV3MilestonesPdfRequest {
	return ApiGETProjectsApiV3MilestonesPdfRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesPdfExecute(r ApiGETProjectsApiV3MilestonesPdfRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MilestonesApiService.GETProjectsApiV3MilestonesPdf")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/milestones.pdf"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.dueBeforeDate != nil {
		localVarQueryParams.Add("dueBeforeDate", parameterToString(*r.dueBeforeDate, ""))
	}
	if r.dueBefore != nil {
		localVarQueryParams.Add("dueBefore", parameterToString(*r.dueBefore, ""))
	}
	if r.dueAfterDate != nil {
		localVarQueryParams.Add("dueAfterDate", parameterToString(*r.dueAfterDate, ""))
	}
	if r.dueAfter != nil {
		localVarQueryParams.Add("dueAfter", parameterToString(*r.dueAfter, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showPrivate != nil {
		localVarQueryParams.Add("showPrivate", parameterToString(*r.showPrivate, ""))
	}
	if r.showPercentageCompleted != nil {
		localVarQueryParams.Add("showPercentageCompleted", parameterToString(*r.showPercentageCompleted, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showAttachedTasklists != nil {
		localVarQueryParams.Add("showAttachedTasklists", parameterToString(*r.showAttachedTasklists, ""))
	}
	if r.searchCompaniesTeams != nil {
		localVarQueryParams.Add("searchCompaniesTeams", parameterToString(*r.searchCompaniesTeams, ""))
	}
	if r.searchAssignees != nil {
		localVarQueryParams.Add("searchAssignees", parameterToString(*r.searchAssignees, ""))
	}
	if r.progress != nil {
		localVarQueryParams.Add("progress", parameterToString(*r.progress, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyMyProjects != nil {
		localVarQueryParams.Add("onlyMyProjects", parameterToString(*r.onlyMyProjects, ""))
	}
	if r.onlyAdminProjects != nil {
		localVarQueryParams.Add("onlyAdminProjects", parameterToString(*r.onlyAdminProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUpdate != nil {
		localVarQueryParams.Add("includeUpdate", parameterToString(*r.includeUpdate, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProgress != nil {
		localVarQueryParams.Add("includeProgress", parameterToString(*r.includeProgress, ""))
	}
	if r.includeCompleted != nil {
		localVarQueryParams.Add("includeCompleted", parameterToString(*r.includeCompleted, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.emoji != nil {
		localVarQueryParams.Add("emoji", parameterToString(*r.emoji, ""))
	}
	if r.countUnreadComments != nil {
		localVarQueryParams.Add("countUnreadComments", parameterToString(*r.countUnreadComments, ""))
	}
	if r.calendar != nil {
		localVarQueryParams.Add("calendar", parameterToString(*r.calendar, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("followerIds", parameterToString(*r.followerIds, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/pdf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3MilestonesXlsxRequest struct {
	ctx _context.Context
	ApiService *MilestonesApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	status *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	projectStatus *string
	orderMode *string
	orderBy *string
	dueBeforeDate *string
	dueBefore *string
	dueAfterDate *string
	dueAfter *string
	projectHealths *int32
	projectHealth *int32
	pageSize *int32
	page *int32
	showPrivate *bool
	showPercentageCompleted *bool
	showDeleted *bool
	showAttachedTasklists *bool
	searchCompaniesTeams *bool
	searchAssignees *bool
	progress *bool
	onlyStarredProjects *bool
	onlyMyProjects *bool
	onlyAdminProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeUpdate *bool
	includeToday *bool
	includeTeamUserIds *bool
	includeTags *bool
	includeProgress *bool
	includeCompleted *bool
	includeCompanyUserIds *bool
	includeAssigneeTeams *bool
	includeAssigneeCompanies *bool
	includeArchivedProjects *bool
	emoji *bool
	countUnreadComments *bool
	calendar *bool
	tagIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	ids *[]int32
	followerIds *[]int32
	fieldsUsers *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsMilestones *[]string
	fieldsCompanies *[]string
	creatorIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3MilestonesXlsxRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) Status(status string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) OrderMode(orderMode string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) OrderBy(orderBy string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) DueBeforeDate(dueBeforeDate string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.dueBeforeDate = &dueBeforeDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) DueBefore(dueBefore string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.dueBefore = &dueBefore
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) DueAfterDate(dueAfterDate string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.dueAfterDate = &dueAfterDate
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) DueAfter(dueAfter string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.dueAfter = &dueAfter
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ProjectHealth(projectHealth int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) PageSize(pageSize int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) Page(page int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ShowPrivate(showPrivate bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.showPrivate = &showPrivate
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ShowPercentageCompleted(showPercentageCompleted bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.showPercentageCompleted = &showPercentageCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ShowAttachedTasklists(showAttachedTasklists bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.showAttachedTasklists = &showAttachedTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) SearchCompaniesTeams(searchCompaniesTeams bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.searchCompaniesTeams = &searchCompaniesTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) SearchAssignees(searchAssignees bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.searchAssignees = &searchAssignees
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) Progress(progress bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.progress = &progress
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) OnlyMyProjects(onlyMyProjects bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.onlyMyProjects = &onlyMyProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) OnlyAdminProjects(onlyAdminProjects bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.onlyAdminProjects = &onlyAdminProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IncludeUpdate(includeUpdate bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.includeUpdate = &includeUpdate
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IncludeProgress(includeProgress bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.includeProgress = &includeProgress
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IncludeCompleted(includeCompleted bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.includeCompleted = &includeCompleted
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) Emoji(emoji bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.emoji = &emoji
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) CountUnreadComments(countUnreadComments bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.countUnreadComments = &countUnreadComments
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) Calendar(calendar bool) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.calendar = &calendar
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) Include(include []string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) Ids(ids []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.ids = &ids
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3MilestonesXlsxRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3MilestonesXlsxRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3MilestonesXlsxRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3MilestonesXlsxExecute(r)
}

/*
 * GETProjectsApiV3MilestonesXlsx Generate milestone report in XLSX format
 * Generates a milestone report in XLSX format containing all milestones for the
provided filters. Only the milestones that the logged-in user can access will
be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3MilestonesXlsxRequest
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesXlsx(ctx _context.Context) ApiGETProjectsApiV3MilestonesXlsxRequest {
	return ApiGETProjectsApiV3MilestonesXlsxRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *MilestonesApiService) GETProjectsApiV3MilestonesXlsxExecute(r ApiGETProjectsApiV3MilestonesXlsxRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MilestonesApiService.GETProjectsApiV3MilestonesXlsx")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/milestones.xlsx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.dueBeforeDate != nil {
		localVarQueryParams.Add("dueBeforeDate", parameterToString(*r.dueBeforeDate, ""))
	}
	if r.dueBefore != nil {
		localVarQueryParams.Add("dueBefore", parameterToString(*r.dueBefore, ""))
	}
	if r.dueAfterDate != nil {
		localVarQueryParams.Add("dueAfterDate", parameterToString(*r.dueAfterDate, ""))
	}
	if r.dueAfter != nil {
		localVarQueryParams.Add("dueAfter", parameterToString(*r.dueAfter, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showPrivate != nil {
		localVarQueryParams.Add("showPrivate", parameterToString(*r.showPrivate, ""))
	}
	if r.showPercentageCompleted != nil {
		localVarQueryParams.Add("showPercentageCompleted", parameterToString(*r.showPercentageCompleted, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showAttachedTasklists != nil {
		localVarQueryParams.Add("showAttachedTasklists", parameterToString(*r.showAttachedTasklists, ""))
	}
	if r.searchCompaniesTeams != nil {
		localVarQueryParams.Add("searchCompaniesTeams", parameterToString(*r.searchCompaniesTeams, ""))
	}
	if r.searchAssignees != nil {
		localVarQueryParams.Add("searchAssignees", parameterToString(*r.searchAssignees, ""))
	}
	if r.progress != nil {
		localVarQueryParams.Add("progress", parameterToString(*r.progress, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyMyProjects != nil {
		localVarQueryParams.Add("onlyMyProjects", parameterToString(*r.onlyMyProjects, ""))
	}
	if r.onlyAdminProjects != nil {
		localVarQueryParams.Add("onlyAdminProjects", parameterToString(*r.onlyAdminProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUpdate != nil {
		localVarQueryParams.Add("includeUpdate", parameterToString(*r.includeUpdate, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProgress != nil {
		localVarQueryParams.Add("includeProgress", parameterToString(*r.includeProgress, ""))
	}
	if r.includeCompleted != nil {
		localVarQueryParams.Add("includeCompleted", parameterToString(*r.includeCompleted, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.emoji != nil {
		localVarQueryParams.Add("emoji", parameterToString(*r.emoji, ""))
	}
	if r.countUnreadComments != nil {
		localVarQueryParams.Add("countUnreadComments", parameterToString(*r.countUnreadComments, ""))
	}
	if r.calendar != nil {
		localVarQueryParams.Add("calendar", parameterToString(*r.calendar, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("followerIds", parameterToString(*r.followerIds, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest struct {
	ctx _context.Context
	ApiService *MilestonesApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	status *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	projectStatus *string
	orderMode *string
	orderBy *string
	dueBeforeDate *string
	dueBefore *string
	dueAfterDate *string
	dueAfter *string
	projectHealths *int32
	projectHealth *int32
	pageSize *int32
	page *int32
	showPrivate *bool
	showPercentageCompleted *bool
	showDeleted *bool
	showAttachedTasklists *bool
	searchCompaniesTeams *bool
	searchAssignees *bool
	progress *bool
	onlyStarredProjects *bool
	onlyMyProjects *bool
	onlyAdminProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeUpdate *bool
	includeToday *bool
	includeTeamUserIds *bool
	includeTags *bool
	includeProgress *bool
	includeCompleted *bool
	includeCompanyUserIds *bool
	includeAssigneeTeams *bool
	includeAssigneeCompanies *bool
	includeArchivedProjects *bool
	emoji *bool
	countUnreadComments *bool
	calendar *bool
	tagIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	ids *[]int32
	followerIds *[]int32
	fieldsUsers *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsMilestones *[]string
	fieldsCompanies *[]string
	creatorIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) Status(status string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) DueBeforeDate(dueBeforeDate string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.dueBeforeDate = &dueBeforeDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) DueBefore(dueBefore string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.dueBefore = &dueBefore
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) DueAfterDate(dueAfterDate string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.dueAfterDate = &dueAfterDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) DueAfter(dueAfter string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.dueAfter = &dueAfter
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ProjectHealth(projectHealth int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) Page(page int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ShowPrivate(showPrivate bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.showPrivate = &showPrivate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ShowPercentageCompleted(showPercentageCompleted bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.showPercentageCompleted = &showPercentageCompleted
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ShowAttachedTasklists(showAttachedTasklists bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.showAttachedTasklists = &showAttachedTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) SearchCompaniesTeams(searchCompaniesTeams bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.searchCompaniesTeams = &searchCompaniesTeams
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) SearchAssignees(searchAssignees bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.searchAssignees = &searchAssignees
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) Progress(progress bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.progress = &progress
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) OnlyMyProjects(onlyMyProjects bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.onlyMyProjects = &onlyMyProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) OnlyAdminProjects(onlyAdminProjects bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.onlyAdminProjects = &onlyAdminProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IncludeUpdate(includeUpdate bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.includeUpdate = &includeUpdate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IncludeProgress(includeProgress bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.includeProgress = &includeProgress
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IncludeCompleted(includeCompleted bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.includeCompleted = &includeCompleted
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) Emoji(emoji bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.emoji = &emoji
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) CountUnreadComments(countUnreadComments bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.countUnreadComments = &countUnreadComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) Calendar(calendar bool) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.calendar = &calendar
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) Include(include []string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) Ids(ids []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.ids = &ids
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) Execute() (MilestoneMilestonesResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsProjectIdMilestonesJsonExecute(r)
}

/*
 * GETProjectsApiV3ProjectsProjectIdMilestonesJson Get milestones in a project
 * This lets you query the list of milestones for a project. You can use the
provided filters to return only those milestones that are incomplete,
completed, upcoming or late. This call uses pagination, returning 100
milestones per page by default.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest
 */
func (a *MilestonesApiService) GETProjectsApiV3ProjectsProjectIdMilestonesJson(ctx _context.Context) ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest {
	return ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MilestoneMilestonesResponse
 */
func (a *MilestonesApiService) GETProjectsApiV3ProjectsProjectIdMilestonesJsonExecute(r ApiGETProjectsApiV3ProjectsProjectIdMilestonesJsonRequest) (MilestoneMilestonesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MilestoneMilestonesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MilestonesApiService.GETProjectsApiV3ProjectsProjectIdMilestonesJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/milestones.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.dueBeforeDate != nil {
		localVarQueryParams.Add("dueBeforeDate", parameterToString(*r.dueBeforeDate, ""))
	}
	if r.dueBefore != nil {
		localVarQueryParams.Add("dueBefore", parameterToString(*r.dueBefore, ""))
	}
	if r.dueAfterDate != nil {
		localVarQueryParams.Add("dueAfterDate", parameterToString(*r.dueAfterDate, ""))
	}
	if r.dueAfter != nil {
		localVarQueryParams.Add("dueAfter", parameterToString(*r.dueAfter, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showPrivate != nil {
		localVarQueryParams.Add("showPrivate", parameterToString(*r.showPrivate, ""))
	}
	if r.showPercentageCompleted != nil {
		localVarQueryParams.Add("showPercentageCompleted", parameterToString(*r.showPercentageCompleted, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showAttachedTasklists != nil {
		localVarQueryParams.Add("showAttachedTasklists", parameterToString(*r.showAttachedTasklists, ""))
	}
	if r.searchCompaniesTeams != nil {
		localVarQueryParams.Add("searchCompaniesTeams", parameterToString(*r.searchCompaniesTeams, ""))
	}
	if r.searchAssignees != nil {
		localVarQueryParams.Add("searchAssignees", parameterToString(*r.searchAssignees, ""))
	}
	if r.progress != nil {
		localVarQueryParams.Add("progress", parameterToString(*r.progress, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyMyProjects != nil {
		localVarQueryParams.Add("onlyMyProjects", parameterToString(*r.onlyMyProjects, ""))
	}
	if r.onlyAdminProjects != nil {
		localVarQueryParams.Add("onlyAdminProjects", parameterToString(*r.onlyAdminProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUpdate != nil {
		localVarQueryParams.Add("includeUpdate", parameterToString(*r.includeUpdate, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProgress != nil {
		localVarQueryParams.Add("includeProgress", parameterToString(*r.includeProgress, ""))
	}
	if r.includeCompleted != nil {
		localVarQueryParams.Add("includeCompleted", parameterToString(*r.includeCompleted, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.emoji != nil {
		localVarQueryParams.Add("emoji", parameterToString(*r.emoji, ""))
	}
	if r.countUnreadComments != nil {
		localVarQueryParams.Add("countUnreadComments", parameterToString(*r.countUnreadComments, ""))
	}
	if r.calendar != nil {
		localVarQueryParams.Add("calendar", parameterToString(*r.calendar, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("followerIds", parameterToString(*r.followerIds, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
