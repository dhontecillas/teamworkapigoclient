/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewNotebookVersion NotebookVersion contains all the information returned from a notebook version.
type ViewNotebookVersion struct {
	ContentHTML *string `json:"contentHTML,omitempty"`
	Contents *string `json:"contents,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	CreatedBy *int32 `json:"createdBy,omitempty"`
	CreatedByUserID *int32 `json:"createdByUserID,omitempty"`
	DateCreated *string `json:"dateCreated,omitempty"`
	DateUpdated *string `json:"dateUpdated,omitempty"`
	Notebook *ViewRelationship `json:"notebook,omitempty"`
	NotebookId *int32 `json:"notebookId,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	VersionId *int32 `json:"versionId,omitempty"`
	VersionNumber *int32 `json:"versionNumber,omitempty"`
}

// NewViewNotebookVersion instantiates a new ViewNotebookVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewNotebookVersion() *ViewNotebookVersion {
	this := ViewNotebookVersion{}
	return &this
}

// NewViewNotebookVersionWithDefaults instantiates a new ViewNotebookVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewNotebookVersionWithDefaults() *ViewNotebookVersion {
	this := ViewNotebookVersion{}
	return &this
}

// GetContentHTML returns the ContentHTML field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetContentHTML() string {
	if o == nil || o.ContentHTML == nil {
		var ret string
		return ret
	}
	return *o.ContentHTML
}

// GetContentHTMLOk returns a tuple with the ContentHTML field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetContentHTMLOk() (*string, bool) {
	if o == nil || o.ContentHTML == nil {
		return nil, false
	}
	return o.ContentHTML, true
}

// HasContentHTML returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasContentHTML() bool {
	if o != nil && o.ContentHTML != nil {
		return true
	}

	return false
}

// SetContentHTML gets a reference to the given string and assigns it to the ContentHTML field.
func (o *ViewNotebookVersion) SetContentHTML(v string) {
	o.ContentHTML = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetContents() string {
	if o == nil || o.Contents == nil {
		var ret string
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetContentsOk() (*string, bool) {
	if o == nil || o.Contents == nil {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// SetContents gets a reference to the given string and assigns it to the Contents field.
func (o *ViewNotebookVersion) SetContents(v string) {
	o.Contents = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ViewNotebookVersion) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetCreatedBy() int32 {
	if o == nil || o.CreatedBy == nil {
		var ret int32
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetCreatedByOk() (*int32, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int32 and assigns it to the CreatedBy field.
func (o *ViewNotebookVersion) SetCreatedBy(v int32) {
	o.CreatedBy = &v
}

// GetCreatedByUserID returns the CreatedByUserID field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetCreatedByUserID() int32 {
	if o == nil || o.CreatedByUserID == nil {
		var ret int32
		return ret
	}
	return *o.CreatedByUserID
}

// GetCreatedByUserIDOk returns a tuple with the CreatedByUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetCreatedByUserIDOk() (*int32, bool) {
	if o == nil || o.CreatedByUserID == nil {
		return nil, false
	}
	return o.CreatedByUserID, true
}

// HasCreatedByUserID returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasCreatedByUserID() bool {
	if o != nil && o.CreatedByUserID != nil {
		return true
	}

	return false
}

// SetCreatedByUserID gets a reference to the given int32 and assigns it to the CreatedByUserID field.
func (o *ViewNotebookVersion) SetCreatedByUserID(v int32) {
	o.CreatedByUserID = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetDateCreated() string {
	if o == nil || o.DateCreated == nil {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetDateCreatedOk() (*string, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *ViewNotebookVersion) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateUpdated returns the DateUpdated field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetDateUpdated() string {
	if o == nil || o.DateUpdated == nil {
		var ret string
		return ret
	}
	return *o.DateUpdated
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetDateUpdatedOk() (*string, bool) {
	if o == nil || o.DateUpdated == nil {
		return nil, false
	}
	return o.DateUpdated, true
}

// HasDateUpdated returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasDateUpdated() bool {
	if o != nil && o.DateUpdated != nil {
		return true
	}

	return false
}

// SetDateUpdated gets a reference to the given string and assigns it to the DateUpdated field.
func (o *ViewNotebookVersion) SetDateUpdated(v string) {
	o.DateUpdated = &v
}

// GetNotebook returns the Notebook field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetNotebook() ViewRelationship {
	if o == nil || o.Notebook == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Notebook
}

// GetNotebookOk returns a tuple with the Notebook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetNotebookOk() (*ViewRelationship, bool) {
	if o == nil || o.Notebook == nil {
		return nil, false
	}
	return o.Notebook, true
}

// HasNotebook returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasNotebook() bool {
	if o != nil && o.Notebook != nil {
		return true
	}

	return false
}

// SetNotebook gets a reference to the given ViewRelationship and assigns it to the Notebook field.
func (o *ViewNotebookVersion) SetNotebook(v ViewRelationship) {
	o.Notebook = &v
}

// GetNotebookId returns the NotebookId field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetNotebookId() int32 {
	if o == nil || o.NotebookId == nil {
		var ret int32
		return ret
	}
	return *o.NotebookId
}

// GetNotebookIdOk returns a tuple with the NotebookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetNotebookIdOk() (*int32, bool) {
	if o == nil || o.NotebookId == nil {
		return nil, false
	}
	return o.NotebookId, true
}

// HasNotebookId returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasNotebookId() bool {
	if o != nil && o.NotebookId != nil {
		return true
	}

	return false
}

// SetNotebookId gets a reference to the given int32 and assigns it to the NotebookId field.
func (o *ViewNotebookVersion) SetNotebookId(v int32) {
	o.NotebookId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewNotebookVersion) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetVersionId() int32 {
	if o == nil || o.VersionId == nil {
		var ret int32
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetVersionIdOk() (*int32, bool) {
	if o == nil || o.VersionId == nil {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasVersionId() bool {
	if o != nil && o.VersionId != nil {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given int32 and assigns it to the VersionId field.
func (o *ViewNotebookVersion) SetVersionId(v int32) {
	o.VersionId = &v
}

// GetVersionNumber returns the VersionNumber field value if set, zero value otherwise.
func (o *ViewNotebookVersion) GetVersionNumber() int32 {
	if o == nil || o.VersionNumber == nil {
		var ret int32
		return ret
	}
	return *o.VersionNumber
}

// GetVersionNumberOk returns a tuple with the VersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebookVersion) GetVersionNumberOk() (*int32, bool) {
	if o == nil || o.VersionNumber == nil {
		return nil, false
	}
	return o.VersionNumber, true
}

// HasVersionNumber returns a boolean if a field has been set.
func (o *ViewNotebookVersion) HasVersionNumber() bool {
	if o != nil && o.VersionNumber != nil {
		return true
	}

	return false
}

// SetVersionNumber gets a reference to the given int32 and assigns it to the VersionNumber field.
func (o *ViewNotebookVersion) SetVersionNumber(v int32) {
	o.VersionNumber = &v
}

func (o ViewNotebookVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContentHTML != nil {
		toSerialize["contentHTML"] = o.ContentHTML
	}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CreatedByUserID != nil {
		toSerialize["createdByUserID"] = o.CreatedByUserID
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.DateUpdated != nil {
		toSerialize["dateUpdated"] = o.DateUpdated
	}
	if o.Notebook != nil {
		toSerialize["notebook"] = o.Notebook
	}
	if o.NotebookId != nil {
		toSerialize["notebookId"] = o.NotebookId
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.VersionId != nil {
		toSerialize["versionId"] = o.VersionId
	}
	if o.VersionNumber != nil {
		toSerialize["versionNumber"] = o.VersionNumber
	}
	return json.Marshal(toSerialize)
}

type NullableViewNotebookVersion struct {
	value *ViewNotebookVersion
	isSet bool
}

func (v NullableViewNotebookVersion) Get() *ViewNotebookVersion {
	return v.value
}

func (v *NullableViewNotebookVersion) Set(val *ViewNotebookVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableViewNotebookVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableViewNotebookVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewNotebookVersion(val *ViewNotebookVersion) *NullableViewNotebookVersion {
	return &NullableViewNotebookVersion{value: val, isSet: true}
}

func (v NullableViewNotebookVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewNotebookVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


