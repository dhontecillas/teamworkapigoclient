/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PeopleApiService PeopleApi service
type PeopleApiService service

type ApiGETProjectsApiV3PeopleJsonRequest struct {
	ctx _context.Context
	ApiService *PeopleApiService
	orderMode *string
	orderBy *string
	pageSize *int32
	page *int32
	include *[]string
	ids *[]int32
	fieldsCompanies *[]string
}

func (r ApiGETProjectsApiV3PeopleJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3PeopleJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3PeopleJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3PeopleJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3PeopleJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3PeopleJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3PeopleJsonRequest) Page(page int32) ApiGETProjectsApiV3PeopleJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3PeopleJsonRequest) Include(include []string) ApiGETProjectsApiV3PeopleJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3PeopleJsonRequest) Ids(ids []int32) ApiGETProjectsApiV3PeopleJsonRequest {
	r.ids = &ids
	return r
}
func (r ApiGETProjectsApiV3PeopleJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3PeopleJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}

func (r ApiGETProjectsApiV3PeopleJsonRequest) Execute() (PeopleMultiResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3PeopleJsonExecute(r)
}

/*
 * GETProjectsApiV3PeopleJson Returns a list of people
 * Retrieve all people for the provided filters.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3PeopleJsonRequest
 */
func (a *PeopleApiService) GETProjectsApiV3PeopleJson(ctx _context.Context) ApiGETProjectsApiV3PeopleJsonRequest {
	return ApiGETProjectsApiV3PeopleJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PeopleMultiResponse
 */
func (a *PeopleApiService) GETProjectsApiV3PeopleJsonExecute(r ApiGETProjectsApiV3PeopleJsonRequest) (PeopleMultiResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PeopleMultiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PeopleApiService.GETProjectsApiV3PeopleJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/people.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest struct {
	ctx _context.Context
	ApiService *PeopleApiService
	startDate *string
	orderMode *string
	endDate *string
}

func (r ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest) Execute() (PerformancePeopleMetricPerformancesResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3PeopleMetricsPerformanceJsonExecute(r)
}

/*
 * GETProjectsApiV3PeopleMetricsPerformanceJson Performance of users completing the most tasks
 * Count the number of completed tasks by user for the provided period. By
default the user with the most completed tasks is shown first.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest
 */
func (a *PeopleApiService) GETProjectsApiV3PeopleMetricsPerformanceJson(ctx _context.Context) ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest {
	return ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PerformancePeopleMetricPerformancesResponse
 */
func (a *PeopleApiService) GETProjectsApiV3PeopleMetricsPerformanceJsonExecute(r ApiGETProjectsApiV3PeopleMetricsPerformanceJsonRequest) (PerformancePeopleMetricPerformancesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PerformancePeopleMetricPerformancesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PeopleApiService.GETProjectsApiV3PeopleMetricsPerformanceJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/people/metrics/performance.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3PeopleUtilizationJsonRequest struct {
	ctx _context.Context
	ApiService *PeopleApiService
	startDate *string
	sortOrder *string
	sort *string
	searchTerm *string
	groupBy *string
	endDate *string
	pageSize *int32
	page *int32
	includeCollaborators *bool
	includeClients *bool
	userIds *[]int32
	teamIds *[]int32
	projectIds *[]int32
	include *[]string
	fieldsUtilizations *[]string
	fieldsUsers *[]string
	companyIds *[]int32
}

func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) SortOrder(sortOrder string) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) Sort(sort string) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) GroupBy(groupBy string) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.groupBy = &groupBy
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) Page(page int32) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) IncludeCollaborators(includeCollaborators bool) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.includeCollaborators = &includeCollaborators
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) IncludeClients(includeClients bool) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.includeClients = &includeClients
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) UserIds(userIds []int32) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) TeamIds(teamIds []int32) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.teamIds = &teamIds
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) Include(include []string) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) FieldsUtilizations(fieldsUtilizations []string) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.fieldsUtilizations = &fieldsUtilizations
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) CompanyIds(companyIds []int32) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	r.companyIds = &companyIds
	return r
}

func (r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) Execute() (UtilizationResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3PeopleUtilizationJsonExecute(r)
}

/*
 * GETProjectsApiV3PeopleUtilizationJson Return the user utilization.
 * Verify the user utilization.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3PeopleUtilizationJsonRequest
 */
func (a *PeopleApiService) GETProjectsApiV3PeopleUtilizationJson(ctx _context.Context) ApiGETProjectsApiV3PeopleUtilizationJsonRequest {
	return ApiGETProjectsApiV3PeopleUtilizationJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return UtilizationResponse
 */
func (a *PeopleApiService) GETProjectsApiV3PeopleUtilizationJsonExecute(r ApiGETProjectsApiV3PeopleUtilizationJsonRequest) (UtilizationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UtilizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PeopleApiService.GETProjectsApiV3PeopleUtilizationJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/people/utilization.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.groupBy != nil {
		localVarQueryParams.Add("groupBy", parameterToString(*r.groupBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeCollaborators != nil {
		localVarQueryParams.Add("includeCollaborators", parameterToString(*r.includeCollaborators, ""))
	}
	if r.includeClients != nil {
		localVarQueryParams.Add("includeClients", parameterToString(*r.includeClients, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.teamIds != nil {
		localVarQueryParams.Add("teamIds", parameterToString(*r.teamIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUtilizations != nil {
		localVarQueryParams.Add("fields[utilizations]", parameterToString(*r.fieldsUtilizations, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.companyIds != nil {
		localVarQueryParams.Add("companyIds", parameterToString(*r.companyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest struct {
	ctx _context.Context
	ApiService *PeopleApiService
	userId2 int32
	startDate *string
	endDate *string
	userId *int32
	include *[]string
	fieldsUsers *[]string
	fieldsProjects *[]string
	fieldsAvailability *[]string
}

func (r ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest) UserId(userId int32) ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest) Include(include []string) ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest) FieldsAvailability(fieldsAvailability []string) ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest {
	r.fieldsAvailability = &fieldsAvailability
	return r
}

func (r ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest) Execute() (AvailabilityResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3PeopleuserIdAvailabilityJsonExecute(r)
}

/*
 * GETProjectsApiV3PeopleuserIdAvailabilityJson Return the user availability.
 * Verify the user working hours and events marked as unavailable to calculate
the availability in the provided range.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param userId2
 * @return ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest
 */
func (a *PeopleApiService) GETProjectsApiV3PeopleuserIdAvailabilityJson(ctx _context.Context, userId2 int32) ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest {
	return ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest{
		ApiService: a,
		ctx: ctx,
		userId2: userId2,
	}
}

/*
 * Execute executes the request
 * @return AvailabilityResponse
 */
func (a *PeopleApiService) GETProjectsApiV3PeopleuserIdAvailabilityJsonExecute(r ApiGETProjectsApiV3PeopleuserIdAvailabilityJsonRequest) (AvailabilityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AvailabilityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PeopleApiService.GETProjectsApiV3PeopleuserIdAvailabilityJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/people/{userId}/availability.json"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", _neturl.PathEscape(parameterToString(r.userId2, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsAvailability != nil {
		localVarQueryParams.Add("fields[availability]", parameterToString(*r.fieldsAvailability, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
