/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FormHostObject HostObject contains information of a form host object to be created or updated.
type FormHostObject struct {
	Id *int32 `json:"id,omitempty"`
	Meta *FormHostObjectMeta `json:"meta,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewFormHostObject instantiates a new FormHostObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormHostObject() *FormHostObject {
	this := FormHostObject{}
	return &this
}

// NewFormHostObjectWithDefaults instantiates a new FormHostObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormHostObjectWithDefaults() *FormHostObject {
	this := FormHostObject{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FormHostObject) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormHostObject) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FormHostObject) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *FormHostObject) SetId(v int32) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *FormHostObject) GetMeta() FormHostObjectMeta {
	if o == nil || o.Meta == nil {
		var ret FormHostObjectMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormHostObject) GetMetaOk() (*FormHostObjectMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *FormHostObject) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given FormHostObjectMeta and assigns it to the Meta field.
func (o *FormHostObject) SetMeta(v FormHostObjectMeta) {
	o.Meta = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FormHostObject) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormHostObject) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FormHostObject) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FormHostObject) SetType(v string) {
	o.Type = &v
}

func (o FormHostObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableFormHostObject struct {
	value *FormHostObject
	isSet bool
}

func (v NullableFormHostObject) Get() *FormHostObject {
	return v.value
}

func (v *NullableFormHostObject) Set(val *FormHostObject) {
	v.value = val
	v.isSet = true
}

func (v NullableFormHostObject) IsSet() bool {
	return v.isSet
}

func (v *NullableFormHostObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormHostObject(val *FormHostObject) *NullableFormHostObject {
	return &NullableFormHostObject{value: val, isSet: true}
}

func (v NullableFormHostObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormHostObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


