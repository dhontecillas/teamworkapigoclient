/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineResponse200103Project struct for InlineResponse200103Project
type InlineResponse200103Project struct {
	Company *string `json:"company,omitempty"`
	Files *[]InlineResponse200103ProjectFiles `json:"files,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewInlineResponse200103Project instantiates a new InlineResponse200103Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200103Project() *InlineResponse200103Project {
	this := InlineResponse200103Project{}
	return &this
}

// NewInlineResponse200103ProjectWithDefaults instantiates a new InlineResponse200103Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200103ProjectWithDefaults() *InlineResponse200103Project {
	this := InlineResponse200103Project{}
	return &this
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *InlineResponse200103Project) GetCompany() string {
	if o == nil || o.Company == nil {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200103Project) GetCompanyOk() (*string, bool) {
	if o == nil || o.Company == nil {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *InlineResponse200103Project) HasCompany() bool {
	if o != nil && o.Company != nil {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *InlineResponse200103Project) SetCompany(v string) {
	o.Company = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *InlineResponse200103Project) GetFiles() []InlineResponse200103ProjectFiles {
	if o == nil || o.Files == nil {
		var ret []InlineResponse200103ProjectFiles
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200103Project) GetFilesOk() (*[]InlineResponse200103ProjectFiles, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *InlineResponse200103Project) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []InlineResponse200103ProjectFiles and assigns it to the Files field.
func (o *InlineResponse200103Project) SetFiles(v []InlineResponse200103ProjectFiles) {
	o.Files = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineResponse200103Project) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200103Project) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineResponse200103Project) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InlineResponse200103Project) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse200103Project) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200103Project) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse200103Project) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse200103Project) SetName(v string) {
	o.Name = &v
}

func (o InlineResponse200103Project) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Company != nil {
		toSerialize["company"] = o.Company
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200103Project struct {
	value *InlineResponse200103Project
	isSet bool
}

func (v NullableInlineResponse200103Project) Get() *InlineResponse200103Project {
	return v.value
}

func (v *NullableInlineResponse200103Project) Set(val *InlineResponse200103Project) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200103Project) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200103Project) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200103Project(val *InlineResponse200103Project) *NullableInlineResponse200103Project {
	return &NullableInlineResponse200103Project{value: val, isSet: true}
}

func (v NullableInlineResponse200103Project) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200103Project) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


