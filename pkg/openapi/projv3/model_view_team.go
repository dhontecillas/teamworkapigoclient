/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewTeam Team contains all the information returned from a team.
type ViewTeam struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	TeamLogo *string `json:"teamLogo,omitempty"`
	TeamLogoColor *string `json:"teamLogoColor,omitempty"`
	TeamLogoIcon *string `json:"teamLogoIcon,omitempty"`
}

// NewViewTeam instantiates a new ViewTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewTeam() *ViewTeam {
	this := ViewTeam{}
	return &this
}

// NewViewTeamWithDefaults instantiates a new ViewTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewTeamWithDefaults() *ViewTeam {
	this := ViewTeam{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewTeam) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTeam) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewTeam) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewTeam) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewTeam) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTeam) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewTeam) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewTeam) SetName(v string) {
	o.Name = &v
}

// GetTeamLogo returns the TeamLogo field value if set, zero value otherwise.
func (o *ViewTeam) GetTeamLogo() string {
	if o == nil || o.TeamLogo == nil {
		var ret string
		return ret
	}
	return *o.TeamLogo
}

// GetTeamLogoOk returns a tuple with the TeamLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTeam) GetTeamLogoOk() (*string, bool) {
	if o == nil || o.TeamLogo == nil {
		return nil, false
	}
	return o.TeamLogo, true
}

// HasTeamLogo returns a boolean if a field has been set.
func (o *ViewTeam) HasTeamLogo() bool {
	if o != nil && o.TeamLogo != nil {
		return true
	}

	return false
}

// SetTeamLogo gets a reference to the given string and assigns it to the TeamLogo field.
func (o *ViewTeam) SetTeamLogo(v string) {
	o.TeamLogo = &v
}

// GetTeamLogoColor returns the TeamLogoColor field value if set, zero value otherwise.
func (o *ViewTeam) GetTeamLogoColor() string {
	if o == nil || o.TeamLogoColor == nil {
		var ret string
		return ret
	}
	return *o.TeamLogoColor
}

// GetTeamLogoColorOk returns a tuple with the TeamLogoColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTeam) GetTeamLogoColorOk() (*string, bool) {
	if o == nil || o.TeamLogoColor == nil {
		return nil, false
	}
	return o.TeamLogoColor, true
}

// HasTeamLogoColor returns a boolean if a field has been set.
func (o *ViewTeam) HasTeamLogoColor() bool {
	if o != nil && o.TeamLogoColor != nil {
		return true
	}

	return false
}

// SetTeamLogoColor gets a reference to the given string and assigns it to the TeamLogoColor field.
func (o *ViewTeam) SetTeamLogoColor(v string) {
	o.TeamLogoColor = &v
}

// GetTeamLogoIcon returns the TeamLogoIcon field value if set, zero value otherwise.
func (o *ViewTeam) GetTeamLogoIcon() string {
	if o == nil || o.TeamLogoIcon == nil {
		var ret string
		return ret
	}
	return *o.TeamLogoIcon
}

// GetTeamLogoIconOk returns a tuple with the TeamLogoIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTeam) GetTeamLogoIconOk() (*string, bool) {
	if o == nil || o.TeamLogoIcon == nil {
		return nil, false
	}
	return o.TeamLogoIcon, true
}

// HasTeamLogoIcon returns a boolean if a field has been set.
func (o *ViewTeam) HasTeamLogoIcon() bool {
	if o != nil && o.TeamLogoIcon != nil {
		return true
	}

	return false
}

// SetTeamLogoIcon gets a reference to the given string and assigns it to the TeamLogoIcon field.
func (o *ViewTeam) SetTeamLogoIcon(v string) {
	o.TeamLogoIcon = &v
}

func (o ViewTeam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.TeamLogo != nil {
		toSerialize["teamLogo"] = o.TeamLogo
	}
	if o.TeamLogoColor != nil {
		toSerialize["teamLogoColor"] = o.TeamLogoColor
	}
	if o.TeamLogoIcon != nil {
		toSerialize["teamLogoIcon"] = o.TeamLogoIcon
	}
	return json.Marshal(toSerialize)
}

type NullableViewTeam struct {
	value *ViewTeam
	isSet bool
}

func (v NullableViewTeam) Get() *ViewTeam {
	return v.value
}

func (v *NullableViewTeam) Set(val *ViewTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableViewTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableViewTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewTeam(val *ViewTeam) *NullableViewTeam {
	return &NullableViewTeam{value: val, isSet: true}
}

func (v NullableViewTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


