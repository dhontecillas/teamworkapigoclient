/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FormBanner Banner contains information of a form banner to be created or updated.
type FormBanner struct {
	Url *string `json:"url,omitempty"`
	X *float32 `json:"x,omitempty"`
	Y *float32 `json:"y,omitempty"`
}

// NewFormBanner instantiates a new FormBanner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormBanner() *FormBanner {
	this := FormBanner{}
	return &this
}

// NewFormBannerWithDefaults instantiates a new FormBanner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormBannerWithDefaults() *FormBanner {
	this := FormBanner{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *FormBanner) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormBanner) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FormBanner) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *FormBanner) SetUrl(v string) {
	o.Url = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *FormBanner) GetX() float32 {
	if o == nil || o.X == nil {
		var ret float32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormBanner) GetXOk() (*float32, bool) {
	if o == nil || o.X == nil {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *FormBanner) HasX() bool {
	if o != nil && o.X != nil {
		return true
	}

	return false
}

// SetX gets a reference to the given float32 and assigns it to the X field.
func (o *FormBanner) SetX(v float32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *FormBanner) GetY() float32 {
	if o == nil || o.Y == nil {
		var ret float32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormBanner) GetYOk() (*float32, bool) {
	if o == nil || o.Y == nil {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *FormBanner) HasY() bool {
	if o != nil && o.Y != nil {
		return true
	}

	return false
}

// SetY gets a reference to the given float32 and assigns it to the Y field.
func (o *FormBanner) SetY(v float32) {
	o.Y = &v
}

func (o FormBanner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.X != nil {
		toSerialize["x"] = o.X
	}
	if o.Y != nil {
		toSerialize["y"] = o.Y
	}
	return json.Marshal(toSerialize)
}

type NullableFormBanner struct {
	value *FormBanner
	isSet bool
}

func (v NullableFormBanner) Get() *FormBanner {
	return v.value
}

func (v *NullableFormBanner) Set(val *FormBanner) {
	v.value = val
	v.isSet = true
}

func (v NullableFormBanner) IsSet() bool {
	return v.isSet
}

func (v *NullableFormBanner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormBanner(val *FormBanner) *NullableFormBanner {
	return &NullableFormBanner{value: val, isSet: true}
}

func (v NullableFormBanner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormBanner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


