/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewUserSchedule UserSchedule contains all the information returned from a user schedule.
type ViewUserSchedule struct {
	AllocatedTotalMinutes *int32 `json:"allocatedTotalMinutes,omitempty"`
	LoggedTotalMinutes *int32 `json:"loggedTotalMinutes,omitempty"`
	ProjectIds *[]int32 `json:"projectIds,omitempty"`
	Projects *[]ViewRelationship `json:"projects,omitempty"`
	Schedule *map[string]ViewScheduleEntry `json:"schedule,omitempty"`
	UnavailableTotalMinutes *int32 `json:"unavailableTotalMinutes,omitempty"`
	User *ViewRelationship `json:"user,omitempty"`
	UserId *int32 `json:"userId,omitempty"`
}

// NewViewUserSchedule instantiates a new ViewUserSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewUserSchedule() *ViewUserSchedule {
	this := ViewUserSchedule{}
	return &this
}

// NewViewUserScheduleWithDefaults instantiates a new ViewUserSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewUserScheduleWithDefaults() *ViewUserSchedule {
	this := ViewUserSchedule{}
	return &this
}

// GetAllocatedTotalMinutes returns the AllocatedTotalMinutes field value if set, zero value otherwise.
func (o *ViewUserSchedule) GetAllocatedTotalMinutes() int32 {
	if o == nil || o.AllocatedTotalMinutes == nil {
		var ret int32
		return ret
	}
	return *o.AllocatedTotalMinutes
}

// GetAllocatedTotalMinutesOk returns a tuple with the AllocatedTotalMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserSchedule) GetAllocatedTotalMinutesOk() (*int32, bool) {
	if o == nil || o.AllocatedTotalMinutes == nil {
		return nil, false
	}
	return o.AllocatedTotalMinutes, true
}

// HasAllocatedTotalMinutes returns a boolean if a field has been set.
func (o *ViewUserSchedule) HasAllocatedTotalMinutes() bool {
	if o != nil && o.AllocatedTotalMinutes != nil {
		return true
	}

	return false
}

// SetAllocatedTotalMinutes gets a reference to the given int32 and assigns it to the AllocatedTotalMinutes field.
func (o *ViewUserSchedule) SetAllocatedTotalMinutes(v int32) {
	o.AllocatedTotalMinutes = &v
}

// GetLoggedTotalMinutes returns the LoggedTotalMinutes field value if set, zero value otherwise.
func (o *ViewUserSchedule) GetLoggedTotalMinutes() int32 {
	if o == nil || o.LoggedTotalMinutes == nil {
		var ret int32
		return ret
	}
	return *o.LoggedTotalMinutes
}

// GetLoggedTotalMinutesOk returns a tuple with the LoggedTotalMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserSchedule) GetLoggedTotalMinutesOk() (*int32, bool) {
	if o == nil || o.LoggedTotalMinutes == nil {
		return nil, false
	}
	return o.LoggedTotalMinutes, true
}

// HasLoggedTotalMinutes returns a boolean if a field has been set.
func (o *ViewUserSchedule) HasLoggedTotalMinutes() bool {
	if o != nil && o.LoggedTotalMinutes != nil {
		return true
	}

	return false
}

// SetLoggedTotalMinutes gets a reference to the given int32 and assigns it to the LoggedTotalMinutes field.
func (o *ViewUserSchedule) SetLoggedTotalMinutes(v int32) {
	o.LoggedTotalMinutes = &v
}

// GetProjectIds returns the ProjectIds field value if set, zero value otherwise.
func (o *ViewUserSchedule) GetProjectIds() []int32 {
	if o == nil || o.ProjectIds == nil {
		var ret []int32
		return ret
	}
	return *o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserSchedule) GetProjectIdsOk() (*[]int32, bool) {
	if o == nil || o.ProjectIds == nil {
		return nil, false
	}
	return o.ProjectIds, true
}

// HasProjectIds returns a boolean if a field has been set.
func (o *ViewUserSchedule) HasProjectIds() bool {
	if o != nil && o.ProjectIds != nil {
		return true
	}

	return false
}

// SetProjectIds gets a reference to the given []int32 and assigns it to the ProjectIds field.
func (o *ViewUserSchedule) SetProjectIds(v []int32) {
	o.ProjectIds = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *ViewUserSchedule) GetProjects() []ViewRelationship {
	if o == nil || o.Projects == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserSchedule) GetProjectsOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *ViewUserSchedule) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []ViewRelationship and assigns it to the Projects field.
func (o *ViewUserSchedule) SetProjects(v []ViewRelationship) {
	o.Projects = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *ViewUserSchedule) GetSchedule() map[string]ViewScheduleEntry {
	if o == nil || o.Schedule == nil {
		var ret map[string]ViewScheduleEntry
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserSchedule) GetScheduleOk() (*map[string]ViewScheduleEntry, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *ViewUserSchedule) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given map[string]ViewScheduleEntry and assigns it to the Schedule field.
func (o *ViewUserSchedule) SetSchedule(v map[string]ViewScheduleEntry) {
	o.Schedule = &v
}

// GetUnavailableTotalMinutes returns the UnavailableTotalMinutes field value if set, zero value otherwise.
func (o *ViewUserSchedule) GetUnavailableTotalMinutes() int32 {
	if o == nil || o.UnavailableTotalMinutes == nil {
		var ret int32
		return ret
	}
	return *o.UnavailableTotalMinutes
}

// GetUnavailableTotalMinutesOk returns a tuple with the UnavailableTotalMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserSchedule) GetUnavailableTotalMinutesOk() (*int32, bool) {
	if o == nil || o.UnavailableTotalMinutes == nil {
		return nil, false
	}
	return o.UnavailableTotalMinutes, true
}

// HasUnavailableTotalMinutes returns a boolean if a field has been set.
func (o *ViewUserSchedule) HasUnavailableTotalMinutes() bool {
	if o != nil && o.UnavailableTotalMinutes != nil {
		return true
	}

	return false
}

// SetUnavailableTotalMinutes gets a reference to the given int32 and assigns it to the UnavailableTotalMinutes field.
func (o *ViewUserSchedule) SetUnavailableTotalMinutes(v int32) {
	o.UnavailableTotalMinutes = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ViewUserSchedule) GetUser() ViewRelationship {
	if o == nil || o.User == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserSchedule) GetUserOk() (*ViewRelationship, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ViewUserSchedule) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given ViewRelationship and assigns it to the User field.
func (o *ViewUserSchedule) SetUser(v ViewRelationship) {
	o.User = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ViewUserSchedule) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserSchedule) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ViewUserSchedule) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *ViewUserSchedule) SetUserId(v int32) {
	o.UserId = &v
}

func (o ViewUserSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllocatedTotalMinutes != nil {
		toSerialize["allocatedTotalMinutes"] = o.AllocatedTotalMinutes
	}
	if o.LoggedTotalMinutes != nil {
		toSerialize["loggedTotalMinutes"] = o.LoggedTotalMinutes
	}
	if o.ProjectIds != nil {
		toSerialize["projectIds"] = o.ProjectIds
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	if o.UnavailableTotalMinutes != nil {
		toSerialize["unavailableTotalMinutes"] = o.UnavailableTotalMinutes
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableViewUserSchedule struct {
	value *ViewUserSchedule
	isSet bool
}

func (v NullableViewUserSchedule) Get() *ViewUserSchedule {
	return v.value
}

func (v *NullableViewUserSchedule) Set(val *ViewUserSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUserSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUserSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUserSchedule(val *ViewUserSchedule) *NullableViewUserSchedule {
	return &NullableViewUserSchedule{value: val, isSet: true}
}

func (v NullableViewUserSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUserSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


