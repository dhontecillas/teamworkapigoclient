/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// RisksApiService RisksApi service
type RisksApiService service

type ApiGETProjectsApiV3ProjectsProjectIdRisksRequest struct {
	ctx _context.Context
	ApiService *RisksApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	statuses *string
	sortOrder *string
	sort *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	orderMode *string
	orderBy *string
	projectHealths *int32
	probabilityTo *int32
	probabilityFrom *int32
	pageSize *int32
	page *int32
	impactTo *int32
	impactFrom *int32
	showDeleted *bool
	onlyStarredProjects *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeArchivedProjects *bool
	impactSchedule *bool
	impactPerformance *bool
	impactCost *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsRisks *[]string
	fieldsProjects *[]string
	fieldsCompanies *[]string
}

func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) Statuses(statuses string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.statuses = &statuses
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) SortOrder(sortOrder string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) Sort(sort string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ProbabilityTo(probabilityTo int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.probabilityTo = &probabilityTo
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ProbabilityFrom(probabilityFrom int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.probabilityFrom = &probabilityFrom
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) PageSize(pageSize int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) Page(page int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ImpactTo(impactTo int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.impactTo = &impactTo
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ImpactFrom(impactFrom int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.impactFrom = &impactFrom
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ImpactSchedule(impactSchedule bool) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.impactSchedule = &impactSchedule
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ImpactPerformance(impactPerformance bool) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.impactPerformance = &impactPerformance
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ImpactCost(impactCost bool) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.impactCost = &impactCost
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) Include(include []string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) FieldsRisks(fieldsRisks []string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.fieldsRisks = &fieldsRisks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}

func (r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) Execute() (RiskRisksResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsProjectIdRisksExecute(r)
}

/*
 * GETProjectsApiV3ProjectsProjectIdRisks Get risks for a specific project
 * Return all risks for a specific project. Only filters that the logged-in user
has access will be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsProjectIdRisksRequest
 */
func (a *RisksApiService) GETProjectsApiV3ProjectsProjectIdRisks(ctx _context.Context) ApiGETProjectsApiV3ProjectsProjectIdRisksRequest {
	return ApiGETProjectsApiV3ProjectsProjectIdRisksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return RiskRisksResponse
 */
func (a *RisksApiService) GETProjectsApiV3ProjectsProjectIdRisksExecute(r ApiGETProjectsApiV3ProjectsProjectIdRisksRequest) (RiskRisksResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RiskRisksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RisksApiService.GETProjectsApiV3ProjectsProjectIdRisks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/risks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.statuses != nil {
		localVarQueryParams.Add("statuses", parameterToString(*r.statuses, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.probabilityTo != nil {
		localVarQueryParams.Add("probabilityTo", parameterToString(*r.probabilityTo, ""))
	}
	if r.probabilityFrom != nil {
		localVarQueryParams.Add("probabilityFrom", parameterToString(*r.probabilityFrom, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.impactTo != nil {
		localVarQueryParams.Add("impactTo", parameterToString(*r.impactTo, ""))
	}
	if r.impactFrom != nil {
		localVarQueryParams.Add("impactFrom", parameterToString(*r.impactFrom, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.impactSchedule != nil {
		localVarQueryParams.Add("impactSchedule", parameterToString(*r.impactSchedule, ""))
	}
	if r.impactPerformance != nil {
		localVarQueryParams.Add("impactPerformance", parameterToString(*r.impactPerformance, ""))
	}
	if r.impactCost != nil {
		localVarQueryParams.Add("impactCost", parameterToString(*r.impactCost, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsRisks != nil {
		localVarQueryParams.Add("fields[risks]", parameterToString(*r.fieldsRisks, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3RisksJsonRequest struct {
	ctx _context.Context
	ApiService *RisksApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	statuses *string
	sortOrder *string
	sort *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	orderMode *string
	orderBy *string
	projectHealths *int32
	probabilityTo *int32
	probabilityFrom *int32
	pageSize *int32
	page *int32
	impactTo *int32
	impactFrom *int32
	showDeleted *bool
	onlyStarredProjects *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeArchivedProjects *bool
	impactSchedule *bool
	impactPerformance *bool
	impactCost *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsRisks *[]string
	fieldsProjects *[]string
	fieldsCompanies *[]string
}

func (r ApiGETProjectsApiV3RisksJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3RisksJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3RisksJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) Statuses(statuses string) ApiGETProjectsApiV3RisksJsonRequest {
	r.statuses = &statuses
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) SortOrder(sortOrder string) ApiGETProjectsApiV3RisksJsonRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) Sort(sort string) ApiGETProjectsApiV3RisksJsonRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3RisksJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3RisksJsonRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3RisksJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3RisksJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3RisksJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ProbabilityTo(probabilityTo int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.probabilityTo = &probabilityTo
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ProbabilityFrom(probabilityFrom int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.probabilityFrom = &probabilityFrom
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) Page(page int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ImpactTo(impactTo int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.impactTo = &impactTo
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ImpactFrom(impactFrom int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.impactFrom = &impactFrom
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3RisksJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3RisksJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3RisksJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3RisksJsonRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3RisksJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ImpactSchedule(impactSchedule bool) ApiGETProjectsApiV3RisksJsonRequest {
	r.impactSchedule = &impactSchedule
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ImpactPerformance(impactPerformance bool) ApiGETProjectsApiV3RisksJsonRequest {
	r.impactPerformance = &impactPerformance
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ImpactCost(impactCost bool) ApiGETProjectsApiV3RisksJsonRequest {
	r.impactCost = &impactCost
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3RisksJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) Include(include []string) ApiGETProjectsApiV3RisksJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3RisksJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) FieldsRisks(fieldsRisks []string) ApiGETProjectsApiV3RisksJsonRequest {
	r.fieldsRisks = &fieldsRisks
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3RisksJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3RisksJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3RisksJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}

func (r ApiGETProjectsApiV3RisksJsonRequest) Execute() (RiskRisksResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3RisksJsonExecute(r)
}

/*
 * GETProjectsApiV3RisksJson Get all risks
 * Return all risks for the provided filters. Only filters that the logged-in user
has access will be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3RisksJsonRequest
 */
func (a *RisksApiService) GETProjectsApiV3RisksJson(ctx _context.Context) ApiGETProjectsApiV3RisksJsonRequest {
	return ApiGETProjectsApiV3RisksJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return RiskRisksResponse
 */
func (a *RisksApiService) GETProjectsApiV3RisksJsonExecute(r ApiGETProjectsApiV3RisksJsonRequest) (RiskRisksResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RiskRisksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RisksApiService.GETProjectsApiV3RisksJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/risks.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.statuses != nil {
		localVarQueryParams.Add("statuses", parameterToString(*r.statuses, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.probabilityTo != nil {
		localVarQueryParams.Add("probabilityTo", parameterToString(*r.probabilityTo, ""))
	}
	if r.probabilityFrom != nil {
		localVarQueryParams.Add("probabilityFrom", parameterToString(*r.probabilityFrom, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.impactTo != nil {
		localVarQueryParams.Add("impactTo", parameterToString(*r.impactTo, ""))
	}
	if r.impactFrom != nil {
		localVarQueryParams.Add("impactFrom", parameterToString(*r.impactFrom, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.impactSchedule != nil {
		localVarQueryParams.Add("impactSchedule", parameterToString(*r.impactSchedule, ""))
	}
	if r.impactPerformance != nil {
		localVarQueryParams.Add("impactPerformance", parameterToString(*r.impactPerformance, ""))
	}
	if r.impactCost != nil {
		localVarQueryParams.Add("impactCost", parameterToString(*r.impactCost, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsRisks != nil {
		localVarQueryParams.Add("fields[risks]", parameterToString(*r.fieldsRisks, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
