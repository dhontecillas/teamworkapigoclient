/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileversionResponseIncluded struct for FileversionResponseIncluded
type FileversionResponseIncluded struct {
	Files *map[string]ViewProjectFile `json:"files,omitempty"`
	Projects *map[string]ViewProject `json:"projects,omitempty"`
	Users *map[string]ViewUser `json:"users,omitempty"`
}

// NewFileversionResponseIncluded instantiates a new FileversionResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileversionResponseIncluded() *FileversionResponseIncluded {
	this := FileversionResponseIncluded{}
	return &this
}

// NewFileversionResponseIncludedWithDefaults instantiates a new FileversionResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileversionResponseIncludedWithDefaults() *FileversionResponseIncluded {
	this := FileversionResponseIncluded{}
	return &this
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *FileversionResponseIncluded) GetFiles() map[string]ViewProjectFile {
	if o == nil || o.Files == nil {
		var ret map[string]ViewProjectFile
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileversionResponseIncluded) GetFilesOk() (*map[string]ViewProjectFile, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *FileversionResponseIncluded) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given map[string]ViewProjectFile and assigns it to the Files field.
func (o *FileversionResponseIncluded) SetFiles(v map[string]ViewProjectFile) {
	o.Files = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *FileversionResponseIncluded) GetProjects() map[string]ViewProject {
	if o == nil || o.Projects == nil {
		var ret map[string]ViewProject
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileversionResponseIncluded) GetProjectsOk() (*map[string]ViewProject, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *FileversionResponseIncluded) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given map[string]ViewProject and assigns it to the Projects field.
func (o *FileversionResponseIncluded) SetProjects(v map[string]ViewProject) {
	o.Projects = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *FileversionResponseIncluded) GetUsers() map[string]ViewUser {
	if o == nil || o.Users == nil {
		var ret map[string]ViewUser
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileversionResponseIncluded) GetUsersOk() (*map[string]ViewUser, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *FileversionResponseIncluded) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given map[string]ViewUser and assigns it to the Users field.
func (o *FileversionResponseIncluded) SetUsers(v map[string]ViewUser) {
	o.Users = &v
}

func (o FileversionResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableFileversionResponseIncluded struct {
	value *FileversionResponseIncluded
	isSet bool
}

func (v NullableFileversionResponseIncluded) Get() *FileversionResponseIncluded {
	return v.value
}

func (v *NullableFileversionResponseIncluded) Set(val *FileversionResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableFileversionResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableFileversionResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileversionResponseIncluded(val *FileversionResponseIncluded) *NullableFileversionResponseIncluded {
	return &NullableFileversionResponseIncluded{value: val, isSet: true}
}

func (v NullableFileversionResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileversionResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


