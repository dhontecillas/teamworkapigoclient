/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// TaskDeleteRequest DeleteRequest contains the ids of the tasks that should be removed.
type TaskDeleteRequest struct {
	TaskIds *[]int32 `json:"taskIds,omitempty"`
	TaskOptions *TaskCommonOptions `json:"taskOptions,omitempty"`
}

// NewTaskDeleteRequest instantiates a new TaskDeleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskDeleteRequest() *TaskDeleteRequest {
	this := TaskDeleteRequest{}
	return &this
}

// NewTaskDeleteRequestWithDefaults instantiates a new TaskDeleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskDeleteRequestWithDefaults() *TaskDeleteRequest {
	this := TaskDeleteRequest{}
	return &this
}

// GetTaskIds returns the TaskIds field value if set, zero value otherwise.
func (o *TaskDeleteRequest) GetTaskIds() []int32 {
	if o == nil || o.TaskIds == nil {
		var ret []int32
		return ret
	}
	return *o.TaskIds
}

// GetTaskIdsOk returns a tuple with the TaskIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDeleteRequest) GetTaskIdsOk() (*[]int32, bool) {
	if o == nil || o.TaskIds == nil {
		return nil, false
	}
	return o.TaskIds, true
}

// HasTaskIds returns a boolean if a field has been set.
func (o *TaskDeleteRequest) HasTaskIds() bool {
	if o != nil && o.TaskIds != nil {
		return true
	}

	return false
}

// SetTaskIds gets a reference to the given []int32 and assigns it to the TaskIds field.
func (o *TaskDeleteRequest) SetTaskIds(v []int32) {
	o.TaskIds = &v
}

// GetTaskOptions returns the TaskOptions field value if set, zero value otherwise.
func (o *TaskDeleteRequest) GetTaskOptions() TaskCommonOptions {
	if o == nil || o.TaskOptions == nil {
		var ret TaskCommonOptions
		return ret
	}
	return *o.TaskOptions
}

// GetTaskOptionsOk returns a tuple with the TaskOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDeleteRequest) GetTaskOptionsOk() (*TaskCommonOptions, bool) {
	if o == nil || o.TaskOptions == nil {
		return nil, false
	}
	return o.TaskOptions, true
}

// HasTaskOptions returns a boolean if a field has been set.
func (o *TaskDeleteRequest) HasTaskOptions() bool {
	if o != nil && o.TaskOptions != nil {
		return true
	}

	return false
}

// SetTaskOptions gets a reference to the given TaskCommonOptions and assigns it to the TaskOptions field.
func (o *TaskDeleteRequest) SetTaskOptions(v TaskCommonOptions) {
	o.TaskOptions = &v
}

func (o TaskDeleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TaskIds != nil {
		toSerialize["taskIds"] = o.TaskIds
	}
	if o.TaskOptions != nil {
		toSerialize["taskOptions"] = o.TaskOptions
	}
	return json.Marshal(toSerialize)
}

type NullableTaskDeleteRequest struct {
	value *TaskDeleteRequest
	isSet bool
}

func (v NullableTaskDeleteRequest) Get() *TaskDeleteRequest {
	return v.value
}

func (v *NullableTaskDeleteRequest) Set(val *TaskDeleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskDeleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskDeleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskDeleteRequest(val *TaskDeleteRequest) *NullableTaskDeleteRequest {
	return &NullableTaskDeleteRequest{value: val, isSet: true}
}

func (v NullableTaskDeleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskDeleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


