/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewRelationship Relationship describes the relation between the main entity and a sideload type.
type ViewRelationship struct {
	Id *int32 `json:"id,omitempty"`
	Meta *map[string]interface{} `json:"meta,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewViewRelationship instantiates a new ViewRelationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewRelationship() *ViewRelationship {
	this := ViewRelationship{}
	return &this
}

// NewViewRelationshipWithDefaults instantiates a new ViewRelationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewRelationshipWithDefaults() *ViewRelationship {
	this := ViewRelationship{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewRelationship) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewRelationship) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewRelationship) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewRelationship) SetId(v int32) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ViewRelationship) GetMeta() map[string]interface{} {
	if o == nil || o.Meta == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewRelationship) GetMetaOk() (*map[string]interface{}, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ViewRelationship) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *ViewRelationship) SetMeta(v map[string]interface{}) {
	o.Meta = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ViewRelationship) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewRelationship) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ViewRelationship) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ViewRelationship) SetType(v string) {
	o.Type = &v
}

func (o ViewRelationship) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableViewRelationship struct {
	value *ViewRelationship
	isSet bool
}

func (v NullableViewRelationship) Get() *ViewRelationship {
	return v.value
}

func (v *NullableViewRelationship) Set(val *ViewRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableViewRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableViewRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewRelationship(val *ViewRelationship) *NullableViewRelationship {
	return &NullableViewRelationship{value: val, isSet: true}
}

func (v NullableViewRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


