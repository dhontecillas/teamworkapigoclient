/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineResponse20085Reactions struct for InlineResponse20085Reactions
type InlineResponse20085Reactions struct {
	Counts *InlineResponse2008ReactionsCounts `json:"counts,omitempty"`
	Mine *[]map[string]interface{} `json:"mine,omitempty"`
}

// NewInlineResponse20085Reactions instantiates a new InlineResponse20085Reactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20085Reactions() *InlineResponse20085Reactions {
	this := InlineResponse20085Reactions{}
	return &this
}

// NewInlineResponse20085ReactionsWithDefaults instantiates a new InlineResponse20085Reactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20085ReactionsWithDefaults() *InlineResponse20085Reactions {
	this := InlineResponse20085Reactions{}
	return &this
}

// GetCounts returns the Counts field value if set, zero value otherwise.
func (o *InlineResponse20085Reactions) GetCounts() InlineResponse2008ReactionsCounts {
	if o == nil || o.Counts == nil {
		var ret InlineResponse2008ReactionsCounts
		return ret
	}
	return *o.Counts
}

// GetCountsOk returns a tuple with the Counts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20085Reactions) GetCountsOk() (*InlineResponse2008ReactionsCounts, bool) {
	if o == nil || o.Counts == nil {
		return nil, false
	}
	return o.Counts, true
}

// HasCounts returns a boolean if a field has been set.
func (o *InlineResponse20085Reactions) HasCounts() bool {
	if o != nil && o.Counts != nil {
		return true
	}

	return false
}

// SetCounts gets a reference to the given InlineResponse2008ReactionsCounts and assigns it to the Counts field.
func (o *InlineResponse20085Reactions) SetCounts(v InlineResponse2008ReactionsCounts) {
	o.Counts = &v
}

// GetMine returns the Mine field value if set, zero value otherwise.
func (o *InlineResponse20085Reactions) GetMine() []map[string]interface{} {
	if o == nil || o.Mine == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Mine
}

// GetMineOk returns a tuple with the Mine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20085Reactions) GetMineOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Mine == nil {
		return nil, false
	}
	return o.Mine, true
}

// HasMine returns a boolean if a field has been set.
func (o *InlineResponse20085Reactions) HasMine() bool {
	if o != nil && o.Mine != nil {
		return true
	}

	return false
}

// SetMine gets a reference to the given []map[string]interface{} and assigns it to the Mine field.
func (o *InlineResponse20085Reactions) SetMine(v []map[string]interface{}) {
	o.Mine = &v
}

func (o InlineResponse20085Reactions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Counts != nil {
		toSerialize["counts"] = o.Counts
	}
	if o.Mine != nil {
		toSerialize["mine"] = o.Mine
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20085Reactions struct {
	value *InlineResponse20085Reactions
	isSet bool
}

func (v NullableInlineResponse20085Reactions) Get() *InlineResponse20085Reactions {
	return v.value
}

func (v *NullableInlineResponse20085Reactions) Set(val *InlineResponse20085Reactions) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20085Reactions) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20085Reactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20085Reactions(val *InlineResponse20085Reactions) *NullableInlineResponse20085Reactions {
	return &NullableInlineResponse20085Reactions{value: val, isSet: true}
}

func (v NullableInlineResponse20085Reactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20085Reactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


