/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// NotebookNotebooksResponseIncluded struct for NotebookNotebooksResponseIncluded
type NotebookNotebooksResponseIncluded struct {
	Companies *map[string]ViewCompany `json:"companies,omitempty"`
	NotebookCategories *map[string]ViewNotebookCategory `json:"notebookCategories,omitempty"`
	Projects *map[string]ViewProject `json:"projects,omitempty"`
	Tags *map[string]ViewTag `json:"tags,omitempty"`
	Teams *map[string]ViewTeam `json:"teams,omitempty"`
	Users *map[string]ViewUser `json:"users,omitempty"`
}

// NewNotebookNotebooksResponseIncluded instantiates a new NotebookNotebooksResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotebookNotebooksResponseIncluded() *NotebookNotebooksResponseIncluded {
	this := NotebookNotebooksResponseIncluded{}
	return &this
}

// NewNotebookNotebooksResponseIncludedWithDefaults instantiates a new NotebookNotebooksResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotebookNotebooksResponseIncludedWithDefaults() *NotebookNotebooksResponseIncluded {
	this := NotebookNotebooksResponseIncluded{}
	return &this
}

// GetCompanies returns the Companies field value if set, zero value otherwise.
func (o *NotebookNotebooksResponseIncluded) GetCompanies() map[string]ViewCompany {
	if o == nil || o.Companies == nil {
		var ret map[string]ViewCompany
		return ret
	}
	return *o.Companies
}

// GetCompaniesOk returns a tuple with the Companies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebooksResponseIncluded) GetCompaniesOk() (*map[string]ViewCompany, bool) {
	if o == nil || o.Companies == nil {
		return nil, false
	}
	return o.Companies, true
}

// HasCompanies returns a boolean if a field has been set.
func (o *NotebookNotebooksResponseIncluded) HasCompanies() bool {
	if o != nil && o.Companies != nil {
		return true
	}

	return false
}

// SetCompanies gets a reference to the given map[string]ViewCompany and assigns it to the Companies field.
func (o *NotebookNotebooksResponseIncluded) SetCompanies(v map[string]ViewCompany) {
	o.Companies = &v
}

// GetNotebookCategories returns the NotebookCategories field value if set, zero value otherwise.
func (o *NotebookNotebooksResponseIncluded) GetNotebookCategories() map[string]ViewNotebookCategory {
	if o == nil || o.NotebookCategories == nil {
		var ret map[string]ViewNotebookCategory
		return ret
	}
	return *o.NotebookCategories
}

// GetNotebookCategoriesOk returns a tuple with the NotebookCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebooksResponseIncluded) GetNotebookCategoriesOk() (*map[string]ViewNotebookCategory, bool) {
	if o == nil || o.NotebookCategories == nil {
		return nil, false
	}
	return o.NotebookCategories, true
}

// HasNotebookCategories returns a boolean if a field has been set.
func (o *NotebookNotebooksResponseIncluded) HasNotebookCategories() bool {
	if o != nil && o.NotebookCategories != nil {
		return true
	}

	return false
}

// SetNotebookCategories gets a reference to the given map[string]ViewNotebookCategory and assigns it to the NotebookCategories field.
func (o *NotebookNotebooksResponseIncluded) SetNotebookCategories(v map[string]ViewNotebookCategory) {
	o.NotebookCategories = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *NotebookNotebooksResponseIncluded) GetProjects() map[string]ViewProject {
	if o == nil || o.Projects == nil {
		var ret map[string]ViewProject
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebooksResponseIncluded) GetProjectsOk() (*map[string]ViewProject, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *NotebookNotebooksResponseIncluded) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given map[string]ViewProject and assigns it to the Projects field.
func (o *NotebookNotebooksResponseIncluded) SetProjects(v map[string]ViewProject) {
	o.Projects = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *NotebookNotebooksResponseIncluded) GetTags() map[string]ViewTag {
	if o == nil || o.Tags == nil {
		var ret map[string]ViewTag
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebooksResponseIncluded) GetTagsOk() (*map[string]ViewTag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *NotebookNotebooksResponseIncluded) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]ViewTag and assigns it to the Tags field.
func (o *NotebookNotebooksResponseIncluded) SetTags(v map[string]ViewTag) {
	o.Tags = &v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *NotebookNotebooksResponseIncluded) GetTeams() map[string]ViewTeam {
	if o == nil || o.Teams == nil {
		var ret map[string]ViewTeam
		return ret
	}
	return *o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebooksResponseIncluded) GetTeamsOk() (*map[string]ViewTeam, bool) {
	if o == nil || o.Teams == nil {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *NotebookNotebooksResponseIncluded) HasTeams() bool {
	if o != nil && o.Teams != nil {
		return true
	}

	return false
}

// SetTeams gets a reference to the given map[string]ViewTeam and assigns it to the Teams field.
func (o *NotebookNotebooksResponseIncluded) SetTeams(v map[string]ViewTeam) {
	o.Teams = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *NotebookNotebooksResponseIncluded) GetUsers() map[string]ViewUser {
	if o == nil || o.Users == nil {
		var ret map[string]ViewUser
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookNotebooksResponseIncluded) GetUsersOk() (*map[string]ViewUser, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *NotebookNotebooksResponseIncluded) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given map[string]ViewUser and assigns it to the Users field.
func (o *NotebookNotebooksResponseIncluded) SetUsers(v map[string]ViewUser) {
	o.Users = &v
}

func (o NotebookNotebooksResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Companies != nil {
		toSerialize["companies"] = o.Companies
	}
	if o.NotebookCategories != nil {
		toSerialize["notebookCategories"] = o.NotebookCategories
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Teams != nil {
		toSerialize["teams"] = o.Teams
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableNotebookNotebooksResponseIncluded struct {
	value *NotebookNotebooksResponseIncluded
	isSet bool
}

func (v NullableNotebookNotebooksResponseIncluded) Get() *NotebookNotebooksResponseIncluded {
	return v.value
}

func (v *NullableNotebookNotebooksResponseIncluded) Set(val *NotebookNotebooksResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableNotebookNotebooksResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableNotebookNotebooksResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotebookNotebooksResponseIncluded(val *NotebookNotebooksResponseIncluded) *NullableNotebookNotebooksResponseIncluded {
	return &NullableNotebookNotebooksResponseIncluded{value: val, isSet: true}
}

func (v NullableNotebookNotebooksResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotebookNotebooksResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


