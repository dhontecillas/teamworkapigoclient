/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewFormAssignee FormAssignee contains all the information returned from a assignee.
type ViewFormAssignee struct {
	Id *int32 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewViewFormAssignee instantiates a new ViewFormAssignee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewFormAssignee() *ViewFormAssignee {
	this := ViewFormAssignee{}
	return &this
}

// NewViewFormAssigneeWithDefaults instantiates a new ViewFormAssignee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewFormAssigneeWithDefaults() *ViewFormAssignee {
	this := ViewFormAssignee{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewFormAssignee) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFormAssignee) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewFormAssignee) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewFormAssignee) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ViewFormAssignee) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFormAssignee) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ViewFormAssignee) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ViewFormAssignee) SetType(v string) {
	o.Type = &v
}

func (o ViewFormAssignee) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableViewFormAssignee struct {
	value *ViewFormAssignee
	isSet bool
}

func (v NullableViewFormAssignee) Get() *ViewFormAssignee {
	return v.value
}

func (v *NullableViewFormAssignee) Set(val *ViewFormAssignee) {
	v.value = val
	v.isSet = true
}

func (v NullableViewFormAssignee) IsSet() bool {
	return v.isSet
}

func (v *NullableViewFormAssignee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewFormAssignee(val *ViewFormAssignee) *NullableViewFormAssignee {
	return &NullableViewFormAssignee{value: val, isSet: true}
}

func (v NullableViewFormAssignee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewFormAssignee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


