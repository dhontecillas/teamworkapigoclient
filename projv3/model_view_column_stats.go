/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewColumnStats ColumnStats contains stats about a column
type ViewColumnStats struct {
	Active *int32 `json:"active,omitempty"`
	Completed *int32 `json:"completed,omitempty"`
	EstimatedTime *int32 `json:"estimatedTime,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// NewViewColumnStats instantiates a new ViewColumnStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewColumnStats() *ViewColumnStats {
	this := ViewColumnStats{}
	return &this
}

// NewViewColumnStatsWithDefaults instantiates a new ViewColumnStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewColumnStatsWithDefaults() *ViewColumnStats {
	this := ViewColumnStats{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ViewColumnStats) GetActive() int32 {
	if o == nil || o.Active == nil {
		var ret int32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumnStats) GetActiveOk() (*int32, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ViewColumnStats) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given int32 and assigns it to the Active field.
func (o *ViewColumnStats) SetActive(v int32) {
	o.Active = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *ViewColumnStats) GetCompleted() int32 {
	if o == nil || o.Completed == nil {
		var ret int32
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumnStats) GetCompletedOk() (*int32, bool) {
	if o == nil || o.Completed == nil {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *ViewColumnStats) HasCompleted() bool {
	if o != nil && o.Completed != nil {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given int32 and assigns it to the Completed field.
func (o *ViewColumnStats) SetCompleted(v int32) {
	o.Completed = &v
}

// GetEstimatedTime returns the EstimatedTime field value if set, zero value otherwise.
func (o *ViewColumnStats) GetEstimatedTime() int32 {
	if o == nil || o.EstimatedTime == nil {
		var ret int32
		return ret
	}
	return *o.EstimatedTime
}

// GetEstimatedTimeOk returns a tuple with the EstimatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumnStats) GetEstimatedTimeOk() (*int32, bool) {
	if o == nil || o.EstimatedTime == nil {
		return nil, false
	}
	return o.EstimatedTime, true
}

// HasEstimatedTime returns a boolean if a field has been set.
func (o *ViewColumnStats) HasEstimatedTime() bool {
	if o != nil && o.EstimatedTime != nil {
		return true
	}

	return false
}

// SetEstimatedTime gets a reference to the given int32 and assigns it to the EstimatedTime field.
func (o *ViewColumnStats) SetEstimatedTime(v int32) {
	o.EstimatedTime = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ViewColumnStats) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumnStats) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ViewColumnStats) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ViewColumnStats) SetTotal(v int32) {
	o.Total = &v
}

func (o ViewColumnStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Completed != nil {
		toSerialize["completed"] = o.Completed
	}
	if o.EstimatedTime != nil {
		toSerialize["estimatedTime"] = o.EstimatedTime
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableViewColumnStats struct {
	value *ViewColumnStats
	isSet bool
}

func (v NullableViewColumnStats) Get() *ViewColumnStats {
	return v.value
}

func (v *NullableViewColumnStats) Set(val *ViewColumnStats) {
	v.value = val
	v.isSet = true
}

func (v NullableViewColumnStats) IsSet() bool {
	return v.isSet
}

func (v *NullableViewColumnStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewColumnStats(val *ViewColumnStats) *NullableViewColumnStats {
	return &NullableViewColumnStats{value: val, isSet: true}
}

func (v NullableViewColumnStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewColumnStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


