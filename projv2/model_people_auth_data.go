/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv2

import (
	"encoding/json"
)

// PeopleAuthData struct for PeopleAuthData
type PeopleAuthData struct {
	Apikey *string `json:"apikey,omitempty"`
	// Timestamp is not a time.Time because we need a specific format in this case. If there are more cases like these it is a good idea to create a new type with a MarshalJSON method.
	Timestamp *string `json:"timestamp,omitempty"`
	Token *string `json:"token,omitempty"`
}

// NewPeopleAuthData instantiates a new PeopleAuthData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleAuthData() *PeopleAuthData {
	this := PeopleAuthData{}
	return &this
}

// NewPeopleAuthDataWithDefaults instantiates a new PeopleAuthData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleAuthDataWithDefaults() *PeopleAuthData {
	this := PeopleAuthData{}
	return &this
}

// GetApikey returns the Apikey field value if set, zero value otherwise.
func (o *PeopleAuthData) GetApikey() string {
	if o == nil || o.Apikey == nil {
		var ret string
		return ret
	}
	return *o.Apikey
}

// GetApikeyOk returns a tuple with the Apikey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleAuthData) GetApikeyOk() (*string, bool) {
	if o == nil || o.Apikey == nil {
		return nil, false
	}
	return o.Apikey, true
}

// HasApikey returns a boolean if a field has been set.
func (o *PeopleAuthData) HasApikey() bool {
	if o != nil && o.Apikey != nil {
		return true
	}

	return false
}

// SetApikey gets a reference to the given string and assigns it to the Apikey field.
func (o *PeopleAuthData) SetApikey(v string) {
	o.Apikey = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *PeopleAuthData) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleAuthData) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *PeopleAuthData) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *PeopleAuthData) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PeopleAuthData) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleAuthData) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PeopleAuthData) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PeopleAuthData) SetToken(v string) {
	o.Token = &v
}

func (o PeopleAuthData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Apikey != nil {
		toSerialize["apikey"] = o.Apikey
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullablePeopleAuthData struct {
	value *PeopleAuthData
	isSet bool
}

func (v NullablePeopleAuthData) Get() *PeopleAuthData {
	return v.value
}

func (v *NullablePeopleAuthData) Set(val *PeopleAuthData) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleAuthData) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleAuthData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleAuthData(val *PeopleAuthData) *NullablePeopleAuthData {
	return &NullablePeopleAuthData{value: val, isSet: true}
}

func (v NullablePeopleAuthData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleAuthData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


