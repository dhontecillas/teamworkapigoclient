/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// PeopleMultiResponseIncluded struct for PeopleMultiResponseIncluded
type PeopleMultiResponseIncluded struct {
	Companies *map[string]ViewCompany `json:"companies,omitempty"`
}

// NewPeopleMultiResponseIncluded instantiates a new PeopleMultiResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleMultiResponseIncluded() *PeopleMultiResponseIncluded {
	this := PeopleMultiResponseIncluded{}
	return &this
}

// NewPeopleMultiResponseIncludedWithDefaults instantiates a new PeopleMultiResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleMultiResponseIncludedWithDefaults() *PeopleMultiResponseIncluded {
	this := PeopleMultiResponseIncluded{}
	return &this
}

// GetCompanies returns the Companies field value if set, zero value otherwise.
func (o *PeopleMultiResponseIncluded) GetCompanies() map[string]ViewCompany {
	if o == nil || o.Companies == nil {
		var ret map[string]ViewCompany
		return ret
	}
	return *o.Companies
}

// GetCompaniesOk returns a tuple with the Companies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleMultiResponseIncluded) GetCompaniesOk() (*map[string]ViewCompany, bool) {
	if o == nil || o.Companies == nil {
		return nil, false
	}
	return o.Companies, true
}

// HasCompanies returns a boolean if a field has been set.
func (o *PeopleMultiResponseIncluded) HasCompanies() bool {
	if o != nil && o.Companies != nil {
		return true
	}

	return false
}

// SetCompanies gets a reference to the given map[string]ViewCompany and assigns it to the Companies field.
func (o *PeopleMultiResponseIncluded) SetCompanies(v map[string]ViewCompany) {
	o.Companies = &v
}

func (o PeopleMultiResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Companies != nil {
		toSerialize["companies"] = o.Companies
	}
	return json.Marshal(toSerialize)
}

type NullablePeopleMultiResponseIncluded struct {
	value *PeopleMultiResponseIncluded
	isSet bool
}

func (v NullablePeopleMultiResponseIncluded) Get() *PeopleMultiResponseIncluded {
	return v.value
}

func (v *NullablePeopleMultiResponseIncluded) Set(val *PeopleMultiResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleMultiResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleMultiResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleMultiResponseIncluded(val *PeopleMultiResponseIncluded) *NullablePeopleMultiResponseIncluded {
	return &NullablePeopleMultiResponseIncluded{value: val, isSet: true}
}

func (v NullablePeopleMultiResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleMultiResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


