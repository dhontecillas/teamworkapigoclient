/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewScheduleEntry ScheduleEntry contains the summary on a specific date.
type ViewScheduleEntry struct {
	AllocatedMinutes *int32 `json:"allocatedMinutes,omitempty"`
	AllocationIds *[]int32 `json:"allocationIds,omitempty"`
	Allocations *[]ViewRelationship `json:"allocations,omitempty"`
	EventIds *[]int32 `json:"eventIds,omitempty"`
	Events *[]ViewRelationship `json:"events,omitempty"`
	LoggedMinutes *int32 `json:"loggedMinutes,omitempty"`
	TimelogIds *[]int32 `json:"timelogIds,omitempty"`
	Timelogs *[]ViewRelationship `json:"timelogs,omitempty"`
	UnavailableMinutes *int32 `json:"unavailableMinutes,omitempty"`
}

// NewViewScheduleEntry instantiates a new ViewScheduleEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewScheduleEntry() *ViewScheduleEntry {
	this := ViewScheduleEntry{}
	return &this
}

// NewViewScheduleEntryWithDefaults instantiates a new ViewScheduleEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewScheduleEntryWithDefaults() *ViewScheduleEntry {
	this := ViewScheduleEntry{}
	return &this
}

// GetAllocatedMinutes returns the AllocatedMinutes field value if set, zero value otherwise.
func (o *ViewScheduleEntry) GetAllocatedMinutes() int32 {
	if o == nil || o.AllocatedMinutes == nil {
		var ret int32
		return ret
	}
	return *o.AllocatedMinutes
}

// GetAllocatedMinutesOk returns a tuple with the AllocatedMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScheduleEntry) GetAllocatedMinutesOk() (*int32, bool) {
	if o == nil || o.AllocatedMinutes == nil {
		return nil, false
	}
	return o.AllocatedMinutes, true
}

// HasAllocatedMinutes returns a boolean if a field has been set.
func (o *ViewScheduleEntry) HasAllocatedMinutes() bool {
	if o != nil && o.AllocatedMinutes != nil {
		return true
	}

	return false
}

// SetAllocatedMinutes gets a reference to the given int32 and assigns it to the AllocatedMinutes field.
func (o *ViewScheduleEntry) SetAllocatedMinutes(v int32) {
	o.AllocatedMinutes = &v
}

// GetAllocationIds returns the AllocationIds field value if set, zero value otherwise.
func (o *ViewScheduleEntry) GetAllocationIds() []int32 {
	if o == nil || o.AllocationIds == nil {
		var ret []int32
		return ret
	}
	return *o.AllocationIds
}

// GetAllocationIdsOk returns a tuple with the AllocationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScheduleEntry) GetAllocationIdsOk() (*[]int32, bool) {
	if o == nil || o.AllocationIds == nil {
		return nil, false
	}
	return o.AllocationIds, true
}

// HasAllocationIds returns a boolean if a field has been set.
func (o *ViewScheduleEntry) HasAllocationIds() bool {
	if o != nil && o.AllocationIds != nil {
		return true
	}

	return false
}

// SetAllocationIds gets a reference to the given []int32 and assigns it to the AllocationIds field.
func (o *ViewScheduleEntry) SetAllocationIds(v []int32) {
	o.AllocationIds = &v
}

// GetAllocations returns the Allocations field value if set, zero value otherwise.
func (o *ViewScheduleEntry) GetAllocations() []ViewRelationship {
	if o == nil || o.Allocations == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Allocations
}

// GetAllocationsOk returns a tuple with the Allocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScheduleEntry) GetAllocationsOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Allocations == nil {
		return nil, false
	}
	return o.Allocations, true
}

// HasAllocations returns a boolean if a field has been set.
func (o *ViewScheduleEntry) HasAllocations() bool {
	if o != nil && o.Allocations != nil {
		return true
	}

	return false
}

// SetAllocations gets a reference to the given []ViewRelationship and assigns it to the Allocations field.
func (o *ViewScheduleEntry) SetAllocations(v []ViewRelationship) {
	o.Allocations = &v
}

// GetEventIds returns the EventIds field value if set, zero value otherwise.
func (o *ViewScheduleEntry) GetEventIds() []int32 {
	if o == nil || o.EventIds == nil {
		var ret []int32
		return ret
	}
	return *o.EventIds
}

// GetEventIdsOk returns a tuple with the EventIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScheduleEntry) GetEventIdsOk() (*[]int32, bool) {
	if o == nil || o.EventIds == nil {
		return nil, false
	}
	return o.EventIds, true
}

// HasEventIds returns a boolean if a field has been set.
func (o *ViewScheduleEntry) HasEventIds() bool {
	if o != nil && o.EventIds != nil {
		return true
	}

	return false
}

// SetEventIds gets a reference to the given []int32 and assigns it to the EventIds field.
func (o *ViewScheduleEntry) SetEventIds(v []int32) {
	o.EventIds = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ViewScheduleEntry) GetEvents() []ViewRelationship {
	if o == nil || o.Events == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScheduleEntry) GetEventsOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ViewScheduleEntry) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []ViewRelationship and assigns it to the Events field.
func (o *ViewScheduleEntry) SetEvents(v []ViewRelationship) {
	o.Events = &v
}

// GetLoggedMinutes returns the LoggedMinutes field value if set, zero value otherwise.
func (o *ViewScheduleEntry) GetLoggedMinutes() int32 {
	if o == nil || o.LoggedMinutes == nil {
		var ret int32
		return ret
	}
	return *o.LoggedMinutes
}

// GetLoggedMinutesOk returns a tuple with the LoggedMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScheduleEntry) GetLoggedMinutesOk() (*int32, bool) {
	if o == nil || o.LoggedMinutes == nil {
		return nil, false
	}
	return o.LoggedMinutes, true
}

// HasLoggedMinutes returns a boolean if a field has been set.
func (o *ViewScheduleEntry) HasLoggedMinutes() bool {
	if o != nil && o.LoggedMinutes != nil {
		return true
	}

	return false
}

// SetLoggedMinutes gets a reference to the given int32 and assigns it to the LoggedMinutes field.
func (o *ViewScheduleEntry) SetLoggedMinutes(v int32) {
	o.LoggedMinutes = &v
}

// GetTimelogIds returns the TimelogIds field value if set, zero value otherwise.
func (o *ViewScheduleEntry) GetTimelogIds() []int32 {
	if o == nil || o.TimelogIds == nil {
		var ret []int32
		return ret
	}
	return *o.TimelogIds
}

// GetTimelogIdsOk returns a tuple with the TimelogIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScheduleEntry) GetTimelogIdsOk() (*[]int32, bool) {
	if o == nil || o.TimelogIds == nil {
		return nil, false
	}
	return o.TimelogIds, true
}

// HasTimelogIds returns a boolean if a field has been set.
func (o *ViewScheduleEntry) HasTimelogIds() bool {
	if o != nil && o.TimelogIds != nil {
		return true
	}

	return false
}

// SetTimelogIds gets a reference to the given []int32 and assigns it to the TimelogIds field.
func (o *ViewScheduleEntry) SetTimelogIds(v []int32) {
	o.TimelogIds = &v
}

// GetTimelogs returns the Timelogs field value if set, zero value otherwise.
func (o *ViewScheduleEntry) GetTimelogs() []ViewRelationship {
	if o == nil || o.Timelogs == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Timelogs
}

// GetTimelogsOk returns a tuple with the Timelogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScheduleEntry) GetTimelogsOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Timelogs == nil {
		return nil, false
	}
	return o.Timelogs, true
}

// HasTimelogs returns a boolean if a field has been set.
func (o *ViewScheduleEntry) HasTimelogs() bool {
	if o != nil && o.Timelogs != nil {
		return true
	}

	return false
}

// SetTimelogs gets a reference to the given []ViewRelationship and assigns it to the Timelogs field.
func (o *ViewScheduleEntry) SetTimelogs(v []ViewRelationship) {
	o.Timelogs = &v
}

// GetUnavailableMinutes returns the UnavailableMinutes field value if set, zero value otherwise.
func (o *ViewScheduleEntry) GetUnavailableMinutes() int32 {
	if o == nil || o.UnavailableMinutes == nil {
		var ret int32
		return ret
	}
	return *o.UnavailableMinutes
}

// GetUnavailableMinutesOk returns a tuple with the UnavailableMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScheduleEntry) GetUnavailableMinutesOk() (*int32, bool) {
	if o == nil || o.UnavailableMinutes == nil {
		return nil, false
	}
	return o.UnavailableMinutes, true
}

// HasUnavailableMinutes returns a boolean if a field has been set.
func (o *ViewScheduleEntry) HasUnavailableMinutes() bool {
	if o != nil && o.UnavailableMinutes != nil {
		return true
	}

	return false
}

// SetUnavailableMinutes gets a reference to the given int32 and assigns it to the UnavailableMinutes field.
func (o *ViewScheduleEntry) SetUnavailableMinutes(v int32) {
	o.UnavailableMinutes = &v
}

func (o ViewScheduleEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllocatedMinutes != nil {
		toSerialize["allocatedMinutes"] = o.AllocatedMinutes
	}
	if o.AllocationIds != nil {
		toSerialize["allocationIds"] = o.AllocationIds
	}
	if o.Allocations != nil {
		toSerialize["allocations"] = o.Allocations
	}
	if o.EventIds != nil {
		toSerialize["eventIds"] = o.EventIds
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.LoggedMinutes != nil {
		toSerialize["loggedMinutes"] = o.LoggedMinutes
	}
	if o.TimelogIds != nil {
		toSerialize["timelogIds"] = o.TimelogIds
	}
	if o.Timelogs != nil {
		toSerialize["timelogs"] = o.Timelogs
	}
	if o.UnavailableMinutes != nil {
		toSerialize["unavailableMinutes"] = o.UnavailableMinutes
	}
	return json.Marshal(toSerialize)
}

type NullableViewScheduleEntry struct {
	value *ViewScheduleEntry
	isSet bool
}

func (v NullableViewScheduleEntry) Get() *ViewScheduleEntry {
	return v.value
}

func (v *NullableViewScheduleEntry) Set(val *ViewScheduleEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableViewScheduleEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableViewScheduleEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewScheduleEntry(val *ViewScheduleEntry) *NullableViewScheduleEntry {
	return &NullableViewScheduleEntry{value: val, isSet: true}
}

func (v NullableViewScheduleEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewScheduleEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


