/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// TimeTrackingApiService TimeTrackingApi service
type TimeTrackingApiService service

type ApiDELETEProjectsApiV3MeTimersIdJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	timerDeleteRequest *TimerDeleteRequest
}

func (r ApiDELETEProjectsApiV3MeTimersIdJsonRequest) TimerDeleteRequest(timerDeleteRequest TimerDeleteRequest) ApiDELETEProjectsApiV3MeTimersIdJsonRequest {
	r.timerDeleteRequest = &timerDeleteRequest
	return r
}

func (r ApiDELETEProjectsApiV3MeTimersIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3MeTimersIdJsonExecute(r)
}

/*
 * DELETEProjectsApiV3MeTimersIdJson Delete a timer by ID
 * Delete an existing timer.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDELETEProjectsApiV3MeTimersIdJsonRequest
 */
func (a *TimeTrackingApiService) DELETEProjectsApiV3MeTimersIdJson(ctx _context.Context) ApiDELETEProjectsApiV3MeTimersIdJsonRequest {
	return ApiDELETEProjectsApiV3MeTimersIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *TimeTrackingApiService) DELETEProjectsApiV3MeTimersIdJsonExecute(r ApiDELETEProjectsApiV3MeTimersIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.DELETEProjectsApiV3MeTimersIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/me/timers/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.timerDeleteRequest == nil {
		return nil, reportError("timerDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.timerDeleteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	updatedAfter *time.Time
	startDate *string
	selectedColumns *string
	reportFormat *string
	projectStatus *string
	orderMode *string
	orderBy *string
	invoicedType *string
	endDate *string
	billableType *string
	ticketId *int32
	tasklistId *int32
	projectId *int32
	projectHealths *int32
	pageSize *int32
	page *int32
	allocationId *int32
	showDeleted *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	isReportDownload *bool
	includeArchivedProjects *bool
	taskTagIds *[]int32
	tagIds *[]int32
	projectsFromCompanyId *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsTimelogs *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	companyIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) SelectedColumns(selectedColumns string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.selectedColumns = &selectedColumns
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) BillableType(billableType string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) TicketId(ticketId int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) Page(page int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) AllocationId(allocationId int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.allocationId = &allocationId
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) ProjectsFromCompanyId(projectsFromCompanyId []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.projectsFromCompanyId = &projectsFromCompanyId
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) Include(include []string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) FieldsTimelogs(fieldsTimelogs []string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.fieldsTimelogs = &fieldsTimelogs
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) CompanyIds(companyIds []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.companyIds = &companyIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) Execute() (TimelogTimelogsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3AllocationsAllocationIdTimeJsonExecute(r)
}

/*
 * GETProjectsApiV3AllocationsAllocationIdTimeJson Get time entries for a specific allocation
 * Return logged time entries for a specific allocation. Only the time entries that
the logged-in user can access will be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest
 */
func (a *TimeTrackingApiService) GETProjectsApiV3AllocationsAllocationIdTimeJson(ctx _context.Context) ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest {
	return ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimelogTimelogsResponse
 */
func (a *TimeTrackingApiService) GETProjectsApiV3AllocationsAllocationIdTimeJsonExecute(r ApiGETProjectsApiV3AllocationsAllocationIdTimeJsonRequest) (TimelogTimelogsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimelogTimelogsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.GETProjectsApiV3AllocationsAllocationIdTimeJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/allocations/:allocationId/time.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.selectedColumns != nil {
		localVarQueryParams.Add("selectedColumns", parameterToString(*r.selectedColumns, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.allocationId != nil {
		localVarQueryParams.Add("allocationId", parameterToString(*r.allocationId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectsFromCompanyId != nil {
		localVarQueryParams.Add("projectsFromCompanyId", parameterToString(*r.projectsFromCompanyId, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTimelogs != nil {
		localVarQueryParams.Add("fields[timelogs]", parameterToString(*r.fieldsTimelogs, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.companyIds != nil {
		localVarQueryParams.Add("companyIds", parameterToString(*r.companyIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3MeTimersJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	userId *int32
	taskId *int32
	projectId *int32
	pageSize *int32
	page *int32
	showDeleted *bool
	runningTimersOnly *bool
	include *[]string
	fieldsUsers *[]string
	fieldsTimers *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsProjects *[]string
}

func (r ApiGETProjectsApiV3MeTimersJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) UserId(userId int32) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) TaskId(taskId int32) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) Page(page int32) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) RunningTimersOnly(runningTimersOnly bool) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.runningTimersOnly = &runningTimersOnly
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) Include(include []string) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) FieldsTimers(fieldsTimers []string) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.fieldsTimers = &fieldsTimers
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3MeTimersJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3MeTimersJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}

func (r ApiGETProjectsApiV3MeTimersJsonRequest) Execute() (TimerTimersResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3MeTimersJsonExecute(r)
}

/*
 * GETProjectsApiV3MeTimersJson Get all your running timers
 * Will get all your running timers or the person you are logged in as.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3MeTimersJsonRequest
 */
func (a *TimeTrackingApiService) GETProjectsApiV3MeTimersJson(ctx _context.Context) ApiGETProjectsApiV3MeTimersJsonRequest {
	return ApiGETProjectsApiV3MeTimersJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimerTimersResponse
 */
func (a *TimeTrackingApiService) GETProjectsApiV3MeTimersJsonExecute(r ApiGETProjectsApiV3MeTimersJsonRequest) (TimerTimersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimerTimersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.GETProjectsApiV3MeTimersJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/me/timers.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.runningTimersOnly != nil {
		localVarQueryParams.Add("runningTimersOnly", parameterToString(*r.runningTimersOnly, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTimers != nil {
		localVarQueryParams.Add("fields[timers]", parameterToString(*r.fieldsTimers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	updatedAfter *time.Time
	startDate *string
	selectedColumns *string
	reportFormat *string
	projectStatus *string
	orderMode *string
	orderBy *string
	invoicedType *string
	endDate *string
	billableType *string
	ticketId *int32
	tasklistId *int32
	projectId *int32
	projectHealths *int32
	pageSize *int32
	page *int32
	allocationId *int32
	showDeleted *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	isReportDownload *bool
	includeArchivedProjects *bool
	taskTagIds *[]int32
	tagIds *[]int32
	projectsFromCompanyId *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsTimelogs *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	companyIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) SelectedColumns(selectedColumns string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.selectedColumns = &selectedColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) BillableType(billableType string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) TicketId(ticketId int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) Page(page int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) AllocationId(allocationId int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.allocationId = &allocationId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) ProjectsFromCompanyId(projectsFromCompanyId []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.projectsFromCompanyId = &projectsFromCompanyId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) Include(include []string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) FieldsTimelogs(fieldsTimelogs []string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.fieldsTimelogs = &fieldsTimelogs
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) CompanyIds(companyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.companyIds = &companyIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) Execute() (TimelogTimelogsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsProjectIdTimeJsonExecute(r)
}

/*
 * GETProjectsApiV3ProjectsProjectIdTimeJson Get time entries for a specific project
 * Return logged time entries for a specific project. Only the time entries that
the logged-in user can access will be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest
 */
func (a *TimeTrackingApiService) GETProjectsApiV3ProjectsProjectIdTimeJson(ctx _context.Context) ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest {
	return ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimelogTimelogsResponse
 */
func (a *TimeTrackingApiService) GETProjectsApiV3ProjectsProjectIdTimeJsonExecute(r ApiGETProjectsApiV3ProjectsProjectIdTimeJsonRequest) (TimelogTimelogsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimelogTimelogsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.GETProjectsApiV3ProjectsProjectIdTimeJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/time.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.selectedColumns != nil {
		localVarQueryParams.Add("selectedColumns", parameterToString(*r.selectedColumns, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.allocationId != nil {
		localVarQueryParams.Add("allocationId", parameterToString(*r.allocationId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectsFromCompanyId != nil {
		localVarQueryParams.Add("projectsFromCompanyId", parameterToString(*r.projectsFromCompanyId, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTimelogs != nil {
		localVarQueryParams.Add("fields[timelogs]", parameterToString(*r.fieldsTimelogs, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.companyIds != nil {
		localVarQueryParams.Add("companyIds", parameterToString(*r.companyIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	projectStatus *string
	userId *int32
	tasklistId *int32
	taskId *int32
	projectId *int32
	projectHealths *int32
	deskTicketId *int32
	onlyStarredProjects *bool
	matchAllTags *bool
	userIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	companyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) UserId(userId int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) TaskId(taskId int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) DeskTicketId(deskTicketId int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.deskTicketId = &deskTicketId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) UserIds(userIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) CompanyIds(companyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	r.companyIds = &companyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) Execute() (TimelogTotalsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsProjectIdTimeTotalJsonExecute(r)
}

/*
 * GETProjectsApiV3ProjectsProjectIdTimeTotalJson Get timelog totals.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest
 */
func (a *TimeTrackingApiService) GETProjectsApiV3ProjectsProjectIdTimeTotalJson(ctx _context.Context) ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest {
	return ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimelogTotalsResponse
 */
func (a *TimeTrackingApiService) GETProjectsApiV3ProjectsProjectIdTimeTotalJsonExecute(r ApiGETProjectsApiV3ProjectsProjectIdTimeTotalJsonRequest) (TimelogTotalsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimelogTotalsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.GETProjectsApiV3ProjectsProjectIdTimeTotalJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/time/total.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.deskTicketId != nil {
		localVarQueryParams.Add("deskTicketId", parameterToString(*r.deskTicketId, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.companyIds != nil {
		localVarQueryParams.Add("companyIds", parameterToString(*r.companyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3TimeJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	updatedAfter *time.Time
	startDate *string
	selectedColumns *string
	reportFormat *string
	projectStatus *string
	orderMode *string
	orderBy *string
	invoicedType *string
	endDate *string
	billableType *string
	ticketId *int32
	tasklistId *int32
	projectId *int32
	projectHealths *int32
	pageSize *int32
	page *int32
	allocationId *int32
	showDeleted *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	isReportDownload *bool
	includeArchivedProjects *bool
	taskTagIds *[]int32
	tagIds *[]int32
	projectsFromCompanyId *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsTimelogs *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	companyIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3TimeJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3TimeJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3TimeJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) SelectedColumns(selectedColumns string) ApiGETProjectsApiV3TimeJsonRequest {
	r.selectedColumns = &selectedColumns
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3TimeJsonRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3TimeJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3TimeJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3TimeJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV3TimeJsonRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3TimeJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) BillableType(billableType string) ApiGETProjectsApiV3TimeJsonRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) TicketId(ticketId int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) Page(page int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) AllocationId(allocationId int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.allocationId = &allocationId
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3TimeJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3TimeJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3TimeJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3TimeJsonRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3TimeJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) ProjectsFromCompanyId(projectsFromCompanyId []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.projectsFromCompanyId = &projectsFromCompanyId
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) Include(include []string) ApiGETProjectsApiV3TimeJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3TimeJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) FieldsTimelogs(fieldsTimelogs []string) ApiGETProjectsApiV3TimeJsonRequest {
	r.fieldsTimelogs = &fieldsTimelogs
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3TimeJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3TimeJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3TimeJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3TimeJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) CompanyIds(companyIds []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.companyIds = &companyIds
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3TimeJsonRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3TimeJsonRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3TimeJsonRequest) Execute() (TimelogTimelogsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3TimeJsonExecute(r)
}

/*
 * GETProjectsApiV3TimeJson Get all time entries
 * Return all logged time entries for all projects. Only the time entries that
the logged-in user can access will be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3TimeJsonRequest
 */
func (a *TimeTrackingApiService) GETProjectsApiV3TimeJson(ctx _context.Context) ApiGETProjectsApiV3TimeJsonRequest {
	return ApiGETProjectsApiV3TimeJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimelogTimelogsResponse
 */
func (a *TimeTrackingApiService) GETProjectsApiV3TimeJsonExecute(r ApiGETProjectsApiV3TimeJsonRequest) (TimelogTimelogsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimelogTimelogsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.GETProjectsApiV3TimeJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/time.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.selectedColumns != nil {
		localVarQueryParams.Add("selectedColumns", parameterToString(*r.selectedColumns, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.allocationId != nil {
		localVarQueryParams.Add("allocationId", parameterToString(*r.allocationId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectsFromCompanyId != nil {
		localVarQueryParams.Add("projectsFromCompanyId", parameterToString(*r.projectsFromCompanyId, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTimelogs != nil {
		localVarQueryParams.Add("fields[timelogs]", parameterToString(*r.fieldsTimelogs, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.companyIds != nil {
		localVarQueryParams.Add("companyIds", parameterToString(*r.companyIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3TimeTotalJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	projectStatus *string
	userId *int32
	tasklistId *int32
	taskId *int32
	projectId *int32
	projectHealths *int32
	deskTicketId *int32
	onlyStarredProjects *bool
	matchAllTags *bool
	userIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	companyIds *[]int32
}

func (r ApiGETProjectsApiV3TimeTotalJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) UserId(userId int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) TaskId(taskId int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) DeskTicketId(deskTicketId int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.deskTicketId = &deskTicketId
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) UserIds(userIds []int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3TimeTotalJsonRequest) CompanyIds(companyIds []int32) ApiGETProjectsApiV3TimeTotalJsonRequest {
	r.companyIds = &companyIds
	return r
}

func (r ApiGETProjectsApiV3TimeTotalJsonRequest) Execute() (TimelogTotalsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3TimeTotalJsonExecute(r)
}

/*
 * GETProjectsApiV3TimeTotalJson Get timelog totals.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3TimeTotalJsonRequest
 */
func (a *TimeTrackingApiService) GETProjectsApiV3TimeTotalJson(ctx _context.Context) ApiGETProjectsApiV3TimeTotalJsonRequest {
	return ApiGETProjectsApiV3TimeTotalJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimelogTotalsResponse
 */
func (a *TimeTrackingApiService) GETProjectsApiV3TimeTotalJsonExecute(r ApiGETProjectsApiV3TimeTotalJsonRequest) (TimelogTotalsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimelogTotalsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.GETProjectsApiV3TimeTotalJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/time/total.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.deskTicketId != nil {
		localVarQueryParams.Add("deskTicketId", parameterToString(*r.deskTicketId, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.companyIds != nil {
		localVarQueryParams.Add("companyIds", parameterToString(*r.companyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3TimersIdJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	userId *int32
	showDeleted *bool
	include *[]string
	fieldsUsers *[]string
	fieldsTimers *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsProjects *[]string
}

func (r ApiGETProjectsApiV3TimersIdJsonRequest) UserId(userId int32) ApiGETProjectsApiV3TimersIdJsonRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV3TimersIdJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3TimersIdJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3TimersIdJsonRequest) Include(include []string) ApiGETProjectsApiV3TimersIdJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3TimersIdJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3TimersIdJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3TimersIdJsonRequest) FieldsTimers(fieldsTimers []string) ApiGETProjectsApiV3TimersIdJsonRequest {
	r.fieldsTimers = &fieldsTimers
	return r
}
func (r ApiGETProjectsApiV3TimersIdJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3TimersIdJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3TimersIdJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3TimersIdJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3TimersIdJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3TimersIdJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}

func (r ApiGETProjectsApiV3TimersIdJsonRequest) Execute() (TimerResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3TimersIdJsonExecute(r)
}

/*
 * GETProjectsApiV3TimersIdJson Get a specific timer
 * Will get a timer with with a specific ID
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3TimersIdJsonRequest
 */
func (a *TimeTrackingApiService) GETProjectsApiV3TimersIdJson(ctx _context.Context) ApiGETProjectsApiV3TimersIdJsonRequest {
	return ApiGETProjectsApiV3TimersIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimerResponse
 */
func (a *TimeTrackingApiService) GETProjectsApiV3TimersIdJsonExecute(r ApiGETProjectsApiV3TimersIdJsonRequest) (TimerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.GETProjectsApiV3TimersIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/timers/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTimers != nil {
		localVarQueryParams.Add("fields[timers]", parameterToString(*r.fieldsTimers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3TimersJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	userId *int32
	taskId *int32
	projectId *int32
	pageSize *int32
	page *int32
	showDeleted *bool
	runningTimersOnly *bool
	include *[]string
	fieldsUsers *[]string
	fieldsTimers *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsProjects *[]string
}

func (r ApiGETProjectsApiV3TimersJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3TimersJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3TimersJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) UserId(userId int32) ApiGETProjectsApiV3TimersJsonRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) TaskId(taskId int32) ApiGETProjectsApiV3TimersJsonRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3TimersJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3TimersJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) Page(page int32) ApiGETProjectsApiV3TimersJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3TimersJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) RunningTimersOnly(runningTimersOnly bool) ApiGETProjectsApiV3TimersJsonRequest {
	r.runningTimersOnly = &runningTimersOnly
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) Include(include []string) ApiGETProjectsApiV3TimersJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3TimersJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) FieldsTimers(fieldsTimers []string) ApiGETProjectsApiV3TimersJsonRequest {
	r.fieldsTimers = &fieldsTimers
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3TimersJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3TimersJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3TimersJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3TimersJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}

func (r ApiGETProjectsApiV3TimersJsonRequest) Execute() (TimerTimersResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3TimersJsonExecute(r)
}

/*
 * GETProjectsApiV3TimersJson Get all running timers
 * Brings back all current running timers. Will return a set of existing intervals for each timer.
If the timer has never been stopped then this interval will only have a from property set and
the you will need to calculate the current duration of the timer.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3TimersJsonRequest
 */
func (a *TimeTrackingApiService) GETProjectsApiV3TimersJson(ctx _context.Context) ApiGETProjectsApiV3TimersJsonRequest {
	return ApiGETProjectsApiV3TimersJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimerTimersResponse
 */
func (a *TimeTrackingApiService) GETProjectsApiV3TimersJsonExecute(r ApiGETProjectsApiV3TimersJsonRequest) (TimerTimersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimerTimersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.GETProjectsApiV3TimersJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/timers.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.runningTimersOnly != nil {
		localVarQueryParams.Add("runningTimersOnly", parameterToString(*r.runningTimersOnly, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTimers != nil {
		localVarQueryParams.Add("fields[timers]", parameterToString(*r.fieldsTimers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3MeTimersJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	timerRequest *TimerRequest
}

func (r ApiPOSTProjectsApiV3MeTimersJsonRequest) TimerRequest(timerRequest TimerRequest) ApiPOSTProjectsApiV3MeTimersJsonRequest {
	r.timerRequest = &timerRequest
	return r
}

func (r ApiPOSTProjectsApiV3MeTimersJsonRequest) Execute() (TimerResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3MeTimersJsonExecute(r)
}

/*
 * POSTProjectsApiV3MeTimersJson Create a new timer
 * Creates a new timer. If there's already a timer running, it will stop this timer
at default.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3MeTimersJsonRequest
 */
func (a *TimeTrackingApiService) POSTProjectsApiV3MeTimersJson(ctx _context.Context) ApiPOSTProjectsApiV3MeTimersJsonRequest {
	return ApiPOSTProjectsApiV3MeTimersJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimerResponse
 */
func (a *TimeTrackingApiService) POSTProjectsApiV3MeTimersJsonExecute(r ApiPOSTProjectsApiV3MeTimersJsonRequest) (TimerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.POSTProjectsApiV3MeTimersJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/me/timers.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.timerRequest == nil {
		return localVarReturnValue, nil, reportError("timerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.timerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3MeTimersIdCompleteJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
}


func (r ApiPUTProjectsApiV3MeTimersIdCompleteJsonRequest) Execute() (TimerResponse, *_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3MeTimersIdCompleteJsonExecute(r)
}

/*
 * PUTProjectsApiV3MeTimersIdCompleteJson Complete a timer by ID
 * Complete an existing timer. If the timer is currently running, it is paused to create
the timelog entry. When the timelog is created, the timer is deleted.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPUTProjectsApiV3MeTimersIdCompleteJsonRequest
 */
func (a *TimeTrackingApiService) PUTProjectsApiV3MeTimersIdCompleteJson(ctx _context.Context) ApiPUTProjectsApiV3MeTimersIdCompleteJsonRequest {
	return ApiPUTProjectsApiV3MeTimersIdCompleteJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimerResponse
 */
func (a *TimeTrackingApiService) PUTProjectsApiV3MeTimersIdCompleteJsonExecute(r ApiPUTProjectsApiV3MeTimersIdCompleteJsonRequest) (TimerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.PUTProjectsApiV3MeTimersIdCompleteJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/me/timers/:id/complete.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3MeTimersIdJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
	timerRequest *TimerRequest
}

func (r ApiPUTProjectsApiV3MeTimersIdJsonRequest) TimerRequest(timerRequest TimerRequest) ApiPUTProjectsApiV3MeTimersIdJsonRequest {
	r.timerRequest = &timerRequest
	return r
}

func (r ApiPUTProjectsApiV3MeTimersIdJsonRequest) Execute() (TimerResponse, *_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3MeTimersIdJsonExecute(r)
}

/*
 * PUTProjectsApiV3MeTimersIdJson Edits a timer
 * Edits the fields of a timer.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPUTProjectsApiV3MeTimersIdJsonRequest
 */
func (a *TimeTrackingApiService) PUTProjectsApiV3MeTimersIdJson(ctx _context.Context) ApiPUTProjectsApiV3MeTimersIdJsonRequest {
	return ApiPUTProjectsApiV3MeTimersIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimerResponse
 */
func (a *TimeTrackingApiService) PUTProjectsApiV3MeTimersIdJsonExecute(r ApiPUTProjectsApiV3MeTimersIdJsonRequest) (TimerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.PUTProjectsApiV3MeTimersIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/me/timers/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.timerRequest == nil {
		return localVarReturnValue, nil, reportError("timerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.timerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3MeTimersIdPauseJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
}


func (r ApiPUTProjectsApiV3MeTimersIdPauseJsonRequest) Execute() (TimerResponse, *_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3MeTimersIdPauseJsonExecute(r)
}

/*
 * PUTProjectsApiV3MeTimersIdPauseJson Pause a timer by ID
 * Pause an existing timer.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPUTProjectsApiV3MeTimersIdPauseJsonRequest
 */
func (a *TimeTrackingApiService) PUTProjectsApiV3MeTimersIdPauseJson(ctx _context.Context) ApiPUTProjectsApiV3MeTimersIdPauseJsonRequest {
	return ApiPUTProjectsApiV3MeTimersIdPauseJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimerResponse
 */
func (a *TimeTrackingApiService) PUTProjectsApiV3MeTimersIdPauseJsonExecute(r ApiPUTProjectsApiV3MeTimersIdPauseJsonRequest) (TimerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.PUTProjectsApiV3MeTimersIdPauseJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/me/timers/:id/pause.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3MeTimersIdResumeJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
}


func (r ApiPUTProjectsApiV3MeTimersIdResumeJsonRequest) Execute() (TimerResponse, *_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3MeTimersIdResumeJsonExecute(r)
}

/*
 * PUTProjectsApiV3MeTimersIdResumeJson Resume a timer by ID
 * Resume an existing timer. If other timers are currently running, those timers are paused before resuming.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPUTProjectsApiV3MeTimersIdResumeJsonRequest
 */
func (a *TimeTrackingApiService) PUTProjectsApiV3MeTimersIdResumeJson(ctx _context.Context) ApiPUTProjectsApiV3MeTimersIdResumeJsonRequest {
	return ApiPUTProjectsApiV3MeTimersIdResumeJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TimerResponse
 */
func (a *TimeTrackingApiService) PUTProjectsApiV3MeTimersIdResumeJsonExecute(r ApiPUTProjectsApiV3MeTimersIdResumeJsonRequest) (TimerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.PUTProjectsApiV3MeTimersIdResumeJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/me/timers/:id/resume.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3MeTimersIdUndeleteJsonRequest struct {
	ctx _context.Context
	ApiService *TimeTrackingApiService
}


func (r ApiPUTProjectsApiV3MeTimersIdUndeleteJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3MeTimersIdUndeleteJsonExecute(r)
}

/*
 * PUTProjectsApiV3MeTimersIdUndeleteJson Undelete a timer by ID
 * Undelete an existing timer.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPUTProjectsApiV3MeTimersIdUndeleteJsonRequest
 */
func (a *TimeTrackingApiService) PUTProjectsApiV3MeTimersIdUndeleteJson(ctx _context.Context) ApiPUTProjectsApiV3MeTimersIdUndeleteJsonRequest {
	return ApiPUTProjectsApiV3MeTimersIdUndeleteJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *TimeTrackingApiService) PUTProjectsApiV3MeTimersIdUndeleteJsonExecute(r ApiPUTProjectsApiV3MeTimersIdUndeleteJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeTrackingApiService.PUTProjectsApiV3MeTimersIdUndeleteJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/me/timers/:id/undelete.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
