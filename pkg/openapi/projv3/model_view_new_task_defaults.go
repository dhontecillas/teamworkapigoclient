/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewNewTaskDefaults NewTaskDefaults contains new task defaults for the default tasklist
type ViewNewTaskDefaults struct {
	DueDate *string `json:"dueDate,omitempty"`
	EstimatedMinutes *int32 `json:"estimatedMinutes,omitempty"`
	Priority *string `json:"priority,omitempty"`
	ResponisblePartyIds *ViewUserGroups `json:"responisblePartyIds,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	Tags *[]int32 `json:"tags,omitempty"`
}

// NewViewNewTaskDefaults instantiates a new ViewNewTaskDefaults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewNewTaskDefaults() *ViewNewTaskDefaults {
	this := ViewNewTaskDefaults{}
	return &this
}

// NewViewNewTaskDefaultsWithDefaults instantiates a new ViewNewTaskDefaults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewNewTaskDefaultsWithDefaults() *ViewNewTaskDefaults {
	this := ViewNewTaskDefaults{}
	return &this
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *ViewNewTaskDefaults) GetDueDate() string {
	if o == nil || o.DueDate == nil {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNewTaskDefaults) GetDueDateOk() (*string, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *ViewNewTaskDefaults) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *ViewNewTaskDefaults) SetDueDate(v string) {
	o.DueDate = &v
}

// GetEstimatedMinutes returns the EstimatedMinutes field value if set, zero value otherwise.
func (o *ViewNewTaskDefaults) GetEstimatedMinutes() int32 {
	if o == nil || o.EstimatedMinutes == nil {
		var ret int32
		return ret
	}
	return *o.EstimatedMinutes
}

// GetEstimatedMinutesOk returns a tuple with the EstimatedMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNewTaskDefaults) GetEstimatedMinutesOk() (*int32, bool) {
	if o == nil || o.EstimatedMinutes == nil {
		return nil, false
	}
	return o.EstimatedMinutes, true
}

// HasEstimatedMinutes returns a boolean if a field has been set.
func (o *ViewNewTaskDefaults) HasEstimatedMinutes() bool {
	if o != nil && o.EstimatedMinutes != nil {
		return true
	}

	return false
}

// SetEstimatedMinutes gets a reference to the given int32 and assigns it to the EstimatedMinutes field.
func (o *ViewNewTaskDefaults) SetEstimatedMinutes(v int32) {
	o.EstimatedMinutes = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ViewNewTaskDefaults) GetPriority() string {
	if o == nil || o.Priority == nil {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNewTaskDefaults) GetPriorityOk() (*string, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ViewNewTaskDefaults) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *ViewNewTaskDefaults) SetPriority(v string) {
	o.Priority = &v
}

// GetResponisblePartyIds returns the ResponisblePartyIds field value if set, zero value otherwise.
func (o *ViewNewTaskDefaults) GetResponisblePartyIds() ViewUserGroups {
	if o == nil || o.ResponisblePartyIds == nil {
		var ret ViewUserGroups
		return ret
	}
	return *o.ResponisblePartyIds
}

// GetResponisblePartyIdsOk returns a tuple with the ResponisblePartyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNewTaskDefaults) GetResponisblePartyIdsOk() (*ViewUserGroups, bool) {
	if o == nil || o.ResponisblePartyIds == nil {
		return nil, false
	}
	return o.ResponisblePartyIds, true
}

// HasResponisblePartyIds returns a boolean if a field has been set.
func (o *ViewNewTaskDefaults) HasResponisblePartyIds() bool {
	if o != nil && o.ResponisblePartyIds != nil {
		return true
	}

	return false
}

// SetResponisblePartyIds gets a reference to the given ViewUserGroups and assigns it to the ResponisblePartyIds field.
func (o *ViewNewTaskDefaults) SetResponisblePartyIds(v ViewUserGroups) {
	o.ResponisblePartyIds = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ViewNewTaskDefaults) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNewTaskDefaults) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ViewNewTaskDefaults) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ViewNewTaskDefaults) SetStartDate(v string) {
	o.StartDate = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ViewNewTaskDefaults) GetTags() []int32 {
	if o == nil || o.Tags == nil {
		var ret []int32
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNewTaskDefaults) GetTagsOk() (*[]int32, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ViewNewTaskDefaults) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int32 and assigns it to the Tags field.
func (o *ViewNewTaskDefaults) SetTags(v []int32) {
	o.Tags = &v
}

func (o ViewNewTaskDefaults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DueDate != nil {
		toSerialize["dueDate"] = o.DueDate
	}
	if o.EstimatedMinutes != nil {
		toSerialize["estimatedMinutes"] = o.EstimatedMinutes
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.ResponisblePartyIds != nil {
		toSerialize["responisblePartyIds"] = o.ResponisblePartyIds
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableViewNewTaskDefaults struct {
	value *ViewNewTaskDefaults
	isSet bool
}

func (v NullableViewNewTaskDefaults) Get() *ViewNewTaskDefaults {
	return v.value
}

func (v *NullableViewNewTaskDefaults) Set(val *ViewNewTaskDefaults) {
	v.value = val
	v.isSet = true
}

func (v NullableViewNewTaskDefaults) IsSet() bool {
	return v.isSet
}

func (v *NullableViewNewTaskDefaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewNewTaskDefaults(val *ViewNewTaskDefaults) *NullableViewNewTaskDefaults {
	return &NullableViewNewTaskDefaults{value: val, isSet: true}
}

func (v NullableViewNewTaskDefaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewNewTaskDefaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


