/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ChangeChangesResponse ChangesResponse contains information about a group of changes.
type ChangeChangesResponse struct {
	Changes *[]ViewChange `json:"changes,omitempty"`
}

// NewChangeChangesResponse instantiates a new ChangeChangesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeChangesResponse() *ChangeChangesResponse {
	this := ChangeChangesResponse{}
	return &this
}

// NewChangeChangesResponseWithDefaults instantiates a new ChangeChangesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeChangesResponseWithDefaults() *ChangeChangesResponse {
	this := ChangeChangesResponse{}
	return &this
}

// GetChanges returns the Changes field value if set, zero value otherwise.
func (o *ChangeChangesResponse) GetChanges() []ViewChange {
	if o == nil || o.Changes == nil {
		var ret []ViewChange
		return ret
	}
	return *o.Changes
}

// GetChangesOk returns a tuple with the Changes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeChangesResponse) GetChangesOk() (*[]ViewChange, bool) {
	if o == nil || o.Changes == nil {
		return nil, false
	}
	return o.Changes, true
}

// HasChanges returns a boolean if a field has been set.
func (o *ChangeChangesResponse) HasChanges() bool {
	if o != nil && o.Changes != nil {
		return true
	}

	return false
}

// SetChanges gets a reference to the given []ViewChange and assigns it to the Changes field.
func (o *ChangeChangesResponse) SetChanges(v []ViewChange) {
	o.Changes = &v
}

func (o ChangeChangesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Changes != nil {
		toSerialize["changes"] = o.Changes
	}
	return json.Marshal(toSerialize)
}

type NullableChangeChangesResponse struct {
	value *ChangeChangesResponse
	isSet bool
}

func (v NullableChangeChangesResponse) Get() *ChangeChangesResponse {
	return v.value
}

func (v *NullableChangeChangesResponse) Set(val *ChangeChangesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeChangesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeChangesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeChangesResponse(val *ChangeChangesResponse) *NullableChangeChangesResponse {
	return &NullableChangeChangesResponse{value: val, isSet: true}
}

func (v NullableChangeChangesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeChangesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


