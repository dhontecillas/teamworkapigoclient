/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewUsercost Usercost contains all the information returned from a usercost.
type ViewUsercost struct {
	Cost *int32 `json:"cost,omitempty"`
	User *ViewRelationship `json:"user,omitempty"`
	UserId *int32 `json:"userId,omitempty"`
}

// NewViewUsercost instantiates a new ViewUsercost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewUsercost() *ViewUsercost {
	this := ViewUsercost{}
	return &this
}

// NewViewUsercostWithDefaults instantiates a new ViewUsercost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewUsercostWithDefaults() *ViewUsercost {
	this := ViewUsercost{}
	return &this
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *ViewUsercost) GetCost() int32 {
	if o == nil || o.Cost == nil {
		var ret int32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUsercost) GetCostOk() (*int32, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *ViewUsercost) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given int32 and assigns it to the Cost field.
func (o *ViewUsercost) SetCost(v int32) {
	o.Cost = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ViewUsercost) GetUser() ViewRelationship {
	if o == nil || o.User == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUsercost) GetUserOk() (*ViewRelationship, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ViewUsercost) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given ViewRelationship and assigns it to the User field.
func (o *ViewUsercost) SetUser(v ViewRelationship) {
	o.User = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ViewUsercost) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUsercost) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ViewUsercost) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *ViewUsercost) SetUserId(v int32) {
	o.UserId = &v
}

func (o ViewUsercost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableViewUsercost struct {
	value *ViewUsercost
	isSet bool
}

func (v NullableViewUsercost) Get() *ViewUsercost {
	return v.value
}

func (v *NullableViewUsercost) Set(val *ViewUsercost) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUsercost) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUsercost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUsercost(val *ViewUsercost) *NullableViewUsercost {
	return &NullableViewUsercost{value: val, isSet: true}
}

func (v NullableViewUsercost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUsercost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


