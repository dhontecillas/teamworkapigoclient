/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// CategoryCategoriesResponse CategoriesResponse contains information about a group of projects.
type CategoryCategoriesResponse struct {
	Projects *[]ViewProjectCategory `json:"projects,omitempty"`
}

// NewCategoryCategoriesResponse instantiates a new CategoryCategoriesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryCategoriesResponse() *CategoryCategoriesResponse {
	this := CategoryCategoriesResponse{}
	return &this
}

// NewCategoryCategoriesResponseWithDefaults instantiates a new CategoryCategoriesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryCategoriesResponseWithDefaults() *CategoryCategoriesResponse {
	this := CategoryCategoriesResponse{}
	return &this
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *CategoryCategoriesResponse) GetProjects() []ViewProjectCategory {
	if o == nil || o.Projects == nil {
		var ret []ViewProjectCategory
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryCategoriesResponse) GetProjectsOk() (*[]ViewProjectCategory, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *CategoryCategoriesResponse) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []ViewProjectCategory and assigns it to the Projects field.
func (o *CategoryCategoriesResponse) SetProjects(v []ViewProjectCategory) {
	o.Projects = &v
}

func (o CategoryCategoriesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	return json.Marshal(toSerialize)
}

type NullableCategoryCategoriesResponse struct {
	value *CategoryCategoriesResponse
	isSet bool
}

func (v NullableCategoryCategoriesResponse) Get() *CategoryCategoriesResponse {
	return v.value
}

func (v *NullableCategoryCategoriesResponse) Set(val *CategoryCategoriesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryCategoriesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryCategoriesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryCategoriesResponse(val *CategoryCategoriesResponse) *NullableCategoryCategoriesResponse {
	return &NullableCategoryCategoriesResponse{value: val, isSet: true}
}

func (v NullableCategoryCategoriesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryCategoriesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


