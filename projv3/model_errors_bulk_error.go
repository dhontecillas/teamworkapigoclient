/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ErrorsBulkError BulkError stores details related to an error on an api request that we may want to present to the user, but do not wish to cancel the request over
type ErrorsBulkError struct {
	Code *string `json:"code,omitempty"`
	Detail *string `json:"detail,omitempty"`
	Id *map[string]interface{} `json:"id,omitempty"`
	Meta *map[string]interface{} `json:"meta,omitempty"`
	Source *string `json:"source,omitempty"`
	StatusCode *int32 `json:"statusCode,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewErrorsBulkError instantiates a new ErrorsBulkError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorsBulkError() *ErrorsBulkError {
	this := ErrorsBulkError{}
	return &this
}

// NewErrorsBulkErrorWithDefaults instantiates a new ErrorsBulkError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorsBulkErrorWithDefaults() *ErrorsBulkError {
	this := ErrorsBulkError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorsBulkError) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsBulkError) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorsBulkError) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ErrorsBulkError) SetCode(v string) {
	o.Code = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ErrorsBulkError) GetDetail() string {
	if o == nil || o.Detail == nil {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsBulkError) GetDetailOk() (*string, bool) {
	if o == nil || o.Detail == nil {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ErrorsBulkError) HasDetail() bool {
	if o != nil && o.Detail != nil {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *ErrorsBulkError) SetDetail(v string) {
	o.Detail = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ErrorsBulkError) GetId() map[string]interface{} {
	if o == nil || o.Id == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsBulkError) GetIdOk() (*map[string]interface{}, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ErrorsBulkError) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given map[string]interface{} and assigns it to the Id field.
func (o *ErrorsBulkError) SetId(v map[string]interface{}) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ErrorsBulkError) GetMeta() map[string]interface{} {
	if o == nil || o.Meta == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsBulkError) GetMetaOk() (*map[string]interface{}, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ErrorsBulkError) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *ErrorsBulkError) SetMeta(v map[string]interface{}) {
	o.Meta = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ErrorsBulkError) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsBulkError) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ErrorsBulkError) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ErrorsBulkError) SetSource(v string) {
	o.Source = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ErrorsBulkError) GetStatusCode() int32 {
	if o == nil || o.StatusCode == nil {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsBulkError) GetStatusCodeOk() (*int32, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ErrorsBulkError) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *ErrorsBulkError) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ErrorsBulkError) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsBulkError) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ErrorsBulkError) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ErrorsBulkError) SetTitle(v string) {
	o.Title = &v
}

func (o ErrorsBulkError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Detail != nil {
		toSerialize["detail"] = o.Detail
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.StatusCode != nil {
		toSerialize["statusCode"] = o.StatusCode
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableErrorsBulkError struct {
	value *ErrorsBulkError
	isSet bool
}

func (v NullableErrorsBulkError) Get() *ErrorsBulkError {
	return v.value
}

func (v *NullableErrorsBulkError) Set(val *ErrorsBulkError) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorsBulkError) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorsBulkError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorsBulkError(val *ErrorsBulkError) *NullableErrorsBulkError {
	return &NullableErrorsBulkError{value: val, isSet: true}
}

func (v NullableErrorsBulkError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorsBulkError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


