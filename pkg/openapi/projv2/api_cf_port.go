/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv2

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// CFPortApiService CFPortApi service
type CFPortApiService service

type ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest struct {
	ctx                   _context.Context
	ApiService            *CFPortApiService
	updatedAfterDateTime  *string
	updatedAfterDate      *string
	type_                 *string
	sortOrder             *string
	sort                  *string
	searchTerm            *string
	projectType           *string
	inviteStatus          *string
	firstLetter           *string
	emailAddress          *string
	dataSet               *string
	projectId             *int32
	pageSize              *int32
	page                  *int32
	excludeProjectId      *int32
	showDeleted           *bool
	returnTeams           *bool
	returnProjectIds      *bool
	returnLetters         *bool
	ownerCompanyFirst     *bool
	onlyids               *bool
	includeTags           *bool
	includeObservers      *bool
	includeCompanyDetails *bool
	includeClockIn        *bool
	groupByCompany        *bool
	getProjectRoles       *bool
	getCounts             *bool
	fullprofile           *bool
	countOnly             *bool
	userIds               *[]int32
	companyId             *[]int32
}

func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) UpdatedAfterDateTime(updatedAfterDateTime string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.updatedAfterDateTime = &updatedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) Type_(type_ string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.type_ = &type_
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) Sort(sort string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) ProjectType(projectType string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.projectType = &projectType
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) InviteStatus(inviteStatus string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.inviteStatus = &inviteStatus
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) FirstLetter(firstLetter string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.firstLetter = &firstLetter
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) EmailAddress(emailAddress string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.emailAddress = &emailAddress
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) DataSet(dataSet string) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) ProjectId(projectId int32) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) PageSize(pageSize int32) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) Page(page int32) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) ExcludeProjectId(excludeProjectId int32) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.excludeProjectId = &excludeProjectId
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) ReturnTeams(returnTeams bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.returnTeams = &returnTeams
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) ReturnProjectIds(returnProjectIds bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.returnProjectIds = &returnProjectIds
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) ReturnLetters(returnLetters bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.returnLetters = &returnLetters
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) OwnerCompanyFirst(ownerCompanyFirst bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.ownerCompanyFirst = &ownerCompanyFirst
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) Onlyids(onlyids bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.onlyids = &onlyids
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) IncludeObservers(includeObservers bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.includeObservers = &includeObservers
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) IncludeCompanyDetails(includeCompanyDetails bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.includeCompanyDetails = &includeCompanyDetails
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) IncludeClockIn(includeClockIn bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.includeClockIn = &includeClockIn
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) GroupByCompany(groupByCompany bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.groupByCompany = &groupByCompany
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) GetProjectRoles(getProjectRoles bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.getProjectRoles = &getProjectRoles
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) GetCounts(getCounts bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.getCounts = &getCounts
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) Fullprofile(fullprofile bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.fullprofile = &fullprofile
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) CountOnly(countOnly bool) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) UserIds(userIds []int32) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) Execute() (PeopleResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2CompaniesCompanyIdPeopleExecute(r)
}

/*
 * GETProjectsApiV2CompaniesCompanyIdPeople Retrieves the details for all the people from the submitted company (excluding those you donâ€™t have permission to see).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest
 */
func (a *CFPortApiService) GETProjectsApiV2CompaniesCompanyIdPeople(ctx _context.Context) ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest {
	return ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return PeopleResponse
 */
func (a *CFPortApiService) GETProjectsApiV2CompaniesCompanyIdPeopleExecute(r ApiGETProjectsApiV2CompaniesCompanyIdPeopleRequest) (PeopleResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PeopleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2CompaniesCompanyIdPeople")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/companies/:companyId/people"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDateTime != nil {
		localVarQueryParams.Add("updatedAfterDateTime", parameterToString(*r.updatedAfterDateTime, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectType != nil {
		localVarQueryParams.Add("projectType", parameterToString(*r.projectType, ""))
	}
	if r.inviteStatus != nil {
		localVarQueryParams.Add("inviteStatus", parameterToString(*r.inviteStatus, ""))
	}
	if r.firstLetter != nil {
		localVarQueryParams.Add("firstLetter", parameterToString(*r.firstLetter, ""))
	}
	if r.emailAddress != nil {
		localVarQueryParams.Add("emailAddress", parameterToString(*r.emailAddress, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.excludeProjectId != nil {
		localVarQueryParams.Add("excludeProjectId", parameterToString(*r.excludeProjectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.returnTeams != nil {
		localVarQueryParams.Add("returnTeams", parameterToString(*r.returnTeams, ""))
	}
	if r.returnProjectIds != nil {
		localVarQueryParams.Add("returnProjectIds", parameterToString(*r.returnProjectIds, ""))
	}
	if r.returnLetters != nil {
		localVarQueryParams.Add("returnLetters", parameterToString(*r.returnLetters, ""))
	}
	if r.ownerCompanyFirst != nil {
		localVarQueryParams.Add("ownerCompanyFirst", parameterToString(*r.ownerCompanyFirst, ""))
	}
	if r.onlyids != nil {
		localVarQueryParams.Add("onlyids", parameterToString(*r.onlyids, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeObservers != nil {
		localVarQueryParams.Add("includeObservers", parameterToString(*r.includeObservers, ""))
	}
	if r.includeCompanyDetails != nil {
		localVarQueryParams.Add("includeCompanyDetails", parameterToString(*r.includeCompanyDetails, ""))
	}
	if r.includeClockIn != nil {
		localVarQueryParams.Add("includeClockIn", parameterToString(*r.includeClockIn, ""))
	}
	if r.groupByCompany != nil {
		localVarQueryParams.Add("groupByCompany", parameterToString(*r.groupByCompany, ""))
	}
	if r.getProjectRoles != nil {
		localVarQueryParams.Add("getProjectRoles", parameterToString(*r.getProjectRoles, ""))
	}
	if r.getCounts != nil {
		localVarQueryParams.Add("getCounts", parameterToString(*r.getCounts, ""))
	}
	if r.fullprofile != nil {
		localVarQueryParams.Add("fullprofile", parameterToString(*r.fullprofile, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	updatedAfterDateTime    *string
	updatedAfterDate        *string
	searchTerm              *string
	projectStatus           *string
	orderMode               *string
	orderBy                 *string
	firstLetter             *string
	createdAfterDateTime    *string
	createdAfterDate        *string
	status                  *string
	userId                  *int32
	pageSize                *int32
	page                    *int32
	searchCompany           *bool
	returnLetters           *bool
	onlyStarredProjects     *bool
	onlyArchivedProjects    *bool
	matchAllTags            *bool
	matchAllProjectTags     *bool
	includeUpdates          *bool
	includeTags             *bool
	includePeople           *bool
	includeArchivedProjects *bool
	hideDesc                *bool
	getTruePermissions      *bool
	getPermissions          *bool
	getDeleted              *bool
	getCategoryPath         *bool
	getActivePages          *bool
	formatMarkdown          *bool
	projectTagIds           *[]int32
	projectOwnerIds         *[]int32
	projectHealths          *[]int32
	projectHealth           *[]int32
	projectCompanyIds       *[]int32
	projectCategoryIds      *[]int32
	filterTagIds            *[]int32
	companyId               *[]int32
	categoryId              *[]int32
	catId                   *[]int32
}

func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) UpdatedAfterDateTime(updatedAfterDateTime string) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.updatedAfterDateTime = &updatedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) OrderMode(orderMode string) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) OrderBy(orderBy string) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) FirstLetter(firstLetter string) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.firstLetter = &firstLetter
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) CreatedAfterDateTime(createdAfterDateTime string) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.createdAfterDateTime = &createdAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) Status(status string) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) UserId(userId int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) PageSize(pageSize int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) Page(page int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) SearchCompany(searchCompany bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.searchCompany = &searchCompany
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) ReturnLetters(returnLetters bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.returnLetters = &returnLetters
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.includeUpdates = &includeUpdates
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) HideDesc(hideDesc bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.hideDesc = &hideDesc
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) GetDeleted(getDeleted bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.getDeleted = &getDeleted
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) GetCategoryPath(getCategoryPath bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.getCategoryPath = &getCategoryPath
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) FilterTagIds(filterTagIds []int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.filterTagIds = &filterTagIds
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) CategoryId(categoryId []int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.categoryId = &categoryId
	return r
}
func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) CatId(catId []int32) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	r.catId = &catId
	return r
}

func (r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2CompaniesCompnayIdProjectsExecute(r)
}

/*
 * GETProjectsApiV2CompaniesCompnayIdProjects Returns the company projects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest
 */
func (a *CFPortApiService) GETProjectsApiV2CompaniesCompnayIdProjects(ctx _context.Context) ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest {
	return ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2CompaniesCompnayIdProjectsExecute(r ApiGETProjectsApiV2CompaniesCompnayIdProjectsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2CompaniesCompnayIdProjects")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/companies/:compnayId/projects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDateTime != nil {
		localVarQueryParams.Add("updatedAfterDateTime", parameterToString(*r.updatedAfterDateTime, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.firstLetter != nil {
		localVarQueryParams.Add("firstLetter", parameterToString(*r.firstLetter, ""))
	}
	if r.createdAfterDateTime != nil {
		localVarQueryParams.Add("createdAfterDateTime", parameterToString(*r.createdAfterDateTime, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("	status", parameterToString(*r.status, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.searchCompany != nil {
		localVarQueryParams.Add("searchCompany", parameterToString(*r.searchCompany, ""))
	}
	if r.returnLetters != nil {
		localVarQueryParams.Add("returnLetters", parameterToString(*r.returnLetters, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.hideDesc != nil {
		localVarQueryParams.Add("hideDesc", parameterToString(*r.hideDesc, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getDeleted != nil {
		localVarQueryParams.Add("getDeleted", parameterToString(*r.getDeleted, ""))
	}
	if r.getCategoryPath != nil {
		localVarQueryParams.Add("getCategoryPath", parameterToString(*r.getCategoryPath, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.filterTagIds != nil {
		localVarQueryParams.Add("filterTagIds", parameterToString(*r.filterTagIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, "csv"))
	}
	if r.catId != nil {
		localVarQueryParams.Add("catId", parameterToString(*r.catId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2DefaultprojectsRequest struct {
	ctx        _context.Context
	ApiService *CFPortApiService
	companyId  *int32
}

func (r ApiGETProjectsApiV2DefaultprojectsRequest) CompanyId(companyId int32) ApiGETProjectsApiV2DefaultprojectsRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2DefaultprojectsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2DefaultprojectsExecute(r)
}

/*
 * GETProjectsApiV2Defaultprojects Returns the project defaults
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2DefaultprojectsRequest
 */
func (a *CFPortApiService) GETProjectsApiV2Defaultprojects(ctx _context.Context) ApiGETProjectsApiV2DefaultprojectsRequest {
	return ApiGETProjectsApiV2DefaultprojectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2DefaultprojectsExecute(r ApiGETProjectsApiV2DefaultprojectsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2Defaultprojects")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/defaultprojects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2FilesObjectIdProjectRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	userId                  *int32
	objectId                *int32
	showDeleted             *bool
	includeTags             *bool
	includePeople           *bool
	getTruePermissions      *bool
	getPermissions          *bool
	getNotificationSettings *bool
	getEmoji                *bool
	getEmailAddress         *bool
	getDateInfo             *bool
	getActivePages          *bool
	formatMarkdown          *bool
}

func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) UserId(userId int32) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) ObjectId(objectId int32) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.objectId = &objectId
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) GetEmailAddress(getEmailAddress bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.getEmailAddress = &getEmailAddress
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) GetDateInfo(getDateInfo bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.getDateInfo = &getDateInfo
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}

func (r ApiGETProjectsApiV2FilesObjectIdProjectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2FilesObjectIdProjectExecute(r)
}

/*
 * GETProjectsApiV2FilesObjectIdProject Get the project for the file
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2FilesObjectIdProjectRequest
 */
func (a *CFPortApiService) GETProjectsApiV2FilesObjectIdProject(ctx _context.Context) ApiGETProjectsApiV2FilesObjectIdProjectRequest {
	return ApiGETProjectsApiV2FilesObjectIdProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2FilesObjectIdProjectExecute(r ApiGETProjectsApiV2FilesObjectIdProjectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2FilesObjectIdProject")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/files/:objectId/project"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.objectId != nil {
		localVarQueryParams.Add("objectId", parameterToString(*r.objectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.getEmailAddress != nil {
		localVarQueryParams.Add("getEmailAddress", parameterToString(*r.getEmailAddress, ""))
	}
	if r.getDateInfo != nil {
		localVarQueryParams.Add("getDateInfo", parameterToString(*r.getDateInfo, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2FullsearchRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	sortOrder               *string
	searchTerm              *string
	searchFor               *string
	projectId               *int32
	pageSize                *int32
	page                    *int32
	dayLimit                *int32
	useSmartSearch          *bool
	skipES                  *bool
	searchWithTags          *bool
	searchForIsList         *bool
	searchArchivedMessages  *bool
	matchAllTags            *bool
	includeTags             *bool
	includeCompletedItems   *bool
	includeArchivedProjects *bool
	getUsers                *bool
	tags                    *[]string
	tagIds                  *[]int32
}

func (r ApiGETProjectsApiV2FullsearchRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2FullsearchRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV2FullsearchRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) SearchFor(searchFor string) ApiGETProjectsApiV2FullsearchRequest {
	r.searchFor = &searchFor
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) ProjectId(projectId int32) ApiGETProjectsApiV2FullsearchRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) PageSize(pageSize int32) ApiGETProjectsApiV2FullsearchRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) Page(page int32) ApiGETProjectsApiV2FullsearchRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) DayLimit(dayLimit int32) ApiGETProjectsApiV2FullsearchRequest {
	r.dayLimit = &dayLimit
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) UseSmartSearch(useSmartSearch bool) ApiGETProjectsApiV2FullsearchRequest {
	r.useSmartSearch = &useSmartSearch
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) SkipES(skipES bool) ApiGETProjectsApiV2FullsearchRequest {
	r.skipES = &skipES
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) SearchWithTags(searchWithTags bool) ApiGETProjectsApiV2FullsearchRequest {
	r.searchWithTags = &searchWithTags
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) SearchForIsList(searchForIsList bool) ApiGETProjectsApiV2FullsearchRequest {
	r.searchForIsList = &searchForIsList
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) SearchArchivedMessages(searchArchivedMessages bool) ApiGETProjectsApiV2FullsearchRequest {
	r.searchArchivedMessages = &searchArchivedMessages
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2FullsearchRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2FullsearchRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) IncludeCompletedItems(includeCompletedItems bool) ApiGETProjectsApiV2FullsearchRequest {
	r.includeCompletedItems = &includeCompletedItems
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2FullsearchRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) GetUsers(getUsers bool) ApiGETProjectsApiV2FullsearchRequest {
	r.getUsers = &getUsers
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) Tags(tags []string) ApiGETProjectsApiV2FullsearchRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV2FullsearchRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2FullsearchRequest {
	r.tagIds = &tagIds
	return r
}

func (r ApiGETProjectsApiV2FullsearchRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2FullsearchExecute(r)
}

/*
 * GETProjectsApiV2Fullsearch Perform a full search
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2FullsearchRequest
 */
func (a *CFPortApiService) GETProjectsApiV2Fullsearch(ctx _context.Context) ApiGETProjectsApiV2FullsearchRequest {
	return ApiGETProjectsApiV2FullsearchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2FullsearchExecute(r ApiGETProjectsApiV2FullsearchRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2Fullsearch")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/fullsearch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.searchFor != nil {
		localVarQueryParams.Add("searchFor", parameterToString(*r.searchFor, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.dayLimit != nil {
		localVarQueryParams.Add("dayLimit", parameterToString(*r.dayLimit, ""))
	}
	if r.useSmartSearch != nil {
		localVarQueryParams.Add("useSmartSearch", parameterToString(*r.useSmartSearch, ""))
	}
	if r.skipES != nil {
		localVarQueryParams.Add("skipES", parameterToString(*r.skipES, ""))
	}
	if r.searchWithTags != nil {
		localVarQueryParams.Add("searchWithTags", parameterToString(*r.searchWithTags, ""))
	}
	if r.searchForIsList != nil {
		localVarQueryParams.Add("searchForIsList", parameterToString(*r.searchForIsList, ""))
	}
	if r.searchArchivedMessages != nil {
		localVarQueryParams.Add("searchArchivedMessages", parameterToString(*r.searchArchivedMessages, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeCompletedItems != nil {
		localVarQueryParams.Add("includeCompletedItems", parameterToString(*r.includeCompletedItems, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.getUsers != nil {
		localVarQueryParams.Add("getUsers", parameterToString(*r.getUsers, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2LinksObjectIdProjectRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	userId                  *int32
	objectId                *int32
	showDeleted             *bool
	includeTags             *bool
	includePeople           *bool
	getTruePermissions      *bool
	getPermissions          *bool
	getNotificationSettings *bool
	getEmoji                *bool
	getEmailAddress         *bool
	getDateInfo             *bool
	getActivePages          *bool
	formatMarkdown          *bool
}

func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) UserId(userId int32) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) ObjectId(objectId int32) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.objectId = &objectId
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) GetEmailAddress(getEmailAddress bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.getEmailAddress = &getEmailAddress
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) GetDateInfo(getDateInfo bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.getDateInfo = &getDateInfo
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}

func (r ApiGETProjectsApiV2LinksObjectIdProjectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2LinksObjectIdProjectExecute(r)
}

/*
 * GETProjectsApiV2LinksObjectIdProject Get the project for the link
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2LinksObjectIdProjectRequest
 */
func (a *CFPortApiService) GETProjectsApiV2LinksObjectIdProject(ctx _context.Context) ApiGETProjectsApiV2LinksObjectIdProjectRequest {
	return ApiGETProjectsApiV2LinksObjectIdProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2LinksObjectIdProjectExecute(r ApiGETProjectsApiV2LinksObjectIdProjectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2LinksObjectIdProject")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/links/:objectId/project"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.objectId != nil {
		localVarQueryParams.Add("objectId", parameterToString(*r.objectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.getEmailAddress != nil {
		localVarQueryParams.Add("getEmailAddress", parameterToString(*r.getEmailAddress, ""))
	}
	if r.getDateInfo != nil {
		localVarQueryParams.Add("getDateInfo", parameterToString(*r.getDateInfo, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2MeRequest struct {
	ctx                _context.Context
	ApiService         *CFPortApiService
	sharedFilter       *string
	getDefaultFilters  *string
	userId             *int32
	showDeleted        *bool
	includeTags        *bool
	includeClockIn     *bool
	includeAuth        *bool
	getTeamsStats      *bool
	getTasksStats      *bool
	getProjectsStats   *bool
	getPreferences     *bool
	getPermissions     *bool
	getMilestonesStats *bool
	getInitialPage     *bool
	getAllStats        *bool
	getAccounts        *bool
	fullprofile        *bool
	cleanPreferences   *bool
}

func (r ApiGETProjectsApiV2MeRequest) SharedFilter(sharedFilter string) ApiGETProjectsApiV2MeRequest {
	r.sharedFilter = &sharedFilter
	return r
}
func (r ApiGETProjectsApiV2MeRequest) GetDefaultFilters(getDefaultFilters string) ApiGETProjectsApiV2MeRequest {
	r.getDefaultFilters = &getDefaultFilters
	return r
}
func (r ApiGETProjectsApiV2MeRequest) UserId(userId int32) ApiGETProjectsApiV2MeRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2MeRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2MeRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2MeRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2MeRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2MeRequest) IncludeClockIn(includeClockIn bool) ApiGETProjectsApiV2MeRequest {
	r.includeClockIn = &includeClockIn
	return r
}
func (r ApiGETProjectsApiV2MeRequest) IncludeAuth(includeAuth bool) ApiGETProjectsApiV2MeRequest {
	r.includeAuth = &includeAuth
	return r
}
func (r ApiGETProjectsApiV2MeRequest) GetTeamsStats(getTeamsStats bool) ApiGETProjectsApiV2MeRequest {
	r.getTeamsStats = &getTeamsStats
	return r
}
func (r ApiGETProjectsApiV2MeRequest) GetTasksStats(getTasksStats bool) ApiGETProjectsApiV2MeRequest {
	r.getTasksStats = &getTasksStats
	return r
}
func (r ApiGETProjectsApiV2MeRequest) GetProjectsStats(getProjectsStats bool) ApiGETProjectsApiV2MeRequest {
	r.getProjectsStats = &getProjectsStats
	return r
}
func (r ApiGETProjectsApiV2MeRequest) GetPreferences(getPreferences bool) ApiGETProjectsApiV2MeRequest {
	r.getPreferences = &getPreferences
	return r
}
func (r ApiGETProjectsApiV2MeRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2MeRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2MeRequest) GetMilestonesStats(getMilestonesStats bool) ApiGETProjectsApiV2MeRequest {
	r.getMilestonesStats = &getMilestonesStats
	return r
}
func (r ApiGETProjectsApiV2MeRequest) GetInitialPage(getInitialPage bool) ApiGETProjectsApiV2MeRequest {
	r.getInitialPage = &getInitialPage
	return r
}
func (r ApiGETProjectsApiV2MeRequest) GetAllStats(getAllStats bool) ApiGETProjectsApiV2MeRequest {
	r.getAllStats = &getAllStats
	return r
}
func (r ApiGETProjectsApiV2MeRequest) GetAccounts(getAccounts bool) ApiGETProjectsApiV2MeRequest {
	r.getAccounts = &getAccounts
	return r
}
func (r ApiGETProjectsApiV2MeRequest) Fullprofile(fullprofile bool) ApiGETProjectsApiV2MeRequest {
	r.fullprofile = &fullprofile
	return r
}
func (r ApiGETProjectsApiV2MeRequest) CleanPreferences(cleanPreferences bool) ApiGETProjectsApiV2MeRequest {
	r.cleanPreferences = &cleanPreferences
	return r
}

func (r ApiGETProjectsApiV2MeRequest) Execute() (PeoplePersonResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2MeExecute(r)
}

/*
 * GETProjectsApiV2Me Returns the details for the account youâ€™re currently logged in with.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2MeRequest
 */
func (a *CFPortApiService) GETProjectsApiV2Me(ctx _context.Context) ApiGETProjectsApiV2MeRequest {
	return ApiGETProjectsApiV2MeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return PeoplePersonResponse
 */
func (a *CFPortApiService) GETProjectsApiV2MeExecute(r ApiGETProjectsApiV2MeRequest) (PeoplePersonResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PeoplePersonResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2Me")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/me"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sharedFilter != nil {
		localVarQueryParams.Add("SharedFilter", parameterToString(*r.sharedFilter, ""))
	}
	if r.getDefaultFilters != nil {
		localVarQueryParams.Add("GetDefaultFilters", parameterToString(*r.getDefaultFilters, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("UserId", parameterToString(*r.userId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("ShowDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("IncludeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeClockIn != nil {
		localVarQueryParams.Add("IncludeClockIn", parameterToString(*r.includeClockIn, ""))
	}
	if r.includeAuth != nil {
		localVarQueryParams.Add("IncludeAuth", parameterToString(*r.includeAuth, ""))
	}
	if r.getTeamsStats != nil {
		localVarQueryParams.Add("GetTeamsStats", parameterToString(*r.getTeamsStats, ""))
	}
	if r.getTasksStats != nil {
		localVarQueryParams.Add("GetTasksStats", parameterToString(*r.getTasksStats, ""))
	}
	if r.getProjectsStats != nil {
		localVarQueryParams.Add("GetProjectsStats", parameterToString(*r.getProjectsStats, ""))
	}
	if r.getPreferences != nil {
		localVarQueryParams.Add("GetPreferences", parameterToString(*r.getPreferences, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("GetPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getMilestonesStats != nil {
		localVarQueryParams.Add("GetMilestonesStats", parameterToString(*r.getMilestonesStats, ""))
	}
	if r.getInitialPage != nil {
		localVarQueryParams.Add("GetInitialPage", parameterToString(*r.getInitialPage, ""))
	}
	if r.getAllStats != nil {
		localVarQueryParams.Add("GetAllStats", parameterToString(*r.getAllStats, ""))
	}
	if r.getAccounts != nil {
		localVarQueryParams.Add("GetAccounts", parameterToString(*r.getAccounts, ""))
	}
	if r.fullprofile != nil {
		localVarQueryParams.Add("Fullprofile", parameterToString(*r.fullprofile, ""))
	}
	if r.cleanPreferences != nil {
		localVarQueryParams.Add("CleanPreferences", parameterToString(*r.cleanPreferences, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2MessagesObjectIdProjectRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	userId                  *int32
	objectId                *int32
	showDeleted             *bool
	includeTags             *bool
	includePeople           *bool
	getTruePermissions      *bool
	getPermissions          *bool
	getNotificationSettings *bool
	getEmoji                *bool
	getEmailAddress         *bool
	getDateInfo             *bool
	getActivePages          *bool
	formatMarkdown          *bool
}

func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) UserId(userId int32) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) ObjectId(objectId int32) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.objectId = &objectId
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) GetEmailAddress(getEmailAddress bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.getEmailAddress = &getEmailAddress
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) GetDateInfo(getDateInfo bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.getDateInfo = &getDateInfo
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}

func (r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2MessagesObjectIdProjectExecute(r)
}

/*
 * GETProjectsApiV2MessagesObjectIdProject Get the project for the message
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2MessagesObjectIdProjectRequest
 */
func (a *CFPortApiService) GETProjectsApiV2MessagesObjectIdProject(ctx _context.Context) ApiGETProjectsApiV2MessagesObjectIdProjectRequest {
	return ApiGETProjectsApiV2MessagesObjectIdProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2MessagesObjectIdProjectExecute(r ApiGETProjectsApiV2MessagesObjectIdProjectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2MessagesObjectIdProject")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/messages/:objectId/project"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.objectId != nil {
		localVarQueryParams.Add("objectId", parameterToString(*r.objectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.getEmailAddress != nil {
		localVarQueryParams.Add("getEmailAddress", parameterToString(*r.getEmailAddress, ""))
	}
	if r.getDateInfo != nil {
		localVarQueryParams.Add("getDateInfo", parameterToString(*r.getDateInfo, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2MilestonesObjectIdProjectRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	userId                  *int32
	objectId                *int32
	showDeleted             *bool
	includeTags             *bool
	includePeople           *bool
	getTruePermissions      *bool
	getPermissions          *bool
	getNotificationSettings *bool
	getEmoji                *bool
	getEmailAddress         *bool
	getDateInfo             *bool
	getActivePages          *bool
	formatMarkdown          *bool
}

func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) UserId(userId int32) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) ObjectId(objectId int32) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.objectId = &objectId
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) GetEmailAddress(getEmailAddress bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.getEmailAddress = &getEmailAddress
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) GetDateInfo(getDateInfo bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.getDateInfo = &getDateInfo
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}

func (r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2MilestonesObjectIdProjectExecute(r)
}

/*
 * GETProjectsApiV2MilestonesObjectIdProject Get the project for the milestone
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2MilestonesObjectIdProjectRequest
 */
func (a *CFPortApiService) GETProjectsApiV2MilestonesObjectIdProject(ctx _context.Context) ApiGETProjectsApiV2MilestonesObjectIdProjectRequest {
	return ApiGETProjectsApiV2MilestonesObjectIdProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2MilestonesObjectIdProjectExecute(r ApiGETProjectsApiV2MilestonesObjectIdProjectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2MilestonesObjectIdProject")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/milestones/:objectId/project"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.objectId != nil {
		localVarQueryParams.Add("objectId", parameterToString(*r.objectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.getEmailAddress != nil {
		localVarQueryParams.Add("getEmailAddress", parameterToString(*r.getEmailAddress, ""))
	}
	if r.getDateInfo != nil {
		localVarQueryParams.Add("getDateInfo", parameterToString(*r.getDateInfo, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2NotebooksObjectIdProjectRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	userId                  *int32
	objectId                *int32
	showDeleted             *bool
	includeTags             *bool
	includePeople           *bool
	getTruePermissions      *bool
	getPermissions          *bool
	getNotificationSettings *bool
	getEmoji                *bool
	getEmailAddress         *bool
	getDateInfo             *bool
	getActivePages          *bool
	formatMarkdown          *bool
}

func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) UserId(userId int32) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) ObjectId(objectId int32) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.objectId = &objectId
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) GetEmailAddress(getEmailAddress bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.getEmailAddress = &getEmailAddress
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) GetDateInfo(getDateInfo bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.getDateInfo = &getDateInfo
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}

func (r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2NotebooksObjectIdProjectExecute(r)
}

/*
 * GETProjectsApiV2NotebooksObjectIdProject Get the project for the notebook
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2NotebooksObjectIdProjectRequest
 */
func (a *CFPortApiService) GETProjectsApiV2NotebooksObjectIdProject(ctx _context.Context) ApiGETProjectsApiV2NotebooksObjectIdProjectRequest {
	return ApiGETProjectsApiV2NotebooksObjectIdProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2NotebooksObjectIdProjectExecute(r ApiGETProjectsApiV2NotebooksObjectIdProjectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2NotebooksObjectIdProject")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/notebooks/:objectId/project"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.objectId != nil {
		localVarQueryParams.Add("objectId", parameterToString(*r.objectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.getEmailAddress != nil {
		localVarQueryParams.Add("getEmailAddress", parameterToString(*r.getEmailAddress, ""))
	}
	if r.getDateInfo != nil {
		localVarQueryParams.Add("getDateInfo", parameterToString(*r.getDateInfo, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2PeopleRequest struct {
	ctx                   _context.Context
	ApiService            *CFPortApiService
	updatedAfterDateTime  *string
	updatedAfterDate      *string
	type_                 *string
	sortOrder             *string
	sort                  *string
	searchTerm            *string
	projectType           *string
	inviteStatus          *string
	firstLetter           *string
	emailAddress          *string
	dataSet               *string
	projectId             *int32
	pageSize              *int32
	page                  *int32
	excludeProjectId      *int32
	showDeleted           *bool
	returnTeams           *bool
	returnProjectIds      *bool
	returnLetters         *bool
	ownerCompanyFirst     *bool
	onlyids               *bool
	includeTags           *bool
	includeObservers      *bool
	includeCompanyDetails *bool
	includeClockIn        *bool
	groupByCompany        *bool
	getProjectRoles       *bool
	getCounts             *bool
	fullprofile           *bool
	countOnly             *bool
	userIds               *[]int32
	companyId             *[]int32
}

func (r ApiGETProjectsApiV2PeopleRequest) UpdatedAfterDateTime(updatedAfterDateTime string) ApiGETProjectsApiV2PeopleRequest {
	r.updatedAfterDateTime = &updatedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2PeopleRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) Type_(type_ string) ApiGETProjectsApiV2PeopleRequest {
	r.type_ = &type_
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2PeopleRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) Sort(sort string) ApiGETProjectsApiV2PeopleRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV2PeopleRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) ProjectType(projectType string) ApiGETProjectsApiV2PeopleRequest {
	r.projectType = &projectType
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) InviteStatus(inviteStatus string) ApiGETProjectsApiV2PeopleRequest {
	r.inviteStatus = &inviteStatus
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) FirstLetter(firstLetter string) ApiGETProjectsApiV2PeopleRequest {
	r.firstLetter = &firstLetter
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) EmailAddress(emailAddress string) ApiGETProjectsApiV2PeopleRequest {
	r.emailAddress = &emailAddress
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) DataSet(dataSet string) ApiGETProjectsApiV2PeopleRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) ProjectId(projectId int32) ApiGETProjectsApiV2PeopleRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) PageSize(pageSize int32) ApiGETProjectsApiV2PeopleRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) Page(page int32) ApiGETProjectsApiV2PeopleRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) ExcludeProjectId(excludeProjectId int32) ApiGETProjectsApiV2PeopleRequest {
	r.excludeProjectId = &excludeProjectId
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2PeopleRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) ReturnTeams(returnTeams bool) ApiGETProjectsApiV2PeopleRequest {
	r.returnTeams = &returnTeams
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) ReturnProjectIds(returnProjectIds bool) ApiGETProjectsApiV2PeopleRequest {
	r.returnProjectIds = &returnProjectIds
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) ReturnLetters(returnLetters bool) ApiGETProjectsApiV2PeopleRequest {
	r.returnLetters = &returnLetters
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) OwnerCompanyFirst(ownerCompanyFirst bool) ApiGETProjectsApiV2PeopleRequest {
	r.ownerCompanyFirst = &ownerCompanyFirst
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) Onlyids(onlyids bool) ApiGETProjectsApiV2PeopleRequest {
	r.onlyids = &onlyids
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2PeopleRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) IncludeObservers(includeObservers bool) ApiGETProjectsApiV2PeopleRequest {
	r.includeObservers = &includeObservers
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) IncludeCompanyDetails(includeCompanyDetails bool) ApiGETProjectsApiV2PeopleRequest {
	r.includeCompanyDetails = &includeCompanyDetails
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) IncludeClockIn(includeClockIn bool) ApiGETProjectsApiV2PeopleRequest {
	r.includeClockIn = &includeClockIn
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) GroupByCompany(groupByCompany bool) ApiGETProjectsApiV2PeopleRequest {
	r.groupByCompany = &groupByCompany
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) GetProjectRoles(getProjectRoles bool) ApiGETProjectsApiV2PeopleRequest {
	r.getProjectRoles = &getProjectRoles
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) GetCounts(getCounts bool) ApiGETProjectsApiV2PeopleRequest {
	r.getCounts = &getCounts
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) Fullprofile(fullprofile bool) ApiGETProjectsApiV2PeopleRequest {
	r.fullprofile = &fullprofile
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) CountOnly(countOnly bool) ApiGETProjectsApiV2PeopleRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) UserIds(userIds []int32) ApiGETProjectsApiV2PeopleRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV2PeopleRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2PeopleRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2PeopleRequest) Execute() (PeopleResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2PeopleExecute(r)
}

/*
 * GETProjectsApiV2People All people visible to the user will be returned, including the user themselves. By default 100 records are returned at a time.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2PeopleRequest
 */
func (a *CFPortApiService) GETProjectsApiV2People(ctx _context.Context) ApiGETProjectsApiV2PeopleRequest {
	return ApiGETProjectsApiV2PeopleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return PeopleResponse
 */
func (a *CFPortApiService) GETProjectsApiV2PeopleExecute(r ApiGETProjectsApiV2PeopleRequest) (PeopleResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PeopleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2People")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/people"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDateTime != nil {
		localVarQueryParams.Add("updatedAfterDateTime", parameterToString(*r.updatedAfterDateTime, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectType != nil {
		localVarQueryParams.Add("projectType", parameterToString(*r.projectType, ""))
	}
	if r.inviteStatus != nil {
		localVarQueryParams.Add("inviteStatus", parameterToString(*r.inviteStatus, ""))
	}
	if r.firstLetter != nil {
		localVarQueryParams.Add("firstLetter", parameterToString(*r.firstLetter, ""))
	}
	if r.emailAddress != nil {
		localVarQueryParams.Add("emailAddress", parameterToString(*r.emailAddress, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.excludeProjectId != nil {
		localVarQueryParams.Add("excludeProjectId", parameterToString(*r.excludeProjectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.returnTeams != nil {
		localVarQueryParams.Add("returnTeams", parameterToString(*r.returnTeams, ""))
	}
	if r.returnProjectIds != nil {
		localVarQueryParams.Add("returnProjectIds", parameterToString(*r.returnProjectIds, ""))
	}
	if r.returnLetters != nil {
		localVarQueryParams.Add("returnLetters", parameterToString(*r.returnLetters, ""))
	}
	if r.ownerCompanyFirst != nil {
		localVarQueryParams.Add("ownerCompanyFirst", parameterToString(*r.ownerCompanyFirst, ""))
	}
	if r.onlyids != nil {
		localVarQueryParams.Add("onlyids", parameterToString(*r.onlyids, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeObservers != nil {
		localVarQueryParams.Add("includeObservers", parameterToString(*r.includeObservers, ""))
	}
	if r.includeCompanyDetails != nil {
		localVarQueryParams.Add("includeCompanyDetails", parameterToString(*r.includeCompanyDetails, ""))
	}
	if r.includeClockIn != nil {
		localVarQueryParams.Add("includeClockIn", parameterToString(*r.includeClockIn, ""))
	}
	if r.groupByCompany != nil {
		localVarQueryParams.Add("groupByCompany", parameterToString(*r.groupByCompany, ""))
	}
	if r.getProjectRoles != nil {
		localVarQueryParams.Add("getProjectRoles", parameterToString(*r.getProjectRoles, ""))
	}
	if r.getCounts != nil {
		localVarQueryParams.Add("getCounts", parameterToString(*r.getCounts, ""))
	}
	if r.fullprofile != nil {
		localVarQueryParams.Add("fullprofile", parameterToString(*r.fullprofile, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2PeopleUserIdRequest struct {
	ctx                _context.Context
	ApiService         *CFPortApiService
	sharedFilter       *string
	getDefaultFilters  *string
	userId             *int32
	showDeleted        *bool
	includeTags        *bool
	includeClockIn     *bool
	includeAuth        *bool
	getTeamsStats      *bool
	getTasksStats      *bool
	getProjectsStats   *bool
	getPreferences     *bool
	getPermissions     *bool
	getMilestonesStats *bool
	getInitialPage     *bool
	getAllStats        *bool
	getAccounts        *bool
	fullprofile        *bool
	cleanPreferences   *bool
}

func (r ApiGETProjectsApiV2PeopleUserIdRequest) SharedFilter(sharedFilter string) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.sharedFilter = &sharedFilter
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) GetDefaultFilters(getDefaultFilters string) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.getDefaultFilters = &getDefaultFilters
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) UserId(userId int32) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) IncludeClockIn(includeClockIn bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.includeClockIn = &includeClockIn
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) IncludeAuth(includeAuth bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.includeAuth = &includeAuth
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) GetTeamsStats(getTeamsStats bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.getTeamsStats = &getTeamsStats
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) GetTasksStats(getTasksStats bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.getTasksStats = &getTasksStats
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) GetProjectsStats(getProjectsStats bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.getProjectsStats = &getProjectsStats
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) GetPreferences(getPreferences bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.getPreferences = &getPreferences
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) GetMilestonesStats(getMilestonesStats bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.getMilestonesStats = &getMilestonesStats
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) GetInitialPage(getInitialPage bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.getInitialPage = &getInitialPage
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) GetAllStats(getAllStats bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.getAllStats = &getAllStats
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) GetAccounts(getAccounts bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.getAccounts = &getAccounts
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) Fullprofile(fullprofile bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.fullprofile = &fullprofile
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdRequest) CleanPreferences(cleanPreferences bool) ApiGETProjectsApiV2PeopleUserIdRequest {
	r.cleanPreferences = &cleanPreferences
	return r
}

func (r ApiGETProjectsApiV2PeopleUserIdRequest) Execute() (PeoplePersonResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2PeopleUserIdExecute(r)
}

/*
 * GETProjectsApiV2PeopleUserId Retrieves the user details for the ID submitted.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2PeopleUserIdRequest
 */
func (a *CFPortApiService) GETProjectsApiV2PeopleUserId(ctx _context.Context) ApiGETProjectsApiV2PeopleUserIdRequest {
	return ApiGETProjectsApiV2PeopleUserIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return PeoplePersonResponse
 */
func (a *CFPortApiService) GETProjectsApiV2PeopleUserIdExecute(r ApiGETProjectsApiV2PeopleUserIdRequest) (PeoplePersonResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PeoplePersonResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2PeopleUserId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/people/:userId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sharedFilter != nil {
		localVarQueryParams.Add("SharedFilter", parameterToString(*r.sharedFilter, ""))
	}
	if r.getDefaultFilters != nil {
		localVarQueryParams.Add("GetDefaultFilters", parameterToString(*r.getDefaultFilters, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("UserId", parameterToString(*r.userId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("ShowDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("IncludeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeClockIn != nil {
		localVarQueryParams.Add("IncludeClockIn", parameterToString(*r.includeClockIn, ""))
	}
	if r.includeAuth != nil {
		localVarQueryParams.Add("IncludeAuth", parameterToString(*r.includeAuth, ""))
	}
	if r.getTeamsStats != nil {
		localVarQueryParams.Add("GetTeamsStats", parameterToString(*r.getTeamsStats, ""))
	}
	if r.getTasksStats != nil {
		localVarQueryParams.Add("GetTasksStats", parameterToString(*r.getTasksStats, ""))
	}
	if r.getProjectsStats != nil {
		localVarQueryParams.Add("GetProjectsStats", parameterToString(*r.getProjectsStats, ""))
	}
	if r.getPreferences != nil {
		localVarQueryParams.Add("GetPreferences", parameterToString(*r.getPreferences, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("GetPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getMilestonesStats != nil {
		localVarQueryParams.Add("GetMilestonesStats", parameterToString(*r.getMilestonesStats, ""))
	}
	if r.getInitialPage != nil {
		localVarQueryParams.Add("GetInitialPage", parameterToString(*r.getInitialPage, ""))
	}
	if r.getAllStats != nil {
		localVarQueryParams.Add("GetAllStats", parameterToString(*r.getAllStats, ""))
	}
	if r.getAccounts != nil {
		localVarQueryParams.Add("GetAccounts", parameterToString(*r.getAccounts, ""))
	}
	if r.fullprofile != nil {
		localVarQueryParams.Add("Fullprofile", parameterToString(*r.fullprofile, ""))
	}
	if r.cleanPreferences != nil {
		localVarQueryParams.Add("CleanPreferences", parameterToString(*r.cleanPreferences, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2PeopleUserIdProjectsRequest struct {
	ctx                                _context.Context
	ApiService                         *CFPortApiService
	workedOnAfterDateTime              *string
	updatedAfterDateTime               *string
	updatedAfterDate                   *string
	status                             *string
	searchTerm                         *string
	projectType                        *string
	projectStatus                      *string
	orderMode                          *string
	orderBy                            *string
	get                                *string
	firstLetter                        *string
	dataSet                            *string
	createdAfterDateTime               *string
	createdAfterDate                   *string
	completedBeforeDateTime            *string
	completedAfterDateTime             *string
	userId                             *int32
	pageSize                           *int32
	page                               *int32
	searchCompany                      *bool
	sanitizeName                       *bool
	returnLetters                      *bool
	onlyStarredProjects                *bool
	onlyProjectsWithExplicitMembership *bool
	onlyArchivedProjects               *bool
	matchAllTags                       *bool
	matchAllProjectTags                *bool
	includeUpdates                     *bool
	includeTopPeople                   *bool
	includeTags                        *bool
	includeProjectOwner                *bool
	includePeople                      *bool
	includeCustomFields                *bool
	includeCrmDealIds                  *bool
	includeArchivedProjects            *bool
	hideObservedProjects               *bool
	hideDesc                           *bool
	getTruePermissions                 *bool
	getPermissions                     *bool
	getNotificationSettings            *bool
	getDeleted                         *bool
	getCounts                          *bool
	getCategoryPath                    *bool
	getAll                             *bool
	getActivePages                     *bool
	formatMarkdown                     *bool
	skipIds                            *[]int32
	skipCrmDealIds                     *[]int32
	projectTagIds                      *[]int32
	projectOwnerIds                    *[]int32
	projectHealths                     *[]int32
	projectHealth                      *[]int32
	projectCompanyIds                  *[]int32
	projectCategoryIds                 *[]int32
	portfolioColumnIds                 *[]int32
	portfolioBoardIds                  *[]int32
	filterTagIds                       *[]int32
	featuresEnabledOnProject           *[]string
	crmDealIds                         *[]int32
	companyId                          *[]int32
	categoryId                         *[]int32
	catId                              *[]int32
}

func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) WorkedOnAfterDateTime(workedOnAfterDateTime string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.workedOnAfterDateTime = &workedOnAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) UpdatedAfterDateTime(updatedAfterDateTime string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.updatedAfterDateTime = &updatedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) Status(status string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) ProjectType(projectType string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.projectType = &projectType
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) OrderMode(orderMode string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) OrderBy(orderBy string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) Get(get string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.get = &get
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) FirstLetter(firstLetter string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.firstLetter = &firstLetter
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) DataSet(dataSet string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) CreatedAfterDateTime(createdAfterDateTime string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.createdAfterDateTime = &createdAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) CompletedBeforeDateTime(completedBeforeDateTime string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.completedBeforeDateTime = &completedBeforeDateTime
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) CompletedAfterDateTime(completedAfterDateTime string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.completedAfterDateTime = &completedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) UserId(userId int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) PageSize(pageSize int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) Page(page int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) SearchCompany(searchCompany bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.searchCompany = &searchCompany
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) SanitizeName(sanitizeName bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.sanitizeName = &sanitizeName
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) ReturnLetters(returnLetters bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.returnLetters = &returnLetters
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) OnlyProjectsWithExplicitMembership(onlyProjectsWithExplicitMembership bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.onlyProjectsWithExplicitMembership = &onlyProjectsWithExplicitMembership
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.includeUpdates = &includeUpdates
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) IncludeTopPeople(includeTopPeople bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.includeTopPeople = &includeTopPeople
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) IncludeProjectOwner(includeProjectOwner bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.includeProjectOwner = &includeProjectOwner
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) HideObservedProjects(hideObservedProjects bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.hideObservedProjects = &hideObservedProjects
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) HideDesc(hideDesc bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.hideDesc = &hideDesc
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) GetDeleted(getDeleted bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.getDeleted = &getDeleted
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) GetCounts(getCounts bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.getCounts = &getCounts
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) GetCategoryPath(getCategoryPath bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.getCategoryPath = &getCategoryPath
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) GetAll(getAll bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.getAll = &getAll
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) SkipIds(skipIds []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.skipIds = &skipIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) SkipCrmDealIds(skipCrmDealIds []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.skipCrmDealIds = &skipCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) PortfolioColumnIds(portfolioColumnIds []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.portfolioColumnIds = &portfolioColumnIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) PortfolioBoardIds(portfolioBoardIds []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.portfolioBoardIds = &portfolioBoardIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) FilterTagIds(filterTagIds []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.filterTagIds = &filterTagIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) FeaturesEnabledOnProject(featuresEnabledOnProject []string) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.featuresEnabledOnProject = &featuresEnabledOnProject
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) CrmDealIds(crmDealIds []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.crmDealIds = &crmDealIds
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) CategoryId(categoryId []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.categoryId = &categoryId
	return r
}
func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) CatId(catId []int32) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	r.catId = &catId
	return r
}

func (r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2PeopleUserIdProjectsExecute(r)
}

/*
 * GETProjectsApiV2PeopleUserIdProjects APICall_GET_projects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2PeopleUserIdProjectsRequest
 */
func (a *CFPortApiService) GETProjectsApiV2PeopleUserIdProjects(ctx _context.Context) ApiGETProjectsApiV2PeopleUserIdProjectsRequest {
	return ApiGETProjectsApiV2PeopleUserIdProjectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2PeopleUserIdProjectsExecute(r ApiGETProjectsApiV2PeopleUserIdProjectsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2PeopleUserIdProjects")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/people/:userId/projects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.workedOnAfterDateTime != nil {
		localVarQueryParams.Add("workedOnAfterDateTime", parameterToString(*r.workedOnAfterDateTime, ""))
	}
	if r.updatedAfterDateTime != nil {
		localVarQueryParams.Add("updatedAfterDateTime", parameterToString(*r.updatedAfterDateTime, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectType != nil {
		localVarQueryParams.Add("projectType", parameterToString(*r.projectType, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.get != nil {
		localVarQueryParams.Add("get", parameterToString(*r.get, ""))
	}
	if r.firstLetter != nil {
		localVarQueryParams.Add("firstLetter", parameterToString(*r.firstLetter, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdAfterDateTime != nil {
		localVarQueryParams.Add("createdAfterDateTime", parameterToString(*r.createdAfterDateTime, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDateTime != nil {
		localVarQueryParams.Add("completedBeforeDateTime", parameterToString(*r.completedBeforeDateTime, ""))
	}
	if r.completedAfterDateTime != nil {
		localVarQueryParams.Add("completedAfterDateTime", parameterToString(*r.completedAfterDateTime, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.searchCompany != nil {
		localVarQueryParams.Add("searchCompany", parameterToString(*r.searchCompany, ""))
	}
	if r.sanitizeName != nil {
		localVarQueryParams.Add("sanitizeName", parameterToString(*r.sanitizeName, ""))
	}
	if r.returnLetters != nil {
		localVarQueryParams.Add("returnLetters", parameterToString(*r.returnLetters, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyProjectsWithExplicitMembership != nil {
		localVarQueryParams.Add("onlyProjectsWithExplicitMembership", parameterToString(*r.onlyProjectsWithExplicitMembership, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	if r.includeTopPeople != nil {
		localVarQueryParams.Add("includeTopPeople", parameterToString(*r.includeTopPeople, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProjectOwner != nil {
		localVarQueryParams.Add("includeProjectOwner", parameterToString(*r.includeProjectOwner, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.hideObservedProjects != nil {
		localVarQueryParams.Add("hideObservedProjects", parameterToString(*r.hideObservedProjects, ""))
	}
	if r.hideDesc != nil {
		localVarQueryParams.Add("hideDesc", parameterToString(*r.hideDesc, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getDeleted != nil {
		localVarQueryParams.Add("getDeleted", parameterToString(*r.getDeleted, ""))
	}
	if r.getCounts != nil {
		localVarQueryParams.Add("getCounts", parameterToString(*r.getCounts, ""))
	}
	if r.getCategoryPath != nil {
		localVarQueryParams.Add("getCategoryPath", parameterToString(*r.getCategoryPath, ""))
	}
	if r.getAll != nil {
		localVarQueryParams.Add("getAll", parameterToString(*r.getAll, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	if r.skipIds != nil {
		localVarQueryParams.Add("skipIds", parameterToString(*r.skipIds, "csv"))
	}
	if r.skipCrmDealIds != nil {
		localVarQueryParams.Add("skipCrmDealIds", parameterToString(*r.skipCrmDealIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.portfolioColumnIds != nil {
		localVarQueryParams.Add("portfolioColumnIds", parameterToString(*r.portfolioColumnIds, "csv"))
	}
	if r.portfolioBoardIds != nil {
		localVarQueryParams.Add("portfolioBoardIds", parameterToString(*r.portfolioBoardIds, "csv"))
	}
	if r.filterTagIds != nil {
		localVarQueryParams.Add("filterTagIds", parameterToString(*r.filterTagIds, "csv"))
	}
	if r.featuresEnabledOnProject != nil {
		localVarQueryParams.Add("featuresEnabledOnProject", parameterToString(*r.featuresEnabledOnProject, "csv"))
	}
	if r.crmDealIds != nil {
		localVarQueryParams.Add("crmDealIds", parameterToString(*r.crmDealIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, "csv"))
	}
	if r.catId != nil {
		localVarQueryParams.Add("catId", parameterToString(*r.catId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest struct {
	ctx                          _context.Context
	ApiService                   *CFPortApiService
	updatedAfterDate             *string
	today                        *string
	startDate                    *string
	sortOrder                    *string
	sort                         *string
	reportFormat                 *string
	projectStatus                *string
	priority                     *string
	include                      *string
	filter                       *string
	endDate                      *string
	deletedAfterDate             *string
	dateCode                     *string
	dataSet                      *string
	createdFilter                *string
	createdDateCode              *string
	createdBeforeDate            *string
	createdAfterDate             *string
	completedBeforeDate          *string
	completedAfterDate           *string
	callback                     *string
	taskId                       *int32
	parentTaskId                 *int32
	pageSize                     *int32
	page                         *int32
	offsetCount                  *int32
	includeTaskId                *int32
	useStartDatesForTodaysTasks  *bool
	useAllProjects               *bool
	starredProjectsOnly          *bool
	showDeleted                  *bool
	showCompletedLists           *bool
	onlyUntaggedTasks            *bool
	onlyTasksWithUnreadComments  *bool
	onlyTasksWithTickets         *bool
	onlyTasksWithEstimatedTime   *bool
	onlyStarredProjects          *bool
	nestSubTasks                 *bool
	matchAllTags                 *bool
	matchAllProjectTags          *bool
	matchAllProjectTagIds        *bool
	matchAllExcludedTags         *bool
	isReportDownload             *bool
	includeUntaggedTasks         *bool
	includeToday                 *bool
	includeTeamUserIds           *bool
	includeTasksWithoutDueDates  *bool
	includeTasksWithCards        *bool
	includeTasksFromDeletedLists *bool
	includeReminders             *bool
	includeLoggedTime            *bool
	includeCustomFields          *bool
	includeCrmDealIds            *bool
	includeCompletedTasks        *bool
	includeCompletedSubtasks     *bool
	includeCompanyUserIds        *bool
	includeBlockedTasks          *bool
	includeAssigneeTeams         *bool
	includeAssigneeCompanies     *bool
	includeArchivedProjects      *bool
	ignoreStartDates             *bool
	getSubTasks                  *bool
	getFiles                     *bool
	allowTemplateTasks           *bool
	tasklistId                   *[]int32
	taskIdList                   *[]int32
	tags                         *[]string
	tagIds                       *[]int32
	skipCrmDealIds               *[]int32
	responsiblePartyIds          *[]int32
	projectTagIds                *[]int32
	projectOwnerIds              *[]int32
	projectIds                   *[]int32
	projectId                    *[]int32
	projectHealths               *[]int32
	projectHealth                *[]int32
	projectCompanyIds            *[]int32
	projectCategoryIds           *[]int32
	projectCategoryId            *[]int32
	followerIds                  *[]int32
	filterText                   *[]string
	filterBoardColumnIds         *[]int32
	excludeTagIds                *[]int32
	crmDealIds                   *[]int32
	creatorIds                   *[]int32
	companyId                    *[]int32
	assigneeTeamIds              *[]int32
	assigneeCompanyIds           *[]int32
}

func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) Today(today string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) StartDate(startDate string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) Sort(sort string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) Priority(priority string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) Include(include string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) Filter(filter string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) EndDate(endDate string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) DeletedAfterDate(deletedAfterDate string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.deletedAfterDate = &deletedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) DateCode(dateCode string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.dateCode = &dateCode
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) DataSet(dataSet string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) CreatedFilter(createdFilter string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.createdFilter = &createdFilter
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) CreatedDateCode(createdDateCode string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.createdDateCode = &createdDateCode
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) Callback(callback string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) TaskId(taskId int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) Page(page int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) OffsetCount(offsetCount int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.offsetCount = &offsetCount
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) OnlyTasksWithUnreadComments(onlyTasksWithUnreadComments bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.onlyTasksWithUnreadComments = &onlyTasksWithUnreadComments
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) OnlyTasksWithEstimatedTime(onlyTasksWithEstimatedTime bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.onlyTasksWithEstimatedTime = &onlyTasksWithEstimatedTime
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeTasksWithCards(includeTasksWithCards bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeTasksWithCards = &includeTasksWithCards
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeBlockedTasks(includeBlockedTasks bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeBlockedTasks = &includeBlockedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) GetFiles(getFiles bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) TasklistId(tasklistId []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) TaskIdList(taskIdList []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.taskIdList = &taskIdList
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) Tags(tags []string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) SkipCrmDealIds(skipCrmDealIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.skipCrmDealIds = &skipCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) FilterText(filterText []string) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) FilterBoardColumnIds(filterBoardColumnIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.filterBoardColumnIds = &filterBoardColumnIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) CrmDealIds(crmDealIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.crmDealIds = &crmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksExecute(r)
}

/*
 * GETProjectsApiV2ProjectcategoriesProjectCategoryIdTasks Get Tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectcategoriesProjectCategoryIdTasks(ctx _context.Context) ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest {
	return ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksExecute(r ApiGETProjectsApiV2ProjectcategoriesProjectCategoryIdTasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectcategoriesProjectCategoryIdTasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projectcategories/:projectCategoryId/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.deletedAfterDate != nil {
		localVarQueryParams.Add("deletedAfterDate", parameterToString(*r.deletedAfterDate, ""))
	}
	if r.dateCode != nil {
		localVarQueryParams.Add("dateCode", parameterToString(*r.dateCode, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdFilter != nil {
		localVarQueryParams.Add("createdFilter", parameterToString(*r.createdFilter, ""))
	}
	if r.createdDateCode != nil {
		localVarQueryParams.Add("createdDateCode", parameterToString(*r.createdDateCode, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.offsetCount != nil {
		localVarQueryParams.Add("offsetCount", parameterToString(*r.offsetCount, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyTasksWithUnreadComments != nil {
		localVarQueryParams.Add("onlyTasksWithUnreadComments", parameterToString(*r.onlyTasksWithUnreadComments, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyTasksWithEstimatedTime != nil {
		localVarQueryParams.Add("onlyTasksWithEstimatedTime", parameterToString(*r.onlyTasksWithEstimatedTime, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksWithCards != nil {
		localVarQueryParams.Add("includeTasksWithCards", parameterToString(*r.includeTasksWithCards, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeBlockedTasks != nil {
		localVarQueryParams.Add("includeBlockedTasks", parameterToString(*r.includeBlockedTasks, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, "csv"))
	}
	if r.taskIdList != nil {
		localVarQueryParams.Add("taskIdList", parameterToString(*r.taskIdList, "csv"))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.skipCrmDealIds != nil {
		localVarQueryParams.Add("skipCrmDealIds", parameterToString(*r.skipCrmDealIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("follower-ids", parameterToString(*r.followerIds, "csv"))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, "csv"))
	}
	if r.filterBoardColumnIds != nil {
		localVarQueryParams.Add("filterBoardColumnIds", parameterToString(*r.filterBoardColumnIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.crmDealIds != nil {
		localVarQueryParams.Add("crmDealIds", parameterToString(*r.crmDealIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsRequest struct {
	ctx                                _context.Context
	ApiService                         *CFPortApiService
	workedOnAfterDateTime              *string
	updatedAfterDateTime               *string
	updatedAfterDate                   *string
	status                             *string
	searchTerm                         *string
	projectType                        *string
	projectStatus                      *string
	orderMode                          *string
	orderBy                            *string
	get                                *string
	firstLetter                        *string
	dataSet                            *string
	createdAfterDateTime               *string
	createdAfterDate                   *string
	completedBeforeDateTime            *string
	completedAfterDateTime             *string
	userId                             *int32
	pageSize                           *int32
	page                               *int32
	searchCompany                      *bool
	sanitizeName                       *bool
	returnLetters                      *bool
	onlyStarredProjects                *bool
	onlyProjectsWithExplicitMembership *bool
	onlyArchivedProjects               *bool
	matchAllTags                       *bool
	matchAllProjectTags                *bool
	includeUpdates                     *bool
	includeTopPeople                   *bool
	includeTags                        *bool
	includeProjectOwner                *bool
	includePeople                      *bool
	includeCustomFields                *bool
	includeCrmDealIds                  *bool
	includeArchivedProjects            *bool
	hideObservedProjects               *bool
	hideDesc                           *bool
	getTruePermissions                 *bool
	getPermissions                     *bool
	getNotificationSettings            *bool
	getDeleted                         *bool
	getCounts                          *bool
	getCategoryPath                    *bool
	getAll                             *bool
	getActivePages                     *bool
	formatMarkdown                     *bool
	skipIds                            *[]int32
	skipCrmDealIds                     *[]int32
	projectTagIds                      *[]int32
	projectOwnerIds                    *[]int32
	projectHealths                     *[]int32
	projectHealth                      *[]int32
	projectCompanyIds                  *[]int32
	projectCategoryIds                 *[]int32
	portfolioColumnIds                 *[]int32
	portfolioBoardIds                  *[]int32
	filterTagIds                       *[]int32
	featuresEnabledOnProject           *[]string
	crmDealIds                         *[]int32
	companyId                          *[]int32
	categoryId                         *[]int32
	catId                              *[]int32
}

func (r ApiGETProjectsApiV2ProjectsRequest) WorkedOnAfterDateTime(workedOnAfterDateTime string) ApiGETProjectsApiV2ProjectsRequest {
	r.workedOnAfterDateTime = &workedOnAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) UpdatedAfterDateTime(updatedAfterDateTime string) ApiGETProjectsApiV2ProjectsRequest {
	r.updatedAfterDateTime = &updatedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) Status(status string) ApiGETProjectsApiV2ProjectsRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV2ProjectsRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) ProjectType(projectType string) ApiGETProjectsApiV2ProjectsRequest {
	r.projectType = &projectType
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2ProjectsRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) OrderMode(orderMode string) ApiGETProjectsApiV2ProjectsRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) OrderBy(orderBy string) ApiGETProjectsApiV2ProjectsRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) Get(get string) ApiGETProjectsApiV2ProjectsRequest {
	r.get = &get
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) FirstLetter(firstLetter string) ApiGETProjectsApiV2ProjectsRequest {
	r.firstLetter = &firstLetter
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) DataSet(dataSet string) ApiGETProjectsApiV2ProjectsRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) CreatedAfterDateTime(createdAfterDateTime string) ApiGETProjectsApiV2ProjectsRequest {
	r.createdAfterDateTime = &createdAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2ProjectsRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) CompletedBeforeDateTime(completedBeforeDateTime string) ApiGETProjectsApiV2ProjectsRequest {
	r.completedBeforeDateTime = &completedBeforeDateTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) CompletedAfterDateTime(completedAfterDateTime string) ApiGETProjectsApiV2ProjectsRequest {
	r.completedAfterDateTime = &completedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) UserId(userId int32) ApiGETProjectsApiV2ProjectsRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) Page(page int32) ApiGETProjectsApiV2ProjectsRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) SearchCompany(searchCompany bool) ApiGETProjectsApiV2ProjectsRequest {
	r.searchCompany = &searchCompany
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) SanitizeName(sanitizeName bool) ApiGETProjectsApiV2ProjectsRequest {
	r.sanitizeName = &sanitizeName
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) ReturnLetters(returnLetters bool) ApiGETProjectsApiV2ProjectsRequest {
	r.returnLetters = &returnLetters
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2ProjectsRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) OnlyProjectsWithExplicitMembership(onlyProjectsWithExplicitMembership bool) ApiGETProjectsApiV2ProjectsRequest {
	r.onlyProjectsWithExplicitMembership = &onlyProjectsWithExplicitMembership
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV2ProjectsRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2ProjectsRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2ProjectsRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV2ProjectsRequest {
	r.includeUpdates = &includeUpdates
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) IncludeTopPeople(includeTopPeople bool) ApiGETProjectsApiV2ProjectsRequest {
	r.includeTopPeople = &includeTopPeople
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2ProjectsRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) IncludeProjectOwner(includeProjectOwner bool) ApiGETProjectsApiV2ProjectsRequest {
	r.includeProjectOwner = &includeProjectOwner
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2ProjectsRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2ProjectsRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2ProjectsRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2ProjectsRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) HideObservedProjects(hideObservedProjects bool) ApiGETProjectsApiV2ProjectsRequest {
	r.hideObservedProjects = &hideObservedProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) HideDesc(hideDesc bool) ApiGETProjectsApiV2ProjectsRequest {
	r.hideDesc = &hideDesc
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2ProjectsRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2ProjectsRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV2ProjectsRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) GetDeleted(getDeleted bool) ApiGETProjectsApiV2ProjectsRequest {
	r.getDeleted = &getDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) GetCounts(getCounts bool) ApiGETProjectsApiV2ProjectsRequest {
	r.getCounts = &getCounts
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) GetCategoryPath(getCategoryPath bool) ApiGETProjectsApiV2ProjectsRequest {
	r.getCategoryPath = &getCategoryPath
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) GetAll(getAll bool) ApiGETProjectsApiV2ProjectsRequest {
	r.getAll = &getAll
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2ProjectsRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2ProjectsRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) SkipIds(skipIds []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.skipIds = &skipIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) SkipCrmDealIds(skipCrmDealIds []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.skipCrmDealIds = &skipCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) PortfolioColumnIds(portfolioColumnIds []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.portfolioColumnIds = &portfolioColumnIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) PortfolioBoardIds(portfolioBoardIds []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.portfolioBoardIds = &portfolioBoardIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) FilterTagIds(filterTagIds []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.filterTagIds = &filterTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) FeaturesEnabledOnProject(featuresEnabledOnProject []string) ApiGETProjectsApiV2ProjectsRequest {
	r.featuresEnabledOnProject = &featuresEnabledOnProject
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) CrmDealIds(crmDealIds []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.crmDealIds = &crmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) CategoryId(categoryId []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.categoryId = &categoryId
	return r
}
func (r ApiGETProjectsApiV2ProjectsRequest) CatId(catId []int32) ApiGETProjectsApiV2ProjectsRequest {
	r.catId = &catId
	return r
}

func (r ApiGETProjectsApiV2ProjectsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsExecute(r)
}

/*
 * GETProjectsApiV2Projects APICall_GET_projects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsRequest
 */
func (a *CFPortApiService) GETProjectsApiV2Projects(ctx _context.Context) ApiGETProjectsApiV2ProjectsRequest {
	return ApiGETProjectsApiV2ProjectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsExecute(r ApiGETProjectsApiV2ProjectsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2Projects")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.workedOnAfterDateTime != nil {
		localVarQueryParams.Add("workedOnAfterDateTime", parameterToString(*r.workedOnAfterDateTime, ""))
	}
	if r.updatedAfterDateTime != nil {
		localVarQueryParams.Add("updatedAfterDateTime", parameterToString(*r.updatedAfterDateTime, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectType != nil {
		localVarQueryParams.Add("projectType", parameterToString(*r.projectType, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.get != nil {
		localVarQueryParams.Add("get", parameterToString(*r.get, ""))
	}
	if r.firstLetter != nil {
		localVarQueryParams.Add("firstLetter", parameterToString(*r.firstLetter, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdAfterDateTime != nil {
		localVarQueryParams.Add("createdAfterDateTime", parameterToString(*r.createdAfterDateTime, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDateTime != nil {
		localVarQueryParams.Add("completedBeforeDateTime", parameterToString(*r.completedBeforeDateTime, ""))
	}
	if r.completedAfterDateTime != nil {
		localVarQueryParams.Add("completedAfterDateTime", parameterToString(*r.completedAfterDateTime, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.searchCompany != nil {
		localVarQueryParams.Add("searchCompany", parameterToString(*r.searchCompany, ""))
	}
	if r.sanitizeName != nil {
		localVarQueryParams.Add("sanitizeName", parameterToString(*r.sanitizeName, ""))
	}
	if r.returnLetters != nil {
		localVarQueryParams.Add("returnLetters", parameterToString(*r.returnLetters, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyProjectsWithExplicitMembership != nil {
		localVarQueryParams.Add("onlyProjectsWithExplicitMembership", parameterToString(*r.onlyProjectsWithExplicitMembership, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	if r.includeTopPeople != nil {
		localVarQueryParams.Add("includeTopPeople", parameterToString(*r.includeTopPeople, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProjectOwner != nil {
		localVarQueryParams.Add("includeProjectOwner", parameterToString(*r.includeProjectOwner, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.hideObservedProjects != nil {
		localVarQueryParams.Add("hideObservedProjects", parameterToString(*r.hideObservedProjects, ""))
	}
	if r.hideDesc != nil {
		localVarQueryParams.Add("hideDesc", parameterToString(*r.hideDesc, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getDeleted != nil {
		localVarQueryParams.Add("getDeleted", parameterToString(*r.getDeleted, ""))
	}
	if r.getCounts != nil {
		localVarQueryParams.Add("getCounts", parameterToString(*r.getCounts, ""))
	}
	if r.getCategoryPath != nil {
		localVarQueryParams.Add("getCategoryPath", parameterToString(*r.getCategoryPath, ""))
	}
	if r.getAll != nil {
		localVarQueryParams.Add("getAll", parameterToString(*r.getAll, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	if r.skipIds != nil {
		localVarQueryParams.Add("skipIds", parameterToString(*r.skipIds, "csv"))
	}
	if r.skipCrmDealIds != nil {
		localVarQueryParams.Add("skipCrmDealIds", parameterToString(*r.skipCrmDealIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.portfolioColumnIds != nil {
		localVarQueryParams.Add("portfolioColumnIds", parameterToString(*r.portfolioColumnIds, "csv"))
	}
	if r.portfolioBoardIds != nil {
		localVarQueryParams.Add("portfolioBoardIds", parameterToString(*r.portfolioBoardIds, "csv"))
	}
	if r.filterTagIds != nil {
		localVarQueryParams.Add("filterTagIds", parameterToString(*r.filterTagIds, "csv"))
	}
	if r.featuresEnabledOnProject != nil {
		localVarQueryParams.Add("featuresEnabledOnProject", parameterToString(*r.featuresEnabledOnProject, "csv"))
	}
	if r.crmDealIds != nil {
		localVarQueryParams.Add("crmDealIds", parameterToString(*r.crmDealIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, "csv"))
	}
	if r.catId != nil {
		localVarQueryParams.Add("catId", parameterToString(*r.catId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsArchivedRequest struct {
	ctx            _context.Context
	ApiService     *CFPortApiService
	pageSize       *int32
	page           *int32
	maxProjects    *int32
	includeUpdates *bool
	groupByCompany *bool
	getEmoji       *bool
}

func (r ApiGETProjectsApiV2ProjectsArchivedRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsArchivedRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsArchivedRequest) Page(page int32) ApiGETProjectsApiV2ProjectsArchivedRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsArchivedRequest) MaxProjects(maxProjects int32) ApiGETProjectsApiV2ProjectsArchivedRequest {
	r.maxProjects = &maxProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsArchivedRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV2ProjectsArchivedRequest {
	r.includeUpdates = &includeUpdates
	return r
}
func (r ApiGETProjectsApiV2ProjectsArchivedRequest) GroupByCompany(groupByCompany bool) ApiGETProjectsApiV2ProjectsArchivedRequest {
	r.groupByCompany = &groupByCompany
	return r
}
func (r ApiGETProjectsApiV2ProjectsArchivedRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2ProjectsArchivedRequest {
	r.getEmoji = &getEmoji
	return r
}

func (r ApiGETProjectsApiV2ProjectsArchivedRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsArchivedExecute(r)
}

/*
 * GETProjectsApiV2ProjectsArchived Returns the project defaults
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsArchivedRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsArchived(ctx _context.Context) ApiGETProjectsApiV2ProjectsArchivedRequest {
	return ApiGETProjectsApiV2ProjectsArchivedRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsArchivedExecute(r ApiGETProjectsApiV2ProjectsArchivedRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsArchived")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/archived"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.maxProjects != nil {
		localVarQueryParams.Add("maxProjects", parameterToString(*r.maxProjects, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	if r.groupByCompany != nil {
		localVarQueryParams.Add("groupByCompany", parameterToString(*r.groupByCompany, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsChartRequest struct {
	ctx                                _context.Context
	ApiService                         *CFPortApiService
	updatedAfterDate                   *string
	startDate                          *string
	endDate                            *string
	companyId                          *int32
	useMinDates                        *bool
	starred                            *bool
	onlyStarredProjects                *bool
	onlyProjectsWithExplicitMembership *bool
	includeUpdates                     *bool
	includeTags                        *bool
	hideObservedProjects               *bool
	getEmoji                           *bool
	categoryId                         *[]int32
	catId                              *[]int32
}

func (r ApiGETProjectsApiV2ProjectsChartRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsChartRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) StartDate(startDate string) ApiGETProjectsApiV2ProjectsChartRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) EndDate(endDate string) ApiGETProjectsApiV2ProjectsChartRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) CompanyId(companyId int32) ApiGETProjectsApiV2ProjectsChartRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) UseMinDates(useMinDates bool) ApiGETProjectsApiV2ProjectsChartRequest {
	r.useMinDates = &useMinDates
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) Starred(starred bool) ApiGETProjectsApiV2ProjectsChartRequest {
	r.starred = &starred
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2ProjectsChartRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) OnlyProjectsWithExplicitMembership(onlyProjectsWithExplicitMembership bool) ApiGETProjectsApiV2ProjectsChartRequest {
	r.onlyProjectsWithExplicitMembership = &onlyProjectsWithExplicitMembership
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV2ProjectsChartRequest {
	r.includeUpdates = &includeUpdates
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2ProjectsChartRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) HideObservedProjects(hideObservedProjects bool) ApiGETProjectsApiV2ProjectsChartRequest {
	r.hideObservedProjects = &hideObservedProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2ProjectsChartRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) CategoryId(categoryId []int32) ApiGETProjectsApiV2ProjectsChartRequest {
	r.categoryId = &categoryId
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartRequest) CatId(catId []int32) ApiGETProjectsApiV2ProjectsChartRequest {
	r.catId = &catId
	return r
}

func (r ApiGETProjectsApiV2ProjectsChartRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsChartExecute(r)
}

/*
 * GETProjectsApiV2ProjectsChart Returns the project chart
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsChartRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsChart(ctx _context.Context) ApiGETProjectsApiV2ProjectsChartRequest {
	return ApiGETProjectsApiV2ProjectsChartRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsChartExecute(r ApiGETProjectsApiV2ProjectsChartRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsChart")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/chart"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, ""))
	}
	if r.useMinDates != nil {
		localVarQueryParams.Add("useMinDates", parameterToString(*r.useMinDates, ""))
	}
	if r.starred != nil {
		localVarQueryParams.Add("starred", parameterToString(*r.starred, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyProjectsWithExplicitMembership != nil {
		localVarQueryParams.Add("onlyProjectsWithExplicitMembership", parameterToString(*r.onlyProjectsWithExplicitMembership, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.hideObservedProjects != nil {
		localVarQueryParams.Add("hideObservedProjects", parameterToString(*r.hideObservedProjects, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, "csv"))
	}
	if r.catId != nil {
		localVarQueryParams.Add("catId", parameterToString(*r.catId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsChartoverviewRequest struct {
	ctx                 _context.Context
	ApiService          *CFPortApiService
	updatedAfterDate    *string
	startDate           *string
	endDate             *string
	projectCompanyId    *int32
	useMinDates         *bool
	onlyStarredProjects *bool
	includeUpdates      *bool
	includeTags         *bool
	getEmoji            *bool
	projectCategoryIds  *[]int32
}

func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) StartDate(startDate string) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) EndDate(endDate string) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) ProjectCompanyId(projectCompanyId int32) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	r.projectCompanyId = &projectCompanyId
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) UseMinDates(useMinDates bool) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	r.useMinDates = &useMinDates
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	r.includeUpdates = &includeUpdates
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}

func (r ApiGETProjectsApiV2ProjectsChartoverviewRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsChartoverviewExecute(r)
}

/*
 * GETProjectsApiV2ProjectsChartoverview Returns the project defaults (Objective: To deprecate getProjectsChart)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsChartoverviewRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsChartoverview(ctx _context.Context) ApiGETProjectsApiV2ProjectsChartoverviewRequest {
	return ApiGETProjectsApiV2ProjectsChartoverviewRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsChartoverviewExecute(r ApiGETProjectsApiV2ProjectsChartoverviewRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsChartoverview")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/chartoverview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.projectCompanyId != nil {
		localVarQueryParams.Add("projectCompanyId", parameterToString(*r.projectCompanyId, ""))
	}
	if r.useMinDates != nil {
		localVarQueryParams.Add("useMinDates", parameterToString(*r.useMinDates, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest struct {
	ctx           _context.Context
	ApiService    *CFPortApiService
	toDate        *string
	projectStatus *string
	fromDate      *string
	userId        *int32
	pageSize      *int32
	page          *int32
}

func (r ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest) ToDate(toDate string) ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest) FromDate(fromDate string) ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest) UserId(userId int32) ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest) Page(page int32) ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest {
	r.page = &page
	return r
}

func (r ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsEstimatedtimeTotalExecute(r)
}

/*
 * GETProjectsApiV2ProjectsEstimatedtimeTotal APICall_GET_projects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsEstimatedtimeTotal(ctx _context.Context) ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest {
	return ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsEstimatedtimeTotalExecute(r ApiGETProjectsApiV2ProjectsEstimatedtimeTotalRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsEstimatedtimeTotal")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/estimatedtime/total"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsLatestRequest struct {
	ctx                    _context.Context
	ApiService             *CFPortApiService
	view                   *string
	pageSize               *int32
	page                   *int32
	minProjects            *int32
	maxProjects            *int32
	includeUpdates         *bool
	includeStarredInLatest *bool
	groupByCompany         *bool
	getEmoji               *bool
}

func (r ApiGETProjectsApiV2ProjectsLatestRequest) View(view string) ApiGETProjectsApiV2ProjectsLatestRequest {
	r.view = &view
	return r
}
func (r ApiGETProjectsApiV2ProjectsLatestRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsLatestRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsLatestRequest) Page(page int32) ApiGETProjectsApiV2ProjectsLatestRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsLatestRequest) MinProjects(minProjects int32) ApiGETProjectsApiV2ProjectsLatestRequest {
	r.minProjects = &minProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsLatestRequest) MaxProjects(maxProjects int32) ApiGETProjectsApiV2ProjectsLatestRequest {
	r.maxProjects = &maxProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsLatestRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV2ProjectsLatestRequest {
	r.includeUpdates = &includeUpdates
	return r
}
func (r ApiGETProjectsApiV2ProjectsLatestRequest) IncludeStarredInLatest(includeStarredInLatest bool) ApiGETProjectsApiV2ProjectsLatestRequest {
	r.includeStarredInLatest = &includeStarredInLatest
	return r
}
func (r ApiGETProjectsApiV2ProjectsLatestRequest) GroupByCompany(groupByCompany bool) ApiGETProjectsApiV2ProjectsLatestRequest {
	r.groupByCompany = &groupByCompany
	return r
}
func (r ApiGETProjectsApiV2ProjectsLatestRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2ProjectsLatestRequest {
	r.getEmoji = &getEmoji
	return r
}

func (r ApiGETProjectsApiV2ProjectsLatestRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsLatestExecute(r)
}

/*
 * GETProjectsApiV2ProjectsLatest Get latest project
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsLatestRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsLatest(ctx _context.Context) ApiGETProjectsApiV2ProjectsLatestRequest {
	return ApiGETProjectsApiV2ProjectsLatestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsLatestExecute(r ApiGETProjectsApiV2ProjectsLatestRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsLatest")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/latest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.view != nil {
		localVarQueryParams.Add("view", parameterToString(*r.view, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.minProjects != nil {
		localVarQueryParams.Add("minProjects", parameterToString(*r.minProjects, ""))
	}
	if r.maxProjects != nil {
		localVarQueryParams.Add("maxProjects", parameterToString(*r.maxProjects, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	if r.includeStarredInLatest != nil {
		localVarQueryParams.Add("includeStarredInLatest", parameterToString(*r.includeStarredInLatest, ""))
	}
	if r.groupByCompany != nil {
		localVarQueryParams.Add("groupByCompany", parameterToString(*r.groupByCompany, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsMeLatestRequest struct {
	ctx            _context.Context
	ApiService     *CFPortApiService
	maxProjects    *int32
	includeUpdates *bool
	groupByCompany *bool
	getEmoji       *bool
}

func (r ApiGETProjectsApiV2ProjectsMeLatestRequest) MaxProjects(maxProjects int32) ApiGETProjectsApiV2ProjectsMeLatestRequest {
	r.maxProjects = &maxProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsMeLatestRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV2ProjectsMeLatestRequest {
	r.includeUpdates = &includeUpdates
	return r
}
func (r ApiGETProjectsApiV2ProjectsMeLatestRequest) GroupByCompany(groupByCompany bool) ApiGETProjectsApiV2ProjectsMeLatestRequest {
	r.groupByCompany = &groupByCompany
	return r
}
func (r ApiGETProjectsApiV2ProjectsMeLatestRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2ProjectsMeLatestRequest {
	r.getEmoji = &getEmoji
	return r
}

func (r ApiGETProjectsApiV2ProjectsMeLatestRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsMeLatestExecute(r)
}

/*
 * GETProjectsApiV2ProjectsMeLatest Returns the latest project
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsMeLatestRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsMeLatest(ctx _context.Context) ApiGETProjectsApiV2ProjectsMeLatestRequest {
	return ApiGETProjectsApiV2ProjectsMeLatestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsMeLatestExecute(r ApiGETProjectsApiV2ProjectsMeLatestRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsMeLatest")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/me/latest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.maxProjects != nil {
		localVarQueryParams.Add("maxProjects", parameterToString(*r.maxProjects, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	if r.groupByCompany != nil {
		localVarQueryParams.Add("groupByCompany", parameterToString(*r.groupByCompany, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsNewRequest struct {
	ctx        _context.Context
	ApiService *CFPortApiService
	companyId  *int32
}

func (r ApiGETProjectsApiV2ProjectsNewRequest) CompanyId(companyId int32) ApiGETProjectsApiV2ProjectsNewRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2ProjectsNewRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsNewExecute(r)
}

/*
 * GETProjectsApiV2ProjectsNew Returns the project defaults
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsNewRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsNew(ctx _context.Context) ApiGETProjectsApiV2ProjectsNewRequest {
	return ApiGETProjectsApiV2ProjectsNewRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsNewExecute(r ApiGETProjectsApiV2ProjectsNewRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsNew")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	userId                  *int32
	projectId               *int32
	showDeleted             *bool
	includeUpdates          *bool
	includeTags             *bool
	includeProjectOwner     *bool
	includePeople           *bool
	includeCustomFields     *bool
	includeCrmDealIds       *bool
	getTruePermissions      *bool
	getPermissions          *bool
	getNotificationSettings *bool
	getEmoji                *bool
	getEmailAddress         *bool
	getDateInfo             *bool
	getActivePages          *bool
	formatMarkdown          *bool
	projectOwnerIds         *[]int32
	projectHealths          *[]int32
	projectHealth           *[]int32
}

func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) UserId(userId int32) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) ProjectId(projectId int32) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.includeUpdates = &includeUpdates
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) IncludeProjectOwner(includeProjectOwner bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.includeProjectOwner = &includeProjectOwner
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) GetEmailAddress(getEmailAddress bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.getEmailAddress = &getEmailAddress
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) GetDateInfo(getDateInfo bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.getDateInfo = &getDateInfo
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	r.projectHealth = &projectHealth
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectId Returns the project defaults
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectId(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdExecute(r ApiGETProjectsApiV2ProjectsProjectIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectId")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeProjectOwner != nil {
		localVarQueryParams.Add("includeProjectOwner", parameterToString(*r.includeProjectOwner, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.getEmailAddress != nil {
		localVarQueryParams.Add("getEmailAddress", parameterToString(*r.getEmailAddress, ""))
	}
	if r.getDateInfo != nil {
		localVarQueryParams.Add("getDateInfo", parameterToString(*r.getDateInfo, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest struct {
	ctx              _context.Context
	ApiService       *CFPortApiService
	updatedAfterDate *string
	toDate           *string
	sortOrder        *string
	sortBy           *string
	permission       *string
	invoicedType     *string
	fromDate         *string
	billableType     *string
	ticketId         *int32
	projectId        *int32
	pageSize         *int32
	page             *int32
	invoiceId        *int32
	includeTimelogId *int32
	showDeleted      *bool
	matchAllTags     *bool
	includeTags      *bool
	getTotals        *bool
	userId           *[]int32
	taskTagIds       *[]int32
	tagIds           *[]int32
	companyId        *[]int32
}

func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) ToDate(toDate string) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) SortBy(sortBy string) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) Permission(permission string) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.permission = &permission
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) FromDate(fromDate string) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) BillableType(billableType string) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) TicketId(ticketId int32) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) ProjectId(projectId int32) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) Page(page int32) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) InvoiceId(invoiceId int32) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.invoiceId = &invoiceId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) UserId(userId []int32) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdBillingTimeExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectIdBillingTime APICall_GET_projects_id_time_entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdBillingTime(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdBillingTimeExecute(r ApiGETProjectsApiV2ProjectsProjectIdBillingTimeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectIdBillingTime")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId/billing/time"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.permission != nil {
		localVarQueryParams.Add("permission", parameterToString(*r.permission, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.invoiceId != nil {
		localVarQueryParams.Add("invoiceId", parameterToString(*r.invoiceId, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest struct {
	ctx         _context.Context
	ApiService  *CFPortApiService
	subCodeType *int32
	projectId   *int32
	categoryId  *int32
	setup       *bool
	getSubCode  *bool
}

func (r ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest) SubCodeType(subCodeType int32) ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest {
	r.subCodeType = &subCodeType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest) ProjectId(projectId int32) ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest) CategoryId(categoryId int32) ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest {
	r.categoryId = &categoryId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest) Setup(setup bool) ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest {
	r.setup = &setup
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest) GetSubCode(getSubCode bool) ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest {
	r.getSubCode = &getSubCode
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdEmailaddressExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectIdEmailaddress Returns the details for the account youâ€™re currently logged in with.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdEmailaddress(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdEmailaddressExecute(r ApiGETProjectsApiV2ProjectsProjectIdEmailaddressRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectIdEmailaddress")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId/emailaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.subCodeType != nil {
		localVarQueryParams.Add("subCodeType", parameterToString(*r.subCodeType, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, ""))
	}
	if r.setup != nil {
		localVarQueryParams.Add("setup", parameterToString(*r.setup, ""))
	}
	if r.getSubCode != nil {
		localVarQueryParams.Add("getSubCode", parameterToString(*r.getSubCode, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest struct {
	ctx                   _context.Context
	ApiService            *CFPortApiService
	updatedAfterDateTime  *string
	updatedAfterDate      *string
	type_                 *string
	sortOrder             *string
	sort                  *string
	searchTerm            *string
	projectType           *string
	inviteStatus          *string
	firstLetter           *string
	emailAddress          *string
	dataSet               *string
	projectId             *int32
	pageSize              *int32
	page                  *int32
	excludeProjectId      *int32
	showDeleted           *bool
	returnTeams           *bool
	returnProjectIds      *bool
	returnLetters         *bool
	ownerCompanyFirst     *bool
	onlyids               *bool
	includeTags           *bool
	includeObservers      *bool
	includeCompanyDetails *bool
	includeClockIn        *bool
	groupByCompany        *bool
	getProjectRoles       *bool
	getCounts             *bool
	fullprofile           *bool
	countOnly             *bool
	userIds               *[]int32
	companyId             *[]int32
}

func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) UpdatedAfterDateTime(updatedAfterDateTime string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.updatedAfterDateTime = &updatedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) Type_(type_ string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.type_ = &type_
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) Sort(sort string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) ProjectType(projectType string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.projectType = &projectType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) InviteStatus(inviteStatus string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.inviteStatus = &inviteStatus
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) FirstLetter(firstLetter string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.firstLetter = &firstLetter
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) EmailAddress(emailAddress string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.emailAddress = &emailAddress
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) DataSet(dataSet string) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) ProjectId(projectId int32) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) Page(page int32) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) ExcludeProjectId(excludeProjectId int32) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.excludeProjectId = &excludeProjectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) ReturnTeams(returnTeams bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.returnTeams = &returnTeams
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) ReturnProjectIds(returnProjectIds bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.returnProjectIds = &returnProjectIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) ReturnLetters(returnLetters bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.returnLetters = &returnLetters
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) OwnerCompanyFirst(ownerCompanyFirst bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.ownerCompanyFirst = &ownerCompanyFirst
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) Onlyids(onlyids bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.onlyids = &onlyids
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) IncludeObservers(includeObservers bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.includeObservers = &includeObservers
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) IncludeCompanyDetails(includeCompanyDetails bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.includeCompanyDetails = &includeCompanyDetails
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) IncludeClockIn(includeClockIn bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.includeClockIn = &includeClockIn
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) GroupByCompany(groupByCompany bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.groupByCompany = &groupByCompany
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) GetProjectRoles(getProjectRoles bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.getProjectRoles = &getProjectRoles
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) GetCounts(getCounts bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.getCounts = &getCounts
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) Fullprofile(fullprofile bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.fullprofile = &fullprofile
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) CountOnly(countOnly bool) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.countOnly = &countOnly
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) UserIds(userIds []int32) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) Execute() (PeopleResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdPeopleExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectIdPeople Retrieves all of the people in a given project.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdPeople(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return PeopleResponse
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdPeopleExecute(r ApiGETProjectsApiV2ProjectsProjectIdPeopleRequest) (PeopleResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PeopleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectIdPeople")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId/people"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDateTime != nil {
		localVarQueryParams.Add("updatedAfterDateTime", parameterToString(*r.updatedAfterDateTime, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectType != nil {
		localVarQueryParams.Add("projectType", parameterToString(*r.projectType, ""))
	}
	if r.inviteStatus != nil {
		localVarQueryParams.Add("inviteStatus", parameterToString(*r.inviteStatus, ""))
	}
	if r.firstLetter != nil {
		localVarQueryParams.Add("firstLetter", parameterToString(*r.firstLetter, ""))
	}
	if r.emailAddress != nil {
		localVarQueryParams.Add("emailAddress", parameterToString(*r.emailAddress, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.excludeProjectId != nil {
		localVarQueryParams.Add("excludeProjectId", parameterToString(*r.excludeProjectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.returnTeams != nil {
		localVarQueryParams.Add("returnTeams", parameterToString(*r.returnTeams, ""))
	}
	if r.returnProjectIds != nil {
		localVarQueryParams.Add("returnProjectIds", parameterToString(*r.returnProjectIds, ""))
	}
	if r.returnLetters != nil {
		localVarQueryParams.Add("returnLetters", parameterToString(*r.returnLetters, ""))
	}
	if r.ownerCompanyFirst != nil {
		localVarQueryParams.Add("ownerCompanyFirst", parameterToString(*r.ownerCompanyFirst, ""))
	}
	if r.onlyids != nil {
		localVarQueryParams.Add("onlyids", parameterToString(*r.onlyids, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeObservers != nil {
		localVarQueryParams.Add("includeObservers", parameterToString(*r.includeObservers, ""))
	}
	if r.includeCompanyDetails != nil {
		localVarQueryParams.Add("includeCompanyDetails", parameterToString(*r.includeCompanyDetails, ""))
	}
	if r.includeClockIn != nil {
		localVarQueryParams.Add("includeClockIn", parameterToString(*r.includeClockIn, ""))
	}
	if r.groupByCompany != nil {
		localVarQueryParams.Add("groupByCompany", parameterToString(*r.groupByCompany, ""))
	}
	if r.getProjectRoles != nil {
		localVarQueryParams.Add("getProjectRoles", parameterToString(*r.getProjectRoles, ""))
	}
	if r.getCounts != nil {
		localVarQueryParams.Add("getCounts", parameterToString(*r.getCounts, ""))
	}
	if r.fullprofile != nil {
		localVarQueryParams.Add("fullprofile", parameterToString(*r.fullprofile, ""))
	}
	if r.countOnly != nil {
		localVarQueryParams.Add("countOnly", parameterToString(*r.countOnly, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest struct {
	ctx                 _context.Context
	ApiService          *CFPortApiService
	projectId           *int32
	nextPageToken       *int32
	dependentTaskId     *int32
	onlyDependencies    *bool
	onlyBasicFields     *bool
	onlyActionable      *bool
	includeDependencies *bool
	getRecursively      *bool
}

func (r ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest) ProjectId(projectId int32) ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest) NextPageToken(nextPageToken int32) ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest {
	r.nextPageToken = &nextPageToken
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest) DependentTaskId(dependentTaskId int32) ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest {
	r.dependentTaskId = &dependentTaskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest) OnlyDependencies(onlyDependencies bool) ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest {
	r.onlyDependencies = &onlyDependencies
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest) OnlyBasicFields(onlyBasicFields bool) ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest {
	r.onlyBasicFields = &onlyBasicFields
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest) OnlyActionable(onlyActionable bool) ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest {
	r.onlyActionable = &onlyActionable
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest) IncludeDependencies(includeDependencies bool) ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest {
	r.includeDependencies = &includeDependencies
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest) GetRecursively(getRecursively bool) ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest {
	r.getRecursively = &getRecursively
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdPredecessorsExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectIdPredecessors Get Predecessor
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdPredecessors(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdPredecessorsExecute(r ApiGETProjectsApiV2ProjectsProjectIdPredecessorsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectIdPredecessors")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId/predecessors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.nextPageToken != nil {
		localVarQueryParams.Add("nextPageToken", parameterToString(*r.nextPageToken, ""))
	}
	if r.dependentTaskId != nil {
		localVarQueryParams.Add("dependentTaskId", parameterToString(*r.dependentTaskId, ""))
	}
	if r.onlyDependencies != nil {
		localVarQueryParams.Add("onlyDependencies", parameterToString(*r.onlyDependencies, ""))
	}
	if r.onlyBasicFields != nil {
		localVarQueryParams.Add("onlyBasicFields", parameterToString(*r.onlyBasicFields, ""))
	}
	if r.onlyActionable != nil {
		localVarQueryParams.Add("onlyActionable", parameterToString(*r.onlyActionable, ""))
	}
	if r.includeDependencies != nil {
		localVarQueryParams.Add("includeDependencies", parameterToString(*r.includeDependencies, ""))
	}
	if r.getRecursively != nil {
		localVarQueryParams.Add("getRecursively", parameterToString(*r.getRecursively, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest struct {
	ctx           _context.Context
	ApiService    *CFPortApiService
	filterText    *string
	aPIReturnType *string
	pageSize      *int32
	page          *int32
	getEmoji      *bool
}

func (r ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest) FilterText(filterText string) ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest) APIReturnType(aPIReturnType string) ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest {
	r.aPIReturnType = &aPIReturnType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest) Page(page int32) ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest {
	r.getEmoji = &getEmoji
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdSummaryExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectIdSummary APICall_GET_summary
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdSummary(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdSummaryExecute(r ApiGETProjectsApiV2ProjectsProjectIdSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectIdSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, ""))
	}
	if r.aPIReturnType != nil {
		localVarQueryParams.Add("APIReturnType", parameterToString(*r.aPIReturnType, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest struct {
	ctx                          _context.Context
	ApiService                   *CFPortApiService
	updatedAfterDate             *string
	today                        *string
	startDate                    *string
	sortOrder                    *string
	sort                         *string
	reportFormat                 *string
	projectStatus                *string
	priority                     *string
	include                      *string
	filter                       *string
	endDate                      *string
	deletedAfterDate             *string
	dateCode                     *string
	dataSet                      *string
	createdFilter                *string
	createdDateCode              *string
	createdBeforeDate            *string
	createdAfterDate             *string
	completedBeforeDate          *string
	completedAfterDate           *string
	callback                     *string
	taskId                       *int32
	parentTaskId                 *int32
	pageSize                     *int32
	page                         *int32
	offsetCount                  *int32
	includeTaskId                *int32
	useStartDatesForTodaysTasks  *bool
	useAllProjects               *bool
	starredProjectsOnly          *bool
	showDeleted                  *bool
	showCompletedLists           *bool
	onlyUntaggedTasks            *bool
	onlyTasksWithUnreadComments  *bool
	onlyTasksWithTickets         *bool
	onlyTasksWithEstimatedTime   *bool
	onlyStarredProjects          *bool
	nestSubTasks                 *bool
	matchAllTags                 *bool
	matchAllProjectTags          *bool
	matchAllProjectTagIds        *bool
	matchAllExcludedTags         *bool
	isReportDownload             *bool
	includeUntaggedTasks         *bool
	includeToday                 *bool
	includeTeamUserIds           *bool
	includeTasksWithoutDueDates  *bool
	includeTasksWithCards        *bool
	includeTasksFromDeletedLists *bool
	includeReminders             *bool
	includeLoggedTime            *bool
	includeCustomFields          *bool
	includeCrmDealIds            *bool
	includeCompletedTasks        *bool
	includeCompletedSubtasks     *bool
	includeCompanyUserIds        *bool
	includeBlockedTasks          *bool
	includeAssigneeTeams         *bool
	includeAssigneeCompanies     *bool
	includeArchivedProjects      *bool
	ignoreStartDates             *bool
	getSubTasks                  *bool
	getFiles                     *bool
	allowTemplateTasks           *bool
	tasklistId                   *[]int32
	taskIdList                   *[]int32
	tags                         *[]string
	tagIds                       *[]int32
	skipCrmDealIds               *[]int32
	responsiblePartyIds          *[]int32
	projectTagIds                *[]int32
	projectOwnerIds              *[]int32
	projectIds                   *[]int32
	projectId                    *[]int32
	projectHealths               *[]int32
	projectHealth                *[]int32
	projectCompanyIds            *[]int32
	projectCategoryIds           *[]int32
	projectCategoryId            *[]int32
	followerIds                  *[]int32
	filterText                   *[]string
	filterBoardColumnIds         *[]int32
	excludeTagIds                *[]int32
	crmDealIds                   *[]int32
	creatorIds                   *[]int32
	companyId                    *[]int32
	assigneeTeamIds              *[]int32
	assigneeCompanyIds           *[]int32
}

func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) Today(today string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) StartDate(startDate string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) Sort(sort string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) Priority(priority string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) Include(include string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) Filter(filter string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) EndDate(endDate string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) DeletedAfterDate(deletedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.deletedAfterDate = &deletedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) DateCode(dateCode string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.dateCode = &dateCode
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) DataSet(dataSet string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) CreatedFilter(createdFilter string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.createdFilter = &createdFilter
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) CreatedDateCode(createdDateCode string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.createdDateCode = &createdDateCode
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) Callback(callback string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) TaskId(taskId int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) Page(page int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) OffsetCount(offsetCount int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.offsetCount = &offsetCount
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) OnlyTasksWithUnreadComments(onlyTasksWithUnreadComments bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.onlyTasksWithUnreadComments = &onlyTasksWithUnreadComments
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) OnlyTasksWithEstimatedTime(onlyTasksWithEstimatedTime bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.onlyTasksWithEstimatedTime = &onlyTasksWithEstimatedTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeTasksWithCards(includeTasksWithCards bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeTasksWithCards = &includeTasksWithCards
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeBlockedTasks(includeBlockedTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeBlockedTasks = &includeBlockedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) GetFiles(getFiles bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) TasklistId(tasklistId []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) TaskIdList(taskIdList []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.taskIdList = &taskIdList
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) Tags(tags []string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) SkipCrmDealIds(skipCrmDealIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.skipCrmDealIds = &skipCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) FilterText(filterText []string) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) FilterBoardColumnIds(filterBoardColumnIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.filterBoardColumnIds = &filterBoardColumnIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) CrmDealIds(crmDealIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.crmDealIds = &crmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdTaskidsExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectIdTaskids Get Tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdTaskids(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdTaskidsExecute(r ApiGETProjectsApiV2ProjectsProjectIdTaskidsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectIdTaskids")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId/taskids"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.deletedAfterDate != nil {
		localVarQueryParams.Add("deletedAfterDate", parameterToString(*r.deletedAfterDate, ""))
	}
	if r.dateCode != nil {
		localVarQueryParams.Add("dateCode", parameterToString(*r.dateCode, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdFilter != nil {
		localVarQueryParams.Add("createdFilter", parameterToString(*r.createdFilter, ""))
	}
	if r.createdDateCode != nil {
		localVarQueryParams.Add("createdDateCode", parameterToString(*r.createdDateCode, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.offsetCount != nil {
		localVarQueryParams.Add("offsetCount", parameterToString(*r.offsetCount, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyTasksWithUnreadComments != nil {
		localVarQueryParams.Add("onlyTasksWithUnreadComments", parameterToString(*r.onlyTasksWithUnreadComments, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyTasksWithEstimatedTime != nil {
		localVarQueryParams.Add("onlyTasksWithEstimatedTime", parameterToString(*r.onlyTasksWithEstimatedTime, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksWithCards != nil {
		localVarQueryParams.Add("includeTasksWithCards", parameterToString(*r.includeTasksWithCards, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeBlockedTasks != nil {
		localVarQueryParams.Add("includeBlockedTasks", parameterToString(*r.includeBlockedTasks, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, "csv"))
	}
	if r.taskIdList != nil {
		localVarQueryParams.Add("taskIdList", parameterToString(*r.taskIdList, "csv"))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.skipCrmDealIds != nil {
		localVarQueryParams.Add("skipCrmDealIds", parameterToString(*r.skipCrmDealIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("follower-ids", parameterToString(*r.followerIds, "csv"))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, "csv"))
	}
	if r.filterBoardColumnIds != nil {
		localVarQueryParams.Add("filterBoardColumnIds", parameterToString(*r.filterBoardColumnIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.crmDealIds != nil {
		localVarQueryParams.Add("crmDealIds", parameterToString(*r.crmDealIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdTasksRequest struct {
	ctx                          _context.Context
	ApiService                   *CFPortApiService
	updatedAfterDate             *string
	today                        *string
	startDate                    *string
	sortOrder                    *string
	sort                         *string
	reportFormat                 *string
	projectStatus                *string
	priority                     *string
	include                      *string
	filter                       *string
	endDate                      *string
	deletedAfterDate             *string
	dateCode                     *string
	dataSet                      *string
	createdFilter                *string
	createdDateCode              *string
	createdBeforeDate            *string
	createdAfterDate             *string
	completedBeforeDate          *string
	completedAfterDate           *string
	callback                     *string
	taskId                       *int32
	parentTaskId                 *int32
	pageSize                     *int32
	page                         *int32
	offsetCount                  *int32
	includeTaskId                *int32
	useStartDatesForTodaysTasks  *bool
	useAllProjects               *bool
	starredProjectsOnly          *bool
	showDeleted                  *bool
	showCompletedLists           *bool
	onlyUntaggedTasks            *bool
	onlyTasksWithUnreadComments  *bool
	onlyTasksWithTickets         *bool
	onlyTasksWithEstimatedTime   *bool
	onlyStarredProjects          *bool
	nestSubTasks                 *bool
	matchAllTags                 *bool
	matchAllProjectTags          *bool
	matchAllProjectTagIds        *bool
	matchAllExcludedTags         *bool
	isReportDownload             *bool
	includeUntaggedTasks         *bool
	includeToday                 *bool
	includeTeamUserIds           *bool
	includeTasksWithoutDueDates  *bool
	includeTasksWithCards        *bool
	includeTasksFromDeletedLists *bool
	includeReminders             *bool
	includeLoggedTime            *bool
	includeCustomFields          *bool
	includeCrmDealIds            *bool
	includeCompletedTasks        *bool
	includeCompletedSubtasks     *bool
	includeCompanyUserIds        *bool
	includeBlockedTasks          *bool
	includeAssigneeTeams         *bool
	includeAssigneeCompanies     *bool
	includeArchivedProjects      *bool
	ignoreStartDates             *bool
	getSubTasks                  *bool
	getFiles                     *bool
	allowTemplateTasks           *bool
	tasklistId                   *[]int32
	taskIdList                   *[]int32
	tags                         *[]string
	tagIds                       *[]int32
	skipCrmDealIds               *[]int32
	responsiblePartyIds          *[]int32
	projectTagIds                *[]int32
	projectOwnerIds              *[]int32
	projectIds                   *[]int32
	projectId                    *[]int32
	projectHealths               *[]int32
	projectHealth                *[]int32
	projectCompanyIds            *[]int32
	projectCategoryIds           *[]int32
	projectCategoryId            *[]int32
	followerIds                  *[]int32
	filterText                   *[]string
	filterBoardColumnIds         *[]int32
	excludeTagIds                *[]int32
	crmDealIds                   *[]int32
	creatorIds                   *[]int32
	companyId                    *[]int32
	assigneeTeamIds              *[]int32
	assigneeCompanyIds           *[]int32
}

func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) Today(today string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) StartDate(startDate string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) Sort(sort string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) Priority(priority string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) Include(include string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) Filter(filter string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) EndDate(endDate string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) DeletedAfterDate(deletedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.deletedAfterDate = &deletedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) DateCode(dateCode string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.dateCode = &dateCode
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) DataSet(dataSet string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) CreatedFilter(createdFilter string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.createdFilter = &createdFilter
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) CreatedDateCode(createdDateCode string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.createdDateCode = &createdDateCode
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) Callback(callback string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) TaskId(taskId int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) Page(page int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) OffsetCount(offsetCount int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.offsetCount = &offsetCount
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) OnlyTasksWithUnreadComments(onlyTasksWithUnreadComments bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.onlyTasksWithUnreadComments = &onlyTasksWithUnreadComments
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) OnlyTasksWithEstimatedTime(onlyTasksWithEstimatedTime bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.onlyTasksWithEstimatedTime = &onlyTasksWithEstimatedTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeTasksWithCards(includeTasksWithCards bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeTasksWithCards = &includeTasksWithCards
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeBlockedTasks(includeBlockedTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeBlockedTasks = &includeBlockedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) GetFiles(getFiles bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) TasklistId(tasklistId []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) TaskIdList(taskIdList []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.taskIdList = &taskIdList
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) Tags(tags []string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) SkipCrmDealIds(skipCrmDealIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.skipCrmDealIds = &skipCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) FilterText(filterText []string) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) FilterBoardColumnIds(filterBoardColumnIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.filterBoardColumnIds = &filterBoardColumnIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) CrmDealIds(crmDealIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.crmDealIds = &crmDealIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdTasksExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectIdTasks Get Tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdTasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdTasks(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdTasksRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdTasksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdTasksExecute(r ApiGETProjectsApiV2ProjectsProjectIdTasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectIdTasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.deletedAfterDate != nil {
		localVarQueryParams.Add("deletedAfterDate", parameterToString(*r.deletedAfterDate, ""))
	}
	if r.dateCode != nil {
		localVarQueryParams.Add("dateCode", parameterToString(*r.dateCode, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdFilter != nil {
		localVarQueryParams.Add("createdFilter", parameterToString(*r.createdFilter, ""))
	}
	if r.createdDateCode != nil {
		localVarQueryParams.Add("createdDateCode", parameterToString(*r.createdDateCode, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.offsetCount != nil {
		localVarQueryParams.Add("offsetCount", parameterToString(*r.offsetCount, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyTasksWithUnreadComments != nil {
		localVarQueryParams.Add("onlyTasksWithUnreadComments", parameterToString(*r.onlyTasksWithUnreadComments, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyTasksWithEstimatedTime != nil {
		localVarQueryParams.Add("onlyTasksWithEstimatedTime", parameterToString(*r.onlyTasksWithEstimatedTime, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksWithCards != nil {
		localVarQueryParams.Add("includeTasksWithCards", parameterToString(*r.includeTasksWithCards, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeBlockedTasks != nil {
		localVarQueryParams.Add("includeBlockedTasks", parameterToString(*r.includeBlockedTasks, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, "csv"))
	}
	if r.taskIdList != nil {
		localVarQueryParams.Add("taskIdList", parameterToString(*r.taskIdList, "csv"))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.skipCrmDealIds != nil {
		localVarQueryParams.Add("skipCrmDealIds", parameterToString(*r.skipCrmDealIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("follower-ids", parameterToString(*r.followerIds, "csv"))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, "csv"))
	}
	if r.filterBoardColumnIds != nil {
		localVarQueryParams.Add("filterBoardColumnIds", parameterToString(*r.filterBoardColumnIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.crmDealIds != nil {
		localVarQueryParams.Add("crmDealIds", parameterToString(*r.crmDealIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdTimeRequest struct {
	ctx              _context.Context
	ApiService       *CFPortApiService
	updatedAfterDate *string
	toDate           *string
	sortOrder        *string
	sortBy           *string
	permission       *string
	invoicedType     *string
	fromDate         *string
	billableType     *string
	ticketId         *int32
	projectId        *int32
	pageSize         *int32
	page             *int32
	invoiceId        *int32
	includeTimelogId *int32
	showDeleted      *bool
	matchAllTags     *bool
	includeTags      *bool
	getTotals        *bool
	userId           *[]int32
	taskTagIds       *[]int32
	tagIds           *[]int32
	companyId        *[]int32
}

func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) ToDate(toDate string) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) SortBy(sortBy string) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) Permission(permission string) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.permission = &permission
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) FromDate(fromDate string) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) BillableType(billableType string) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) TicketId(ticketId int32) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) ProjectId(projectId int32) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) Page(page int32) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) InvoiceId(invoiceId int32) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.invoiceId = &invoiceId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) UserId(userId []int32) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdTimeExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectIdTime APICall_GET_projects_id_time_entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdTimeRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdTime(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdTimeRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdTimeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdTimeExecute(r ApiGETProjectsApiV2ProjectsProjectIdTimeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectIdTime")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId/time"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.permission != nil {
		localVarQueryParams.Add("permission", parameterToString(*r.permission, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.invoiceId != nil {
		localVarQueryParams.Add("invoiceId", parameterToString(*r.invoiceId, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest struct {
	ctx              _context.Context
	ApiService       *CFPortApiService
	updatedAfterDate *string
	toDate           *string
	sortOrder        *string
	sortBy           *string
	permission       *string
	invoicedType     *string
	fromDate         *string
	billableType     *string
	ticketId         *int32
	projectId        *int32
	pageSize         *int32
	page             *int32
	invoiceId        *int32
	includeTimelogId *int32
	showDeleted      *bool
	matchAllTags     *bool
	includeTags      *bool
	getTotals        *bool
	userId           *[]int32
	taskTagIds       *[]int32
	tagIds           *[]int32
	companyId        *[]int32
}

func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) ToDate(toDate string) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) SortBy(sortBy string) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) Permission(permission string) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.permission = &permission
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) FromDate(fromDate string) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) BillableType(billableType string) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) TicketId(ticketId int32) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) ProjectId(projectId int32) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) Page(page int32) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) InvoiceId(invoiceId int32) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.invoiceId = &invoiceId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) UserId(userId []int32) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdTimeEntriesExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectIdTimeEntries APICall_GET_projects_id_time_entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdTimeEntries(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdTimeEntriesExecute(r ApiGETProjectsApiV2ProjectsProjectIdTimeEntriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectIdTimeEntries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId/time_entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.permission != nil {
		localVarQueryParams.Add("permission", parameterToString(*r.permission, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.invoiceId != nil {
		localVarQueryParams.Add("invoiceId", parameterToString(*r.invoiceId, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest struct {
	ctx              _context.Context
	ApiService       *CFPortApiService
	updatedAfterDate *string
	toDate           *string
	sortOrder        *string
	sortBy           *string
	permission       *string
	invoicedType     *string
	fromDate         *string
	billableType     *string
	ticketId         *int32
	projectId        *int32
	pageSize         *int32
	page             *int32
	invoiceId        *int32
	includeTimelogId *int32
	showDeleted      *bool
	matchAllTags     *bool
	includeTags      *bool
	getTotals        *bool
	userId           *[]int32
	taskTagIds       *[]int32
	tagIds           *[]int32
	companyId        *[]int32
}

func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) ToDate(toDate string) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) SortBy(sortBy string) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) Permission(permission string) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.permission = &permission
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) FromDate(fromDate string) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) BillableType(billableType string) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) TicketId(ticketId int32) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) ProjectId(projectId int32) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) Page(page int32) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) InvoiceId(invoiceId int32) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.invoiceId = &invoiceId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) UserId(userId []int32) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjectIdTimelogsExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjectIdTimelogs APICall_GET_projects_id_time_entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdTimelogs(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest {
	return ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjectIdTimelogsExecute(r ApiGETProjectsApiV2ProjectsProjectIdTimelogsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjectIdTimelogs")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projectId/timelogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.permission != nil {
		localVarQueryParams.Add("permission", parameterToString(*r.permission, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.invoiceId != nil {
		localVarQueryParams.Add("invoiceId", parameterToString(*r.invoiceId, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsProjejctIdAssingLaterRolesRequest struct {
	ctx        _context.Context
	ApiService *CFPortApiService
	projectId  *int32
}

func (r ApiGETProjectsApiV2ProjectsProjejctIdAssingLaterRolesRequest) ProjectId(projectId int32) ApiGETProjectsApiV2ProjectsProjejctIdAssingLaterRolesRequest {
	r.projectId = &projectId
	return r
}

func (r ApiGETProjectsApiV2ProjectsProjejctIdAssingLaterRolesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsProjejctIdAssingLaterRolesExecute(r)
}

/*
 * GETProjectsApiV2ProjectsProjejctIdAssingLaterRoles Get assign later roles
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsProjejctIdAssingLaterRolesRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjejctIdAssingLaterRoles(ctx _context.Context) ApiGETProjectsApiV2ProjectsProjejctIdAssingLaterRolesRequest {
	return ApiGETProjectsApiV2ProjectsProjejctIdAssingLaterRolesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsProjejctIdAssingLaterRolesExecute(r ApiGETProjectsApiV2ProjectsProjejctIdAssingLaterRolesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsProjejctIdAssingLaterRoles")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/:projejctId/assing_later_roles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsStarredRequest struct {
	ctx            _context.Context
	ApiService     *CFPortApiService
	dataSet        *string
	includeUpdates *bool
}

func (r ApiGETProjectsApiV2ProjectsStarredRequest) DataSet(dataSet string) ApiGETProjectsApiV2ProjectsStarredRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2ProjectsStarredRequest) IncludeUpdates(includeUpdates bool) ApiGETProjectsApiV2ProjectsStarredRequest {
	r.includeUpdates = &includeUpdates
	return r
}

func (r ApiGETProjectsApiV2ProjectsStarredRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsStarredExecute(r)
}

/*
 * GETProjectsApiV2ProjectsStarred Returns the starred projects
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsStarredRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsStarred(ctx _context.Context) ApiGETProjectsApiV2ProjectsStarredRequest {
	return ApiGETProjectsApiV2ProjectsStarredRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsStarredExecute(r ApiGETProjectsApiV2ProjectsStarredRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsStarred")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/starred"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.includeUpdates != nil {
		localVarQueryParams.Add("includeUpdates", parameterToString(*r.includeUpdates, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsTemplatesRequest struct {
	ctx                 _context.Context
	ApiService          *CFPortApiService
	searchTerm          *string
	orderMode           *string
	orderBy             *string
	userId              *int32
	pageSize            *int32
	page                *int32
	matchAllProjectTags *bool
	includeProjectOwner *bool
	getTruePermissions  *bool
	getPermissions      *bool
	projectTagIds       *[]int32
	projectOwnerIds     *[]int32
	filterTagIds        *[]int32
}

func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) OrderMode(orderMode string) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) OrderBy(orderBy string) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) UserId(userId int32) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) Page(page int32) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) IncludeProjectOwner(includeProjectOwner bool) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.includeProjectOwner = &includeProjectOwner
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) FilterTagIds(filterTagIds []int32) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	r.filterTagIds = &filterTagIds
	return r
}

func (r ApiGETProjectsApiV2ProjectsTemplatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsTemplatesExecute(r)
}

/*
 * GETProjectsApiV2ProjectsTemplates Returns the project defaults
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsTemplatesRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsTemplates(ctx _context.Context) ApiGETProjectsApiV2ProjectsTemplatesRequest {
	return ApiGETProjectsApiV2ProjectsTemplatesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsTemplatesExecute(r ApiGETProjectsApiV2ProjectsTemplatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsTemplates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeProjectOwner != nil {
		localVarQueryParams.Add("includeProjectOwner", parameterToString(*r.includeProjectOwner, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.filterTagIds != nil {
		localVarQueryParams.Add("filterTagIds", parameterToString(*r.filterTagIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsTimeTotalRequest struct {
	ctx           _context.Context
	ApiService    *CFPortApiService
	toDate        *string
	projectStatus *string
	fromDate      *string
	userId        *int32
	pageSize      *int32
	page          *int32
}

func (r ApiGETProjectsApiV2ProjectsTimeTotalRequest) ToDate(toDate string) ApiGETProjectsApiV2ProjectsTimeTotalRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsTimeTotalRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2ProjectsTimeTotalRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2ProjectsTimeTotalRequest) FromDate(fromDate string) ApiGETProjectsApiV2ProjectsTimeTotalRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsTimeTotalRequest) UserId(userId int32) ApiGETProjectsApiV2ProjectsTimeTotalRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2ProjectsTimeTotalRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsTimeTotalRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsTimeTotalRequest) Page(page int32) ApiGETProjectsApiV2ProjectsTimeTotalRequest {
	r.page = &page
	return r
}

func (r ApiGETProjectsApiV2ProjectsTimeTotalRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsTimeTotalExecute(r)
}

/*
 * GETProjectsApiV2ProjectsTimeTotal Get Projects Total Time
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2ProjectsTimeTotalRequest
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsTimeTotal(ctx _context.Context) ApiGETProjectsApiV2ProjectsTimeTotalRequest {
	return ApiGETProjectsApiV2ProjectsTimeTotalRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2ProjectsTimeTotalExecute(r ApiGETProjectsApiV2ProjectsTimeTotalRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2ProjectsTimeTotal")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/time/total"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2QuicksearchRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	searchTerm              *string
	dateupdated             *string
	timeout                 *int32
	projectId               *int32
	pageSize                *int32
	page                    *int32
	dayLimit                *int32
	useSmartSearch          *bool
	skipES                  *bool
	searchWithTags          *bool
	searchTeams             *bool
	searchTasks             *bool
	searchTasklists         *bool
	searchProjects          *bool
	searchPeople            *bool
	searchNotebooks         *bool
	searchMilestones        *bool
	searchMessages          *bool
	searchLinks             *bool
	searchFiles             *bool
	searchCompanies         *bool
	searchComments          *bool
	searchArchivedMessages  *bool
	searchAllProjects       *bool
	returnExtras            *bool
	matchAllTags            *bool
	includeTags             *bool
	includeCompletedItems   *bool
	includeCompanyInSearch  *bool
	includeArchivedProjects *bool
	basicSearch             *bool
	tags                    *[]string
	tagIds                  *[]int32
}

func (r ApiGETProjectsApiV2QuicksearchRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) Dateupdated(dateupdated string) ApiGETProjectsApiV2QuicksearchRequest {
	r.dateupdated = &dateupdated
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) Timeout(timeout int32) ApiGETProjectsApiV2QuicksearchRequest {
	r.timeout = &timeout
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) ProjectId(projectId int32) ApiGETProjectsApiV2QuicksearchRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) PageSize(pageSize int32) ApiGETProjectsApiV2QuicksearchRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) Page(page int32) ApiGETProjectsApiV2QuicksearchRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) DayLimit(dayLimit int32) ApiGETProjectsApiV2QuicksearchRequest {
	r.dayLimit = &dayLimit
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) UseSmartSearch(useSmartSearch bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.useSmartSearch = &useSmartSearch
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SkipES(skipES bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.skipES = &skipES
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchWithTags(searchWithTags bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchWithTags = &searchWithTags
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchTeams(searchTeams bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchTeams = &searchTeams
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchTasks(searchTasks bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchTasks = &searchTasks
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchTasklists(searchTasklists bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchTasklists = &searchTasklists
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchProjects(searchProjects bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchProjects = &searchProjects
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchPeople(searchPeople bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchPeople = &searchPeople
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchNotebooks(searchNotebooks bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchNotebooks = &searchNotebooks
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchMilestones(searchMilestones bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchMilestones = &searchMilestones
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchMessages(searchMessages bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchMessages = &searchMessages
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchLinks(searchLinks bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchLinks = &searchLinks
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchFiles(searchFiles bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchFiles = &searchFiles
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchCompanies(searchCompanies bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchCompanies = &searchCompanies
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchComments(searchComments bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchComments = &searchComments
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchArchivedMessages(searchArchivedMessages bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchArchivedMessages = &searchArchivedMessages
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) SearchAllProjects(searchAllProjects bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.searchAllProjects = &searchAllProjects
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) ReturnExtras(returnExtras bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.returnExtras = &returnExtras
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) IncludeCompletedItems(includeCompletedItems bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.includeCompletedItems = &includeCompletedItems
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) IncludeCompanyInSearch(includeCompanyInSearch bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.includeCompanyInSearch = &includeCompanyInSearch
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) BasicSearch(basicSearch bool) ApiGETProjectsApiV2QuicksearchRequest {
	r.basicSearch = &basicSearch
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) Tags(tags []string) ApiGETProjectsApiV2QuicksearchRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV2QuicksearchRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2QuicksearchRequest {
	r.tagIds = &tagIds
	return r
}

func (r ApiGETProjectsApiV2QuicksearchRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2QuicksearchExecute(r)
}

/*
 * GETProjectsApiV2Quicksearch APICall_POST_quicksearch
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2QuicksearchRequest
 */
func (a *CFPortApiService) GETProjectsApiV2Quicksearch(ctx _context.Context) ApiGETProjectsApiV2QuicksearchRequest {
	return ApiGETProjectsApiV2QuicksearchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2QuicksearchExecute(r ApiGETProjectsApiV2QuicksearchRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2Quicksearch")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/quicksearch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.dateupdated != nil {
		localVarQueryParams.Add("dateupdated", parameterToString(*r.dateupdated, ""))
	}
	if r.timeout != nil {
		localVarQueryParams.Add("timeout", parameterToString(*r.timeout, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.dayLimit != nil {
		localVarQueryParams.Add("dayLimit", parameterToString(*r.dayLimit, ""))
	}
	if r.useSmartSearch != nil {
		localVarQueryParams.Add("useSmartSearch", parameterToString(*r.useSmartSearch, ""))
	}
	if r.skipES != nil {
		localVarQueryParams.Add("skipES", parameterToString(*r.skipES, ""))
	}
	if r.searchWithTags != nil {
		localVarQueryParams.Add("searchWithTags", parameterToString(*r.searchWithTags, ""))
	}
	if r.searchTeams != nil {
		localVarQueryParams.Add("searchTeams", parameterToString(*r.searchTeams, ""))
	}
	if r.searchTasks != nil {
		localVarQueryParams.Add("searchTasks", parameterToString(*r.searchTasks, ""))
	}
	if r.searchTasklists != nil {
		localVarQueryParams.Add("searchTasklists", parameterToString(*r.searchTasklists, ""))
	}
	if r.searchProjects != nil {
		localVarQueryParams.Add("searchProjects", parameterToString(*r.searchProjects, ""))
	}
	if r.searchPeople != nil {
		localVarQueryParams.Add("searchPeople", parameterToString(*r.searchPeople, ""))
	}
	if r.searchNotebooks != nil {
		localVarQueryParams.Add("searchNotebooks", parameterToString(*r.searchNotebooks, ""))
	}
	if r.searchMilestones != nil {
		localVarQueryParams.Add("searchMilestones", parameterToString(*r.searchMilestones, ""))
	}
	if r.searchMessages != nil {
		localVarQueryParams.Add("searchMessages", parameterToString(*r.searchMessages, ""))
	}
	if r.searchLinks != nil {
		localVarQueryParams.Add("searchLinks", parameterToString(*r.searchLinks, ""))
	}
	if r.searchFiles != nil {
		localVarQueryParams.Add("searchFiles", parameterToString(*r.searchFiles, ""))
	}
	if r.searchCompanies != nil {
		localVarQueryParams.Add("searchCompanies", parameterToString(*r.searchCompanies, ""))
	}
	if r.searchComments != nil {
		localVarQueryParams.Add("searchComments", parameterToString(*r.searchComments, ""))
	}
	if r.searchArchivedMessages != nil {
		localVarQueryParams.Add("searchArchivedMessages", parameterToString(*r.searchArchivedMessages, ""))
	}
	if r.searchAllProjects != nil {
		localVarQueryParams.Add("searchAllProjects", parameterToString(*r.searchAllProjects, ""))
	}
	if r.returnExtras != nil {
		localVarQueryParams.Add("returnExtras", parameterToString(*r.returnExtras, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeCompletedItems != nil {
		localVarQueryParams.Add("includeCompletedItems", parameterToString(*r.includeCompletedItems, ""))
	}
	if r.includeCompanyInSearch != nil {
		localVarQueryParams.Add("includeCompanyInSearch", parameterToString(*r.includeCompanyInSearch, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.basicSearch != nil {
		localVarQueryParams.Add("basicSearch", parameterToString(*r.basicSearch, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2SummaryRequest struct {
	ctx                         _context.Context
	ApiService                  *CFPortApiService
	timeRangeStart              *string
	timeRangeEnd                *string
	status                      *string
	set                         *string
	projectStatus               *string
	get                         *string
	eventsRange                 *int32
	useStartDatesForTodaysTasks *bool
	unreadMessagesMineOnly      *bool
	unreadCommentsMineOnly      *bool
	onlyStarredProjects         *bool
	matchAllTags                *bool
	matchAllProjectTags         *bool
	includeArchivedProjects     *bool
	userId                      *[]int32
	timeLoggedByUserId          *[]int32
	taskAssigneeUserId          *[]int32
	projectTagIds               *[]int32
	projectOwnerIds             *[]int32
	projectIds                  *[]int32
	projectId                   *[]int32
	projectHealths              *[]int32
	projectHealth               *[]int32
	projectCompanyIds           *[]int32
	projectCategoryIds          *[]int32
	milestoneAssigneeUserId     *[]int32
	filterTagIds                *[]int32
	companyId                   *[]int32
	categoryId                  *[]int32
	assigneeUserId              *[]int32
}

func (r ApiGETProjectsApiV2SummaryRequest) TimeRangeStart(timeRangeStart string) ApiGETProjectsApiV2SummaryRequest {
	r.timeRangeStart = &timeRangeStart
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) TimeRangeEnd(timeRangeEnd string) ApiGETProjectsApiV2SummaryRequest {
	r.timeRangeEnd = &timeRangeEnd
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) Status(status string) ApiGETProjectsApiV2SummaryRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) Set(set string) ApiGETProjectsApiV2SummaryRequest {
	r.set = &set
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2SummaryRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) Get(get string) ApiGETProjectsApiV2SummaryRequest {
	r.get = &get
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) EventsRange(eventsRange int32) ApiGETProjectsApiV2SummaryRequest {
	r.eventsRange = &eventsRange
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2SummaryRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) UnreadMessagesMineOnly(unreadMessagesMineOnly bool) ApiGETProjectsApiV2SummaryRequest {
	r.unreadMessagesMineOnly = &unreadMessagesMineOnly
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) UnreadCommentsMineOnly(unreadCommentsMineOnly bool) ApiGETProjectsApiV2SummaryRequest {
	r.unreadCommentsMineOnly = &unreadCommentsMineOnly
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2SummaryRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2SummaryRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2SummaryRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2SummaryRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) UserId(userId []int32) ApiGETProjectsApiV2SummaryRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) TimeLoggedByUserId(timeLoggedByUserId []int32) ApiGETProjectsApiV2SummaryRequest {
	r.timeLoggedByUserId = &timeLoggedByUserId
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) TaskAssigneeUserId(taskAssigneeUserId []int32) ApiGETProjectsApiV2SummaryRequest {
	r.taskAssigneeUserId = &taskAssigneeUserId
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2SummaryRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2SummaryRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2SummaryRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2SummaryRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2SummaryRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2SummaryRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2SummaryRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2SummaryRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) MilestoneAssigneeUserId(milestoneAssigneeUserId []int32) ApiGETProjectsApiV2SummaryRequest {
	r.milestoneAssigneeUserId = &milestoneAssigneeUserId
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) FilterTagIds(filterTagIds []int32) ApiGETProjectsApiV2SummaryRequest {
	r.filterTagIds = &filterTagIds
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2SummaryRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) CategoryId(categoryId []int32) ApiGETProjectsApiV2SummaryRequest {
	r.categoryId = &categoryId
	return r
}
func (r ApiGETProjectsApiV2SummaryRequest) AssigneeUserId(assigneeUserId []int32) ApiGETProjectsApiV2SummaryRequest {
	r.assigneeUserId = &assigneeUserId
	return r
}

func (r ApiGETProjectsApiV2SummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2SummaryExecute(r)
}

/*
 * GETProjectsApiV2Summary APICall_GET_summary
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2SummaryRequest
 */
func (a *CFPortApiService) GETProjectsApiV2Summary(ctx _context.Context) ApiGETProjectsApiV2SummaryRequest {
	return ApiGETProjectsApiV2SummaryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2SummaryExecute(r ApiGETProjectsApiV2SummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2Summary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.timeRangeStart != nil {
		localVarQueryParams.Add("timeRangeStart", parameterToString(*r.timeRangeStart, ""))
	}
	if r.timeRangeEnd != nil {
		localVarQueryParams.Add("timeRangeEnd", parameterToString(*r.timeRangeEnd, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.set != nil {
		localVarQueryParams.Add("set", parameterToString(*r.set, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.get != nil {
		localVarQueryParams.Add("get", parameterToString(*r.get, ""))
	}
	if r.eventsRange != nil {
		localVarQueryParams.Add("eventsRange", parameterToString(*r.eventsRange, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.unreadMessagesMineOnly != nil {
		localVarQueryParams.Add("unreadMessagesMineOnly", parameterToString(*r.unreadMessagesMineOnly, ""))
	}
	if r.unreadCommentsMineOnly != nil {
		localVarQueryParams.Add("unreadCommentsMineOnly", parameterToString(*r.unreadCommentsMineOnly, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.timeLoggedByUserId != nil {
		localVarQueryParams.Add("timeLoggedByUserId", parameterToString(*r.timeLoggedByUserId, "csv"))
	}
	if r.taskAssigneeUserId != nil {
		localVarQueryParams.Add("taskAssigneeUserId", parameterToString(*r.taskAssigneeUserId, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.milestoneAssigneeUserId != nil {
		localVarQueryParams.Add("milestoneAssigneeUserId", parameterToString(*r.milestoneAssigneeUserId, "csv"))
	}
	if r.filterTagIds != nil {
		localVarQueryParams.Add("filterTagIds", parameterToString(*r.filterTagIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, "csv"))
	}
	if r.assigneeUserId != nil {
		localVarQueryParams.Add("assigneeUserId", parameterToString(*r.assigneeUserId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasklistsObjectIdProjectRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	userId                  *int32
	objectId                *int32
	showDeleted             *bool
	includeTags             *bool
	includePeople           *bool
	getTruePermissions      *bool
	getPermissions          *bool
	getNotificationSettings *bool
	getEmoji                *bool
	getEmailAddress         *bool
	getDateInfo             *bool
	getActivePages          *bool
	formatMarkdown          *bool
}

func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) UserId(userId int32) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) ObjectId(objectId int32) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.objectId = &objectId
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) GetEmailAddress(getEmailAddress bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.getEmailAddress = &getEmailAddress
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) GetDateInfo(getDateInfo bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.getDateInfo = &getDateInfo
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}

func (r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasklistsObjectIdProjectExecute(r)
}

/*
 * GETProjectsApiV2TasklistsObjectIdProject Get the project for the tasklist
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasklistsObjectIdProjectRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TasklistsObjectIdProject(ctx _context.Context) ApiGETProjectsApiV2TasklistsObjectIdProjectRequest {
	return ApiGETProjectsApiV2TasklistsObjectIdProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasklistsObjectIdProjectExecute(r ApiGETProjectsApiV2TasklistsObjectIdProjectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TasklistsObjectIdProject")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasklists/:objectId/project"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.objectId != nil {
		localVarQueryParams.Add("objectId", parameterToString(*r.objectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.getEmailAddress != nil {
		localVarQueryParams.Add("getEmailAddress", parameterToString(*r.getEmailAddress, ""))
	}
	if r.getDateInfo != nil {
		localVarQueryParams.Add("getDateInfo", parameterToString(*r.getDateInfo, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest struct {
	ctx                          _context.Context
	ApiService                   *CFPortApiService
	updatedAfterDate             *string
	today                        *string
	startDate                    *string
	sortOrder                    *string
	sort                         *string
	reportFormat                 *string
	projectStatus                *string
	priority                     *string
	include                      *string
	filter                       *string
	endDate                      *string
	deletedAfterDate             *string
	dateCode                     *string
	dataSet                      *string
	createdFilter                *string
	createdDateCode              *string
	createdBeforeDate            *string
	createdAfterDate             *string
	completedBeforeDate          *string
	completedAfterDate           *string
	callback                     *string
	taskId                       *int32
	parentTaskId                 *int32
	pageSize                     *int32
	page                         *int32
	offsetCount                  *int32
	includeTaskId                *int32
	useStartDatesForTodaysTasks  *bool
	useAllProjects               *bool
	starredProjectsOnly          *bool
	showDeleted                  *bool
	showCompletedLists           *bool
	onlyUntaggedTasks            *bool
	onlyTasksWithUnreadComments  *bool
	onlyTasksWithTickets         *bool
	onlyTasksWithEstimatedTime   *bool
	onlyStarredProjects          *bool
	nestSubTasks                 *bool
	matchAllTags                 *bool
	matchAllProjectTags          *bool
	matchAllProjectTagIds        *bool
	matchAllExcludedTags         *bool
	isReportDownload             *bool
	includeUntaggedTasks         *bool
	includeToday                 *bool
	includeTeamUserIds           *bool
	includeTasksWithoutDueDates  *bool
	includeTasksWithCards        *bool
	includeTasksFromDeletedLists *bool
	includeReminders             *bool
	includeLoggedTime            *bool
	includeCustomFields          *bool
	includeCrmDealIds            *bool
	includeCompletedTasks        *bool
	includeCompletedSubtasks     *bool
	includeCompanyUserIds        *bool
	includeBlockedTasks          *bool
	includeAssigneeTeams         *bool
	includeAssigneeCompanies     *bool
	includeArchivedProjects      *bool
	ignoreStartDates             *bool
	getSubTasks                  *bool
	getFiles                     *bool
	allowTemplateTasks           *bool
	tasklistId                   *[]int32
	taskIdList                   *[]int32
	tags                         *[]string
	tagIds                       *[]int32
	skipCrmDealIds               *[]int32
	responsiblePartyIds          *[]int32
	projectTagIds                *[]int32
	projectOwnerIds              *[]int32
	projectIds                   *[]int32
	projectId                    *[]int32
	projectHealths               *[]int32
	projectHealth                *[]int32
	projectCompanyIds            *[]int32
	projectCategoryIds           *[]int32
	projectCategoryId            *[]int32
	followerIds                  *[]int32
	filterText                   *[]string
	filterBoardColumnIds         *[]int32
	excludeTagIds                *[]int32
	crmDealIds                   *[]int32
	creatorIds                   *[]int32
	companyId                    *[]int32
	assigneeTeamIds              *[]int32
	assigneeCompanyIds           *[]int32
}

func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) Today(today string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) StartDate(startDate string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) Sort(sort string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) Priority(priority string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) Include(include string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) Filter(filter string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) EndDate(endDate string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) DeletedAfterDate(deletedAfterDate string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.deletedAfterDate = &deletedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) DateCode(dateCode string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.dateCode = &dateCode
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) DataSet(dataSet string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) CreatedFilter(createdFilter string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.createdFilter = &createdFilter
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) CreatedDateCode(createdDateCode string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.createdDateCode = &createdDateCode
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) Callback(callback string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) TaskId(taskId int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) Page(page int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) OffsetCount(offsetCount int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.offsetCount = &offsetCount
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) OnlyTasksWithUnreadComments(onlyTasksWithUnreadComments bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.onlyTasksWithUnreadComments = &onlyTasksWithUnreadComments
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) OnlyTasksWithEstimatedTime(onlyTasksWithEstimatedTime bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.onlyTasksWithEstimatedTime = &onlyTasksWithEstimatedTime
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeTasksWithCards(includeTasksWithCards bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeTasksWithCards = &includeTasksWithCards
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeBlockedTasks(includeBlockedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeBlockedTasks = &includeBlockedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) GetFiles(getFiles bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) TasklistId(tasklistId []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) TaskIdList(taskIdList []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.taskIdList = &taskIdList
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) Tags(tags []string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) SkipCrmDealIds(skipCrmDealIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.skipCrmDealIds = &skipCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) FilterText(filterText []string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) FilterBoardColumnIds(filterBoardColumnIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.filterBoardColumnIds = &filterBoardColumnIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) CrmDealIds(crmDealIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.crmDealIds = &crmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasklistsTasklistIdTaskidsExecute(r)
}

/*
 * GETProjectsApiV2TasklistsTasklistIdTaskids Get Tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TasklistsTasklistIdTaskids(ctx _context.Context) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest {
	return ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasklistsTasklistIdTaskidsExecute(r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TasklistsTasklistIdTaskids")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasklists/:tasklistId/taskids"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.deletedAfterDate != nil {
		localVarQueryParams.Add("deletedAfterDate", parameterToString(*r.deletedAfterDate, ""))
	}
	if r.dateCode != nil {
		localVarQueryParams.Add("dateCode", parameterToString(*r.dateCode, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdFilter != nil {
		localVarQueryParams.Add("createdFilter", parameterToString(*r.createdFilter, ""))
	}
	if r.createdDateCode != nil {
		localVarQueryParams.Add("createdDateCode", parameterToString(*r.createdDateCode, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.offsetCount != nil {
		localVarQueryParams.Add("offsetCount", parameterToString(*r.offsetCount, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyTasksWithUnreadComments != nil {
		localVarQueryParams.Add("onlyTasksWithUnreadComments", parameterToString(*r.onlyTasksWithUnreadComments, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyTasksWithEstimatedTime != nil {
		localVarQueryParams.Add("onlyTasksWithEstimatedTime", parameterToString(*r.onlyTasksWithEstimatedTime, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksWithCards != nil {
		localVarQueryParams.Add("includeTasksWithCards", parameterToString(*r.includeTasksWithCards, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeBlockedTasks != nil {
		localVarQueryParams.Add("includeBlockedTasks", parameterToString(*r.includeBlockedTasks, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, "csv"))
	}
	if r.taskIdList != nil {
		localVarQueryParams.Add("taskIdList", parameterToString(*r.taskIdList, "csv"))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.skipCrmDealIds != nil {
		localVarQueryParams.Add("skipCrmDealIds", parameterToString(*r.skipCrmDealIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("follower-ids", parameterToString(*r.followerIds, "csv"))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, "csv"))
	}
	if r.filterBoardColumnIds != nil {
		localVarQueryParams.Add("filterBoardColumnIds", parameterToString(*r.filterBoardColumnIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.crmDealIds != nil {
		localVarQueryParams.Add("crmDealIds", parameterToString(*r.crmDealIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest struct {
	ctx                          _context.Context
	ApiService                   *CFPortApiService
	updatedAfterDate             *string
	today                        *string
	startDate                    *string
	sortOrder                    *string
	sort                         *string
	reportFormat                 *string
	projectStatus                *string
	priority                     *string
	include                      *string
	filter                       *string
	endDate                      *string
	deletedAfterDate             *string
	dateCode                     *string
	dataSet                      *string
	createdFilter                *string
	createdDateCode              *string
	createdBeforeDate            *string
	createdAfterDate             *string
	completedBeforeDate          *string
	completedAfterDate           *string
	callback                     *string
	taskId                       *int32
	parentTaskId                 *int32
	pageSize                     *int32
	page                         *int32
	offsetCount                  *int32
	includeTaskId                *int32
	useStartDatesForTodaysTasks  *bool
	useAllProjects               *bool
	starredProjectsOnly          *bool
	showDeleted                  *bool
	showCompletedLists           *bool
	onlyUntaggedTasks            *bool
	onlyTasksWithUnreadComments  *bool
	onlyTasksWithTickets         *bool
	onlyTasksWithEstimatedTime   *bool
	onlyStarredProjects          *bool
	nestSubTasks                 *bool
	matchAllTags                 *bool
	matchAllProjectTags          *bool
	matchAllProjectTagIds        *bool
	matchAllExcludedTags         *bool
	isReportDownload             *bool
	includeUntaggedTasks         *bool
	includeToday                 *bool
	includeTeamUserIds           *bool
	includeTasksWithoutDueDates  *bool
	includeTasksWithCards        *bool
	includeTasksFromDeletedLists *bool
	includeReminders             *bool
	includeLoggedTime            *bool
	includeCustomFields          *bool
	includeCrmDealIds            *bool
	includeCompletedTasks        *bool
	includeCompletedSubtasks     *bool
	includeCompanyUserIds        *bool
	includeBlockedTasks          *bool
	includeAssigneeTeams         *bool
	includeAssigneeCompanies     *bool
	includeArchivedProjects      *bool
	ignoreStartDates             *bool
	getSubTasks                  *bool
	getFiles                     *bool
	allowTemplateTasks           *bool
	tasklistId                   *[]int32
	taskIdList                   *[]int32
	tags                         *[]string
	tagIds                       *[]int32
	skipCrmDealIds               *[]int32
	responsiblePartyIds          *[]int32
	projectTagIds                *[]int32
	projectOwnerIds              *[]int32
	projectIds                   *[]int32
	projectId                    *[]int32
	projectHealths               *[]int32
	projectHealth                *[]int32
	projectCompanyIds            *[]int32
	projectCategoryIds           *[]int32
	projectCategoryId            *[]int32
	followerIds                  *[]int32
	filterText                   *[]string
	filterBoardColumnIds         *[]int32
	excludeTagIds                *[]int32
	crmDealIds                   *[]int32
	creatorIds                   *[]int32
	companyId                    *[]int32
	assigneeTeamIds              *[]int32
	assigneeCompanyIds           *[]int32
}

func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) Today(today string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) StartDate(startDate string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) Sort(sort string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) Priority(priority string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) Include(include string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) Filter(filter string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) EndDate(endDate string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) DeletedAfterDate(deletedAfterDate string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.deletedAfterDate = &deletedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) DateCode(dateCode string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.dateCode = &dateCode
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) DataSet(dataSet string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) CreatedFilter(createdFilter string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.createdFilter = &createdFilter
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) CreatedDateCode(createdDateCode string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.createdDateCode = &createdDateCode
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) Callback(callback string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) TaskId(taskId int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) Page(page int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) OffsetCount(offsetCount int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.offsetCount = &offsetCount
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) OnlyTasksWithUnreadComments(onlyTasksWithUnreadComments bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.onlyTasksWithUnreadComments = &onlyTasksWithUnreadComments
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) OnlyTasksWithEstimatedTime(onlyTasksWithEstimatedTime bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.onlyTasksWithEstimatedTime = &onlyTasksWithEstimatedTime
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeTasksWithCards(includeTasksWithCards bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeTasksWithCards = &includeTasksWithCards
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeBlockedTasks(includeBlockedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeBlockedTasks = &includeBlockedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) GetFiles(getFiles bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) TasklistId(tasklistId []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) TaskIdList(taskIdList []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.taskIdList = &taskIdList
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) Tags(tags []string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) SkipCrmDealIds(skipCrmDealIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.skipCrmDealIds = &skipCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) FilterText(filterText []string) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) FilterBoardColumnIds(filterBoardColumnIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.filterBoardColumnIds = &filterBoardColumnIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) CrmDealIds(crmDealIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.crmDealIds = &crmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasklistsTasklistIdTasksExecute(r)
}

/*
 * GETProjectsApiV2TasklistsTasklistIdTasks Get Tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TasklistsTasklistIdTasks(ctx _context.Context) ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest {
	return ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasklistsTasklistIdTasksExecute(r ApiGETProjectsApiV2TasklistsTasklistIdTasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TasklistsTasklistIdTasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasklists/:tasklistId/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.deletedAfterDate != nil {
		localVarQueryParams.Add("deletedAfterDate", parameterToString(*r.deletedAfterDate, ""))
	}
	if r.dateCode != nil {
		localVarQueryParams.Add("dateCode", parameterToString(*r.dateCode, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdFilter != nil {
		localVarQueryParams.Add("createdFilter", parameterToString(*r.createdFilter, ""))
	}
	if r.createdDateCode != nil {
		localVarQueryParams.Add("createdDateCode", parameterToString(*r.createdDateCode, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.offsetCount != nil {
		localVarQueryParams.Add("offsetCount", parameterToString(*r.offsetCount, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyTasksWithUnreadComments != nil {
		localVarQueryParams.Add("onlyTasksWithUnreadComments", parameterToString(*r.onlyTasksWithUnreadComments, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyTasksWithEstimatedTime != nil {
		localVarQueryParams.Add("onlyTasksWithEstimatedTime", parameterToString(*r.onlyTasksWithEstimatedTime, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksWithCards != nil {
		localVarQueryParams.Add("includeTasksWithCards", parameterToString(*r.includeTasksWithCards, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeBlockedTasks != nil {
		localVarQueryParams.Add("includeBlockedTasks", parameterToString(*r.includeBlockedTasks, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, "csv"))
	}
	if r.taskIdList != nil {
		localVarQueryParams.Add("taskIdList", parameterToString(*r.taskIdList, "csv"))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.skipCrmDealIds != nil {
		localVarQueryParams.Add("skipCrmDealIds", parameterToString(*r.skipCrmDealIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("follower-ids", parameterToString(*r.followerIds, "csv"))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, "csv"))
	}
	if r.filterBoardColumnIds != nil {
		localVarQueryParams.Add("filterBoardColumnIds", parameterToString(*r.filterBoardColumnIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.crmDealIds != nil {
		localVarQueryParams.Add("crmDealIds", parameterToString(*r.crmDealIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasksRequest struct {
	ctx                          _context.Context
	ApiService                   *CFPortApiService
	updatedAfterDate             *string
	today                        *string
	startDate                    *string
	sortOrder                    *string
	sort                         *string
	reportFormat                 *string
	projectStatus                *string
	priority                     *string
	include                      *string
	filter                       *string
	endDate                      *string
	deletedAfterDate             *string
	dateCode                     *string
	dataSet                      *string
	createdFilter                *string
	createdDateCode              *string
	createdBeforeDate            *string
	createdAfterDate             *string
	completedBeforeDate          *string
	completedAfterDate           *string
	callback                     *string
	taskId                       *int32
	parentTaskId                 *int32
	pageSize                     *int32
	page                         *int32
	offsetCount                  *int32
	includeTaskId                *int32
	useStartDatesForTodaysTasks  *bool
	useAllProjects               *bool
	starredProjectsOnly          *bool
	showDeleted                  *bool
	showCompletedLists           *bool
	onlyUntaggedTasks            *bool
	onlyTasksWithUnreadComments  *bool
	onlyTasksWithTickets         *bool
	onlyTasksWithEstimatedTime   *bool
	onlyStarredProjects          *bool
	nestSubTasks                 *bool
	matchAllTags                 *bool
	matchAllProjectTags          *bool
	matchAllProjectTagIds        *bool
	matchAllExcludedTags         *bool
	isReportDownload             *bool
	includeUntaggedTasks         *bool
	includeToday                 *bool
	includeTeamUserIds           *bool
	includeTasksWithoutDueDates  *bool
	includeTasksWithCards        *bool
	includeTasksFromDeletedLists *bool
	includeReminders             *bool
	includeLoggedTime            *bool
	includeCustomFields          *bool
	includeCrmDealIds            *bool
	includeCompletedTasks        *bool
	includeCompletedSubtasks     *bool
	includeCompanyUserIds        *bool
	includeBlockedTasks          *bool
	includeAssigneeTeams         *bool
	includeAssigneeCompanies     *bool
	includeArchivedProjects      *bool
	ignoreStartDates             *bool
	getSubTasks                  *bool
	getFiles                     *bool
	allowTemplateTasks           *bool
	tasklistId                   *[]int32
	taskIdList                   *[]int32
	tags                         *[]string
	tagIds                       *[]int32
	skipCrmDealIds               *[]int32
	responsiblePartyIds          *[]int32
	projectTagIds                *[]int32
	projectOwnerIds              *[]int32
	projectIds                   *[]int32
	projectId                    *[]int32
	projectHealths               *[]int32
	projectHealth                *[]int32
	projectCompanyIds            *[]int32
	projectCategoryIds           *[]int32
	projectCategoryId            *[]int32
	followerIds                  *[]int32
	filterText                   *[]string
	filterBoardColumnIds         *[]int32
	excludeTagIds                *[]int32
	crmDealIds                   *[]int32
	creatorIds                   *[]int32
	companyId                    *[]int32
	assigneeTeamIds              *[]int32
	assigneeCompanyIds           *[]int32
}

func (r ApiGETProjectsApiV2TasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2TasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) Today(today string) ApiGETProjectsApiV2TasksRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) StartDate(startDate string) ApiGETProjectsApiV2TasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TasksRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) Sort(sort string) ApiGETProjectsApiV2TasksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV2TasksRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2TasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) Priority(priority string) ApiGETProjectsApiV2TasksRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) Include(include string) ApiGETProjectsApiV2TasksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) Filter(filter string) ApiGETProjectsApiV2TasksRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) EndDate(endDate string) ApiGETProjectsApiV2TasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) DeletedAfterDate(deletedAfterDate string) ApiGETProjectsApiV2TasksRequest {
	r.deletedAfterDate = &deletedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) DateCode(dateCode string) ApiGETProjectsApiV2TasksRequest {
	r.dateCode = &dateCode
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) DataSet(dataSet string) ApiGETProjectsApiV2TasksRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) CreatedFilter(createdFilter string) ApiGETProjectsApiV2TasksRequest {
	r.createdFilter = &createdFilter
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) CreatedDateCode(createdDateCode string) ApiGETProjectsApiV2TasksRequest {
	r.createdDateCode = &createdDateCode
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV2TasksRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2TasksRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV2TasksRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV2TasksRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) Callback(callback string) ApiGETProjectsApiV2TasksRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) TaskId(taskId int32) ApiGETProjectsApiV2TasksRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV2TasksRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) Page(page int32) ApiGETProjectsApiV2TasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) OffsetCount(offsetCount int32) ApiGETProjectsApiV2TasksRequest {
	r.offsetCount = &offsetCount
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2TasksRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2TasksRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV2TasksRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV2TasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TasksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2TasksRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV2TasksRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) OnlyTasksWithUnreadComments(onlyTasksWithUnreadComments bool) ApiGETProjectsApiV2TasksRequest {
	r.onlyTasksWithUnreadComments = &onlyTasksWithUnreadComments
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV2TasksRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) OnlyTasksWithEstimatedTime(onlyTasksWithEstimatedTime bool) ApiGETProjectsApiV2TasksRequest {
	r.onlyTasksWithEstimatedTime = &onlyTasksWithEstimatedTime
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2TasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV2TasksRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2TasksRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2TasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2TasksRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV2TasksRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV2TasksRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2TasksRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2TasksRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV2TasksRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2TasksRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeTasksWithCards(includeTasksWithCards bool) ApiGETProjectsApiV2TasksRequest {
	r.includeTasksWithCards = &includeTasksWithCards
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2TasksRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV2TasksRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV2TasksRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2TasksRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2TasksRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2TasksRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2TasksRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV2TasksRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeBlockedTasks(includeBlockedTasks bool) ApiGETProjectsApiV2TasksRequest {
	r.includeBlockedTasks = &includeBlockedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV2TasksRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV2TasksRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2TasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2TasksRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2TasksRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) GetFiles(getFiles bool) ApiGETProjectsApiV2TasksRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV2TasksRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) TasklistId(tasklistId []int32) ApiGETProjectsApiV2TasksRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) TaskIdList(taskIdList []int32) ApiGETProjectsApiV2TasksRequest {
	r.taskIdList = &taskIdList
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) Tags(tags []string) ApiGETProjectsApiV2TasksRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) SkipCrmDealIds(skipCrmDealIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.skipCrmDealIds = &skipCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2TasksRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2TasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2TasksRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2TasksRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) FilterText(filterText []string) ApiGETProjectsApiV2TasksRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) FilterBoardColumnIds(filterBoardColumnIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.filterBoardColumnIds = &filterBoardColumnIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) CrmDealIds(crmDealIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.crmDealIds = &crmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2TasksRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV2TasksRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV2TasksRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV2TasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasksExecute(r)
}

/*
 * GETProjectsApiV2Tasks Get Tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV2Tasks(ctx _context.Context) ApiGETProjectsApiV2TasksRequest {
	return ApiGETProjectsApiV2TasksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasksExecute(r ApiGETProjectsApiV2TasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2Tasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.deletedAfterDate != nil {
		localVarQueryParams.Add("deletedAfterDate", parameterToString(*r.deletedAfterDate, ""))
	}
	if r.dateCode != nil {
		localVarQueryParams.Add("dateCode", parameterToString(*r.dateCode, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdFilter != nil {
		localVarQueryParams.Add("createdFilter", parameterToString(*r.createdFilter, ""))
	}
	if r.createdDateCode != nil {
		localVarQueryParams.Add("createdDateCode", parameterToString(*r.createdDateCode, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.offsetCount != nil {
		localVarQueryParams.Add("offsetCount", parameterToString(*r.offsetCount, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyTasksWithUnreadComments != nil {
		localVarQueryParams.Add("onlyTasksWithUnreadComments", parameterToString(*r.onlyTasksWithUnreadComments, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyTasksWithEstimatedTime != nil {
		localVarQueryParams.Add("onlyTasksWithEstimatedTime", parameterToString(*r.onlyTasksWithEstimatedTime, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksWithCards != nil {
		localVarQueryParams.Add("includeTasksWithCards", parameterToString(*r.includeTasksWithCards, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeBlockedTasks != nil {
		localVarQueryParams.Add("includeBlockedTasks", parameterToString(*r.includeBlockedTasks, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, "csv"))
	}
	if r.taskIdList != nil {
		localVarQueryParams.Add("taskIdList", parameterToString(*r.taskIdList, "csv"))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.skipCrmDealIds != nil {
		localVarQueryParams.Add("skipCrmDealIds", parameterToString(*r.skipCrmDealIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("follower-ids", parameterToString(*r.followerIds, "csv"))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, "csv"))
	}
	if r.filterBoardColumnIds != nil {
		localVarQueryParams.Add("filterBoardColumnIds", parameterToString(*r.filterBoardColumnIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.crmDealIds != nil {
		localVarQueryParams.Add("crmDealIds", parameterToString(*r.crmDealIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest struct {
	ctx                 _context.Context
	ApiService          *CFPortApiService
	projectId           *int32
	nextPageToken       *int32
	dependentTaskId     *int32
	onlyDependencies    *bool
	onlyBasicFields     *bool
	onlyActionable      *bool
	includeDependencies *bool
	getRecursively      *bool
}

func (r ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest) ProjectId(projectId int32) ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest) NextPageToken(nextPageToken int32) ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest {
	r.nextPageToken = &nextPageToken
	return r
}
func (r ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest) DependentTaskId(dependentTaskId int32) ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest {
	r.dependentTaskId = &dependentTaskId
	return r
}
func (r ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest) OnlyDependencies(onlyDependencies bool) ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest {
	r.onlyDependencies = &onlyDependencies
	return r
}
func (r ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest) OnlyBasicFields(onlyBasicFields bool) ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest {
	r.onlyBasicFields = &onlyBasicFields
	return r
}
func (r ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest) OnlyActionable(onlyActionable bool) ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest {
	r.onlyActionable = &onlyActionable
	return r
}
func (r ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest) IncludeDependencies(includeDependencies bool) ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest {
	r.includeDependencies = &includeDependencies
	return r
}
func (r ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest) GetRecursively(getRecursively bool) ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest {
	r.getRecursively = &getRecursively
	return r
}

func (r ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasksDependentTaskIdPredecessorsExecute(r)
}

/*
 * GETProjectsApiV2TasksDependentTaskIdPredecessors Get Predecessor
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TasksDependentTaskIdPredecessors(ctx _context.Context) ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest {
	return ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasksDependentTaskIdPredecessorsExecute(r ApiGETProjectsApiV2TasksDependentTaskIdPredecessorsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TasksDependentTaskIdPredecessors")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasks/:dependentTaskId/predecessors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.nextPageToken != nil {
		localVarQueryParams.Add("nextPageToken", parameterToString(*r.nextPageToken, ""))
	}
	if r.dependentTaskId != nil {
		localVarQueryParams.Add("dependentTaskId", parameterToString(*r.dependentTaskId, ""))
	}
	if r.onlyDependencies != nil {
		localVarQueryParams.Add("onlyDependencies", parameterToString(*r.onlyDependencies, ""))
	}
	if r.onlyBasicFields != nil {
		localVarQueryParams.Add("onlyBasicFields", parameterToString(*r.onlyBasicFields, ""))
	}
	if r.onlyActionable != nil {
		localVarQueryParams.Add("onlyActionable", parameterToString(*r.onlyActionable, ""))
	}
	if r.includeDependencies != nil {
		localVarQueryParams.Add("includeDependencies", parameterToString(*r.includeDependencies, ""))
	}
	if r.getRecursively != nil {
		localVarQueryParams.Add("getRecursively", parameterToString(*r.getRecursively, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasksObjectIdProjectRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	userId                  *int32
	objectId                *int32
	showDeleted             *bool
	includeTags             *bool
	includePeople           *bool
	getTruePermissions      *bool
	getPermissions          *bool
	getNotificationSettings *bool
	getEmoji                *bool
	getEmailAddress         *bool
	getDateInfo             *bool
	getActivePages          *bool
	formatMarkdown          *bool
}

func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) UserId(userId int32) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) ObjectId(objectId int32) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.objectId = &objectId
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) IncludePeople(includePeople bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.includePeople = &includePeople
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) GetTruePermissions(getTruePermissions bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.getTruePermissions = &getTruePermissions
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) GetPermissions(getPermissions bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.getPermissions = &getPermissions
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) GetNotificationSettings(getNotificationSettings bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.getNotificationSettings = &getNotificationSettings
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) GetEmailAddress(getEmailAddress bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.getEmailAddress = &getEmailAddress
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) GetDateInfo(getDateInfo bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.getDateInfo = &getDateInfo
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) GetActivePages(getActivePages bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.getActivePages = &getActivePages
	return r
}
func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) FormatMarkdown(formatMarkdown bool) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	r.formatMarkdown = &formatMarkdown
	return r
}

func (r ApiGETProjectsApiV2TasksObjectIdProjectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasksObjectIdProjectExecute(r)
}

/*
 * GETProjectsApiV2TasksObjectIdProject Get the project for the task
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasksObjectIdProjectRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TasksObjectIdProject(ctx _context.Context) ApiGETProjectsApiV2TasksObjectIdProjectRequest {
	return ApiGETProjectsApiV2TasksObjectIdProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasksObjectIdProjectExecute(r ApiGETProjectsApiV2TasksObjectIdProjectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TasksObjectIdProject")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasks/:objectId/project"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.objectId != nil {
		localVarQueryParams.Add("objectId", parameterToString(*r.objectId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePeople != nil {
		localVarQueryParams.Add("includePeople", parameterToString(*r.includePeople, ""))
	}
	if r.getTruePermissions != nil {
		localVarQueryParams.Add("getTruePermissions", parameterToString(*r.getTruePermissions, ""))
	}
	if r.getPermissions != nil {
		localVarQueryParams.Add("getPermissions", parameterToString(*r.getPermissions, ""))
	}
	if r.getNotificationSettings != nil {
		localVarQueryParams.Add("getNotificationSettings", parameterToString(*r.getNotificationSettings, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.getEmailAddress != nil {
		localVarQueryParams.Add("getEmailAddress", parameterToString(*r.getEmailAddress, ""))
	}
	if r.getDateInfo != nil {
		localVarQueryParams.Add("getDateInfo", parameterToString(*r.getDateInfo, ""))
	}
	if r.getActivePages != nil {
		localVarQueryParams.Add("getActivePages", parameterToString(*r.getActivePages, ""))
	}
	if r.formatMarkdown != nil {
		localVarQueryParams.Add("formatMarkdown", parameterToString(*r.formatMarkdown, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasksTaskIdRequest struct {
	ctx                          _context.Context
	ApiService                   *CFPortApiService
	updatedAfterDate             *string
	today                        *string
	startDate                    *string
	sortOrder                    *string
	sort                         *string
	reportFormat                 *string
	projectStatus                *string
	priority                     *string
	include                      *string
	filter                       *string
	endDate                      *string
	deletedAfterDate             *string
	dateCode                     *string
	dataSet                      *string
	createdFilter                *string
	createdDateCode              *string
	createdBeforeDate            *string
	createdAfterDate             *string
	completedBeforeDate          *string
	completedAfterDate           *string
	callback                     *string
	taskId                       *int32
	parentTaskId                 *int32
	pageSize                     *int32
	page                         *int32
	offsetCount                  *int32
	includeTaskId                *int32
	useStartDatesForTodaysTasks  *bool
	useAllProjects               *bool
	starredProjectsOnly          *bool
	showDeleted                  *bool
	showCompletedLists           *bool
	onlyUntaggedTasks            *bool
	onlyTasksWithUnreadComments  *bool
	onlyTasksWithTickets         *bool
	onlyTasksWithEstimatedTime   *bool
	onlyStarredProjects          *bool
	nestSubTasks                 *bool
	matchAllTags                 *bool
	matchAllProjectTags          *bool
	matchAllProjectTagIds        *bool
	matchAllExcludedTags         *bool
	isReportDownload             *bool
	includeUntaggedTasks         *bool
	includeToday                 *bool
	includeTeamUserIds           *bool
	includeTasksWithoutDueDates  *bool
	includeTasksWithCards        *bool
	includeTasksFromDeletedLists *bool
	includeReminders             *bool
	includeLoggedTime            *bool
	includeCustomFields          *bool
	includeCrmDealIds            *bool
	includeCompletedTasks        *bool
	includeCompletedSubtasks     *bool
	includeCompanyUserIds        *bool
	includeBlockedTasks          *bool
	includeAssigneeTeams         *bool
	includeAssigneeCompanies     *bool
	includeArchivedProjects      *bool
	ignoreStartDates             *bool
	getSubTasks                  *bool
	getFiles                     *bool
	allowTemplateTasks           *bool
	tasklistId                   *[]int32
	taskIdList                   *[]int32
	tags                         *[]string
	tagIds                       *[]int32
	skipCrmDealIds               *[]int32
	responsiblePartyIds          *[]int32
	projectTagIds                *[]int32
	projectOwnerIds              *[]int32
	projectIds                   *[]int32
	projectId                    *[]int32
	projectHealths               *[]int32
	projectHealth                *[]int32
	projectCompanyIds            *[]int32
	projectCategoryIds           *[]int32
	projectCategoryId            *[]int32
	followerIds                  *[]int32
	filterText                   *[]string
	filterBoardColumnIds         *[]int32
	excludeTagIds                *[]int32
	crmDealIds                   *[]int32
	creatorIds                   *[]int32
	companyId                    *[]int32
	assigneeTeamIds              *[]int32
	assigneeCompanyIds           *[]int32
}

func (r ApiGETProjectsApiV2TasksTaskIdRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) Today(today string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) StartDate(startDate string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) Sort(sort string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) Priority(priority string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) Include(include string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) Filter(filter string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) EndDate(endDate string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) DeletedAfterDate(deletedAfterDate string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.deletedAfterDate = &deletedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) DateCode(dateCode string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.dateCode = &dateCode
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) DataSet(dataSet string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) CreatedFilter(createdFilter string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.createdFilter = &createdFilter
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) CreatedDateCode(createdDateCode string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.createdDateCode = &createdDateCode
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) Callback(callback string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) TaskId(taskId int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) Page(page int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) OffsetCount(offsetCount int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.offsetCount = &offsetCount
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) OnlyTasksWithUnreadComments(onlyTasksWithUnreadComments bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.onlyTasksWithUnreadComments = &onlyTasksWithUnreadComments
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) OnlyTasksWithEstimatedTime(onlyTasksWithEstimatedTime bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.onlyTasksWithEstimatedTime = &onlyTasksWithEstimatedTime
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeTasksWithCards(includeTasksWithCards bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeTasksWithCards = &includeTasksWithCards
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeBlockedTasks(includeBlockedTasks bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeBlockedTasks = &includeBlockedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) GetFiles(getFiles bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) TasklistId(tasklistId []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) TaskIdList(taskIdList []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.taskIdList = &taskIdList
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) Tags(tags []string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) SkipCrmDealIds(skipCrmDealIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.skipCrmDealIds = &skipCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) FilterText(filterText []string) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) FilterBoardColumnIds(filterBoardColumnIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.filterBoardColumnIds = &filterBoardColumnIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) CrmDealIds(crmDealIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.crmDealIds = &crmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV2TasksTaskIdRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV2TasksTaskIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasksTaskIdExecute(r)
}

/*
 * GETProjectsApiV2TasksTaskId Get Tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasksTaskIdRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TasksTaskId(ctx _context.Context) ApiGETProjectsApiV2TasksTaskIdRequest {
	return ApiGETProjectsApiV2TasksTaskIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasksTaskIdExecute(r ApiGETProjectsApiV2TasksTaskIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TasksTaskId")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasks/:taskId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.deletedAfterDate != nil {
		localVarQueryParams.Add("deletedAfterDate", parameterToString(*r.deletedAfterDate, ""))
	}
	if r.dateCode != nil {
		localVarQueryParams.Add("dateCode", parameterToString(*r.dateCode, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdFilter != nil {
		localVarQueryParams.Add("createdFilter", parameterToString(*r.createdFilter, ""))
	}
	if r.createdDateCode != nil {
		localVarQueryParams.Add("createdDateCode", parameterToString(*r.createdDateCode, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.offsetCount != nil {
		localVarQueryParams.Add("offsetCount", parameterToString(*r.offsetCount, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyTasksWithUnreadComments != nil {
		localVarQueryParams.Add("onlyTasksWithUnreadComments", parameterToString(*r.onlyTasksWithUnreadComments, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyTasksWithEstimatedTime != nil {
		localVarQueryParams.Add("onlyTasksWithEstimatedTime", parameterToString(*r.onlyTasksWithEstimatedTime, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksWithCards != nil {
		localVarQueryParams.Add("includeTasksWithCards", parameterToString(*r.includeTasksWithCards, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeBlockedTasks != nil {
		localVarQueryParams.Add("includeBlockedTasks", parameterToString(*r.includeBlockedTasks, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, "csv"))
	}
	if r.taskIdList != nil {
		localVarQueryParams.Add("taskIdList", parameterToString(*r.taskIdList, "csv"))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.skipCrmDealIds != nil {
		localVarQueryParams.Add("skipCrmDealIds", parameterToString(*r.skipCrmDealIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("follower-ids", parameterToString(*r.followerIds, "csv"))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, "csv"))
	}
	if r.filterBoardColumnIds != nil {
		localVarQueryParams.Add("filterBoardColumnIds", parameterToString(*r.filterBoardColumnIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.crmDealIds != nil {
		localVarQueryParams.Add("crmDealIds", parameterToString(*r.crmDealIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasksTaskIdEstimatedtimeRequest struct {
	ctx        _context.Context
	ApiService *CFPortApiService
	taskID     *int32
}

func (r ApiGETProjectsApiV2TasksTaskIdEstimatedtimeRequest) TaskID(taskID int32) ApiGETProjectsApiV2TasksTaskIdEstimatedtimeRequest {
	r.taskID = &taskID
	return r
}

func (r ApiGETProjectsApiV2TasksTaskIdEstimatedtimeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasksTaskIdEstimatedtimeExecute(r)
}

/*
 * GETProjectsApiV2TasksTaskIdEstimatedtime Will return the total for all sub-tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasksTaskIdEstimatedtimeRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TasksTaskIdEstimatedtime(ctx _context.Context) ApiGETProjectsApiV2TasksTaskIdEstimatedtimeRequest {
	return ApiGETProjectsApiV2TasksTaskIdEstimatedtimeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasksTaskIdEstimatedtimeExecute(r ApiGETProjectsApiV2TasksTaskIdEstimatedtimeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TasksTaskIdEstimatedtime")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasks/:taskId/estimatedtime"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskID != nil {
		localVarQueryParams.Add("taskID", parameterToString(*r.taskID, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasksTaskIdSubtasksRequest struct {
	ctx                          _context.Context
	ApiService                   *CFPortApiService
	updatedAfterDate             *string
	today                        *string
	startDate                    *string
	sortOrder                    *string
	sort                         *string
	reportFormat                 *string
	projectStatus                *string
	priority                     *string
	include                      *string
	filter                       *string
	endDate                      *string
	deletedAfterDate             *string
	dateCode                     *string
	dataSet                      *string
	createdFilter                *string
	createdDateCode              *string
	createdBeforeDate            *string
	createdAfterDate             *string
	completedBeforeDate          *string
	completedAfterDate           *string
	callback                     *string
	taskId                       *int32
	parentTaskId                 *int32
	pageSize                     *int32
	page                         *int32
	offsetCount                  *int32
	includeTaskId                *int32
	useStartDatesForTodaysTasks  *bool
	useAllProjects               *bool
	starredProjectsOnly          *bool
	showDeleted                  *bool
	showCompletedLists           *bool
	onlyUntaggedTasks            *bool
	onlyTasksWithUnreadComments  *bool
	onlyTasksWithTickets         *bool
	onlyTasksWithEstimatedTime   *bool
	onlyStarredProjects          *bool
	nestSubTasks                 *bool
	matchAllTags                 *bool
	matchAllProjectTags          *bool
	matchAllProjectTagIds        *bool
	matchAllExcludedTags         *bool
	isReportDownload             *bool
	includeUntaggedTasks         *bool
	includeToday                 *bool
	includeTeamUserIds           *bool
	includeTasksWithoutDueDates  *bool
	includeTasksWithCards        *bool
	includeTasksFromDeletedLists *bool
	includeReminders             *bool
	includeLoggedTime            *bool
	includeCustomFields          *bool
	includeCrmDealIds            *bool
	includeCompletedTasks        *bool
	includeCompletedSubtasks     *bool
	includeCompanyUserIds        *bool
	includeBlockedTasks          *bool
	includeAssigneeTeams         *bool
	includeAssigneeCompanies     *bool
	includeArchivedProjects      *bool
	ignoreStartDates             *bool
	getSubTasks                  *bool
	getFiles                     *bool
	allowTemplateTasks           *bool
	tasklistId                   *[]int32
	taskIdList                   *[]int32
	tags                         *[]string
	tagIds                       *[]int32
	skipCrmDealIds               *[]int32
	responsiblePartyIds          *[]int32
	projectTagIds                *[]int32
	projectOwnerIds              *[]int32
	projectIds                   *[]int32
	projectId                    *[]int32
	projectHealths               *[]int32
	projectHealth                *[]int32
	projectCompanyIds            *[]int32
	projectCategoryIds           *[]int32
	projectCategoryId            *[]int32
	followerIds                  *[]int32
	filterText                   *[]string
	filterBoardColumnIds         *[]int32
	excludeTagIds                *[]int32
	crmDealIds                   *[]int32
	creatorIds                   *[]int32
	companyId                    *[]int32
	assigneeTeamIds              *[]int32
	assigneeCompanyIds           *[]int32
}

func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) Today(today string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.today = &today
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) StartDate(startDate string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) Sort(sort string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) Priority(priority string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) Include(include string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) Filter(filter string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) EndDate(endDate string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) DeletedAfterDate(deletedAfterDate string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.deletedAfterDate = &deletedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) DateCode(dateCode string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.dateCode = &dateCode
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) DataSet(dataSet string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.dataSet = &dataSet
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) CreatedFilter(createdFilter string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.createdFilter = &createdFilter
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) CreatedDateCode(createdDateCode string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.createdDateCode = &createdDateCode
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) CreatedBeforeDate(createdBeforeDate string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) CompletedBeforeDate(completedBeforeDate string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) CompletedAfterDate(completedAfterDate string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) Callback(callback string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.callback = &callback
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) TaskId(taskId int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ParentTaskId(parentTaskId int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.parentTaskId = &parentTaskId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) Page(page int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) OffsetCount(offsetCount int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.offsetCount = &offsetCount
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) UseAllProjects(useAllProjects bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.useAllProjects = &useAllProjects
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) StarredProjectsOnly(starredProjectsOnly bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.starredProjectsOnly = &starredProjectsOnly
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) OnlyTasksWithUnreadComments(onlyTasksWithUnreadComments bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.onlyTasksWithUnreadComments = &onlyTasksWithUnreadComments
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) OnlyTasksWithEstimatedTime(onlyTasksWithEstimatedTime bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.onlyTasksWithEstimatedTime = &onlyTasksWithEstimatedTime
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) NestSubTasks(nestSubTasks bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.nestSubTasks = &nestSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeTasksWithCards(includeTasksWithCards bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeTasksWithCards = &includeTasksWithCards
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeReminders(includeReminders bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeReminders = &includeReminders
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeLoggedTime(includeLoggedTime bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeLoggedTime = &includeLoggedTime
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeCrmDealIds(includeCrmDealIds bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeCrmDealIds = &includeCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeBlockedTasks(includeBlockedTasks bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeBlockedTasks = &includeBlockedTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) GetFiles(getFiles bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.getFiles = &getFiles
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) AllowTemplateTasks(allowTemplateTasks bool) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.allowTemplateTasks = &allowTemplateTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) TasklistId(tasklistId []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) TaskIdList(taskIdList []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.taskIdList = &taskIdList
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) Tags(tags []string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) SkipCrmDealIds(skipCrmDealIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.skipCrmDealIds = &skipCrmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) FollowerIds(followerIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) FilterText(filterText []string) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) FilterBoardColumnIds(filterBoardColumnIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.filterBoardColumnIds = &filterBoardColumnIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) CrmDealIds(crmDealIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.crmDealIds = &crmDealIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasksTaskIdSubtasksExecute(r)
}

/*
 * GETProjectsApiV2TasksTaskIdSubtasks Get Tasks
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasksTaskIdSubtasksRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TasksTaskIdSubtasks(ctx _context.Context) ApiGETProjectsApiV2TasksTaskIdSubtasksRequest {
	return ApiGETProjectsApiV2TasksTaskIdSubtasksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasksTaskIdSubtasksExecute(r ApiGETProjectsApiV2TasksTaskIdSubtasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TasksTaskIdSubtasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasks/:taskId/subtasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.today != nil {
		localVarQueryParams.Add("today", parameterToString(*r.today, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.deletedAfterDate != nil {
		localVarQueryParams.Add("deletedAfterDate", parameterToString(*r.deletedAfterDate, ""))
	}
	if r.dateCode != nil {
		localVarQueryParams.Add("dateCode", parameterToString(*r.dateCode, ""))
	}
	if r.dataSet != nil {
		localVarQueryParams.Add("dataSet", parameterToString(*r.dataSet, ""))
	}
	if r.createdFilter != nil {
		localVarQueryParams.Add("createdFilter", parameterToString(*r.createdFilter, ""))
	}
	if r.createdDateCode != nil {
		localVarQueryParams.Add("createdDateCode", parameterToString(*r.createdDateCode, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.callback != nil {
		localVarQueryParams.Add("callback", parameterToString(*r.callback, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.parentTaskId != nil {
		localVarQueryParams.Add("parentTaskId", parameterToString(*r.parentTaskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.offsetCount != nil {
		localVarQueryParams.Add("offsetCount", parameterToString(*r.offsetCount, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.useAllProjects != nil {
		localVarQueryParams.Add("useAllProjects", parameterToString(*r.useAllProjects, ""))
	}
	if r.starredProjectsOnly != nil {
		localVarQueryParams.Add("starredProjectsOnly", parameterToString(*r.starredProjectsOnly, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyTasksWithUnreadComments != nil {
		localVarQueryParams.Add("onlyTasksWithUnreadComments", parameterToString(*r.onlyTasksWithUnreadComments, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyTasksWithEstimatedTime != nil {
		localVarQueryParams.Add("onlyTasksWithEstimatedTime", parameterToString(*r.onlyTasksWithEstimatedTime, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.nestSubTasks != nil {
		localVarQueryParams.Add("nestSubTasks", parameterToString(*r.nestSubTasks, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.includeTasksWithCards != nil {
		localVarQueryParams.Add("includeTasksWithCards", parameterToString(*r.includeTasksWithCards, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.includeReminders != nil {
		localVarQueryParams.Add("includeReminders", parameterToString(*r.includeReminders, ""))
	}
	if r.includeLoggedTime != nil {
		localVarQueryParams.Add("includeLoggedTime", parameterToString(*r.includeLoggedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCrmDealIds != nil {
		localVarQueryParams.Add("includeCrmDealIds", parameterToString(*r.includeCrmDealIds, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeBlockedTasks != nil {
		localVarQueryParams.Add("includeBlockedTasks", parameterToString(*r.includeBlockedTasks, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.getFiles != nil {
		localVarQueryParams.Add("getFiles", parameterToString(*r.getFiles, ""))
	}
	if r.allowTemplateTasks != nil {
		localVarQueryParams.Add("allowTemplateTasks", parameterToString(*r.allowTemplateTasks, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, "csv"))
	}
	if r.taskIdList != nil {
		localVarQueryParams.Add("taskIdList", parameterToString(*r.taskIdList, "csv"))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.skipCrmDealIds != nil {
		localVarQueryParams.Add("skipCrmDealIds", parameterToString(*r.skipCrmDealIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("follower-ids", parameterToString(*r.followerIds, "csv"))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, "csv"))
	}
	if r.filterBoardColumnIds != nil {
		localVarQueryParams.Add("filterBoardColumnIds", parameterToString(*r.filterBoardColumnIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.crmDealIds != nil {
		localVarQueryParams.Add("crmDealIds", parameterToString(*r.crmDealIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasksTaskIdTimeRequest struct {
	ctx                      _context.Context
	ApiService               *CFPortApiService
	sortOrder                *string
	taskId                   *int32
	pageSize                 *int32
	page                     *int32
	includeTimelogId         *int32
	includeTags              *bool
	includeSubTasks          *bool
	includeCompletedSubtasks *bool
	getTotals                *bool
}

func (r ApiGETProjectsApiV2TasksTaskIdTimeRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TasksTaskIdTimeRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeRequest) TaskId(taskId int32) ApiGETProjectsApiV2TasksTaskIdTimeRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TasksTaskIdTimeRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeRequest) Page(page int32) ApiGETProjectsApiV2TasksTaskIdTimeRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2TasksTaskIdTimeRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TasksTaskIdTimeRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeRequest) IncludeSubTasks(includeSubTasks bool) ApiGETProjectsApiV2TasksTaskIdTimeRequest {
	r.includeSubTasks = &includeSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2TasksTaskIdTimeRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2TasksTaskIdTimeRequest {
	r.getTotals = &getTotals
	return r
}

func (r ApiGETProjectsApiV2TasksTaskIdTimeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasksTaskIdTimeExecute(r)
}

/*
 * GETProjectsApiV2TasksTaskIdTime APICall_GET_todo_items_id_time_entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasksTaskIdTimeRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TasksTaskIdTime(ctx _context.Context) ApiGETProjectsApiV2TasksTaskIdTimeRequest {
	return ApiGETProjectsApiV2TasksTaskIdTimeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasksTaskIdTimeExecute(r ApiGETProjectsApiV2TasksTaskIdTimeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TasksTaskIdTime")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasks/:taskId/time"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeSubTasks != nil {
		localVarQueryParams.Add("includeSubTasks", parameterToString(*r.includeSubTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest struct {
	ctx                      _context.Context
	ApiService               *CFPortApiService
	sortOrder                *string
	taskId                   *int32
	pageSize                 *int32
	page                     *int32
	includeTimelogId         *int32
	includeTags              *bool
	includeSubTasks          *bool
	includeCompletedSubtasks *bool
	getTotals                *bool
}

func (r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) TaskId(taskId int32) ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) Page(page int32) ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) IncludeSubTasks(includeSubTasks bool) ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest {
	r.includeSubTasks = &includeSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest {
	r.getTotals = &getTotals
	return r
}

func (r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasksTaskIdTimeEntriesExecute(r)
}

/*
 * GETProjectsApiV2TasksTaskIdTimeEntries APICall_GET_todo_items_id_time_entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TasksTaskIdTimeEntries(ctx _context.Context) ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest {
	return ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TasksTaskIdTimeEntriesExecute(r ApiGETProjectsApiV2TasksTaskIdTimeEntriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TasksTaskIdTimeEntries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasks/:taskId/time_entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeSubTasks != nil {
		localVarQueryParams.Add("includeSubTasks", parameterToString(*r.includeSubTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TimeRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	updatedAfterDate        *string
	toDate                  *string
	sortOrder               *string
	sortBy                  *string
	projectStatus           *string
	invoicedType            *string
	fromDate                *string
	billableType            *string
	timeLogId               *int32
	ticketId                *int32
	pageSize                *int32
	page                    *int32
	includeTimelogId        *int32
	showDeleted             *bool
	onlyStarredProjects     *bool
	matchAllTags            *bool
	matchAllProjectTags     *bool
	matchAllProjectTagIds   *bool
	includeTags             *bool
	includeMainTask         *bool
	includeArchivedProjects *bool
	getTotals               *bool
	userId                  *[]int32
	taskTagIds              *[]int32
	tagIds                  *[]int32
	projectsFromCompanyId   *[]int32
	projectsFromCompanyId2  *[]int32
	projectTagIds           *[]int32
	projectOwnerIds         *[]int32
	projectIds              *[]int32
	projectId               *[]int32
	projectHealths          *[]int32
	projectHealth           *[]int32
	projectCompanyIds       *[]int32
	projectCategoryIds      *[]int32
	projectCategoryId       *[]int32
	companyId               *[]int32
}

func (r ApiGETProjectsApiV2TimeRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2TimeRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ToDate(toDate string) ApiGETProjectsApiV2TimeRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TimeRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) SortBy(sortBy string) ApiGETProjectsApiV2TimeRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2TimeRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV2TimeRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) FromDate(fromDate string) ApiGETProjectsApiV2TimeRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) BillableType(billableType string) ApiGETProjectsApiV2TimeRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) TimeLogId(timeLogId int32) ApiGETProjectsApiV2TimeRequest {
	r.timeLogId = &timeLogId
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) TicketId(ticketId int32) ApiGETProjectsApiV2TimeRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TimeRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) Page(page int32) ApiGETProjectsApiV2TimeRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2TimeRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TimeRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2TimeRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2TimeRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2TimeRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2TimeRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TimeRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) IncludeMainTask(includeMainTask bool) ApiGETProjectsApiV2TimeRequest {
	r.includeMainTask = &includeMainTask
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2TimeRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2TimeRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) UserId(userId []int32) ApiGETProjectsApiV2TimeRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV2TimeRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2TimeRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectsFromCompanyId(projectsFromCompanyId []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectsFromCompanyId = &projectsFromCompanyId
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectsFromCompanyId2(projectsFromCompanyId2 []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectsFromCompanyId2 = &projectsFromCompanyId2
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2TimeRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2TimeRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2TimeRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2TimeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TimeExecute(r)
}

/*
 * GETProjectsApiV2Time Get all timelogs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TimeRequest
 */
func (a *CFPortApiService) GETProjectsApiV2Time(ctx _context.Context) ApiGETProjectsApiV2TimeRequest {
	return ApiGETProjectsApiV2TimeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TimeExecute(r ApiGETProjectsApiV2TimeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2Time")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/time"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.timeLogId != nil {
		localVarQueryParams.Add("timeLogId", parameterToString(*r.timeLogId, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeMainTask != nil {
		localVarQueryParams.Add("includeMainTask", parameterToString(*r.includeMainTask, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectsFromCompanyId != nil {
		localVarQueryParams.Add("projectsFromCompanyId", parameterToString(*r.projectsFromCompanyId, "csv"))
	}
	if r.projectsFromCompanyId2 != nil {
		localVarQueryParams.Add("projects-from-companyId", parameterToString(*r.projectsFromCompanyId2, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TimeEntriesRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	updatedAfterDate        *string
	toDate                  *string
	sortOrder               *string
	sortBy                  *string
	projectStatus           *string
	invoicedType            *string
	fromDate                *string
	billableType            *string
	timeLogId               *int32
	ticketId                *int32
	pageSize                *int32
	page                    *int32
	includeTimelogId        *int32
	showDeleted             *bool
	onlyStarredProjects     *bool
	matchAllTags            *bool
	matchAllProjectTags     *bool
	matchAllProjectTagIds   *bool
	includeTags             *bool
	includeMainTask         *bool
	includeArchivedProjects *bool
	getTotals               *bool
	userId                  *[]int32
	taskTagIds              *[]int32
	tagIds                  *[]int32
	projectsFromCompanyId   *[]int32
	projectsFromCompanyId2  *[]int32
	projectTagIds           *[]int32
	projectOwnerIds         *[]int32
	projectIds              *[]int32
	projectId               *[]int32
	projectHealths          *[]int32
	projectHealth           *[]int32
	projectCompanyIds       *[]int32
	projectCategoryIds      *[]int32
	projectCategoryId       *[]int32
	companyId               *[]int32
}

func (r ApiGETProjectsApiV2TimeEntriesRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2TimeEntriesRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ToDate(toDate string) ApiGETProjectsApiV2TimeEntriesRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TimeEntriesRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) SortBy(sortBy string) ApiGETProjectsApiV2TimeEntriesRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV2TimeEntriesRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) FromDate(fromDate string) ApiGETProjectsApiV2TimeEntriesRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) BillableType(billableType string) ApiGETProjectsApiV2TimeEntriesRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) TimeLogId(timeLogId int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.timeLogId = &timeLogId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) TicketId(ticketId int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) Page(page int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TimeEntriesRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2TimeEntriesRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2TimeEntriesRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2TimeEntriesRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2TimeEntriesRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TimeEntriesRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) IncludeMainTask(includeMainTask bool) ApiGETProjectsApiV2TimeEntriesRequest {
	r.includeMainTask = &includeMainTask
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2TimeEntriesRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2TimeEntriesRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) UserId(userId []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectsFromCompanyId(projectsFromCompanyId []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectsFromCompanyId = &projectsFromCompanyId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectsFromCompanyId2(projectsFromCompanyId2 []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectsFromCompanyId2 = &projectsFromCompanyId2
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2TimeEntriesRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2TimeEntriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TimeEntriesExecute(r)
}

/*
 * GETProjectsApiV2TimeEntries Get all time entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TimeEntriesRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TimeEntries(ctx _context.Context) ApiGETProjectsApiV2TimeEntriesRequest {
	return ApiGETProjectsApiV2TimeEntriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TimeEntriesExecute(r ApiGETProjectsApiV2TimeEntriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TimeEntries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/time_entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.timeLogId != nil {
		localVarQueryParams.Add("timeLogId", parameterToString(*r.timeLogId, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeMainTask != nil {
		localVarQueryParams.Add("includeMainTask", parameterToString(*r.includeMainTask, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectsFromCompanyId != nil {
		localVarQueryParams.Add("projectsFromCompanyId", parameterToString(*r.projectsFromCompanyId, "csv"))
	}
	if r.projectsFromCompanyId2 != nil {
		localVarQueryParams.Add("projects-from-companyId", parameterToString(*r.projectsFromCompanyId2, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TimeEntriesMeRequest struct {
	ctx         _context.Context
	ApiService  *CFPortApiService
	toDate      *string
	sortOrder   *string
	fromDate    *string
	ticketId    *int32
	pageSize    *int32
	page        *int32
	showDeleted *bool
	includeTags *bool
	getTotals   *bool
	userId      *[]int32
}

func (r ApiGETProjectsApiV2TimeEntriesMeRequest) ToDate(toDate string) ApiGETProjectsApiV2TimeEntriesMeRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesMeRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TimeEntriesMeRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesMeRequest) FromDate(fromDate string) ApiGETProjectsApiV2TimeEntriesMeRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesMeRequest) TicketId(ticketId int32) ApiGETProjectsApiV2TimeEntriesMeRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesMeRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TimeEntriesMeRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesMeRequest) Page(page int32) ApiGETProjectsApiV2TimeEntriesMeRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesMeRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TimeEntriesMeRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesMeRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TimeEntriesMeRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesMeRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2TimeEntriesMeRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesMeRequest) UserId(userId []int32) ApiGETProjectsApiV2TimeEntriesMeRequest {
	r.userId = &userId
	return r
}

func (r ApiGETProjectsApiV2TimeEntriesMeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TimeEntriesMeExecute(r)
}

/*
 * GETProjectsApiV2TimeEntriesMe APICall_GET_time_entries_currentUser
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TimeEntriesMeRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TimeEntriesMe(ctx _context.Context) ApiGETProjectsApiV2TimeEntriesMeRequest {
	return ApiGETProjectsApiV2TimeEntriesMeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TimeEntriesMeExecute(r ApiGETProjectsApiV2TimeEntriesMeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TimeEntriesMe")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/time_entries/me"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	updatedAfterDate        *string
	toDate                  *string
	sortOrder               *string
	sortBy                  *string
	projectStatus           *string
	invoicedType            *string
	fromDate                *string
	billableType            *string
	timeLogId               *int32
	ticketId                *int32
	pageSize                *int32
	page                    *int32
	includeTimelogId        *int32
	showDeleted             *bool
	onlyStarredProjects     *bool
	matchAllTags            *bool
	matchAllProjectTags     *bool
	matchAllProjectTagIds   *bool
	includeTags             *bool
	includeMainTask         *bool
	includeArchivedProjects *bool
	getTotals               *bool
	userId                  *[]int32
	taskTagIds              *[]int32
	tagIds                  *[]int32
	projectsFromCompanyId   *[]int32
	projectsFromCompanyId2  *[]int32
	projectTagIds           *[]int32
	projectOwnerIds         *[]int32
	projectIds              *[]int32
	projectId               *[]int32
	projectHealths          *[]int32
	projectHealth           *[]int32
	projectCompanyIds       *[]int32
	projectCategoryIds      *[]int32
	projectCategoryId       *[]int32
	companyId               *[]int32
}

func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ToDate(toDate string) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) SortBy(sortBy string) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) FromDate(fromDate string) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) BillableType(billableType string) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) TimeLogId(timeLogId int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.timeLogId = &timeLogId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) TicketId(ticketId int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) Page(page int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) IncludeMainTask(includeMainTask bool) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.includeMainTask = &includeMainTask
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) UserId(userId []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectsFromCompanyId(projectsFromCompanyId []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectsFromCompanyId = &projectsFromCompanyId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectsFromCompanyId2(projectsFromCompanyId2 []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectsFromCompanyId2 = &projectsFromCompanyId2
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TimeEntriesTimeLogIdExecute(r)
}

/*
 * GETProjectsApiV2TimeEntriesTimeLogId Get time entries for a timelogId
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TimeEntriesTimeLogId(ctx _context.Context) ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest {
	return ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TimeEntriesTimeLogIdExecute(r ApiGETProjectsApiV2TimeEntriesTimeLogIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TimeEntriesTimeLogId")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/time_entries/:timeLogId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.timeLogId != nil {
		localVarQueryParams.Add("timeLogId", parameterToString(*r.timeLogId, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeMainTask != nil {
		localVarQueryParams.Add("includeMainTask", parameterToString(*r.includeMainTask, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectsFromCompanyId != nil {
		localVarQueryParams.Add("projectsFromCompanyId", parameterToString(*r.projectsFromCompanyId, "csv"))
	}
	if r.projectsFromCompanyId2 != nil {
		localVarQueryParams.Add("projects-from-companyId", parameterToString(*r.projectsFromCompanyId2, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TimeMeRequest struct {
	ctx         _context.Context
	ApiService  *CFPortApiService
	toDate      *string
	sortOrder   *string
	fromDate    *string
	ticketId    *int32
	pageSize    *int32
	page        *int32
	showDeleted *bool
	includeTags *bool
	getTotals   *bool
	userId      *[]int32
}

func (r ApiGETProjectsApiV2TimeMeRequest) ToDate(toDate string) ApiGETProjectsApiV2TimeMeRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2TimeMeRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TimeMeRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TimeMeRequest) FromDate(fromDate string) ApiGETProjectsApiV2TimeMeRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2TimeMeRequest) TicketId(ticketId int32) ApiGETProjectsApiV2TimeMeRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV2TimeMeRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TimeMeRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TimeMeRequest) Page(page int32) ApiGETProjectsApiV2TimeMeRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TimeMeRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TimeMeRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TimeMeRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TimeMeRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TimeMeRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2TimeMeRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV2TimeMeRequest) UserId(userId []int32) ApiGETProjectsApiV2TimeMeRequest {
	r.userId = &userId
	return r
}

func (r ApiGETProjectsApiV2TimeMeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TimeMeExecute(r)
}

/*
 * GETProjectsApiV2TimeMe APICall_GET_time_entries_currentUser
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TimeMeRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TimeMe(ctx _context.Context) ApiGETProjectsApiV2TimeMeRequest {
	return ApiGETProjectsApiV2TimeMeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TimeMeExecute(r ApiGETProjectsApiV2TimeMeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TimeMe")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/time/me"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TimeTimeLogIdRequest struct {
	ctx                     _context.Context
	ApiService              *CFPortApiService
	updatedAfterDate        *string
	toDate                  *string
	sortOrder               *string
	sortBy                  *string
	projectStatus           *string
	invoicedType            *string
	fromDate                *string
	billableType            *string
	timeLogId               *int32
	ticketId                *int32
	pageSize                *int32
	page                    *int32
	includeTimelogId        *int32
	showDeleted             *bool
	onlyStarredProjects     *bool
	matchAllTags            *bool
	matchAllProjectTags     *bool
	matchAllProjectTagIds   *bool
	includeTags             *bool
	includeMainTask         *bool
	includeArchivedProjects *bool
	getTotals               *bool
	userId                  *[]int32
	taskTagIds              *[]int32
	tagIds                  *[]int32
	projectsFromCompanyId   *[]int32
	projectsFromCompanyId2  *[]int32
	projectTagIds           *[]int32
	projectOwnerIds         *[]int32
	projectIds              *[]int32
	projectId               *[]int32
	projectHealths          *[]int32
	projectHealth           *[]int32
	projectCompanyIds       *[]int32
	projectCategoryIds      *[]int32
	projectCategoryId       *[]int32
	companyId               *[]int32
}

func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) UpdatedAfterDate(updatedAfterDate string) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ToDate(toDate string) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.toDate = &toDate
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) SortBy(sortBy string) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) InvoicedType(invoicedType string) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.invoicedType = &invoicedType
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) FromDate(fromDate string) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.fromDate = &fromDate
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) BillableType(billableType string) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.billableType = &billableType
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) TimeLogId(timeLogId int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.timeLogId = &timeLogId
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) TicketId(ticketId int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.ticketId = &ticketId
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) Page(page int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) MatchAllProjectTagIds(matchAllProjectTagIds bool) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.matchAllProjectTagIds = &matchAllProjectTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) IncludeMainTask(includeMainTask bool) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.includeMainTask = &includeMainTask
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.getTotals = &getTotals
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) UserId(userId []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) TaskTagIds(taskTagIds []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.taskTagIds = &taskTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectsFromCompanyId(projectsFromCompanyId []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectsFromCompanyId = &projectsFromCompanyId
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectsFromCompanyId2(projectsFromCompanyId2 []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectsFromCompanyId2 = &projectsFromCompanyId2
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectId(projectId []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectHealth(projectHealth []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) ProjectCategoryId(projectCategoryId []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.projectCategoryId = &projectCategoryId
	return r
}
func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) CompanyId(companyId []int32) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGETProjectsApiV2TimeTimeLogIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TimeTimeLogIdExecute(r)
}

/*
 * GETProjectsApiV2TimeTimeLogId Get timelog for a timelogId
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TimeTimeLogIdRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TimeTimeLogId(ctx _context.Context) ApiGETProjectsApiV2TimeTimeLogIdRequest {
	return ApiGETProjectsApiV2TimeTimeLogIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TimeTimeLogIdExecute(r ApiGETProjectsApiV2TimeTimeLogIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TimeTimeLogId")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/time/:timeLogId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.invoicedType != nil {
		localVarQueryParams.Add("invoicedType", parameterToString(*r.invoicedType, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.billableType != nil {
		localVarQueryParams.Add("billableType", parameterToString(*r.billableType, ""))
	}
	if r.timeLogId != nil {
		localVarQueryParams.Add("timeLogId", parameterToString(*r.timeLogId, ""))
	}
	if r.ticketId != nil {
		localVarQueryParams.Add("ticketId", parameterToString(*r.ticketId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllProjectTagIds != nil {
		localVarQueryParams.Add("matchAllProjectTagIds", parameterToString(*r.matchAllProjectTagIds, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeMainTask != nil {
		localVarQueryParams.Add("includeMainTask", parameterToString(*r.includeMainTask, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, "csv"))
	}
	if r.taskTagIds != nil {
		localVarQueryParams.Add("taskTagIds", parameterToString(*r.taskTagIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectsFromCompanyId != nil {
		localVarQueryParams.Add("projectsFromCompanyId", parameterToString(*r.projectsFromCompanyId, "csv"))
	}
	if r.projectsFromCompanyId2 != nil {
		localVarQueryParams.Add("projects-from-companyId", parameterToString(*r.projectsFromCompanyId2, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, "csv"))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCategoryId != nil {
		localVarQueryParams.Add("projectCategoryId", parameterToString(*r.projectCategoryId, "csv"))
	}
	if r.companyId != nil {
		localVarQueryParams.Add("companyId", parameterToString(*r.companyId, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest struct {
	ctx                      _context.Context
	ApiService               *CFPortApiService
	sortOrder                *string
	taskId                   *int32
	pageSize                 *int32
	page                     *int32
	includeTimelogId         *int32
	includeTags              *bool
	includeSubTasks          *bool
	includeCompletedSubtasks *bool
	getTotals                *bool
}

func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) TaskId(taskId int32) ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) Page(page int32) ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) IncludeSubTasks(includeSubTasks bool) ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest {
	r.includeSubTasks = &includeSubTasks
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest {
	r.getTotals = &getTotals
	return r
}

func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TodoItemsTaskIdTimeExecute(r)
}

/*
 * GETProjectsApiV2TodoItemsTaskIdTime APICall_GET_todo_items_id_time_entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TodoItemsTaskIdTime(ctx _context.Context) ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest {
	return ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TodoItemsTaskIdTimeExecute(r ApiGETProjectsApiV2TodoItemsTaskIdTimeRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TodoItemsTaskIdTime")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/todo_items/:taskId/time"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeSubTasks != nil {
		localVarQueryParams.Add("includeSubTasks", parameterToString(*r.includeSubTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest struct {
	ctx                      _context.Context
	ApiService               *CFPortApiService
	sortOrder                *string
	taskId                   *int32
	pageSize                 *int32
	page                     *int32
	includeTimelogId         *int32
	includeTags              *bool
	includeSubTasks          *bool
	includeCompletedSubtasks *bool
	getTotals                *bool
}

func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) TaskId(taskId int32) ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) Page(page int32) ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) IncludeTimelogId(includeTimelogId int32) ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest {
	r.includeTimelogId = &includeTimelogId
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) IncludeSubTasks(includeSubTasks bool) ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest {
	r.includeSubTasks = &includeSubTasks
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) GetTotals(getTotals bool) ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest {
	r.getTotals = &getTotals
	return r
}

func (r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TodoItemsTaskIdTimeEntriesExecute(r)
}

/*
 * GETProjectsApiV2TodoItemsTaskIdTimeEntries APICall_GET_todo_items_id_time_entries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest
 */
func (a *CFPortApiService) GETProjectsApiV2TodoItemsTaskIdTimeEntries(ctx _context.Context) ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest {
	return ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CFPortApiService) GETProjectsApiV2TodoItemsTaskIdTimeEntriesExecute(r ApiGETProjectsApiV2TodoItemsTaskIdTimeEntriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CFPortApiService.GETProjectsApiV2TodoItemsTaskIdTimeEntries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/todo_items/:taskId/time_entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.includeTimelogId != nil {
		localVarQueryParams.Add("includeTimelogId", parameterToString(*r.includeTimelogId, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includeSubTasks != nil {
		localVarQueryParams.Add("includeSubTasks", parameterToString(*r.includeSubTasks, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.getTotals != nil {
		localVarQueryParams.Add("getTotals", parameterToString(*r.getTotals, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
