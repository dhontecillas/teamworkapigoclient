/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// UsercostResponse Response contains information about a specific usercost.
type UsercostResponse struct {
	Usercost *ViewUsercost `json:"usercost,omitempty"`
}

// NewUsercostResponse instantiates a new UsercostResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsercostResponse() *UsercostResponse {
	this := UsercostResponse{}
	return &this
}

// NewUsercostResponseWithDefaults instantiates a new UsercostResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsercostResponseWithDefaults() *UsercostResponse {
	this := UsercostResponse{}
	return &this
}

// GetUsercost returns the Usercost field value if set, zero value otherwise.
func (o *UsercostResponse) GetUsercost() ViewUsercost {
	if o == nil || o.Usercost == nil {
		var ret ViewUsercost
		return ret
	}
	return *o.Usercost
}

// GetUsercostOk returns a tuple with the Usercost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsercostResponse) GetUsercostOk() (*ViewUsercost, bool) {
	if o == nil || o.Usercost == nil {
		return nil, false
	}
	return o.Usercost, true
}

// HasUsercost returns a boolean if a field has been set.
func (o *UsercostResponse) HasUsercost() bool {
	if o != nil && o.Usercost != nil {
		return true
	}

	return false
}

// SetUsercost gets a reference to the given ViewUsercost and assigns it to the Usercost field.
func (o *UsercostResponse) SetUsercost(v ViewUsercost) {
	o.Usercost = &v
}

func (o UsercostResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Usercost != nil {
		toSerialize["usercost"] = o.Usercost
	}
	return json.Marshal(toSerialize)
}

type NullableUsercostResponse struct {
	value *UsercostResponse
	isSet bool
}

func (v NullableUsercostResponse) Get() *UsercostResponse {
	return v.value
}

func (v *NullableUsercostResponse) Set(val *UsercostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUsercostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUsercostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsercostResponse(val *UsercostResponse) *NullableUsercostResponse {
	return &NullableUsercostResponse{value: val, isSet: true}
}

func (v NullableUsercostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsercostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


