/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewTasklist Tasklist contains all the information returned from a tasklist.
type ViewTasklist struct {
	Id *int32 `json:"id,omitempty"`
	Milestone *ViewRelationship `json:"milestone,omitempty"`
	MilestoneId *int32 `json:"milestoneId,omitempty"`
	Name *string `json:"name,omitempty"`
	NewTaskDefaults *ViewNewTaskDefaults `json:"newTaskDefaults,omitempty"`
	Project *ViewRelationship `json:"project,omitempty"`
	ProjectId *int32 `json:"projectId,omitempty"`
	TaskIds *[]int32 `json:"taskIds,omitempty"`
	Tasks *[]ViewRelationship `json:"tasks,omitempty"`
}

// NewViewTasklist instantiates a new ViewTasklist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewTasklist() *ViewTasklist {
	this := ViewTasklist{}
	return &this
}

// NewViewTasklistWithDefaults instantiates a new ViewTasklist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewTasklistWithDefaults() *ViewTasklist {
	this := ViewTasklist{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewTasklist) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTasklist) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewTasklist) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewTasklist) SetId(v int32) {
	o.Id = &v
}

// GetMilestone returns the Milestone field value if set, zero value otherwise.
func (o *ViewTasklist) GetMilestone() ViewRelationship {
	if o == nil || o.Milestone == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Milestone
}

// GetMilestoneOk returns a tuple with the Milestone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTasklist) GetMilestoneOk() (*ViewRelationship, bool) {
	if o == nil || o.Milestone == nil {
		return nil, false
	}
	return o.Milestone, true
}

// HasMilestone returns a boolean if a field has been set.
func (o *ViewTasklist) HasMilestone() bool {
	if o != nil && o.Milestone != nil {
		return true
	}

	return false
}

// SetMilestone gets a reference to the given ViewRelationship and assigns it to the Milestone field.
func (o *ViewTasklist) SetMilestone(v ViewRelationship) {
	o.Milestone = &v
}

// GetMilestoneId returns the MilestoneId field value if set, zero value otherwise.
func (o *ViewTasklist) GetMilestoneId() int32 {
	if o == nil || o.MilestoneId == nil {
		var ret int32
		return ret
	}
	return *o.MilestoneId
}

// GetMilestoneIdOk returns a tuple with the MilestoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTasklist) GetMilestoneIdOk() (*int32, bool) {
	if o == nil || o.MilestoneId == nil {
		return nil, false
	}
	return o.MilestoneId, true
}

// HasMilestoneId returns a boolean if a field has been set.
func (o *ViewTasklist) HasMilestoneId() bool {
	if o != nil && o.MilestoneId != nil {
		return true
	}

	return false
}

// SetMilestoneId gets a reference to the given int32 and assigns it to the MilestoneId field.
func (o *ViewTasklist) SetMilestoneId(v int32) {
	o.MilestoneId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewTasklist) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTasklist) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewTasklist) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewTasklist) SetName(v string) {
	o.Name = &v
}

// GetNewTaskDefaults returns the NewTaskDefaults field value if set, zero value otherwise.
func (o *ViewTasklist) GetNewTaskDefaults() ViewNewTaskDefaults {
	if o == nil || o.NewTaskDefaults == nil {
		var ret ViewNewTaskDefaults
		return ret
	}
	return *o.NewTaskDefaults
}

// GetNewTaskDefaultsOk returns a tuple with the NewTaskDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTasklist) GetNewTaskDefaultsOk() (*ViewNewTaskDefaults, bool) {
	if o == nil || o.NewTaskDefaults == nil {
		return nil, false
	}
	return o.NewTaskDefaults, true
}

// HasNewTaskDefaults returns a boolean if a field has been set.
func (o *ViewTasklist) HasNewTaskDefaults() bool {
	if o != nil && o.NewTaskDefaults != nil {
		return true
	}

	return false
}

// SetNewTaskDefaults gets a reference to the given ViewNewTaskDefaults and assigns it to the NewTaskDefaults field.
func (o *ViewTasklist) SetNewTaskDefaults(v ViewNewTaskDefaults) {
	o.NewTaskDefaults = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ViewTasklist) GetProject() ViewRelationship {
	if o == nil || o.Project == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTasklist) GetProjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ViewTasklist) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ViewRelationship and assigns it to the Project field.
func (o *ViewTasklist) SetProject(v ViewRelationship) {
	o.Project = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ViewTasklist) GetProjectId() int32 {
	if o == nil || o.ProjectId == nil {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTasklist) GetProjectIdOk() (*int32, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ViewTasklist) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ViewTasklist) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetTaskIds returns the TaskIds field value if set, zero value otherwise.
func (o *ViewTasklist) GetTaskIds() []int32 {
	if o == nil || o.TaskIds == nil {
		var ret []int32
		return ret
	}
	return *o.TaskIds
}

// GetTaskIdsOk returns a tuple with the TaskIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTasklist) GetTaskIdsOk() (*[]int32, bool) {
	if o == nil || o.TaskIds == nil {
		return nil, false
	}
	return o.TaskIds, true
}

// HasTaskIds returns a boolean if a field has been set.
func (o *ViewTasklist) HasTaskIds() bool {
	if o != nil && o.TaskIds != nil {
		return true
	}

	return false
}

// SetTaskIds gets a reference to the given []int32 and assigns it to the TaskIds field.
func (o *ViewTasklist) SetTaskIds(v []int32) {
	o.TaskIds = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ViewTasklist) GetTasks() []ViewRelationship {
	if o == nil || o.Tasks == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTasklist) GetTasksOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ViewTasklist) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []ViewRelationship and assigns it to the Tasks field.
func (o *ViewTasklist) SetTasks(v []ViewRelationship) {
	o.Tasks = &v
}

func (o ViewTasklist) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Milestone != nil {
		toSerialize["milestone"] = o.Milestone
	}
	if o.MilestoneId != nil {
		toSerialize["milestoneId"] = o.MilestoneId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NewTaskDefaults != nil {
		toSerialize["newTaskDefaults"] = o.NewTaskDefaults
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.TaskIds != nil {
		toSerialize["taskIds"] = o.TaskIds
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	return json.Marshal(toSerialize)
}

type NullableViewTasklist struct {
	value *ViewTasklist
	isSet bool
}

func (v NullableViewTasklist) Get() *ViewTasklist {
	return v.value
}

func (v *NullableViewTasklist) Set(val *ViewTasklist) {
	v.value = val
	v.isSet = true
}

func (v NullableViewTasklist) IsSet() bool {
	return v.isSet
}

func (v *NullableViewTasklist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewTasklist(val *ViewTasklist) *NullableViewTasklist {
	return &NullableViewTasklist{value: val, isSet: true}
}

func (v NullableViewTasklist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewTasklist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


