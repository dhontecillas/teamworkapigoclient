/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineObject93 struct for InlineObject93
type InlineObject93 struct {
	Reminder *TaskremindersIdJsonReminder `json:"reminder,omitempty"`
}

// NewInlineObject93 instantiates a new InlineObject93 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject93() *InlineObject93 {
	this := InlineObject93{}
	return &this
}

// NewInlineObject93WithDefaults instantiates a new InlineObject93 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject93WithDefaults() *InlineObject93 {
	this := InlineObject93{}
	return &this
}

// GetReminder returns the Reminder field value if set, zero value otherwise.
func (o *InlineObject93) GetReminder() TaskremindersIdJsonReminder {
	if o == nil || o.Reminder == nil {
		var ret TaskremindersIdJsonReminder
		return ret
	}
	return *o.Reminder
}

// GetReminderOk returns a tuple with the Reminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject93) GetReminderOk() (*TaskremindersIdJsonReminder, bool) {
	if o == nil || o.Reminder == nil {
		return nil, false
	}
	return o.Reminder, true
}

// HasReminder returns a boolean if a field has been set.
func (o *InlineObject93) HasReminder() bool {
	if o != nil && o.Reminder != nil {
		return true
	}

	return false
}

// SetReminder gets a reference to the given TaskremindersIdJsonReminder and assigns it to the Reminder field.
func (o *InlineObject93) SetReminder(v TaskremindersIdJsonReminder) {
	o.Reminder = &v
}

func (o InlineObject93) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reminder != nil {
		toSerialize["reminder"] = o.Reminder
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject93 struct {
	value *InlineObject93
	isSet bool
}

func (v NullableInlineObject93) Get() *InlineObject93 {
	return v.value
}

func (v *NullableInlineObject93) Set(val *InlineObject93) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject93) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject93) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject93(val *InlineObject93) *NullableInlineObject93 {
	return &NullableInlineObject93{value: val, isSet: true}
}

func (v NullableInlineObject93) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject93) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


