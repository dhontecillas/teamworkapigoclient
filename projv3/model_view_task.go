/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewTask Task defines how entity.Task should be rendered.
type ViewTask struct {
	AssigneeCompanies *[]ViewRelationship `json:"assigneeCompanies,omitempty"`
	AssigneeCompanyIds *[]int32 `json:"assigneeCompanyIds,omitempty"`
	AssigneeTeamIds *[]int32 `json:"assigneeTeamIds,omitempty"`
	AssigneeTeams *[]ViewRelationship `json:"assigneeTeams,omitempty"`
	AssigneeUserIds *[]int32 `json:"assigneeUserIds,omitempty"`
	AssigneeUsers *[]ViewRelationship `json:"assigneeUsers,omitempty"`
	CompletedBy *int32 `json:"completedBy,omitempty"`
	CompletedOn *string `json:"completedOn,omitempty"`
	CreatedBy *int32 `json:"createdBy,omitempty"`
	CreatedByUserId *int32 `json:"createdByUserId,omitempty"`
	CrmDealIds *[]int32 `json:"crmDealIds,omitempty"`
	DateUpdated *string `json:"dateUpdated,omitempty"`
	DependencyIds *[]int32 `json:"dependencyIds,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayOrder *int32 `json:"displayOrder,omitempty"`
	DueDate *string `json:"dueDate,omitempty"`
	EstimateMinutes *int32 `json:"estimateMinutes,omitempty"`
	HasDeskTickets *bool `json:"hasDeskTickets,omitempty"`
	Id *int32 `json:"id,omitempty"`
	IsPrivate *int32 `json:"isPrivate,omitempty"`
	LatestUpdates *[]ViewAudit `json:"latestUpdates,omitempty"`
	Name *string `json:"name,omitempty"`
	// Date represents a Unified API Spec date format.
	OriginalDueDate *map[string]interface{} `json:"originalDueDate,omitempty"`
	ParentTask *ViewRelationship `json:"parentTask,omitempty"`
	ParentTaskId *int32 `json:"parentTaskId,omitempty"`
	PredecessorIds *[]int32 `json:"predecessorIds,omitempty"`
	Priority *string `json:"priority,omitempty"`
	Progress *int32 `json:"progress,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	Status *string `json:"status,omitempty"`
	SubTaskIds *[]int32 `json:"subTaskIds,omitempty"`
	TagIds *[]int32 `json:"tagIds,omitempty"`
	Tasklist *ViewRelationship `json:"tasklist,omitempty"`
	TasklistId *int32 `json:"tasklistId,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	UpdatedBy *int32 `json:"updatedBy,omitempty"`
	UserPermissions *ViewTaskPermissions `json:"userPermissions,omitempty"`
}

// NewViewTask instantiates a new ViewTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewTask() *ViewTask {
	this := ViewTask{}
	return &this
}

// NewViewTaskWithDefaults instantiates a new ViewTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewTaskWithDefaults() *ViewTask {
	this := ViewTask{}
	return &this
}

// GetAssigneeCompanies returns the AssigneeCompanies field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeCompanies() []ViewRelationship {
	if o == nil || o.AssigneeCompanies == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.AssigneeCompanies
}

// GetAssigneeCompaniesOk returns a tuple with the AssigneeCompanies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeCompaniesOk() (*[]ViewRelationship, bool) {
	if o == nil || o.AssigneeCompanies == nil {
		return nil, false
	}
	return o.AssigneeCompanies, true
}

// HasAssigneeCompanies returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeCompanies() bool {
	if o != nil && o.AssigneeCompanies != nil {
		return true
	}

	return false
}

// SetAssigneeCompanies gets a reference to the given []ViewRelationship and assigns it to the AssigneeCompanies field.
func (o *ViewTask) SetAssigneeCompanies(v []ViewRelationship) {
	o.AssigneeCompanies = &v
}

// GetAssigneeCompanyIds returns the AssigneeCompanyIds field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeCompanyIds() []int32 {
	if o == nil || o.AssigneeCompanyIds == nil {
		var ret []int32
		return ret
	}
	return *o.AssigneeCompanyIds
}

// GetAssigneeCompanyIdsOk returns a tuple with the AssigneeCompanyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeCompanyIdsOk() (*[]int32, bool) {
	if o == nil || o.AssigneeCompanyIds == nil {
		return nil, false
	}
	return o.AssigneeCompanyIds, true
}

// HasAssigneeCompanyIds returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeCompanyIds() bool {
	if o != nil && o.AssigneeCompanyIds != nil {
		return true
	}

	return false
}

// SetAssigneeCompanyIds gets a reference to the given []int32 and assigns it to the AssigneeCompanyIds field.
func (o *ViewTask) SetAssigneeCompanyIds(v []int32) {
	o.AssigneeCompanyIds = &v
}

// GetAssigneeTeamIds returns the AssigneeTeamIds field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeTeamIds() []int32 {
	if o == nil || o.AssigneeTeamIds == nil {
		var ret []int32
		return ret
	}
	return *o.AssigneeTeamIds
}

// GetAssigneeTeamIdsOk returns a tuple with the AssigneeTeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeTeamIdsOk() (*[]int32, bool) {
	if o == nil || o.AssigneeTeamIds == nil {
		return nil, false
	}
	return o.AssigneeTeamIds, true
}

// HasAssigneeTeamIds returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeTeamIds() bool {
	if o != nil && o.AssigneeTeamIds != nil {
		return true
	}

	return false
}

// SetAssigneeTeamIds gets a reference to the given []int32 and assigns it to the AssigneeTeamIds field.
func (o *ViewTask) SetAssigneeTeamIds(v []int32) {
	o.AssigneeTeamIds = &v
}

// GetAssigneeTeams returns the AssigneeTeams field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeTeams() []ViewRelationship {
	if o == nil || o.AssigneeTeams == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.AssigneeTeams
}

// GetAssigneeTeamsOk returns a tuple with the AssigneeTeams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeTeamsOk() (*[]ViewRelationship, bool) {
	if o == nil || o.AssigneeTeams == nil {
		return nil, false
	}
	return o.AssigneeTeams, true
}

// HasAssigneeTeams returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeTeams() bool {
	if o != nil && o.AssigneeTeams != nil {
		return true
	}

	return false
}

// SetAssigneeTeams gets a reference to the given []ViewRelationship and assigns it to the AssigneeTeams field.
func (o *ViewTask) SetAssigneeTeams(v []ViewRelationship) {
	o.AssigneeTeams = &v
}

// GetAssigneeUserIds returns the AssigneeUserIds field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeUserIds() []int32 {
	if o == nil || o.AssigneeUserIds == nil {
		var ret []int32
		return ret
	}
	return *o.AssigneeUserIds
}

// GetAssigneeUserIdsOk returns a tuple with the AssigneeUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeUserIdsOk() (*[]int32, bool) {
	if o == nil || o.AssigneeUserIds == nil {
		return nil, false
	}
	return o.AssigneeUserIds, true
}

// HasAssigneeUserIds returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeUserIds() bool {
	if o != nil && o.AssigneeUserIds != nil {
		return true
	}

	return false
}

// SetAssigneeUserIds gets a reference to the given []int32 and assigns it to the AssigneeUserIds field.
func (o *ViewTask) SetAssigneeUserIds(v []int32) {
	o.AssigneeUserIds = &v
}

// GetAssigneeUsers returns the AssigneeUsers field value if set, zero value otherwise.
func (o *ViewTask) GetAssigneeUsers() []ViewRelationship {
	if o == nil || o.AssigneeUsers == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.AssigneeUsers
}

// GetAssigneeUsersOk returns a tuple with the AssigneeUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetAssigneeUsersOk() (*[]ViewRelationship, bool) {
	if o == nil || o.AssigneeUsers == nil {
		return nil, false
	}
	return o.AssigneeUsers, true
}

// HasAssigneeUsers returns a boolean if a field has been set.
func (o *ViewTask) HasAssigneeUsers() bool {
	if o != nil && o.AssigneeUsers != nil {
		return true
	}

	return false
}

// SetAssigneeUsers gets a reference to the given []ViewRelationship and assigns it to the AssigneeUsers field.
func (o *ViewTask) SetAssigneeUsers(v []ViewRelationship) {
	o.AssigneeUsers = &v
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *ViewTask) GetCompletedBy() int32 {
	if o == nil || o.CompletedBy == nil {
		var ret int32
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetCompletedByOk() (*int32, bool) {
	if o == nil || o.CompletedBy == nil {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *ViewTask) HasCompletedBy() bool {
	if o != nil && o.CompletedBy != nil {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given int32 and assigns it to the CompletedBy field.
func (o *ViewTask) SetCompletedBy(v int32) {
	o.CompletedBy = &v
}

// GetCompletedOn returns the CompletedOn field value if set, zero value otherwise.
func (o *ViewTask) GetCompletedOn() string {
	if o == nil || o.CompletedOn == nil {
		var ret string
		return ret
	}
	return *o.CompletedOn
}

// GetCompletedOnOk returns a tuple with the CompletedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetCompletedOnOk() (*string, bool) {
	if o == nil || o.CompletedOn == nil {
		return nil, false
	}
	return o.CompletedOn, true
}

// HasCompletedOn returns a boolean if a field has been set.
func (o *ViewTask) HasCompletedOn() bool {
	if o != nil && o.CompletedOn != nil {
		return true
	}

	return false
}

// SetCompletedOn gets a reference to the given string and assigns it to the CompletedOn field.
func (o *ViewTask) SetCompletedOn(v string) {
	o.CompletedOn = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ViewTask) GetCreatedBy() int32 {
	if o == nil || o.CreatedBy == nil {
		var ret int32
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetCreatedByOk() (*int32, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ViewTask) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int32 and assigns it to the CreatedBy field.
func (o *ViewTask) SetCreatedBy(v int32) {
	o.CreatedBy = &v
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *ViewTask) GetCreatedByUserId() int32 {
	if o == nil || o.CreatedByUserId == nil {
		var ret int32
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetCreatedByUserIdOk() (*int32, bool) {
	if o == nil || o.CreatedByUserId == nil {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *ViewTask) HasCreatedByUserId() bool {
	if o != nil && o.CreatedByUserId != nil {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given int32 and assigns it to the CreatedByUserId field.
func (o *ViewTask) SetCreatedByUserId(v int32) {
	o.CreatedByUserId = &v
}

// GetCrmDealIds returns the CrmDealIds field value if set, zero value otherwise.
func (o *ViewTask) GetCrmDealIds() []int32 {
	if o == nil || o.CrmDealIds == nil {
		var ret []int32
		return ret
	}
	return *o.CrmDealIds
}

// GetCrmDealIdsOk returns a tuple with the CrmDealIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetCrmDealIdsOk() (*[]int32, bool) {
	if o == nil || o.CrmDealIds == nil {
		return nil, false
	}
	return o.CrmDealIds, true
}

// HasCrmDealIds returns a boolean if a field has been set.
func (o *ViewTask) HasCrmDealIds() bool {
	if o != nil && o.CrmDealIds != nil {
		return true
	}

	return false
}

// SetCrmDealIds gets a reference to the given []int32 and assigns it to the CrmDealIds field.
func (o *ViewTask) SetCrmDealIds(v []int32) {
	o.CrmDealIds = &v
}

// GetDateUpdated returns the DateUpdated field value if set, zero value otherwise.
func (o *ViewTask) GetDateUpdated() string {
	if o == nil || o.DateUpdated == nil {
		var ret string
		return ret
	}
	return *o.DateUpdated
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetDateUpdatedOk() (*string, bool) {
	if o == nil || o.DateUpdated == nil {
		return nil, false
	}
	return o.DateUpdated, true
}

// HasDateUpdated returns a boolean if a field has been set.
func (o *ViewTask) HasDateUpdated() bool {
	if o != nil && o.DateUpdated != nil {
		return true
	}

	return false
}

// SetDateUpdated gets a reference to the given string and assigns it to the DateUpdated field.
func (o *ViewTask) SetDateUpdated(v string) {
	o.DateUpdated = &v
}

// GetDependencyIds returns the DependencyIds field value if set, zero value otherwise.
func (o *ViewTask) GetDependencyIds() []int32 {
	if o == nil || o.DependencyIds == nil {
		var ret []int32
		return ret
	}
	return *o.DependencyIds
}

// GetDependencyIdsOk returns a tuple with the DependencyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetDependencyIdsOk() (*[]int32, bool) {
	if o == nil || o.DependencyIds == nil {
		return nil, false
	}
	return o.DependencyIds, true
}

// HasDependencyIds returns a boolean if a field has been set.
func (o *ViewTask) HasDependencyIds() bool {
	if o != nil && o.DependencyIds != nil {
		return true
	}

	return false
}

// SetDependencyIds gets a reference to the given []int32 and assigns it to the DependencyIds field.
func (o *ViewTask) SetDependencyIds(v []int32) {
	o.DependencyIds = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ViewTask) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ViewTask) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ViewTask) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *ViewTask) GetDisplayOrder() int32 {
	if o == nil || o.DisplayOrder == nil {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || o.DisplayOrder == nil {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *ViewTask) HasDisplayOrder() bool {
	if o != nil && o.DisplayOrder != nil {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *ViewTask) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *ViewTask) GetDueDate() string {
	if o == nil || o.DueDate == nil {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetDueDateOk() (*string, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *ViewTask) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *ViewTask) SetDueDate(v string) {
	o.DueDate = &v
}

// GetEstimateMinutes returns the EstimateMinutes field value if set, zero value otherwise.
func (o *ViewTask) GetEstimateMinutes() int32 {
	if o == nil || o.EstimateMinutes == nil {
		var ret int32
		return ret
	}
	return *o.EstimateMinutes
}

// GetEstimateMinutesOk returns a tuple with the EstimateMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetEstimateMinutesOk() (*int32, bool) {
	if o == nil || o.EstimateMinutes == nil {
		return nil, false
	}
	return o.EstimateMinutes, true
}

// HasEstimateMinutes returns a boolean if a field has been set.
func (o *ViewTask) HasEstimateMinutes() bool {
	if o != nil && o.EstimateMinutes != nil {
		return true
	}

	return false
}

// SetEstimateMinutes gets a reference to the given int32 and assigns it to the EstimateMinutes field.
func (o *ViewTask) SetEstimateMinutes(v int32) {
	o.EstimateMinutes = &v
}

// GetHasDeskTickets returns the HasDeskTickets field value if set, zero value otherwise.
func (o *ViewTask) GetHasDeskTickets() bool {
	if o == nil || o.HasDeskTickets == nil {
		var ret bool
		return ret
	}
	return *o.HasDeskTickets
}

// GetHasDeskTicketsOk returns a tuple with the HasDeskTickets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetHasDeskTicketsOk() (*bool, bool) {
	if o == nil || o.HasDeskTickets == nil {
		return nil, false
	}
	return o.HasDeskTickets, true
}

// HasHasDeskTickets returns a boolean if a field has been set.
func (o *ViewTask) HasHasDeskTickets() bool {
	if o != nil && o.HasDeskTickets != nil {
		return true
	}

	return false
}

// SetHasDeskTickets gets a reference to the given bool and assigns it to the HasDeskTickets field.
func (o *ViewTask) SetHasDeskTickets(v bool) {
	o.HasDeskTickets = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewTask) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewTask) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewTask) SetId(v int32) {
	o.Id = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *ViewTask) GetIsPrivate() int32 {
	if o == nil || o.IsPrivate == nil {
		var ret int32
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetIsPrivateOk() (*int32, bool) {
	if o == nil || o.IsPrivate == nil {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *ViewTask) HasIsPrivate() bool {
	if o != nil && o.IsPrivate != nil {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given int32 and assigns it to the IsPrivate field.
func (o *ViewTask) SetIsPrivate(v int32) {
	o.IsPrivate = &v
}

// GetLatestUpdates returns the LatestUpdates field value if set, zero value otherwise.
func (o *ViewTask) GetLatestUpdates() []ViewAudit {
	if o == nil || o.LatestUpdates == nil {
		var ret []ViewAudit
		return ret
	}
	return *o.LatestUpdates
}

// GetLatestUpdatesOk returns a tuple with the LatestUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetLatestUpdatesOk() (*[]ViewAudit, bool) {
	if o == nil || o.LatestUpdates == nil {
		return nil, false
	}
	return o.LatestUpdates, true
}

// HasLatestUpdates returns a boolean if a field has been set.
func (o *ViewTask) HasLatestUpdates() bool {
	if o != nil && o.LatestUpdates != nil {
		return true
	}

	return false
}

// SetLatestUpdates gets a reference to the given []ViewAudit and assigns it to the LatestUpdates field.
func (o *ViewTask) SetLatestUpdates(v []ViewAudit) {
	o.LatestUpdates = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewTask) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewTask) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewTask) SetName(v string) {
	o.Name = &v
}

// GetOriginalDueDate returns the OriginalDueDate field value if set, zero value otherwise.
func (o *ViewTask) GetOriginalDueDate() map[string]interface{} {
	if o == nil || o.OriginalDueDate == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.OriginalDueDate
}

// GetOriginalDueDateOk returns a tuple with the OriginalDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetOriginalDueDateOk() (*map[string]interface{}, bool) {
	if o == nil || o.OriginalDueDate == nil {
		return nil, false
	}
	return o.OriginalDueDate, true
}

// HasOriginalDueDate returns a boolean if a field has been set.
func (o *ViewTask) HasOriginalDueDate() bool {
	if o != nil && o.OriginalDueDate != nil {
		return true
	}

	return false
}

// SetOriginalDueDate gets a reference to the given map[string]interface{} and assigns it to the OriginalDueDate field.
func (o *ViewTask) SetOriginalDueDate(v map[string]interface{}) {
	o.OriginalDueDate = &v
}

// GetParentTask returns the ParentTask field value if set, zero value otherwise.
func (o *ViewTask) GetParentTask() ViewRelationship {
	if o == nil || o.ParentTask == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.ParentTask
}

// GetParentTaskOk returns a tuple with the ParentTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetParentTaskOk() (*ViewRelationship, bool) {
	if o == nil || o.ParentTask == nil {
		return nil, false
	}
	return o.ParentTask, true
}

// HasParentTask returns a boolean if a field has been set.
func (o *ViewTask) HasParentTask() bool {
	if o != nil && o.ParentTask != nil {
		return true
	}

	return false
}

// SetParentTask gets a reference to the given ViewRelationship and assigns it to the ParentTask field.
func (o *ViewTask) SetParentTask(v ViewRelationship) {
	o.ParentTask = &v
}

// GetParentTaskId returns the ParentTaskId field value if set, zero value otherwise.
func (o *ViewTask) GetParentTaskId() int32 {
	if o == nil || o.ParentTaskId == nil {
		var ret int32
		return ret
	}
	return *o.ParentTaskId
}

// GetParentTaskIdOk returns a tuple with the ParentTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetParentTaskIdOk() (*int32, bool) {
	if o == nil || o.ParentTaskId == nil {
		return nil, false
	}
	return o.ParentTaskId, true
}

// HasParentTaskId returns a boolean if a field has been set.
func (o *ViewTask) HasParentTaskId() bool {
	if o != nil && o.ParentTaskId != nil {
		return true
	}

	return false
}

// SetParentTaskId gets a reference to the given int32 and assigns it to the ParentTaskId field.
func (o *ViewTask) SetParentTaskId(v int32) {
	o.ParentTaskId = &v
}

// GetPredecessorIds returns the PredecessorIds field value if set, zero value otherwise.
func (o *ViewTask) GetPredecessorIds() []int32 {
	if o == nil || o.PredecessorIds == nil {
		var ret []int32
		return ret
	}
	return *o.PredecessorIds
}

// GetPredecessorIdsOk returns a tuple with the PredecessorIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetPredecessorIdsOk() (*[]int32, bool) {
	if o == nil || o.PredecessorIds == nil {
		return nil, false
	}
	return o.PredecessorIds, true
}

// HasPredecessorIds returns a boolean if a field has been set.
func (o *ViewTask) HasPredecessorIds() bool {
	if o != nil && o.PredecessorIds != nil {
		return true
	}

	return false
}

// SetPredecessorIds gets a reference to the given []int32 and assigns it to the PredecessorIds field.
func (o *ViewTask) SetPredecessorIds(v []int32) {
	o.PredecessorIds = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ViewTask) GetPriority() string {
	if o == nil || o.Priority == nil {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetPriorityOk() (*string, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ViewTask) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *ViewTask) SetPriority(v string) {
	o.Priority = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *ViewTask) GetProgress() int32 {
	if o == nil || o.Progress == nil {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetProgressOk() (*int32, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *ViewTask) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *ViewTask) SetProgress(v int32) {
	o.Progress = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ViewTask) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ViewTask) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ViewTask) SetStartDate(v string) {
	o.StartDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ViewTask) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ViewTask) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ViewTask) SetStatus(v string) {
	o.Status = &v
}

// GetSubTaskIds returns the SubTaskIds field value if set, zero value otherwise.
func (o *ViewTask) GetSubTaskIds() []int32 {
	if o == nil || o.SubTaskIds == nil {
		var ret []int32
		return ret
	}
	return *o.SubTaskIds
}

// GetSubTaskIdsOk returns a tuple with the SubTaskIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetSubTaskIdsOk() (*[]int32, bool) {
	if o == nil || o.SubTaskIds == nil {
		return nil, false
	}
	return o.SubTaskIds, true
}

// HasSubTaskIds returns a boolean if a field has been set.
func (o *ViewTask) HasSubTaskIds() bool {
	if o != nil && o.SubTaskIds != nil {
		return true
	}

	return false
}

// SetSubTaskIds gets a reference to the given []int32 and assigns it to the SubTaskIds field.
func (o *ViewTask) SetSubTaskIds(v []int32) {
	o.SubTaskIds = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *ViewTask) GetTagIds() []int32 {
	if o == nil || o.TagIds == nil {
		var ret []int32
		return ret
	}
	return *o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetTagIdsOk() (*[]int32, bool) {
	if o == nil || o.TagIds == nil {
		return nil, false
	}
	return o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *ViewTask) HasTagIds() bool {
	if o != nil && o.TagIds != nil {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []int32 and assigns it to the TagIds field.
func (o *ViewTask) SetTagIds(v []int32) {
	o.TagIds = &v
}

// GetTasklist returns the Tasklist field value if set, zero value otherwise.
func (o *ViewTask) GetTasklist() ViewRelationship {
	if o == nil || o.Tasklist == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Tasklist
}

// GetTasklistOk returns a tuple with the Tasklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetTasklistOk() (*ViewRelationship, bool) {
	if o == nil || o.Tasklist == nil {
		return nil, false
	}
	return o.Tasklist, true
}

// HasTasklist returns a boolean if a field has been set.
func (o *ViewTask) HasTasklist() bool {
	if o != nil && o.Tasklist != nil {
		return true
	}

	return false
}

// SetTasklist gets a reference to the given ViewRelationship and assigns it to the Tasklist field.
func (o *ViewTask) SetTasklist(v ViewRelationship) {
	o.Tasklist = &v
}

// GetTasklistId returns the TasklistId field value if set, zero value otherwise.
func (o *ViewTask) GetTasklistId() int32 {
	if o == nil || o.TasklistId == nil {
		var ret int32
		return ret
	}
	return *o.TasklistId
}

// GetTasklistIdOk returns a tuple with the TasklistId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetTasklistIdOk() (*int32, bool) {
	if o == nil || o.TasklistId == nil {
		return nil, false
	}
	return o.TasklistId, true
}

// HasTasklistId returns a boolean if a field has been set.
func (o *ViewTask) HasTasklistId() bool {
	if o != nil && o.TasklistId != nil {
		return true
	}

	return false
}

// SetTasklistId gets a reference to the given int32 and assigns it to the TasklistId field.
func (o *ViewTask) SetTasklistId(v int32) {
	o.TasklistId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewTask) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewTask) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewTask) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *ViewTask) GetUpdatedBy() int32 {
	if o == nil || o.UpdatedBy == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetUpdatedByOk() (*int32, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *ViewTask) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given int32 and assigns it to the UpdatedBy field.
func (o *ViewTask) SetUpdatedBy(v int32) {
	o.UpdatedBy = &v
}

// GetUserPermissions returns the UserPermissions field value if set, zero value otherwise.
func (o *ViewTask) GetUserPermissions() ViewTaskPermissions {
	if o == nil || o.UserPermissions == nil {
		var ret ViewTaskPermissions
		return ret
	}
	return *o.UserPermissions
}

// GetUserPermissionsOk returns a tuple with the UserPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTask) GetUserPermissionsOk() (*ViewTaskPermissions, bool) {
	if o == nil || o.UserPermissions == nil {
		return nil, false
	}
	return o.UserPermissions, true
}

// HasUserPermissions returns a boolean if a field has been set.
func (o *ViewTask) HasUserPermissions() bool {
	if o != nil && o.UserPermissions != nil {
		return true
	}

	return false
}

// SetUserPermissions gets a reference to the given ViewTaskPermissions and assigns it to the UserPermissions field.
func (o *ViewTask) SetUserPermissions(v ViewTaskPermissions) {
	o.UserPermissions = &v
}

func (o ViewTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssigneeCompanies != nil {
		toSerialize["assigneeCompanies"] = o.AssigneeCompanies
	}
	if o.AssigneeCompanyIds != nil {
		toSerialize["assigneeCompanyIds"] = o.AssigneeCompanyIds
	}
	if o.AssigneeTeamIds != nil {
		toSerialize["assigneeTeamIds"] = o.AssigneeTeamIds
	}
	if o.AssigneeTeams != nil {
		toSerialize["assigneeTeams"] = o.AssigneeTeams
	}
	if o.AssigneeUserIds != nil {
		toSerialize["assigneeUserIds"] = o.AssigneeUserIds
	}
	if o.AssigneeUsers != nil {
		toSerialize["assigneeUsers"] = o.AssigneeUsers
	}
	if o.CompletedBy != nil {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if o.CompletedOn != nil {
		toSerialize["completedOn"] = o.CompletedOn
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CreatedByUserId != nil {
		toSerialize["createdByUserId"] = o.CreatedByUserId
	}
	if o.CrmDealIds != nil {
		toSerialize["crmDealIds"] = o.CrmDealIds
	}
	if o.DateUpdated != nil {
		toSerialize["dateUpdated"] = o.DateUpdated
	}
	if o.DependencyIds != nil {
		toSerialize["dependencyIds"] = o.DependencyIds
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayOrder != nil {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if o.DueDate != nil {
		toSerialize["dueDate"] = o.DueDate
	}
	if o.EstimateMinutes != nil {
		toSerialize["estimateMinutes"] = o.EstimateMinutes
	}
	if o.HasDeskTickets != nil {
		toSerialize["hasDeskTickets"] = o.HasDeskTickets
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsPrivate != nil {
		toSerialize["isPrivate"] = o.IsPrivate
	}
	if o.LatestUpdates != nil {
		toSerialize["latestUpdates"] = o.LatestUpdates
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OriginalDueDate != nil {
		toSerialize["originalDueDate"] = o.OriginalDueDate
	}
	if o.ParentTask != nil {
		toSerialize["parentTask"] = o.ParentTask
	}
	if o.ParentTaskId != nil {
		toSerialize["parentTaskId"] = o.ParentTaskId
	}
	if o.PredecessorIds != nil {
		toSerialize["predecessorIds"] = o.PredecessorIds
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.Progress != nil {
		toSerialize["progress"] = o.Progress
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.SubTaskIds != nil {
		toSerialize["subTaskIds"] = o.SubTaskIds
	}
	if o.TagIds != nil {
		toSerialize["tagIds"] = o.TagIds
	}
	if o.Tasklist != nil {
		toSerialize["tasklist"] = o.Tasklist
	}
	if o.TasklistId != nil {
		toSerialize["tasklistId"] = o.TasklistId
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if o.UserPermissions != nil {
		toSerialize["userPermissions"] = o.UserPermissions
	}
	return json.Marshal(toSerialize)
}

type NullableViewTask struct {
	value *ViewTask
	isSet bool
}

func (v NullableViewTask) Get() *ViewTask {
	return v.value
}

func (v *NullableViewTask) Set(val *ViewTask) {
	v.value = val
	v.isSet = true
}

func (v NullableViewTask) IsSet() bool {
	return v.isSet
}

func (v *NullableViewTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewTask(val *ViewTask) *NullableViewTask {
	return &NullableViewTask{value: val, isSet: true}
}

func (v NullableViewTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


