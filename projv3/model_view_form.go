/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewForm Form contains all the information returned from a form.
type ViewForm struct {
	ConfirmationMessage *string `json:"confirmationMessage,omitempty"`
	Content *ViewContent `json:"content,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	CreatedBy *ViewRelationship `json:"createdBy,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	DeletedBy *ViewRelationship `json:"deletedBy,omitempty"`
	HostObject *ViewRelationship `json:"hostObject,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Installation *ViewRelationship `json:"installation,omitempty"`
	IsShared *bool `json:"isShared,omitempty"`
	PromptAdditionalSubmissions *bool `json:"promptAdditionalSubmissions,omitempty"`
	State *string `json:"state,omitempty"`
	TaskTitleFieldId *string `json:"taskTitleFieldId,omitempty"`
	Token *ViewToken `json:"token,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	UpdatedBy *ViewRelationship `json:"updatedBy,omitempty"`
}

// NewViewForm instantiates a new ViewForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewForm() *ViewForm {
	this := ViewForm{}
	return &this
}

// NewViewFormWithDefaults instantiates a new ViewForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewFormWithDefaults() *ViewForm {
	this := ViewForm{}
	return &this
}

// GetConfirmationMessage returns the ConfirmationMessage field value if set, zero value otherwise.
func (o *ViewForm) GetConfirmationMessage() string {
	if o == nil || o.ConfirmationMessage == nil {
		var ret string
		return ret
	}
	return *o.ConfirmationMessage
}

// GetConfirmationMessageOk returns a tuple with the ConfirmationMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetConfirmationMessageOk() (*string, bool) {
	if o == nil || o.ConfirmationMessage == nil {
		return nil, false
	}
	return o.ConfirmationMessage, true
}

// HasConfirmationMessage returns a boolean if a field has been set.
func (o *ViewForm) HasConfirmationMessage() bool {
	if o != nil && o.ConfirmationMessage != nil {
		return true
	}

	return false
}

// SetConfirmationMessage gets a reference to the given string and assigns it to the ConfirmationMessage field.
func (o *ViewForm) SetConfirmationMessage(v string) {
	o.ConfirmationMessage = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ViewForm) GetContent() ViewContent {
	if o == nil || o.Content == nil {
		var ret ViewContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetContentOk() (*ViewContent, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ViewForm) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given ViewContent and assigns it to the Content field.
func (o *ViewForm) SetContent(v ViewContent) {
	o.Content = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ViewForm) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ViewForm) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ViewForm) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ViewForm) GetCreatedBy() ViewRelationship {
	if o == nil || o.CreatedBy == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetCreatedByOk() (*ViewRelationship, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ViewForm) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given ViewRelationship and assigns it to the CreatedBy field.
func (o *ViewForm) SetCreatedBy(v ViewRelationship) {
	o.CreatedBy = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ViewForm) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ViewForm) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *ViewForm) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *ViewForm) GetDeletedBy() ViewRelationship {
	if o == nil || o.DeletedBy == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetDeletedByOk() (*ViewRelationship, bool) {
	if o == nil || o.DeletedBy == nil {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *ViewForm) HasDeletedBy() bool {
	if o != nil && o.DeletedBy != nil {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given ViewRelationship and assigns it to the DeletedBy field.
func (o *ViewForm) SetDeletedBy(v ViewRelationship) {
	o.DeletedBy = &v
}

// GetHostObject returns the HostObject field value if set, zero value otherwise.
func (o *ViewForm) GetHostObject() ViewRelationship {
	if o == nil || o.HostObject == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.HostObject
}

// GetHostObjectOk returns a tuple with the HostObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetHostObjectOk() (*ViewRelationship, bool) {
	if o == nil || o.HostObject == nil {
		return nil, false
	}
	return o.HostObject, true
}

// HasHostObject returns a boolean if a field has been set.
func (o *ViewForm) HasHostObject() bool {
	if o != nil && o.HostObject != nil {
		return true
	}

	return false
}

// SetHostObject gets a reference to the given ViewRelationship and assigns it to the HostObject field.
func (o *ViewForm) SetHostObject(v ViewRelationship) {
	o.HostObject = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewForm) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewForm) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewForm) SetId(v int32) {
	o.Id = &v
}

// GetInstallation returns the Installation field value if set, zero value otherwise.
func (o *ViewForm) GetInstallation() ViewRelationship {
	if o == nil || o.Installation == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Installation
}

// GetInstallationOk returns a tuple with the Installation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetInstallationOk() (*ViewRelationship, bool) {
	if o == nil || o.Installation == nil {
		return nil, false
	}
	return o.Installation, true
}

// HasInstallation returns a boolean if a field has been set.
func (o *ViewForm) HasInstallation() bool {
	if o != nil && o.Installation != nil {
		return true
	}

	return false
}

// SetInstallation gets a reference to the given ViewRelationship and assigns it to the Installation field.
func (o *ViewForm) SetInstallation(v ViewRelationship) {
	o.Installation = &v
}

// GetIsShared returns the IsShared field value if set, zero value otherwise.
func (o *ViewForm) GetIsShared() bool {
	if o == nil || o.IsShared == nil {
		var ret bool
		return ret
	}
	return *o.IsShared
}

// GetIsSharedOk returns a tuple with the IsShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetIsSharedOk() (*bool, bool) {
	if o == nil || o.IsShared == nil {
		return nil, false
	}
	return o.IsShared, true
}

// HasIsShared returns a boolean if a field has been set.
func (o *ViewForm) HasIsShared() bool {
	if o != nil && o.IsShared != nil {
		return true
	}

	return false
}

// SetIsShared gets a reference to the given bool and assigns it to the IsShared field.
func (o *ViewForm) SetIsShared(v bool) {
	o.IsShared = &v
}

// GetPromptAdditionalSubmissions returns the PromptAdditionalSubmissions field value if set, zero value otherwise.
func (o *ViewForm) GetPromptAdditionalSubmissions() bool {
	if o == nil || o.PromptAdditionalSubmissions == nil {
		var ret bool
		return ret
	}
	return *o.PromptAdditionalSubmissions
}

// GetPromptAdditionalSubmissionsOk returns a tuple with the PromptAdditionalSubmissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetPromptAdditionalSubmissionsOk() (*bool, bool) {
	if o == nil || o.PromptAdditionalSubmissions == nil {
		return nil, false
	}
	return o.PromptAdditionalSubmissions, true
}

// HasPromptAdditionalSubmissions returns a boolean if a field has been set.
func (o *ViewForm) HasPromptAdditionalSubmissions() bool {
	if o != nil && o.PromptAdditionalSubmissions != nil {
		return true
	}

	return false
}

// SetPromptAdditionalSubmissions gets a reference to the given bool and assigns it to the PromptAdditionalSubmissions field.
func (o *ViewForm) SetPromptAdditionalSubmissions(v bool) {
	o.PromptAdditionalSubmissions = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ViewForm) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ViewForm) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ViewForm) SetState(v string) {
	o.State = &v
}

// GetTaskTitleFieldId returns the TaskTitleFieldId field value if set, zero value otherwise.
func (o *ViewForm) GetTaskTitleFieldId() string {
	if o == nil || o.TaskTitleFieldId == nil {
		var ret string
		return ret
	}
	return *o.TaskTitleFieldId
}

// GetTaskTitleFieldIdOk returns a tuple with the TaskTitleFieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetTaskTitleFieldIdOk() (*string, bool) {
	if o == nil || o.TaskTitleFieldId == nil {
		return nil, false
	}
	return o.TaskTitleFieldId, true
}

// HasTaskTitleFieldId returns a boolean if a field has been set.
func (o *ViewForm) HasTaskTitleFieldId() bool {
	if o != nil && o.TaskTitleFieldId != nil {
		return true
	}

	return false
}

// SetTaskTitleFieldId gets a reference to the given string and assigns it to the TaskTitleFieldId field.
func (o *ViewForm) SetTaskTitleFieldId(v string) {
	o.TaskTitleFieldId = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *ViewForm) GetToken() ViewToken {
	if o == nil || o.Token == nil {
		var ret ViewToken
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetTokenOk() (*ViewToken, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *ViewForm) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given ViewToken and assigns it to the Token field.
func (o *ViewForm) SetToken(v ViewToken) {
	o.Token = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewForm) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewForm) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewForm) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *ViewForm) GetUpdatedBy() ViewRelationship {
	if o == nil || o.UpdatedBy == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewForm) GetUpdatedByOk() (*ViewRelationship, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *ViewForm) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given ViewRelationship and assigns it to the UpdatedBy field.
func (o *ViewForm) SetUpdatedBy(v ViewRelationship) {
	o.UpdatedBy = &v
}

func (o ViewForm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfirmationMessage != nil {
		toSerialize["confirmationMessage"] = o.ConfirmationMessage
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if o.DeletedBy != nil {
		toSerialize["deletedBy"] = o.DeletedBy
	}
	if o.HostObject != nil {
		toSerialize["hostObject"] = o.HostObject
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Installation != nil {
		toSerialize["installation"] = o.Installation
	}
	if o.IsShared != nil {
		toSerialize["isShared"] = o.IsShared
	}
	if o.PromptAdditionalSubmissions != nil {
		toSerialize["promptAdditionalSubmissions"] = o.PromptAdditionalSubmissions
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.TaskTitleFieldId != nil {
		toSerialize["taskTitleFieldId"] = o.TaskTitleFieldId
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	return json.Marshal(toSerialize)
}

type NullableViewForm struct {
	value *ViewForm
	isSet bool
}

func (v NullableViewForm) Get() *ViewForm {
	return v.value
}

func (v *NullableViewForm) Set(val *ViewForm) {
	v.value = val
	v.isSet = true
}

func (v NullableViewForm) IsSet() bool {
	return v.isSet
}

func (v *NullableViewForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewForm(val *ViewForm) *NullableViewForm {
	return &NullableViewForm{value: val, isSet: true}
}

func (v NullableViewForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


