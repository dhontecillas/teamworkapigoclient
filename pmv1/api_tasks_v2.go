/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// TasksV2ApiService TasksV2Api service
type TasksV2ApiService service

type ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest struct {
	ctx _context.Context
	ApiService *TasksV2ApiService
	id int32
	includeDependencies *bool
	onlyDependencies *bool
	onlyBasicFields *bool
	onlyActionable *bool
	nextPageToken *int32
}

func (r ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest) IncludeDependencies(includeDependencies bool) ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest {
	r.includeDependencies = &includeDependencies
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest) OnlyDependencies(onlyDependencies bool) ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest {
	r.onlyDependencies = &onlyDependencies
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest) OnlyBasicFields(onlyBasicFields bool) ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest {
	r.onlyBasicFields = &onlyBasicFields
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest) OnlyActionable(onlyActionable bool) ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest {
	r.onlyActionable = &onlyActionable
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest) NextPageToken(nextPageToken int32) ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest {
	r.nextPageToken = &nextPageToken
	return r
}

func (r ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest) Execute() (InlineResponse20055, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsIdPredecessorsJsonExecute(r)
}

/*
 * GETProjectsApiV2ProjectsIdPredecessorsJson Retrieve all Task Predecessors/Dependencies on a given Project
 * **NOTE: This is a V2 endpoint. These endpoints can be used but are subject to change.**

Returns Predecessors tasks of tasks within the project specified by ID in the URL. A task which has predecessors cannot be completed unless they are first, so they are essentially blocking a task.

- includeDependencies and onlyDependencies are mutually exclusive query options. By default predecessors within the project are returned, but using these switches dependencies of this project can be included or exclusively returned. These switches will only impact the response where a project has dependency/predecessor links with other projects.

<h4>Additional notes:</h4>

- This call uses pagination (page tokens). As returning schema is small, 2000 records will be returned per page.
---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id ID of the Project to query
 * @return ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest
 */
func (a *TasksV2ApiService) GETProjectsApiV2ProjectsIdPredecessorsJson(ctx _context.Context, id int32) ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest {
	return ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20055
 */
func (a *TasksV2ApiService) GETProjectsApiV2ProjectsIdPredecessorsJsonExecute(r ApiGETProjectsApiV2ProjectsIdPredecessorsJsonRequest) (InlineResponse20055, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20055
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TasksV2ApiService.GETProjectsApiV2ProjectsIdPredecessorsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/{id}/predecessors.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.includeDependencies != nil {
		localVarQueryParams.Add("includeDependencies", parameterToString(*r.includeDependencies, ""))
	}
	if r.onlyDependencies != nil {
		localVarQueryParams.Add("onlyDependencies", parameterToString(*r.onlyDependencies, ""))
	}
	if r.onlyBasicFields != nil {
		localVarQueryParams.Add("onlyBasicFields", parameterToString(*r.onlyBasicFields, ""))
	}
	if r.onlyActionable != nil {
		localVarQueryParams.Add("onlyActionable", parameterToString(*r.onlyActionable, ""))
	}
	if r.nextPageToken != nil {
		localVarQueryParams.Add("nextPageToken", parameterToString(*r.nextPageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest struct {
	ctx _context.Context
	ApiService *TasksV2ApiService
	id int32
	filter *string
	filterText *[]string
	responsiblePartyIds *[]int32
	creatorIds *[]int32
	ignoreStartDates *bool
	useStartDatesForTodaysTasks *bool
	include *string
	includeToday *bool
	includeBlockedTasks *bool
	updatedAfterDate *time.Time
	completedAfterDate *time.Time
	completedBeforeDate *time.Time
	sort *string
	sortOrder *string
	page *int32
	pageSize *int32
	offsetCount *int32
	startDate *string
	endDate *string
	showDeleted *bool
	includeTasksFromDeletedLists *bool
	deletedAfterDate *time.Time
	showCompletedLists *bool
	includeCompletedSubtasks *bool
	getSubTasks *bool
	includeCompletedTasks *bool
	includeTaskId *int32
	projectIds *[]int32
	projectStatus *string
	includeArchivedProjects *bool
	projectHealths *[]int32
	projectCategoryIds *[]int32
	projectCompanyIds *[]int32
	projectOwnerIds *[]int32
	projectTagIds *[]int32
	matchAllProjectTags *bool
	onlyStarredProjects *bool
	followerIds *[]string
	tagIds *[]int32
	createdAfterDate *time.Time
	createdBeforeDate *time.Time
	onlyTasksWithTickets *bool
	onlyTasksWithUnreadComments *bool
	includeUntaggedTasks *bool
	onlyUntaggedTasks *bool
	priority *string
	excludeTagIds *[]int32
	onlyTasksWithEstimatedTime *bool
	includeTasksWithoutDueDates *bool
	assigneeCompanyIds *[]int32
}

func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) Filter(filter string) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) FilterText(filterText []string) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) Include(include string) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) IncludeBlockedTasks(includeBlockedTasks bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.includeBlockedTasks = &includeBlockedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) CompletedAfterDate(completedAfterDate time.Time) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) CompletedBeforeDate(completedBeforeDate time.Time) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) Sort(sort string) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) Page(page int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) OffsetCount(offsetCount int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.offsetCount = &offsetCount
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) StartDate(startDate string) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) EndDate(endDate string) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) DeletedAfterDate(deletedAfterDate time.Time) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.deletedAfterDate = &deletedAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) FollowerIds(followerIds []string) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) CreatedAfterDate(createdAfterDate time.Time) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) CreatedBeforeDate(createdBeforeDate time.Time) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) OnlyTasksWithUnreadComments(onlyTasksWithUnreadComments bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.onlyTasksWithUnreadComments = &onlyTasksWithUnreadComments
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) Priority(priority string) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) OnlyTasksWithEstimatedTime(onlyTasksWithEstimatedTime bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.onlyTasksWithEstimatedTime = &onlyTasksWithEstimatedTime
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) Execute() (InlineResponse20056, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2ProjectsIdTaskidsJsonExecute(r)
}

/*
 * GETProjectsApiV2ProjectsIdTaskidsJson Get all Tasks IDs on a given Project
 * **NOTE: This is a V2 endpoint. These endpoints can be used but are subject to change.**

Returns the Task IDs of a Project by using the the Project ID in the URL.

<h4>Additional notes:</h4>

- This call uses pagination. 250 tasks per page.
---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id ID of Project to query
 * @return ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest
 */
func (a *TasksV2ApiService) GETProjectsApiV2ProjectsIdTaskidsJson(ctx _context.Context, id int32) ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest {
	return ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20056
 */
func (a *TasksV2ApiService) GETProjectsApiV2ProjectsIdTaskidsJsonExecute(r ApiGETProjectsApiV2ProjectsIdTaskidsJsonRequest) (InlineResponse20056, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20056
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TasksV2ApiService.GETProjectsApiV2ProjectsIdTaskidsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/projects/{id}/taskids.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeBlockedTasks != nil {
		localVarQueryParams.Add("includeBlockedTasks", parameterToString(*r.includeBlockedTasks, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.offsetCount != nil {
		localVarQueryParams.Add("offsetCount", parameterToString(*r.offsetCount, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.deletedAfterDate != nil {
		localVarQueryParams.Add("deletedAfterDate", parameterToString(*r.deletedAfterDate, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("follower-ids", parameterToString(*r.followerIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyTasksWithUnreadComments != nil {
		localVarQueryParams.Add("onlyTasksWithUnreadComments", parameterToString(*r.onlyTasksWithUnreadComments, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.onlyTasksWithEstimatedTime != nil {
		localVarQueryParams.Add("onlyTasksWithEstimatedTime", parameterToString(*r.onlyTasksWithEstimatedTime, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest struct {
	ctx _context.Context
	ApiService *TasksV2ApiService
	id int32
	filter *string
	filterText *[]string
	responsiblePartyIds *[]int32
	creatorIds *[]int32
	ignoreStartDates *bool
	useStartDatesForTodaysTasks *bool
	include *string
	includeToday *bool
	includeBlockedTasks *bool
	updatedAfterDate *time.Time
	completedAfterDate *time.Time
	completedBeforeDate *time.Time
	sort *string
	sortOrder *string
	page *int32
	pageSize *int32
	offsetCount *int32
	startDate *string
	endDate *string
	showDeleted *bool
	includeTasksFromDeletedLists *bool
	deletedAfterDate *time.Time
	showCompletedLists *bool
	includeCompletedSubtasks *bool
	getSubTasks *bool
	includeCompletedTasks *bool
	includeTaskId *int32
	projectIds *[]int32
	projectStatus *string
	includeArchivedProjects *bool
	projectHealths *[]int32
	projectCategoryIds *[]int32
	projectCompanyIds *[]int32
	projectOwnerIds *[]int32
	projectTagIds *[]int32
	matchAllProjectTags *bool
	onlyStarredProjects *bool
	followerIds *[]string
	tagIds *[]int32
	createdAfterDate *time.Time
	createdBeforeDate *time.Time
	onlyTasksWithTickets *bool
	onlyTasksWithUnreadComments *bool
	includeUntaggedTasks *bool
	onlyUntaggedTasks *bool
	priority *string
	excludeTagIds *[]int32
	onlyTasksWithEstimatedTime *bool
	includeTasksWithoutDueDates *bool
	assigneeCompanyIds *[]int32
}

func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) Filter(filter string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.filter = &filter
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) FilterText(filterText []string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.filterText = &filterText
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) Include(include string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) IncludeToday(includeToday bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.includeToday = &includeToday
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) IncludeBlockedTasks(includeBlockedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.includeBlockedTasks = &includeBlockedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) CompletedAfterDate(completedAfterDate time.Time) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.completedAfterDate = &completedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) CompletedBeforeDate(completedBeforeDate time.Time) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.completedBeforeDate = &completedBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) Sort(sort string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) SortOrder(sortOrder string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) Page(page int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) OffsetCount(offsetCount int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.offsetCount = &offsetCount
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) StartDate(startDate string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) EndDate(endDate string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) IncludeTasksFromDeletedLists(includeTasksFromDeletedLists bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.includeTasksFromDeletedLists = &includeTasksFromDeletedLists
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) DeletedAfterDate(deletedAfterDate time.Time) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.deletedAfterDate = &deletedAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ShowCompletedLists(showCompletedLists bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.showCompletedLists = &showCompletedLists
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) IncludeCompletedSubtasks(includeCompletedSubtasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.includeCompletedSubtasks = &includeCompletedSubtasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) GetSubTasks(getSubTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.getSubTasks = &getSubTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) IncludeTaskId(includeTaskId int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.includeTaskId = &includeTaskId
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ProjectHealths(projectHealths []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) FollowerIds(followerIds []string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.followerIds = &followerIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) CreatedAfterDate(createdAfterDate time.Time) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) CreatedBeforeDate(createdBeforeDate time.Time) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.createdBeforeDate = &createdBeforeDate
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) OnlyTasksWithTickets(onlyTasksWithTickets bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.onlyTasksWithTickets = &onlyTasksWithTickets
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) OnlyTasksWithUnreadComments(onlyTasksWithUnreadComments bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.onlyTasksWithUnreadComments = &onlyTasksWithUnreadComments
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) IncludeUntaggedTasks(includeUntaggedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.includeUntaggedTasks = &includeUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) Priority(priority string) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.priority = &priority
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) OnlyTasksWithEstimatedTime(onlyTasksWithEstimatedTime bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.onlyTasksWithEstimatedTime = &onlyTasksWithEstimatedTime
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) IncludeTasksWithoutDueDates(includeTasksWithoutDueDates bool) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.includeTasksWithoutDueDates = &includeTasksWithoutDueDates
	return r
}
func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) Execute() (InlineResponse20056, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV2TasklistsTasklistIdTaskidsJsonExecute(r)
}

/*
 * GETProjectsApiV2TasklistsTasklistIdTaskidsJson Get all Task IDs on a given Task List
 * **NOTE: This is a V2 endpoint. These endpoints can be used but are subject to change.**

Returns the Task IDs of a Task List by using the the Task List ID in the URL.

<h4>Additional notes:</h4>

- This call uses pagination. 250 tasks per page.
---
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id ID of Project to query
 * @return ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest
 */
func (a *TasksV2ApiService) GETProjectsApiV2TasklistsTasklistIdTaskidsJson(ctx _context.Context, id int32) ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest {
	return ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20056
 */
func (a *TasksV2ApiService) GETProjectsApiV2TasklistsTasklistIdTaskidsJsonExecute(r ApiGETProjectsApiV2TasklistsTasklistIdTaskidsJsonRequest) (InlineResponse20056, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20056
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TasksV2ApiService.GETProjectsApiV2TasklistsTasklistIdTaskidsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v2/tasklists/{id}/taskids.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.filterText != nil {
		localVarQueryParams.Add("filterText", parameterToString(*r.filterText, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.includeToday != nil {
		localVarQueryParams.Add("includeToday", parameterToString(*r.includeToday, ""))
	}
	if r.includeBlockedTasks != nil {
		localVarQueryParams.Add("includeBlockedTasks", parameterToString(*r.includeBlockedTasks, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.completedAfterDate != nil {
		localVarQueryParams.Add("completedAfterDate", parameterToString(*r.completedAfterDate, ""))
	}
	if r.completedBeforeDate != nil {
		localVarQueryParams.Add("completedBeforeDate", parameterToString(*r.completedBeforeDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.offsetCount != nil {
		localVarQueryParams.Add("offsetCount", parameterToString(*r.offsetCount, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.includeTasksFromDeletedLists != nil {
		localVarQueryParams.Add("includeTasksFromDeletedLists", parameterToString(*r.includeTasksFromDeletedLists, ""))
	}
	if r.deletedAfterDate != nil {
		localVarQueryParams.Add("deletedAfterDate", parameterToString(*r.deletedAfterDate, ""))
	}
	if r.showCompletedLists != nil {
		localVarQueryParams.Add("showCompletedLists", parameterToString(*r.showCompletedLists, ""))
	}
	if r.includeCompletedSubtasks != nil {
		localVarQueryParams.Add("includeCompletedSubtasks", parameterToString(*r.includeCompletedSubtasks, ""))
	}
	if r.getSubTasks != nil {
		localVarQueryParams.Add("getSubTasks", parameterToString(*r.getSubTasks, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeTaskId != nil {
		localVarQueryParams.Add("includeTaskId", parameterToString(*r.includeTaskId, ""))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.followerIds != nil {
		localVarQueryParams.Add("follower-ids", parameterToString(*r.followerIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.createdBeforeDate != nil {
		localVarQueryParams.Add("createdBeforeDate", parameterToString(*r.createdBeforeDate, ""))
	}
	if r.onlyTasksWithTickets != nil {
		localVarQueryParams.Add("onlyTasksWithTickets", parameterToString(*r.onlyTasksWithTickets, ""))
	}
	if r.onlyTasksWithUnreadComments != nil {
		localVarQueryParams.Add("onlyTasksWithUnreadComments", parameterToString(*r.onlyTasksWithUnreadComments, ""))
	}
	if r.includeUntaggedTasks != nil {
		localVarQueryParams.Add("includeUntaggedTasks", parameterToString(*r.includeUntaggedTasks, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.priority != nil {
		localVarQueryParams.Add("priority", parameterToString(*r.priority, ""))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.onlyTasksWithEstimatedTime != nil {
		localVarQueryParams.Add("onlyTasksWithEstimatedTime", parameterToString(*r.onlyTasksWithEstimatedTime, ""))
	}
	if r.includeTasksWithoutDueDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDueDates", parameterToString(*r.includeTasksWithoutDueDates, ""))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
