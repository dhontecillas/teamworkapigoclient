/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewApp App contains all the information returned from a app.
type ViewApp struct {
	// Settings is an optional list of config settings for the App can be used to build up an options panel
	Appsettings *[]ViewRelationship `json:"appsettings,omitempty"`
	// BaseURL is the CDN location for the latest version of the App
	BaseUrl *string `json:"baseUrl,omitempty"`
	// Code is a text unique identifier slug for the App
	Code *string `json:"code,omitempty"`
	// CreatedAt is the date the app was created
	CreatedAt *string `json:"createdAt,omitempty"`
	// Description is a detailed description of the App
	Description *string `json:"description,omitempty"`
	// ID is the unique identifier for the App
	Id *int32 `json:"id,omitempty"`
	// IsInstalled denotes if the app can be used by the installation
	IsInstalled *bool `json:"isInstalled,omitempty"`
	// IsUninstallable denotes if the app can be removed, some apps are added by default and can't be removed.
	IsUninstallable *bool `json:"isUninstallable,omitempty"`
	// IsVerified denotes if the App has been verified by Teamwork for usage
	IsVerified *bool `json:"isVerified,omitempty"`
	// LogoURL is the URL to the Apps logo if it has one
	LogoURL *string `json:"logoURL,omitempty"`
	// name is the human readable name
	Name *string `json:"name,omitempty"`
	Publisher *ViewRelationship `json:"publisher,omitempty"`
	// ShortDescription is a snippet of information detailing the app
	ShortDescription *string `json:"shortDescription,omitempty"`
	// CreatedAt is the date the app was last updated
	UpdatedAt *string `json:"updatedAt,omitempty"`
	// URL is the location of the App feature page on the marketplace
	Url *string `json:"url,omitempty"`
	// VerifiedAt, if provided, is the date the App was verified by Teamwork
	VerifiedAt *string `json:"verifiedAt,omitempty"`
}

// NewViewApp instantiates a new ViewApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewApp() *ViewApp {
	this := ViewApp{}
	return &this
}

// NewViewAppWithDefaults instantiates a new ViewApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewAppWithDefaults() *ViewApp {
	this := ViewApp{}
	return &this
}

// GetAppsettings returns the Appsettings field value if set, zero value otherwise.
func (o *ViewApp) GetAppsettings() []ViewRelationship {
	if o == nil || o.Appsettings == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Appsettings
}

// GetAppsettingsOk returns a tuple with the Appsettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetAppsettingsOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Appsettings == nil {
		return nil, false
	}
	return o.Appsettings, true
}

// HasAppsettings returns a boolean if a field has been set.
func (o *ViewApp) HasAppsettings() bool {
	if o != nil && o.Appsettings != nil {
		return true
	}

	return false
}

// SetAppsettings gets a reference to the given []ViewRelationship and assigns it to the Appsettings field.
func (o *ViewApp) SetAppsettings(v []ViewRelationship) {
	o.Appsettings = &v
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *ViewApp) GetBaseUrl() string {
	if o == nil || o.BaseUrl == nil {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetBaseUrlOk() (*string, bool) {
	if o == nil || o.BaseUrl == nil {
		return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *ViewApp) HasBaseUrl() bool {
	if o != nil && o.BaseUrl != nil {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *ViewApp) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ViewApp) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ViewApp) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ViewApp) SetCode(v string) {
	o.Code = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ViewApp) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ViewApp) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ViewApp) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ViewApp) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ViewApp) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ViewApp) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewApp) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewApp) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewApp) SetId(v int32) {
	o.Id = &v
}

// GetIsInstalled returns the IsInstalled field value if set, zero value otherwise.
func (o *ViewApp) GetIsInstalled() bool {
	if o == nil || o.IsInstalled == nil {
		var ret bool
		return ret
	}
	return *o.IsInstalled
}

// GetIsInstalledOk returns a tuple with the IsInstalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetIsInstalledOk() (*bool, bool) {
	if o == nil || o.IsInstalled == nil {
		return nil, false
	}
	return o.IsInstalled, true
}

// HasIsInstalled returns a boolean if a field has been set.
func (o *ViewApp) HasIsInstalled() bool {
	if o != nil && o.IsInstalled != nil {
		return true
	}

	return false
}

// SetIsInstalled gets a reference to the given bool and assigns it to the IsInstalled field.
func (o *ViewApp) SetIsInstalled(v bool) {
	o.IsInstalled = &v
}

// GetIsUninstallable returns the IsUninstallable field value if set, zero value otherwise.
func (o *ViewApp) GetIsUninstallable() bool {
	if o == nil || o.IsUninstallable == nil {
		var ret bool
		return ret
	}
	return *o.IsUninstallable
}

// GetIsUninstallableOk returns a tuple with the IsUninstallable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetIsUninstallableOk() (*bool, bool) {
	if o == nil || o.IsUninstallable == nil {
		return nil, false
	}
	return o.IsUninstallable, true
}

// HasIsUninstallable returns a boolean if a field has been set.
func (o *ViewApp) HasIsUninstallable() bool {
	if o != nil && o.IsUninstallable != nil {
		return true
	}

	return false
}

// SetIsUninstallable gets a reference to the given bool and assigns it to the IsUninstallable field.
func (o *ViewApp) SetIsUninstallable(v bool) {
	o.IsUninstallable = &v
}

// GetIsVerified returns the IsVerified field value if set, zero value otherwise.
func (o *ViewApp) GetIsVerified() bool {
	if o == nil || o.IsVerified == nil {
		var ret bool
		return ret
	}
	return *o.IsVerified
}

// GetIsVerifiedOk returns a tuple with the IsVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetIsVerifiedOk() (*bool, bool) {
	if o == nil || o.IsVerified == nil {
		return nil, false
	}
	return o.IsVerified, true
}

// HasIsVerified returns a boolean if a field has been set.
func (o *ViewApp) HasIsVerified() bool {
	if o != nil && o.IsVerified != nil {
		return true
	}

	return false
}

// SetIsVerified gets a reference to the given bool and assigns it to the IsVerified field.
func (o *ViewApp) SetIsVerified(v bool) {
	o.IsVerified = &v
}

// GetLogoURL returns the LogoURL field value if set, zero value otherwise.
func (o *ViewApp) GetLogoURL() string {
	if o == nil || o.LogoURL == nil {
		var ret string
		return ret
	}
	return *o.LogoURL
}

// GetLogoURLOk returns a tuple with the LogoURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetLogoURLOk() (*string, bool) {
	if o == nil || o.LogoURL == nil {
		return nil, false
	}
	return o.LogoURL, true
}

// HasLogoURL returns a boolean if a field has been set.
func (o *ViewApp) HasLogoURL() bool {
	if o != nil && o.LogoURL != nil {
		return true
	}

	return false
}

// SetLogoURL gets a reference to the given string and assigns it to the LogoURL field.
func (o *ViewApp) SetLogoURL(v string) {
	o.LogoURL = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewApp) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewApp) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewApp) SetName(v string) {
	o.Name = &v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *ViewApp) GetPublisher() ViewRelationship {
	if o == nil || o.Publisher == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetPublisherOk() (*ViewRelationship, bool) {
	if o == nil || o.Publisher == nil {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *ViewApp) HasPublisher() bool {
	if o != nil && o.Publisher != nil {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given ViewRelationship and assigns it to the Publisher field.
func (o *ViewApp) SetPublisher(v ViewRelationship) {
	o.Publisher = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *ViewApp) GetShortDescription() string {
	if o == nil || o.ShortDescription == nil {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetShortDescriptionOk() (*string, bool) {
	if o == nil || o.ShortDescription == nil {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *ViewApp) HasShortDescription() bool {
	if o != nil && o.ShortDescription != nil {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *ViewApp) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewApp) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewApp) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewApp) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ViewApp) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ViewApp) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ViewApp) SetUrl(v string) {
	o.Url = &v
}

// GetVerifiedAt returns the VerifiedAt field value if set, zero value otherwise.
func (o *ViewApp) GetVerifiedAt() string {
	if o == nil || o.VerifiedAt == nil {
		var ret string
		return ret
	}
	return *o.VerifiedAt
}

// GetVerifiedAtOk returns a tuple with the VerifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewApp) GetVerifiedAtOk() (*string, bool) {
	if o == nil || o.VerifiedAt == nil {
		return nil, false
	}
	return o.VerifiedAt, true
}

// HasVerifiedAt returns a boolean if a field has been set.
func (o *ViewApp) HasVerifiedAt() bool {
	if o != nil && o.VerifiedAt != nil {
		return true
	}

	return false
}

// SetVerifiedAt gets a reference to the given string and assigns it to the VerifiedAt field.
func (o *ViewApp) SetVerifiedAt(v string) {
	o.VerifiedAt = &v
}

func (o ViewApp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Appsettings != nil {
		toSerialize["appsettings"] = o.Appsettings
	}
	if o.BaseUrl != nil {
		toSerialize["baseUrl"] = o.BaseUrl
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsInstalled != nil {
		toSerialize["isInstalled"] = o.IsInstalled
	}
	if o.IsUninstallable != nil {
		toSerialize["isUninstallable"] = o.IsUninstallable
	}
	if o.IsVerified != nil {
		toSerialize["isVerified"] = o.IsVerified
	}
	if o.LogoURL != nil {
		toSerialize["logoURL"] = o.LogoURL
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Publisher != nil {
		toSerialize["publisher"] = o.Publisher
	}
	if o.ShortDescription != nil {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.VerifiedAt != nil {
		toSerialize["verifiedAt"] = o.VerifiedAt
	}
	return json.Marshal(toSerialize)
}

type NullableViewApp struct {
	value *ViewApp
	isSet bool
}

func (v NullableViewApp) Get() *ViewApp {
	return v.value
}

func (v *NullableViewApp) Set(val *ViewApp) {
	v.value = val
	v.isSet = true
}

func (v NullableViewApp) IsSet() bool {
	return v.isSet
}

func (v *NullableViewApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewApp(val *ViewApp) *NullableViewApp {
	return &NullableViewApp{value: val, isSet: true}
}

func (v NullableViewApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


