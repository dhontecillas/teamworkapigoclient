/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewAppSetting AppSetting contains all the information returned from a setting.
type ViewAppSetting struct {
	// DefaultValue is the value returned if Value is empty.
	DefaultValue *string `json:"defaultValue,omitempty"`
	// DisplayName is what the user should see when presented with the setting name.
	DisplayName *string `json:"displayName,omitempty"`
	// ID is the unique identifier for the setting.
	Id *int32 `json:"id,omitempty"`
	// IsSecret if true the DefaultValue and Value fields will be redacted.
	IsSecret *bool `json:"isSecret,omitempty"`
	// Name is the code name for the setting - usually not displayed to a user.
	Name *string `json:"name,omitempty"`
	// Type.
	Type *string `json:"type,omitempty"`
	// Value is the current value for the setting - if empty DefaultValue is used.
	Value *string `json:"value,omitempty"`
}

// NewViewAppSetting instantiates a new ViewAppSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewAppSetting() *ViewAppSetting {
	this := ViewAppSetting{}
	return &this
}

// NewViewAppSettingWithDefaults instantiates a new ViewAppSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewAppSettingWithDefaults() *ViewAppSetting {
	this := ViewAppSetting{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *ViewAppSetting) GetDefaultValue() string {
	if o == nil || o.DefaultValue == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAppSetting) GetDefaultValueOk() (*string, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ViewAppSetting) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *ViewAppSetting) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ViewAppSetting) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAppSetting) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ViewAppSetting) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ViewAppSetting) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewAppSetting) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAppSetting) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewAppSetting) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewAppSetting) SetId(v int32) {
	o.Id = &v
}

// GetIsSecret returns the IsSecret field value if set, zero value otherwise.
func (o *ViewAppSetting) GetIsSecret() bool {
	if o == nil || o.IsSecret == nil {
		var ret bool
		return ret
	}
	return *o.IsSecret
}

// GetIsSecretOk returns a tuple with the IsSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAppSetting) GetIsSecretOk() (*bool, bool) {
	if o == nil || o.IsSecret == nil {
		return nil, false
	}
	return o.IsSecret, true
}

// HasIsSecret returns a boolean if a field has been set.
func (o *ViewAppSetting) HasIsSecret() bool {
	if o != nil && o.IsSecret != nil {
		return true
	}

	return false
}

// SetIsSecret gets a reference to the given bool and assigns it to the IsSecret field.
func (o *ViewAppSetting) SetIsSecret(v bool) {
	o.IsSecret = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewAppSetting) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAppSetting) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewAppSetting) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewAppSetting) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ViewAppSetting) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAppSetting) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ViewAppSetting) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ViewAppSetting) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ViewAppSetting) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAppSetting) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ViewAppSetting) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ViewAppSetting) SetValue(v string) {
	o.Value = &v
}

func (o ViewAppSetting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsSecret != nil {
		toSerialize["isSecret"] = o.IsSecret
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableViewAppSetting struct {
	value *ViewAppSetting
	isSet bool
}

func (v NullableViewAppSetting) Get() *ViewAppSetting {
	return v.value
}

func (v *NullableViewAppSetting) Set(val *ViewAppSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableViewAppSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableViewAppSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewAppSetting(val *ViewAppSetting) *NullableViewAppSetting {
	return &NullableViewAppSetting{value: val, isSet: true}
}

func (v NullableViewAppSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewAppSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


