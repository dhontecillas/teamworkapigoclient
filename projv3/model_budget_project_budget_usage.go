/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// BudgetProjectBudgetUsage ProjectBudgetUsage has the summary and daily usage for a ProjectBudget
type BudgetProjectBudgetUsage struct {
	BudgetSummary *BudgetProjectBudgetSummary `json:"budgetSummary,omitempty"`
	UsageTimeline *[]BudgetCapacityUsedAtDate `json:"usageTimeline,omitempty"`
}

// NewBudgetProjectBudgetUsage instantiates a new BudgetProjectBudgetUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetProjectBudgetUsage() *BudgetProjectBudgetUsage {
	this := BudgetProjectBudgetUsage{}
	return &this
}

// NewBudgetProjectBudgetUsageWithDefaults instantiates a new BudgetProjectBudgetUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetProjectBudgetUsageWithDefaults() *BudgetProjectBudgetUsage {
	this := BudgetProjectBudgetUsage{}
	return &this
}

// GetBudgetSummary returns the BudgetSummary field value if set, zero value otherwise.
func (o *BudgetProjectBudgetUsage) GetBudgetSummary() BudgetProjectBudgetSummary {
	if o == nil || o.BudgetSummary == nil {
		var ret BudgetProjectBudgetSummary
		return ret
	}
	return *o.BudgetSummary
}

// GetBudgetSummaryOk returns a tuple with the BudgetSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetProjectBudgetUsage) GetBudgetSummaryOk() (*BudgetProjectBudgetSummary, bool) {
	if o == nil || o.BudgetSummary == nil {
		return nil, false
	}
	return o.BudgetSummary, true
}

// HasBudgetSummary returns a boolean if a field has been set.
func (o *BudgetProjectBudgetUsage) HasBudgetSummary() bool {
	if o != nil && o.BudgetSummary != nil {
		return true
	}

	return false
}

// SetBudgetSummary gets a reference to the given BudgetProjectBudgetSummary and assigns it to the BudgetSummary field.
func (o *BudgetProjectBudgetUsage) SetBudgetSummary(v BudgetProjectBudgetSummary) {
	o.BudgetSummary = &v
}

// GetUsageTimeline returns the UsageTimeline field value if set, zero value otherwise.
func (o *BudgetProjectBudgetUsage) GetUsageTimeline() []BudgetCapacityUsedAtDate {
	if o == nil || o.UsageTimeline == nil {
		var ret []BudgetCapacityUsedAtDate
		return ret
	}
	return *o.UsageTimeline
}

// GetUsageTimelineOk returns a tuple with the UsageTimeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetProjectBudgetUsage) GetUsageTimelineOk() (*[]BudgetCapacityUsedAtDate, bool) {
	if o == nil || o.UsageTimeline == nil {
		return nil, false
	}
	return o.UsageTimeline, true
}

// HasUsageTimeline returns a boolean if a field has been set.
func (o *BudgetProjectBudgetUsage) HasUsageTimeline() bool {
	if o != nil && o.UsageTimeline != nil {
		return true
	}

	return false
}

// SetUsageTimeline gets a reference to the given []BudgetCapacityUsedAtDate and assigns it to the UsageTimeline field.
func (o *BudgetProjectBudgetUsage) SetUsageTimeline(v []BudgetCapacityUsedAtDate) {
	o.UsageTimeline = &v
}

func (o BudgetProjectBudgetUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BudgetSummary != nil {
		toSerialize["budgetSummary"] = o.BudgetSummary
	}
	if o.UsageTimeline != nil {
		toSerialize["usageTimeline"] = o.UsageTimeline
	}
	return json.Marshal(toSerialize)
}

type NullableBudgetProjectBudgetUsage struct {
	value *BudgetProjectBudgetUsage
	isSet bool
}

func (v NullableBudgetProjectBudgetUsage) Get() *BudgetProjectBudgetUsage {
	return v.value
}

func (v *NullableBudgetProjectBudgetUsage) Set(val *BudgetProjectBudgetUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetProjectBudgetUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetProjectBudgetUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetProjectBudgetUsage(val *BudgetProjectBudgetUsage) *NullableBudgetProjectBudgetUsage {
	return &NullableBudgetProjectBudgetUsage{value: val, isSet: true}
}

func (v NullableBudgetProjectBudgetUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetProjectBudgetUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


