/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// PlannerWorkloadPlanner WorkloadPlanner contains all the information returned from a planner.
type PlannerWorkloadPlanner struct {
	Capacities *map[string]PlannerWorkloadPlannerCapacity `json:"capacities,omitempty"`
	User *ViewRelationship `json:"user,omitempty"`
	UserId *int32 `json:"userId,omitempty"`
}

// NewPlannerWorkloadPlanner instantiates a new PlannerWorkloadPlanner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlannerWorkloadPlanner() *PlannerWorkloadPlanner {
	this := PlannerWorkloadPlanner{}
	return &this
}

// NewPlannerWorkloadPlannerWithDefaults instantiates a new PlannerWorkloadPlanner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlannerWorkloadPlannerWithDefaults() *PlannerWorkloadPlanner {
	this := PlannerWorkloadPlanner{}
	return &this
}

// GetCapacities returns the Capacities field value if set, zero value otherwise.
func (o *PlannerWorkloadPlanner) GetCapacities() map[string]PlannerWorkloadPlannerCapacity {
	if o == nil || o.Capacities == nil {
		var ret map[string]PlannerWorkloadPlannerCapacity
		return ret
	}
	return *o.Capacities
}

// GetCapacitiesOk returns a tuple with the Capacities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannerWorkloadPlanner) GetCapacitiesOk() (*map[string]PlannerWorkloadPlannerCapacity, bool) {
	if o == nil || o.Capacities == nil {
		return nil, false
	}
	return o.Capacities, true
}

// HasCapacities returns a boolean if a field has been set.
func (o *PlannerWorkloadPlanner) HasCapacities() bool {
	if o != nil && o.Capacities != nil {
		return true
	}

	return false
}

// SetCapacities gets a reference to the given map[string]PlannerWorkloadPlannerCapacity and assigns it to the Capacities field.
func (o *PlannerWorkloadPlanner) SetCapacities(v map[string]PlannerWorkloadPlannerCapacity) {
	o.Capacities = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PlannerWorkloadPlanner) GetUser() ViewRelationship {
	if o == nil || o.User == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannerWorkloadPlanner) GetUserOk() (*ViewRelationship, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PlannerWorkloadPlanner) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given ViewRelationship and assigns it to the User field.
func (o *PlannerWorkloadPlanner) SetUser(v ViewRelationship) {
	o.User = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PlannerWorkloadPlanner) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannerWorkloadPlanner) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PlannerWorkloadPlanner) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *PlannerWorkloadPlanner) SetUserId(v int32) {
	o.UserId = &v
}

func (o PlannerWorkloadPlanner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Capacities != nil {
		toSerialize["capacities"] = o.Capacities
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullablePlannerWorkloadPlanner struct {
	value *PlannerWorkloadPlanner
	isSet bool
}

func (v NullablePlannerWorkloadPlanner) Get() *PlannerWorkloadPlanner {
	return v.value
}

func (v *NullablePlannerWorkloadPlanner) Set(val *PlannerWorkloadPlanner) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannerWorkloadPlanner) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannerWorkloadPlanner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannerWorkloadPlanner(val *PlannerWorkloadPlanner) *NullablePlannerWorkloadPlanner {
	return &NullablePlannerWorkloadPlanner{value: val, isSet: true}
}

func (v NullablePlannerWorkloadPlanner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannerWorkloadPlanner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


