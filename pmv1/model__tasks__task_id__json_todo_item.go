/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// TasksTaskIdJsonTodoItem struct for TasksTaskIdJsonTodoItem
type TasksTaskIdJsonTodoItem struct {
	Predecessors *[]TasksIdJsonTodoItem1Predecessors `json:"predecessors,omitempty"`
}

// NewTasksTaskIdJsonTodoItem instantiates a new TasksTaskIdJsonTodoItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTasksTaskIdJsonTodoItem() *TasksTaskIdJsonTodoItem {
	this := TasksTaskIdJsonTodoItem{}
	return &this
}

// NewTasksTaskIdJsonTodoItemWithDefaults instantiates a new TasksTaskIdJsonTodoItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTasksTaskIdJsonTodoItemWithDefaults() *TasksTaskIdJsonTodoItem {
	this := TasksTaskIdJsonTodoItem{}
	return &this
}

// GetPredecessors returns the Predecessors field value if set, zero value otherwise.
func (o *TasksTaskIdJsonTodoItem) GetPredecessors() []TasksIdJsonTodoItem1Predecessors {
	if o == nil || o.Predecessors == nil {
		var ret []TasksIdJsonTodoItem1Predecessors
		return ret
	}
	return *o.Predecessors
}

// GetPredecessorsOk returns a tuple with the Predecessors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TasksTaskIdJsonTodoItem) GetPredecessorsOk() (*[]TasksIdJsonTodoItem1Predecessors, bool) {
	if o == nil || o.Predecessors == nil {
		return nil, false
	}
	return o.Predecessors, true
}

// HasPredecessors returns a boolean if a field has been set.
func (o *TasksTaskIdJsonTodoItem) HasPredecessors() bool {
	if o != nil && o.Predecessors != nil {
		return true
	}

	return false
}

// SetPredecessors gets a reference to the given []TasksIdJsonTodoItem1Predecessors and assigns it to the Predecessors field.
func (o *TasksTaskIdJsonTodoItem) SetPredecessors(v []TasksIdJsonTodoItem1Predecessors) {
	o.Predecessors = &v
}

func (o TasksTaskIdJsonTodoItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Predecessors != nil {
		toSerialize["predecessors"] = o.Predecessors
	}
	return json.Marshal(toSerialize)
}

type NullableTasksTaskIdJsonTodoItem struct {
	value *TasksTaskIdJsonTodoItem
	isSet bool
}

func (v NullableTasksTaskIdJsonTodoItem) Get() *TasksTaskIdJsonTodoItem {
	return v.value
}

func (v *NullableTasksTaskIdJsonTodoItem) Set(val *TasksTaskIdJsonTodoItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTasksTaskIdJsonTodoItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTasksTaskIdJsonTodoItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTasksTaskIdJsonTodoItem(val *TasksTaskIdJsonTodoItem) *NullableTasksTaskIdJsonTodoItem {
	return &NullableTasksTaskIdJsonTodoItem{value: val, isSet: true}
}

func (v NullableTasksTaskIdJsonTodoItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTasksTaskIdJsonTodoItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


