/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewFileversion Fileversion contains all the information returned from a fileversion.
type ViewFileversion struct {
	CommentsCount *int32 `json:"commentsCount,omitempty"`
	CommentsCountRead *int32 `json:"commentsCountRead,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	File *ViewRelationship `json:"file,omitempty"`
	FileId *int32 `json:"fileId,omitempty"`
	FileVersionId *int32 `json:"fileVersionId,omitempty"`
	Name *string `json:"name,omitempty"`
	OriginalName *string `json:"originalName,omitempty"`
	Project *ViewRelationship `json:"project,omitempty"`
	ProjectId *int32 `json:"projectId,omitempty"`
	Reactions *ViewReactionsForObject `json:"reactions,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Status *string `json:"status,omitempty"`
	UploadedBy *int32 `json:"uploadedBy,omitempty"`
	VersionNo *int32 `json:"versionNo,omitempty"`
}

// NewViewFileversion instantiates a new ViewFileversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewFileversion() *ViewFileversion {
	this := ViewFileversion{}
	return &this
}

// NewViewFileversionWithDefaults instantiates a new ViewFileversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewFileversionWithDefaults() *ViewFileversion {
	this := ViewFileversion{}
	return &this
}

// GetCommentsCount returns the CommentsCount field value if set, zero value otherwise.
func (o *ViewFileversion) GetCommentsCount() int32 {
	if o == nil || o.CommentsCount == nil {
		var ret int32
		return ret
	}
	return *o.CommentsCount
}

// GetCommentsCountOk returns a tuple with the CommentsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetCommentsCountOk() (*int32, bool) {
	if o == nil || o.CommentsCount == nil {
		return nil, false
	}
	return o.CommentsCount, true
}

// HasCommentsCount returns a boolean if a field has been set.
func (o *ViewFileversion) HasCommentsCount() bool {
	if o != nil && o.CommentsCount != nil {
		return true
	}

	return false
}

// SetCommentsCount gets a reference to the given int32 and assigns it to the CommentsCount field.
func (o *ViewFileversion) SetCommentsCount(v int32) {
	o.CommentsCount = &v
}

// GetCommentsCountRead returns the CommentsCountRead field value if set, zero value otherwise.
func (o *ViewFileversion) GetCommentsCountRead() int32 {
	if o == nil || o.CommentsCountRead == nil {
		var ret int32
		return ret
	}
	return *o.CommentsCountRead
}

// GetCommentsCountReadOk returns a tuple with the CommentsCountRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetCommentsCountReadOk() (*int32, bool) {
	if o == nil || o.CommentsCountRead == nil {
		return nil, false
	}
	return o.CommentsCountRead, true
}

// HasCommentsCountRead returns a boolean if a field has been set.
func (o *ViewFileversion) HasCommentsCountRead() bool {
	if o != nil && o.CommentsCountRead != nil {
		return true
	}

	return false
}

// SetCommentsCountRead gets a reference to the given int32 and assigns it to the CommentsCountRead field.
func (o *ViewFileversion) SetCommentsCountRead(v int32) {
	o.CommentsCountRead = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ViewFileversion) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ViewFileversion) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ViewFileversion) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ViewFileversion) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ViewFileversion) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ViewFileversion) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *ViewFileversion) GetFile() ViewRelationship {
	if o == nil || o.File == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetFileOk() (*ViewRelationship, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *ViewFileversion) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given ViewRelationship and assigns it to the File field.
func (o *ViewFileversion) SetFile(v ViewRelationship) {
	o.File = &v
}

// GetFileId returns the FileId field value if set, zero value otherwise.
func (o *ViewFileversion) GetFileId() int32 {
	if o == nil || o.FileId == nil {
		var ret int32
		return ret
	}
	return *o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetFileIdOk() (*int32, bool) {
	if o == nil || o.FileId == nil {
		return nil, false
	}
	return o.FileId, true
}

// HasFileId returns a boolean if a field has been set.
func (o *ViewFileversion) HasFileId() bool {
	if o != nil && o.FileId != nil {
		return true
	}

	return false
}

// SetFileId gets a reference to the given int32 and assigns it to the FileId field.
func (o *ViewFileversion) SetFileId(v int32) {
	o.FileId = &v
}

// GetFileVersionId returns the FileVersionId field value if set, zero value otherwise.
func (o *ViewFileversion) GetFileVersionId() int32 {
	if o == nil || o.FileVersionId == nil {
		var ret int32
		return ret
	}
	return *o.FileVersionId
}

// GetFileVersionIdOk returns a tuple with the FileVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetFileVersionIdOk() (*int32, bool) {
	if o == nil || o.FileVersionId == nil {
		return nil, false
	}
	return o.FileVersionId, true
}

// HasFileVersionId returns a boolean if a field has been set.
func (o *ViewFileversion) HasFileVersionId() bool {
	if o != nil && o.FileVersionId != nil {
		return true
	}

	return false
}

// SetFileVersionId gets a reference to the given int32 and assigns it to the FileVersionId field.
func (o *ViewFileversion) SetFileVersionId(v int32) {
	o.FileVersionId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewFileversion) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewFileversion) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewFileversion) SetName(v string) {
	o.Name = &v
}

// GetOriginalName returns the OriginalName field value if set, zero value otherwise.
func (o *ViewFileversion) GetOriginalName() string {
	if o == nil || o.OriginalName == nil {
		var ret string
		return ret
	}
	return *o.OriginalName
}

// GetOriginalNameOk returns a tuple with the OriginalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetOriginalNameOk() (*string, bool) {
	if o == nil || o.OriginalName == nil {
		return nil, false
	}
	return o.OriginalName, true
}

// HasOriginalName returns a boolean if a field has been set.
func (o *ViewFileversion) HasOriginalName() bool {
	if o != nil && o.OriginalName != nil {
		return true
	}

	return false
}

// SetOriginalName gets a reference to the given string and assigns it to the OriginalName field.
func (o *ViewFileversion) SetOriginalName(v string) {
	o.OriginalName = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ViewFileversion) GetProject() ViewRelationship {
	if o == nil || o.Project == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetProjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ViewFileversion) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ViewRelationship and assigns it to the Project field.
func (o *ViewFileversion) SetProject(v ViewRelationship) {
	o.Project = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ViewFileversion) GetProjectId() int32 {
	if o == nil || o.ProjectId == nil {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetProjectIdOk() (*int32, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ViewFileversion) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ViewFileversion) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *ViewFileversion) GetReactions() ViewReactionsForObject {
	if o == nil || o.Reactions == nil {
		var ret ViewReactionsForObject
		return ret
	}
	return *o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetReactionsOk() (*ViewReactionsForObject, bool) {
	if o == nil || o.Reactions == nil {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *ViewFileversion) HasReactions() bool {
	if o != nil && o.Reactions != nil {
		return true
	}

	return false
}

// SetReactions gets a reference to the given ViewReactionsForObject and assigns it to the Reactions field.
func (o *ViewFileversion) SetReactions(v ViewReactionsForObject) {
	o.Reactions = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ViewFileversion) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ViewFileversion) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *ViewFileversion) SetSize(v int32) {
	o.Size = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ViewFileversion) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ViewFileversion) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ViewFileversion) SetStatus(v string) {
	o.Status = &v
}

// GetUploadedBy returns the UploadedBy field value if set, zero value otherwise.
func (o *ViewFileversion) GetUploadedBy() int32 {
	if o == nil || o.UploadedBy == nil {
		var ret int32
		return ret
	}
	return *o.UploadedBy
}

// GetUploadedByOk returns a tuple with the UploadedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetUploadedByOk() (*int32, bool) {
	if o == nil || o.UploadedBy == nil {
		return nil, false
	}
	return o.UploadedBy, true
}

// HasUploadedBy returns a boolean if a field has been set.
func (o *ViewFileversion) HasUploadedBy() bool {
	if o != nil && o.UploadedBy != nil {
		return true
	}

	return false
}

// SetUploadedBy gets a reference to the given int32 and assigns it to the UploadedBy field.
func (o *ViewFileversion) SetUploadedBy(v int32) {
	o.UploadedBy = &v
}

// GetVersionNo returns the VersionNo field value if set, zero value otherwise.
func (o *ViewFileversion) GetVersionNo() int32 {
	if o == nil || o.VersionNo == nil {
		var ret int32
		return ret
	}
	return *o.VersionNo
}

// GetVersionNoOk returns a tuple with the VersionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewFileversion) GetVersionNoOk() (*int32, bool) {
	if o == nil || o.VersionNo == nil {
		return nil, false
	}
	return o.VersionNo, true
}

// HasVersionNo returns a boolean if a field has been set.
func (o *ViewFileversion) HasVersionNo() bool {
	if o != nil && o.VersionNo != nil {
		return true
	}

	return false
}

// SetVersionNo gets a reference to the given int32 and assigns it to the VersionNo field.
func (o *ViewFileversion) SetVersionNo(v int32) {
	o.VersionNo = &v
}

func (o ViewFileversion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommentsCount != nil {
		toSerialize["commentsCount"] = o.CommentsCount
	}
	if o.CommentsCountRead != nil {
		toSerialize["commentsCountRead"] = o.CommentsCountRead
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	if o.FileId != nil {
		toSerialize["fileId"] = o.FileId
	}
	if o.FileVersionId != nil {
		toSerialize["fileVersionId"] = o.FileVersionId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OriginalName != nil {
		toSerialize["originalName"] = o.OriginalName
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.Reactions != nil {
		toSerialize["reactions"] = o.Reactions
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UploadedBy != nil {
		toSerialize["uploadedBy"] = o.UploadedBy
	}
	if o.VersionNo != nil {
		toSerialize["versionNo"] = o.VersionNo
	}
	return json.Marshal(toSerialize)
}

type NullableViewFileversion struct {
	value *ViewFileversion
	isSet bool
}

func (v NullableViewFileversion) Get() *ViewFileversion {
	return v.value
}

func (v *NullableViewFileversion) Set(val *ViewFileversion) {
	v.value = val
	v.isSet = true
}

func (v NullableViewFileversion) IsSet() bool {
	return v.isSet
}

func (v *NullableViewFileversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewFileversion(val *ViewFileversion) *NullableViewFileversion {
	return &NullableViewFileversion{value: val, isSet: true}
}

func (v NullableViewFileversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewFileversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


