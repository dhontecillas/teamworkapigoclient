/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv2

import (
	"encoding/json"
)

// UsersbaseAccount struct for UsersbaseAccount
type UsersbaseAccount struct {
	Email *string `json:"email,omitempty"`
	FavIcon *string `json:"favIcon,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Islinked *bool `json:"islinked,omitempty"`
	Link *string `json:"link,omitempty"`
	Name *string `json:"name,omitempty"`
	Shard *int32 `json:"shard,omitempty"`
	Userid *int32 `json:"userid,omitempty"`
}

// NewUsersbaseAccount instantiates a new UsersbaseAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersbaseAccount() *UsersbaseAccount {
	this := UsersbaseAccount{}
	return &this
}

// NewUsersbaseAccountWithDefaults instantiates a new UsersbaseAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersbaseAccountWithDefaults() *UsersbaseAccount {
	this := UsersbaseAccount{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UsersbaseAccount) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersbaseAccount) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UsersbaseAccount) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UsersbaseAccount) SetEmail(v string) {
	o.Email = &v
}

// GetFavIcon returns the FavIcon field value if set, zero value otherwise.
func (o *UsersbaseAccount) GetFavIcon() string {
	if o == nil || o.FavIcon == nil {
		var ret string
		return ret
	}
	return *o.FavIcon
}

// GetFavIconOk returns a tuple with the FavIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersbaseAccount) GetFavIconOk() (*string, bool) {
	if o == nil || o.FavIcon == nil {
		return nil, false
	}
	return o.FavIcon, true
}

// HasFavIcon returns a boolean if a field has been set.
func (o *UsersbaseAccount) HasFavIcon() bool {
	if o != nil && o.FavIcon != nil {
		return true
	}

	return false
}

// SetFavIcon gets a reference to the given string and assigns it to the FavIcon field.
func (o *UsersbaseAccount) SetFavIcon(v string) {
	o.FavIcon = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UsersbaseAccount) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersbaseAccount) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UsersbaseAccount) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UsersbaseAccount) SetId(v int32) {
	o.Id = &v
}

// GetIslinked returns the Islinked field value if set, zero value otherwise.
func (o *UsersbaseAccount) GetIslinked() bool {
	if o == nil || o.Islinked == nil {
		var ret bool
		return ret
	}
	return *o.Islinked
}

// GetIslinkedOk returns a tuple with the Islinked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersbaseAccount) GetIslinkedOk() (*bool, bool) {
	if o == nil || o.Islinked == nil {
		return nil, false
	}
	return o.Islinked, true
}

// HasIslinked returns a boolean if a field has been set.
func (o *UsersbaseAccount) HasIslinked() bool {
	if o != nil && o.Islinked != nil {
		return true
	}

	return false
}

// SetIslinked gets a reference to the given bool and assigns it to the Islinked field.
func (o *UsersbaseAccount) SetIslinked(v bool) {
	o.Islinked = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *UsersbaseAccount) GetLink() string {
	if o == nil || o.Link == nil {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersbaseAccount) GetLinkOk() (*string, bool) {
	if o == nil || o.Link == nil {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *UsersbaseAccount) HasLink() bool {
	if o != nil && o.Link != nil {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *UsersbaseAccount) SetLink(v string) {
	o.Link = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UsersbaseAccount) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersbaseAccount) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UsersbaseAccount) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UsersbaseAccount) SetName(v string) {
	o.Name = &v
}

// GetShard returns the Shard field value if set, zero value otherwise.
func (o *UsersbaseAccount) GetShard() int32 {
	if o == nil || o.Shard == nil {
		var ret int32
		return ret
	}
	return *o.Shard
}

// GetShardOk returns a tuple with the Shard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersbaseAccount) GetShardOk() (*int32, bool) {
	if o == nil || o.Shard == nil {
		return nil, false
	}
	return o.Shard, true
}

// HasShard returns a boolean if a field has been set.
func (o *UsersbaseAccount) HasShard() bool {
	if o != nil && o.Shard != nil {
		return true
	}

	return false
}

// SetShard gets a reference to the given int32 and assigns it to the Shard field.
func (o *UsersbaseAccount) SetShard(v int32) {
	o.Shard = &v
}

// GetUserid returns the Userid field value if set, zero value otherwise.
func (o *UsersbaseAccount) GetUserid() int32 {
	if o == nil || o.Userid == nil {
		var ret int32
		return ret
	}
	return *o.Userid
}

// GetUseridOk returns a tuple with the Userid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersbaseAccount) GetUseridOk() (*int32, bool) {
	if o == nil || o.Userid == nil {
		return nil, false
	}
	return o.Userid, true
}

// HasUserid returns a boolean if a field has been set.
func (o *UsersbaseAccount) HasUserid() bool {
	if o != nil && o.Userid != nil {
		return true
	}

	return false
}

// SetUserid gets a reference to the given int32 and assigns it to the Userid field.
func (o *UsersbaseAccount) SetUserid(v int32) {
	o.Userid = &v
}

func (o UsersbaseAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.FavIcon != nil {
		toSerialize["favIcon"] = o.FavIcon
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Islinked != nil {
		toSerialize["islinked"] = o.Islinked
	}
	if o.Link != nil {
		toSerialize["link"] = o.Link
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Shard != nil {
		toSerialize["shard"] = o.Shard
	}
	if o.Userid != nil {
		toSerialize["userid"] = o.Userid
	}
	return json.Marshal(toSerialize)
}

type NullableUsersbaseAccount struct {
	value *UsersbaseAccount
	isSet bool
}

func (v NullableUsersbaseAccount) Get() *UsersbaseAccount {
	return v.value
}

func (v *NullableUsersbaseAccount) Set(val *UsersbaseAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersbaseAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersbaseAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersbaseAccount(val *UsersbaseAccount) *NullableUsersbaseAccount {
	return &NullableUsersbaseAccount{value: val, isSet: true}
}

func (v NullableUsersbaseAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersbaseAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


