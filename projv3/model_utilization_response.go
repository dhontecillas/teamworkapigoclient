/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// UtilizationResponse Response contains information about a specific availability.
type UtilizationResponse struct {
	Included *NotebookVersionResponseIncluded `json:"included,omitempty"`
	Meta *ViewMeta `json:"meta,omitempty"`
	Utilization *[]ViewUserUtilization `json:"utilization,omitempty"`
}

// NewUtilizationResponse instantiates a new UtilizationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilizationResponse() *UtilizationResponse {
	this := UtilizationResponse{}
	return &this
}

// NewUtilizationResponseWithDefaults instantiates a new UtilizationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilizationResponseWithDefaults() *UtilizationResponse {
	this := UtilizationResponse{}
	return &this
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *UtilizationResponse) GetIncluded() NotebookVersionResponseIncluded {
	if o == nil || o.Included == nil {
		var ret NotebookVersionResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizationResponse) GetIncludedOk() (*NotebookVersionResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *UtilizationResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given NotebookVersionResponseIncluded and assigns it to the Included field.
func (o *UtilizationResponse) SetIncluded(v NotebookVersionResponseIncluded) {
	o.Included = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *UtilizationResponse) GetMeta() ViewMeta {
	if o == nil || o.Meta == nil {
		var ret ViewMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizationResponse) GetMetaOk() (*ViewMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *UtilizationResponse) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ViewMeta and assigns it to the Meta field.
func (o *UtilizationResponse) SetMeta(v ViewMeta) {
	o.Meta = &v
}

// GetUtilization returns the Utilization field value if set, zero value otherwise.
func (o *UtilizationResponse) GetUtilization() []ViewUserUtilization {
	if o == nil || o.Utilization == nil {
		var ret []ViewUserUtilization
		return ret
	}
	return *o.Utilization
}

// GetUtilizationOk returns a tuple with the Utilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizationResponse) GetUtilizationOk() (*[]ViewUserUtilization, bool) {
	if o == nil || o.Utilization == nil {
		return nil, false
	}
	return o.Utilization, true
}

// HasUtilization returns a boolean if a field has been set.
func (o *UtilizationResponse) HasUtilization() bool {
	if o != nil && o.Utilization != nil {
		return true
	}

	return false
}

// SetUtilization gets a reference to the given []ViewUserUtilization and assigns it to the Utilization field.
func (o *UtilizationResponse) SetUtilization(v []ViewUserUtilization) {
	o.Utilization = &v
}

func (o UtilizationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Utilization != nil {
		toSerialize["utilization"] = o.Utilization
	}
	return json.Marshal(toSerialize)
}

type NullableUtilizationResponse struct {
	value *UtilizationResponse
	isSet bool
}

func (v NullableUtilizationResponse) Get() *UtilizationResponse {
	return v.value
}

func (v *NullableUtilizationResponse) Set(val *UtilizationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilizationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilizationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilizationResponse(val *UtilizationResponse) *NullableUtilizationResponse {
	return &NullableUtilizationResponse{value: val, isSet: true}
}

func (v NullableUtilizationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilizationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


