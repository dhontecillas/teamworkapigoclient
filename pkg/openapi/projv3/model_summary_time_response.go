/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// SummaryTimeResponse TimeResponse contains counters for times' groups.
type SummaryTimeResponse struct {
	All *SummaryTimeCounterResponse `json:"all,omitempty"`
	Mine *SummaryTimeCounterResponse `json:"mine,omitempty"`
}

// NewSummaryTimeResponse instantiates a new SummaryTimeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummaryTimeResponse() *SummaryTimeResponse {
	this := SummaryTimeResponse{}
	return &this
}

// NewSummaryTimeResponseWithDefaults instantiates a new SummaryTimeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryTimeResponseWithDefaults() *SummaryTimeResponse {
	this := SummaryTimeResponse{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *SummaryTimeResponse) GetAll() SummaryTimeCounterResponse {
	if o == nil || o.All == nil {
		var ret SummaryTimeCounterResponse
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTimeResponse) GetAllOk() (*SummaryTimeCounterResponse, bool) {
	if o == nil || o.All == nil {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *SummaryTimeResponse) HasAll() bool {
	if o != nil && o.All != nil {
		return true
	}

	return false
}

// SetAll gets a reference to the given SummaryTimeCounterResponse and assigns it to the All field.
func (o *SummaryTimeResponse) SetAll(v SummaryTimeCounterResponse) {
	o.All = &v
}

// GetMine returns the Mine field value if set, zero value otherwise.
func (o *SummaryTimeResponse) GetMine() SummaryTimeCounterResponse {
	if o == nil || o.Mine == nil {
		var ret SummaryTimeCounterResponse
		return ret
	}
	return *o.Mine
}

// GetMineOk returns a tuple with the Mine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryTimeResponse) GetMineOk() (*SummaryTimeCounterResponse, bool) {
	if o == nil || o.Mine == nil {
		return nil, false
	}
	return o.Mine, true
}

// HasMine returns a boolean if a field has been set.
func (o *SummaryTimeResponse) HasMine() bool {
	if o != nil && o.Mine != nil {
		return true
	}

	return false
}

// SetMine gets a reference to the given SummaryTimeCounterResponse and assigns it to the Mine field.
func (o *SummaryTimeResponse) SetMine(v SummaryTimeCounterResponse) {
	o.Mine = &v
}

func (o SummaryTimeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.All != nil {
		toSerialize["all"] = o.All
	}
	if o.Mine != nil {
		toSerialize["mine"] = o.Mine
	}
	return json.Marshal(toSerialize)
}

type NullableSummaryTimeResponse struct {
	value *SummaryTimeResponse
	isSet bool
}

func (v NullableSummaryTimeResponse) Get() *SummaryTimeResponse {
	return v.value
}

func (v *NullableSummaryTimeResponse) Set(val *SummaryTimeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryTimeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryTimeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryTimeResponse(val *SummaryTimeResponse) *NullableSummaryTimeResponse {
	return &NullableSummaryTimeResponse{value: val, isSet: true}
}

func (v NullableSummaryTimeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryTimeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


