/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineObject89 struct for InlineObject89
type InlineObject89 struct {
	ProjectId string `json:"projectId"`
}

// NewInlineObject89 instantiates a new InlineObject89 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject89(projectId string, ) *InlineObject89 {
	this := InlineObject89{}
	this.ProjectId = projectId
	return &this
}

// NewInlineObject89WithDefaults instantiates a new InlineObject89 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject89WithDefaults() *InlineObject89 {
	this := InlineObject89{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *InlineObject89) GetProjectId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *InlineObject89) GetProjectIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *InlineObject89) SetProjectId(v string) {
	o.ProjectId = v
}

func (o InlineObject89) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["projectId"] = o.ProjectId
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject89 struct {
	value *InlineObject89
	isSet bool
}

func (v NullableInlineObject89) Get() *InlineObject89 {
	return v.value
}

func (v *NullableInlineObject89) Set(val *InlineObject89) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject89) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject89) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject89(val *InlineObject89) *NullableInlineObject89 {
	return &NullableInlineObject89{value: val, isSet: true}
}

func (v NullableInlineObject89) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject89) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


