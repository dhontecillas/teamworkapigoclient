/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ScheduleUserSchedulesResponseIncluded struct for ScheduleUserSchedulesResponseIncluded
type ScheduleUserSchedulesResponseIncluded struct {
	Allocations *map[string]ViewAllocation `json:"allocations,omitempty"`
	CalendarEvents *map[string]ViewCalendarEvent `json:"calendarEvents,omitempty"`
	Companies *map[string]ViewCompany `json:"companies,omitempty"`
	Projects *map[string]ViewProject `json:"projects,omitempty"`
	Timelogs *map[string]ViewTimelog `json:"timelogs,omitempty"`
	Users *map[string]ViewUser `json:"users,omitempty"`
}

// NewScheduleUserSchedulesResponseIncluded instantiates a new ScheduleUserSchedulesResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleUserSchedulesResponseIncluded() *ScheduleUserSchedulesResponseIncluded {
	this := ScheduleUserSchedulesResponseIncluded{}
	return &this
}

// NewScheduleUserSchedulesResponseIncludedWithDefaults instantiates a new ScheduleUserSchedulesResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleUserSchedulesResponseIncludedWithDefaults() *ScheduleUserSchedulesResponseIncluded {
	this := ScheduleUserSchedulesResponseIncluded{}
	return &this
}

// GetAllocations returns the Allocations field value if set, zero value otherwise.
func (o *ScheduleUserSchedulesResponseIncluded) GetAllocations() map[string]ViewAllocation {
	if o == nil || o.Allocations == nil {
		var ret map[string]ViewAllocation
		return ret
	}
	return *o.Allocations
}

// GetAllocationsOk returns a tuple with the Allocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleUserSchedulesResponseIncluded) GetAllocationsOk() (*map[string]ViewAllocation, bool) {
	if o == nil || o.Allocations == nil {
		return nil, false
	}
	return o.Allocations, true
}

// HasAllocations returns a boolean if a field has been set.
func (o *ScheduleUserSchedulesResponseIncluded) HasAllocations() bool {
	if o != nil && o.Allocations != nil {
		return true
	}

	return false
}

// SetAllocations gets a reference to the given map[string]ViewAllocation and assigns it to the Allocations field.
func (o *ScheduleUserSchedulesResponseIncluded) SetAllocations(v map[string]ViewAllocation) {
	o.Allocations = &v
}

// GetCalendarEvents returns the CalendarEvents field value if set, zero value otherwise.
func (o *ScheduleUserSchedulesResponseIncluded) GetCalendarEvents() map[string]ViewCalendarEvent {
	if o == nil || o.CalendarEvents == nil {
		var ret map[string]ViewCalendarEvent
		return ret
	}
	return *o.CalendarEvents
}

// GetCalendarEventsOk returns a tuple with the CalendarEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleUserSchedulesResponseIncluded) GetCalendarEventsOk() (*map[string]ViewCalendarEvent, bool) {
	if o == nil || o.CalendarEvents == nil {
		return nil, false
	}
	return o.CalendarEvents, true
}

// HasCalendarEvents returns a boolean if a field has been set.
func (o *ScheduleUserSchedulesResponseIncluded) HasCalendarEvents() bool {
	if o != nil && o.CalendarEvents != nil {
		return true
	}

	return false
}

// SetCalendarEvents gets a reference to the given map[string]ViewCalendarEvent and assigns it to the CalendarEvents field.
func (o *ScheduleUserSchedulesResponseIncluded) SetCalendarEvents(v map[string]ViewCalendarEvent) {
	o.CalendarEvents = &v
}

// GetCompanies returns the Companies field value if set, zero value otherwise.
func (o *ScheduleUserSchedulesResponseIncluded) GetCompanies() map[string]ViewCompany {
	if o == nil || o.Companies == nil {
		var ret map[string]ViewCompany
		return ret
	}
	return *o.Companies
}

// GetCompaniesOk returns a tuple with the Companies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleUserSchedulesResponseIncluded) GetCompaniesOk() (*map[string]ViewCompany, bool) {
	if o == nil || o.Companies == nil {
		return nil, false
	}
	return o.Companies, true
}

// HasCompanies returns a boolean if a field has been set.
func (o *ScheduleUserSchedulesResponseIncluded) HasCompanies() bool {
	if o != nil && o.Companies != nil {
		return true
	}

	return false
}

// SetCompanies gets a reference to the given map[string]ViewCompany and assigns it to the Companies field.
func (o *ScheduleUserSchedulesResponseIncluded) SetCompanies(v map[string]ViewCompany) {
	o.Companies = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *ScheduleUserSchedulesResponseIncluded) GetProjects() map[string]ViewProject {
	if o == nil || o.Projects == nil {
		var ret map[string]ViewProject
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleUserSchedulesResponseIncluded) GetProjectsOk() (*map[string]ViewProject, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *ScheduleUserSchedulesResponseIncluded) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given map[string]ViewProject and assigns it to the Projects field.
func (o *ScheduleUserSchedulesResponseIncluded) SetProjects(v map[string]ViewProject) {
	o.Projects = &v
}

// GetTimelogs returns the Timelogs field value if set, zero value otherwise.
func (o *ScheduleUserSchedulesResponseIncluded) GetTimelogs() map[string]ViewTimelog {
	if o == nil || o.Timelogs == nil {
		var ret map[string]ViewTimelog
		return ret
	}
	return *o.Timelogs
}

// GetTimelogsOk returns a tuple with the Timelogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleUserSchedulesResponseIncluded) GetTimelogsOk() (*map[string]ViewTimelog, bool) {
	if o == nil || o.Timelogs == nil {
		return nil, false
	}
	return o.Timelogs, true
}

// HasTimelogs returns a boolean if a field has been set.
func (o *ScheduleUserSchedulesResponseIncluded) HasTimelogs() bool {
	if o != nil && o.Timelogs != nil {
		return true
	}

	return false
}

// SetTimelogs gets a reference to the given map[string]ViewTimelog and assigns it to the Timelogs field.
func (o *ScheduleUserSchedulesResponseIncluded) SetTimelogs(v map[string]ViewTimelog) {
	o.Timelogs = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *ScheduleUserSchedulesResponseIncluded) GetUsers() map[string]ViewUser {
	if o == nil || o.Users == nil {
		var ret map[string]ViewUser
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleUserSchedulesResponseIncluded) GetUsersOk() (*map[string]ViewUser, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *ScheduleUserSchedulesResponseIncluded) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given map[string]ViewUser and assigns it to the Users field.
func (o *ScheduleUserSchedulesResponseIncluded) SetUsers(v map[string]ViewUser) {
	o.Users = &v
}

func (o ScheduleUserSchedulesResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Allocations != nil {
		toSerialize["allocations"] = o.Allocations
	}
	if o.CalendarEvents != nil {
		toSerialize["calendarEvents"] = o.CalendarEvents
	}
	if o.Companies != nil {
		toSerialize["companies"] = o.Companies
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.Timelogs != nil {
		toSerialize["timelogs"] = o.Timelogs
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableScheduleUserSchedulesResponseIncluded struct {
	value *ScheduleUserSchedulesResponseIncluded
	isSet bool
}

func (v NullableScheduleUserSchedulesResponseIncluded) Get() *ScheduleUserSchedulesResponseIncluded {
	return v.value
}

func (v *NullableScheduleUserSchedulesResponseIncluded) Set(val *ScheduleUserSchedulesResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleUserSchedulesResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleUserSchedulesResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleUserSchedulesResponseIncluded(val *ScheduleUserSchedulesResponseIncluded) *NullableScheduleUserSchedulesResponseIncluded {
	return &NullableScheduleUserSchedulesResponseIncluded{value: val, isSet: true}
}

func (v NullableScheduleUserSchedulesResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleUserSchedulesResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


