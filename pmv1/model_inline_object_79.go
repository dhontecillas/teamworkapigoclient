/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineObject79 struct for InlineObject79
type InlineObject79 struct {
	Content *string `json:"content,omitempty"`
	UserId *string `json:"userId,omitempty"`
}

// NewInlineObject79 instantiates a new InlineObject79 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject79() *InlineObject79 {
	this := InlineObject79{}
	return &this
}

// NewInlineObject79WithDefaults instantiates a new InlineObject79 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject79WithDefaults() *InlineObject79 {
	this := InlineObject79{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *InlineObject79) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject79) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *InlineObject79) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *InlineObject79) SetContent(v string) {
	o.Content = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *InlineObject79) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject79) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *InlineObject79) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *InlineObject79) SetUserId(v string) {
	o.UserId = &v
}

func (o InlineObject79) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject79 struct {
	value *InlineObject79
	isSet bool
}

func (v NullableInlineObject79) Get() *InlineObject79 {
	return v.value
}

func (v *NullableInlineObject79) Set(val *InlineObject79) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject79) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject79) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject79(val *InlineObject79) *NullableInlineObject79 {
	return &NullableInlineObject79{value: val, isSet: true}
}

func (v NullableInlineObject79) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject79) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


