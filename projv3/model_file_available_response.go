/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileAvailableResponse AvailableResponse contains information regarding the available space.
type FileAvailableResponse struct {
	Available *FileAvailableResponseAvailable `json:"available,omitempty"`
}

// NewFileAvailableResponse instantiates a new FileAvailableResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileAvailableResponse() *FileAvailableResponse {
	this := FileAvailableResponse{}
	return &this
}

// NewFileAvailableResponseWithDefaults instantiates a new FileAvailableResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileAvailableResponseWithDefaults() *FileAvailableResponse {
	this := FileAvailableResponse{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *FileAvailableResponse) GetAvailable() FileAvailableResponseAvailable {
	if o == nil || o.Available == nil {
		var ret FileAvailableResponseAvailable
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileAvailableResponse) GetAvailableOk() (*FileAvailableResponseAvailable, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *FileAvailableResponse) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given FileAvailableResponseAvailable and assigns it to the Available field.
func (o *FileAvailableResponse) SetAvailable(v FileAvailableResponseAvailable) {
	o.Available = &v
}

func (o FileAvailableResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	return json.Marshal(toSerialize)
}

type NullableFileAvailableResponse struct {
	value *FileAvailableResponse
	isSet bool
}

func (v NullableFileAvailableResponse) Get() *FileAvailableResponse {
	return v.value
}

func (v *NullableFileAvailableResponse) Set(val *FileAvailableResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileAvailableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileAvailableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileAvailableResponse(val *FileAvailableResponse) *NullableFileAvailableResponse {
	return &NullableFileAvailableResponse{value: val, isSet: true}
}

func (v NullableFileAvailableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileAvailableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


