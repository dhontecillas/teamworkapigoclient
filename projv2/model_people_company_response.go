/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv2

import (
	"encoding/json"
)

// PeopleCompanyResponse struct for PeopleCompanyResponse
type PeopleCompanyResponse struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	People *[]PeoplePersonOfPeople `json:"people,omitempty"`
}

// NewPeopleCompanyResponse instantiates a new PeopleCompanyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleCompanyResponse() *PeopleCompanyResponse {
	this := PeopleCompanyResponse{}
	return &this
}

// NewPeopleCompanyResponseWithDefaults instantiates a new PeopleCompanyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleCompanyResponseWithDefaults() *PeopleCompanyResponse {
	this := PeopleCompanyResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PeopleCompanyResponse) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleCompanyResponse) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PeopleCompanyResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PeopleCompanyResponse) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PeopleCompanyResponse) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleCompanyResponse) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PeopleCompanyResponse) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PeopleCompanyResponse) SetName(v string) {
	o.Name = &v
}

// GetPeople returns the People field value if set, zero value otherwise.
func (o *PeopleCompanyResponse) GetPeople() []PeoplePersonOfPeople {
	if o == nil || o.People == nil {
		var ret []PeoplePersonOfPeople
		return ret
	}
	return *o.People
}

// GetPeopleOk returns a tuple with the People field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleCompanyResponse) GetPeopleOk() (*[]PeoplePersonOfPeople, bool) {
	if o == nil || o.People == nil {
		return nil, false
	}
	return o.People, true
}

// HasPeople returns a boolean if a field has been set.
func (o *PeopleCompanyResponse) HasPeople() bool {
	if o != nil && o.People != nil {
		return true
	}

	return false
}

// SetPeople gets a reference to the given []PeoplePersonOfPeople and assigns it to the People field.
func (o *PeopleCompanyResponse) SetPeople(v []PeoplePersonOfPeople) {
	o.People = &v
}

func (o PeopleCompanyResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.People != nil {
		toSerialize["people"] = o.People
	}
	return json.Marshal(toSerialize)
}

type NullablePeopleCompanyResponse struct {
	value *PeopleCompanyResponse
	isSet bool
}

func (v NullablePeopleCompanyResponse) Get() *PeopleCompanyResponse {
	return v.value
}

func (v *NullablePeopleCompanyResponse) Set(val *PeopleCompanyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleCompanyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleCompanyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleCompanyResponse(val *PeopleCompanyResponse) *NullablePeopleCompanyResponse {
	return &NullablePeopleCompanyResponse{value: val, isSet: true}
}

func (v NullablePeopleCompanyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleCompanyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


