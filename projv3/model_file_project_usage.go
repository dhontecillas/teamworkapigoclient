/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileProjectUsage ProjectUsage contains information regarding files usage on a project.
type FileProjectUsage struct {
	Project *ViewRelationship `json:"project,omitempty"`
	ProjectId *int32 `json:"projectId,omitempty"`
	Total *int32 `json:"total,omitempty"`
	TotalAsText *string `json:"totalAsText,omitempty"`
}

// NewFileProjectUsage instantiates a new FileProjectUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileProjectUsage() *FileProjectUsage {
	this := FileProjectUsage{}
	return &this
}

// NewFileProjectUsageWithDefaults instantiates a new FileProjectUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileProjectUsageWithDefaults() *FileProjectUsage {
	this := FileProjectUsage{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *FileProjectUsage) GetProject() ViewRelationship {
	if o == nil || o.Project == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileProjectUsage) GetProjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *FileProjectUsage) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ViewRelationship and assigns it to the Project field.
func (o *FileProjectUsage) SetProject(v ViewRelationship) {
	o.Project = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *FileProjectUsage) GetProjectId() int32 {
	if o == nil || o.ProjectId == nil {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileProjectUsage) GetProjectIdOk() (*int32, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *FileProjectUsage) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *FileProjectUsage) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *FileProjectUsage) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileProjectUsage) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *FileProjectUsage) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *FileProjectUsage) SetTotal(v int32) {
	o.Total = &v
}

// GetTotalAsText returns the TotalAsText field value if set, zero value otherwise.
func (o *FileProjectUsage) GetTotalAsText() string {
	if o == nil || o.TotalAsText == nil {
		var ret string
		return ret
	}
	return *o.TotalAsText
}

// GetTotalAsTextOk returns a tuple with the TotalAsText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileProjectUsage) GetTotalAsTextOk() (*string, bool) {
	if o == nil || o.TotalAsText == nil {
		return nil, false
	}
	return o.TotalAsText, true
}

// HasTotalAsText returns a boolean if a field has been set.
func (o *FileProjectUsage) HasTotalAsText() bool {
	if o != nil && o.TotalAsText != nil {
		return true
	}

	return false
}

// SetTotalAsText gets a reference to the given string and assigns it to the TotalAsText field.
func (o *FileProjectUsage) SetTotalAsText(v string) {
	o.TotalAsText = &v
}

func (o FileProjectUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.TotalAsText != nil {
		toSerialize["totalAsText"] = o.TotalAsText
	}
	return json.Marshal(toSerialize)
}

type NullableFileProjectUsage struct {
	value *FileProjectUsage
	isSet bool
}

func (v NullableFileProjectUsage) Get() *FileProjectUsage {
	return v.value
}

func (v *NullableFileProjectUsage) Set(val *FileProjectUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableFileProjectUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableFileProjectUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileProjectUsage(val *FileProjectUsage) *NullableFileProjectUsage {
	return &NullableFileProjectUsage{value: val, isSet: true}
}

func (v NullableFileProjectUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileProjectUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


