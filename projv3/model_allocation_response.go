/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// AllocationResponse Response contains information about a specific allocation.
type AllocationResponse struct {
	Allocation *ViewAllocation `json:"allocation,omitempty"`
}

// NewAllocationResponse instantiates a new AllocationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationResponse() *AllocationResponse {
	this := AllocationResponse{}
	return &this
}

// NewAllocationResponseWithDefaults instantiates a new AllocationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationResponseWithDefaults() *AllocationResponse {
	this := AllocationResponse{}
	return &this
}

// GetAllocation returns the Allocation field value if set, zero value otherwise.
func (o *AllocationResponse) GetAllocation() ViewAllocation {
	if o == nil || o.Allocation == nil {
		var ret ViewAllocation
		return ret
	}
	return *o.Allocation
}

// GetAllocationOk returns a tuple with the Allocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResponse) GetAllocationOk() (*ViewAllocation, bool) {
	if o == nil || o.Allocation == nil {
		return nil, false
	}
	return o.Allocation, true
}

// HasAllocation returns a boolean if a field has been set.
func (o *AllocationResponse) HasAllocation() bool {
	if o != nil && o.Allocation != nil {
		return true
	}

	return false
}

// SetAllocation gets a reference to the given ViewAllocation and assigns it to the Allocation field.
func (o *AllocationResponse) SetAllocation(v ViewAllocation) {
	o.Allocation = &v
}

func (o AllocationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Allocation != nil {
		toSerialize["allocation"] = o.Allocation
	}
	return json.Marshal(toSerialize)
}

type NullableAllocationResponse struct {
	value *AllocationResponse
	isSet bool
}

func (v NullableAllocationResponse) Get() *AllocationResponse {
	return v.value
}

func (v *NullableAllocationResponse) Set(val *AllocationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationResponse(val *AllocationResponse) *NullableAllocationResponse {
	return &NullableAllocationResponse{value: val, isSet: true}
}

func (v NullableAllocationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


