/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// SummaryApiService SummaryApi service
type SummaryApiService service

type ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest struct {
	ctx _context.Context
	ApiService *SummaryApiService
	projectId int32
	until *string
	timeRangeStart *time.Time
	timeRangeEnd *time.Time
	timeRange *string
	status *string
	projectStatuses *string
	projectStatus *string
	projectHealths *int32
	projectHealth *int32
	health *int32
	eventsDaysAhead *int32
	useStartDatesForTodaysTasks *bool
	unreadMessagesMineOnly *bool
	unreadCommentsMineOnly *bool
	onlyStarredProjects *bool
	onlyProjectEvents *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	includeAssigneeTeams *bool
	includeArchivedProjects *bool
	eventsAttendingOnly *bool
	applyTaskAssigneeUsersToSince *bool
	applySinceOnUnread *bool
	userIds *[]int32
	timeLoggedByUserIds *[]int32
	taskAssigneeUserIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	milestoneAssigneeUserIds *[]int32
	filterTagIds *[]int32
	fieldsUnread *[]string
	fieldsTime *[]string
	fieldsTasks *[]string
	fieldsSince *[]string
	fieldsRisks *[]string
	fieldsMilestones *[]string
	fieldsHealth *[]string
	fieldsEvents *[]string
	fieldsColumns *[]string
	companyIds *[]int32
	assigneeUserIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) Until(until string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.until = &until
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) TimeRangeStart(timeRangeStart time.Time) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.timeRangeStart = &timeRangeStart
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) TimeRangeEnd(timeRangeEnd time.Time) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.timeRangeEnd = &timeRangeEnd
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) TimeRange(timeRange string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.timeRange = &timeRange
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) Status(status string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ProjectHealth(projectHealth int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) Health(health int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.health = &health
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) EventsDaysAhead(eventsDaysAhead int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.eventsDaysAhead = &eventsDaysAhead
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) UnreadMessagesMineOnly(unreadMessagesMineOnly bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.unreadMessagesMineOnly = &unreadMessagesMineOnly
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) UnreadCommentsMineOnly(unreadCommentsMineOnly bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.unreadCommentsMineOnly = &unreadCommentsMineOnly
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) OnlyProjectEvents(onlyProjectEvents bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.onlyProjectEvents = &onlyProjectEvents
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) EventsAttendingOnly(eventsAttendingOnly bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.eventsAttendingOnly = &eventsAttendingOnly
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ApplyTaskAssigneeUsersToSince(applyTaskAssigneeUsersToSince bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.applyTaskAssigneeUsersToSince = &applyTaskAssigneeUsersToSince
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ApplySinceOnUnread(applySinceOnUnread bool) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.applySinceOnUnread = &applySinceOnUnread
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) UserIds(userIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) TimeLoggedByUserIds(timeLoggedByUserIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.timeLoggedByUserIds = &timeLoggedByUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) TaskAssigneeUserIds(taskAssigneeUserIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.taskAssigneeUserIds = &taskAssigneeUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) MilestoneAssigneeUserIds(milestoneAssigneeUserIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.milestoneAssigneeUserIds = &milestoneAssigneeUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) FilterTagIds(filterTagIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.filterTagIds = &filterTagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) FieldsUnread(fieldsUnread []string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.fieldsUnread = &fieldsUnread
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) FieldsTime(fieldsTime []string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.fieldsTime = &fieldsTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) FieldsSince(fieldsSince []string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.fieldsSince = &fieldsSince
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) FieldsRisks(fieldsRisks []string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.fieldsRisks = &fieldsRisks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) FieldsHealth(fieldsHealth []string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.fieldsHealth = &fieldsHealth
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) FieldsEvents(fieldsEvents []string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.fieldsEvents = &fieldsEvents
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) FieldsColumns(fieldsColumns []string) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.fieldsColumns = &fieldsColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) CompanyIds(companyIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.companyIds = &companyIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) AssigneeUserIds(assigneeUserIds []int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	r.assigneeUserIds = &assigneeUserIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) Execute() (SummaryProjectResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsprojectIdSummaryJsonExecute(r)
}

/*
 * GETProjectsApiV3ProjectsprojectIdSummaryJson Get project summary dashboard
 * Retrieves the summary from a specific project, returning counters about
tasks, milestones, columns, events, risks, timers, projects healths.


On this endpoint you can filter by project custom fields. The syntax for the
query parameter is the following:

    projectCustomField[id][op]=value

Where:
  - [id] is the custom field ID
  - [op] is the operator to apply when filtering, different operators are
    allowed according to the custom field type
  - [value] is the value to apply when filtering

For example, if I want to filter a dropdown custom field with ID 10 to only
return entries that have the value "Option1" we would do the following:

    projectCustomField[10][eq]=Option1

The allowed operators are:
  - like
  - not-like
  - eq
  - not
  - lt
  - gt
  - any
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @return ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest
 */
func (a *SummaryApiService) GETProjectsApiV3ProjectsprojectIdSummaryJson(ctx _context.Context, projectId int32) ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest {
	return ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

/*
 * Execute executes the request
 * @return SummaryProjectResponse
 */
func (a *SummaryApiService) GETProjectsApiV3ProjectsprojectIdSummaryJsonExecute(r ApiGETProjectsApiV3ProjectsprojectIdSummaryJsonRequest) (SummaryProjectResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SummaryProjectResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SummaryApiService.GETProjectsApiV3ProjectsprojectIdSummaryJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/summary.json"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.until != nil {
		localVarQueryParams.Add("until", parameterToString(*r.until, ""))
	}
	if r.timeRangeStart != nil {
		localVarQueryParams.Add("timeRangeStart", parameterToString(*r.timeRangeStart, ""))
	}
	if r.timeRangeEnd != nil {
		localVarQueryParams.Add("timeRangeEnd", parameterToString(*r.timeRangeEnd, ""))
	}
	if r.timeRange != nil {
		localVarQueryParams.Add("timeRange", parameterToString(*r.timeRange, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, ""))
	}
	if r.health != nil {
		localVarQueryParams.Add("health", parameterToString(*r.health, ""))
	}
	if r.eventsDaysAhead != nil {
		localVarQueryParams.Add("eventsDaysAhead", parameterToString(*r.eventsDaysAhead, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.unreadMessagesMineOnly != nil {
		localVarQueryParams.Add("unreadMessagesMineOnly", parameterToString(*r.unreadMessagesMineOnly, ""))
	}
	if r.unreadCommentsMineOnly != nil {
		localVarQueryParams.Add("unreadCommentsMineOnly", parameterToString(*r.unreadCommentsMineOnly, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyProjectEvents != nil {
		localVarQueryParams.Add("onlyProjectEvents", parameterToString(*r.onlyProjectEvents, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.eventsAttendingOnly != nil {
		localVarQueryParams.Add("eventsAttendingOnly", parameterToString(*r.eventsAttendingOnly, ""))
	}
	if r.applyTaskAssigneeUsersToSince != nil {
		localVarQueryParams.Add("applyTaskAssigneeUsersToSince", parameterToString(*r.applyTaskAssigneeUsersToSince, ""))
	}
	if r.applySinceOnUnread != nil {
		localVarQueryParams.Add("applySinceOnUnread", parameterToString(*r.applySinceOnUnread, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.timeLoggedByUserIds != nil {
		localVarQueryParams.Add("timeLoggedByUserIds", parameterToString(*r.timeLoggedByUserIds, "csv"))
	}
	if r.taskAssigneeUserIds != nil {
		localVarQueryParams.Add("taskAssigneeUserIds", parameterToString(*r.taskAssigneeUserIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.milestoneAssigneeUserIds != nil {
		localVarQueryParams.Add("milestoneAssigneeUserIds", parameterToString(*r.milestoneAssigneeUserIds, "csv"))
	}
	if r.filterTagIds != nil {
		localVarQueryParams.Add("filterTagIds", parameterToString(*r.filterTagIds, "csv"))
	}
	if r.fieldsUnread != nil {
		localVarQueryParams.Add("fields[unread]", parameterToString(*r.fieldsUnread, "csv"))
	}
	if r.fieldsTime != nil {
		localVarQueryParams.Add("fields[time]", parameterToString(*r.fieldsTime, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsSince != nil {
		localVarQueryParams.Add("fields[since]", parameterToString(*r.fieldsSince, "csv"))
	}
	if r.fieldsRisks != nil {
		localVarQueryParams.Add("fields[risks]", parameterToString(*r.fieldsRisks, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsHealth != nil {
		localVarQueryParams.Add("fields[health]", parameterToString(*r.fieldsHealth, "csv"))
	}
	if r.fieldsEvents != nil {
		localVarQueryParams.Add("fields[events]", parameterToString(*r.fieldsEvents, "csv"))
	}
	if r.fieldsColumns != nil {
		localVarQueryParams.Add("fields[columns]", parameterToString(*r.fieldsColumns, "csv"))
	}
	if r.companyIds != nil {
		localVarQueryParams.Add("companyIds", parameterToString(*r.companyIds, "csv"))
	}
	if r.assigneeUserIds != nil {
		localVarQueryParams.Add("assigneeUserIds", parameterToString(*r.assigneeUserIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3SummaryJsonRequest struct {
	ctx _context.Context
	ApiService *SummaryApiService
	until *string
	timeRangeStart *time.Time
	timeRangeEnd *time.Time
	timeRange *string
	status *string
	projectStatuses *string
	projectStatus *string
	projectHealths *int32
	projectHealth *int32
	eventsDaysAhead *int32
	useStartDatesForTodaysTasks *bool
	unreadMessagesMineOnly *bool
	unreadCommentsMineOnly *bool
	onlyStarredProjects *bool
	onlyProjectEvents *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	includeAssigneeTeams *bool
	includeArchivedProjects *bool
	eventsAttendingOnly *bool
	applyTaskAssigneeUsersToSince *bool
	applySinceOnUnread *bool
	userIds *[]int32
	timeLoggedByUserIds *[]int32
	taskAssigneeUserIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	milestoneAssigneeUserIds *[]int32
	filterTagIds *[]int32
	fieldsUnread *[]string
	fieldsTime *[]string
	fieldsTasks *[]string
	fieldsSince *[]string
	fieldsRisks *[]string
	fieldsMilestones *[]string
	fieldsHealth *[]string
	fieldsEvents *[]string
	fieldsColumns *[]string
	companyIds *[]int32
	assigneeUserIds *[]int32
}

func (r ApiGETProjectsApiV3SummaryJsonRequest) Until(until string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.until = &until
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) TimeRangeStart(timeRangeStart time.Time) ApiGETProjectsApiV3SummaryJsonRequest {
	r.timeRangeStart = &timeRangeStart
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) TimeRangeEnd(timeRangeEnd time.Time) ApiGETProjectsApiV3SummaryJsonRequest {
	r.timeRangeEnd = &timeRangeEnd
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) TimeRange(timeRange string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.timeRange = &timeRange
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) Status(status string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ProjectHealth(projectHealth int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.projectHealth = &projectHealth
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) EventsDaysAhead(eventsDaysAhead int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.eventsDaysAhead = &eventsDaysAhead
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) UseStartDatesForTodaysTasks(useStartDatesForTodaysTasks bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.useStartDatesForTodaysTasks = &useStartDatesForTodaysTasks
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) UnreadMessagesMineOnly(unreadMessagesMineOnly bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.unreadMessagesMineOnly = &unreadMessagesMineOnly
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) UnreadCommentsMineOnly(unreadCommentsMineOnly bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.unreadCommentsMineOnly = &unreadCommentsMineOnly
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) OnlyProjectEvents(onlyProjectEvents bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.onlyProjectEvents = &onlyProjectEvents
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) EventsAttendingOnly(eventsAttendingOnly bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.eventsAttendingOnly = &eventsAttendingOnly
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ApplyTaskAssigneeUsersToSince(applyTaskAssigneeUsersToSince bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.applyTaskAssigneeUsersToSince = &applyTaskAssigneeUsersToSince
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ApplySinceOnUnread(applySinceOnUnread bool) ApiGETProjectsApiV3SummaryJsonRequest {
	r.applySinceOnUnread = &applySinceOnUnread
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) UserIds(userIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) TimeLoggedByUserIds(timeLoggedByUserIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.timeLoggedByUserIds = &timeLoggedByUserIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) TaskAssigneeUserIds(taskAssigneeUserIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.taskAssigneeUserIds = &taskAssigneeUserIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) MilestoneAssigneeUserIds(milestoneAssigneeUserIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.milestoneAssigneeUserIds = &milestoneAssigneeUserIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) FilterTagIds(filterTagIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.filterTagIds = &filterTagIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) FieldsUnread(fieldsUnread []string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.fieldsUnread = &fieldsUnread
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) FieldsTime(fieldsTime []string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.fieldsTime = &fieldsTime
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) FieldsSince(fieldsSince []string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.fieldsSince = &fieldsSince
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) FieldsRisks(fieldsRisks []string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.fieldsRisks = &fieldsRisks
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) FieldsHealth(fieldsHealth []string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.fieldsHealth = &fieldsHealth
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) FieldsEvents(fieldsEvents []string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.fieldsEvents = &fieldsEvents
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) FieldsColumns(fieldsColumns []string) ApiGETProjectsApiV3SummaryJsonRequest {
	r.fieldsColumns = &fieldsColumns
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) CompanyIds(companyIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.companyIds = &companyIds
	return r
}
func (r ApiGETProjectsApiV3SummaryJsonRequest) AssigneeUserIds(assigneeUserIds []int32) ApiGETProjectsApiV3SummaryJsonRequest {
	r.assigneeUserIds = &assigneeUserIds
	return r
}

func (r ApiGETProjectsApiV3SummaryJsonRequest) Execute() (SummaryResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3SummaryJsonExecute(r)
}

/*
 * GETProjectsApiV3SummaryJson Get installation summary dashboard
 * Retrieves the summary from the entire installation, returning counters about
tasks, milestones, columns, events, risks, timers, projects healths.


On this endpoint you can filter by project custom fields. The syntax for the
query parameter is the following:

    projectCustomField[id][op]=value

Where:
  - [id] is the custom field ID
  - [op] is the operator to apply when filtering, different operators are
    allowed according to the custom field type
  - [value] is the value to apply when filtering

For example, if I want to filter a dropdown custom field with ID 10 to only
return entries that have the value "Option1" we would do the following:

    projectCustomField[10][eq]=Option1

The allowed operators are:
  - like
  - not-like
  - eq
  - not
  - lt
  - gt
  - any
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3SummaryJsonRequest
 */
func (a *SummaryApiService) GETProjectsApiV3SummaryJson(ctx _context.Context) ApiGETProjectsApiV3SummaryJsonRequest {
	return ApiGETProjectsApiV3SummaryJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return SummaryResponse
 */
func (a *SummaryApiService) GETProjectsApiV3SummaryJsonExecute(r ApiGETProjectsApiV3SummaryJsonRequest) (SummaryResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SummaryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SummaryApiService.GETProjectsApiV3SummaryJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/summary.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.until != nil {
		localVarQueryParams.Add("until", parameterToString(*r.until, ""))
	}
	if r.timeRangeStart != nil {
		localVarQueryParams.Add("timeRangeStart", parameterToString(*r.timeRangeStart, ""))
	}
	if r.timeRangeEnd != nil {
		localVarQueryParams.Add("timeRangeEnd", parameterToString(*r.timeRangeEnd, ""))
	}
	if r.timeRange != nil {
		localVarQueryParams.Add("timeRange", parameterToString(*r.timeRange, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.projectHealth != nil {
		localVarQueryParams.Add("projectHealth", parameterToString(*r.projectHealth, ""))
	}
	if r.eventsDaysAhead != nil {
		localVarQueryParams.Add("eventsDaysAhead", parameterToString(*r.eventsDaysAhead, ""))
	}
	if r.useStartDatesForTodaysTasks != nil {
		localVarQueryParams.Add("useStartDatesForTodaysTasks", parameterToString(*r.useStartDatesForTodaysTasks, ""))
	}
	if r.unreadMessagesMineOnly != nil {
		localVarQueryParams.Add("unreadMessagesMineOnly", parameterToString(*r.unreadMessagesMineOnly, ""))
	}
	if r.unreadCommentsMineOnly != nil {
		localVarQueryParams.Add("unreadCommentsMineOnly", parameterToString(*r.unreadCommentsMineOnly, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyProjectEvents != nil {
		localVarQueryParams.Add("onlyProjectEvents", parameterToString(*r.onlyProjectEvents, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.eventsAttendingOnly != nil {
		localVarQueryParams.Add("eventsAttendingOnly", parameterToString(*r.eventsAttendingOnly, ""))
	}
	if r.applyTaskAssigneeUsersToSince != nil {
		localVarQueryParams.Add("applyTaskAssigneeUsersToSince", parameterToString(*r.applyTaskAssigneeUsersToSince, ""))
	}
	if r.applySinceOnUnread != nil {
		localVarQueryParams.Add("applySinceOnUnread", parameterToString(*r.applySinceOnUnread, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.timeLoggedByUserIds != nil {
		localVarQueryParams.Add("timeLoggedByUserIds", parameterToString(*r.timeLoggedByUserIds, "csv"))
	}
	if r.taskAssigneeUserIds != nil {
		localVarQueryParams.Add("taskAssigneeUserIds", parameterToString(*r.taskAssigneeUserIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.milestoneAssigneeUserIds != nil {
		localVarQueryParams.Add("milestoneAssigneeUserIds", parameterToString(*r.milestoneAssigneeUserIds, "csv"))
	}
	if r.filterTagIds != nil {
		localVarQueryParams.Add("filterTagIds", parameterToString(*r.filterTagIds, "csv"))
	}
	if r.fieldsUnread != nil {
		localVarQueryParams.Add("fields[unread]", parameterToString(*r.fieldsUnread, "csv"))
	}
	if r.fieldsTime != nil {
		localVarQueryParams.Add("fields[time]", parameterToString(*r.fieldsTime, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsSince != nil {
		localVarQueryParams.Add("fields[since]", parameterToString(*r.fieldsSince, "csv"))
	}
	if r.fieldsRisks != nil {
		localVarQueryParams.Add("fields[risks]", parameterToString(*r.fieldsRisks, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsHealth != nil {
		localVarQueryParams.Add("fields[health]", parameterToString(*r.fieldsHealth, "csv"))
	}
	if r.fieldsEvents != nil {
		localVarQueryParams.Add("fields[events]", parameterToString(*r.fieldsEvents, "csv"))
	}
	if r.fieldsColumns != nil {
		localVarQueryParams.Add("fields[columns]", parameterToString(*r.fieldsColumns, "csv"))
	}
	if r.companyIds != nil {
		localVarQueryParams.Add("companyIds", parameterToString(*r.companyIds, "csv"))
	}
	if r.assigneeUserIds != nil {
		localVarQueryParams.Add("assigneeUserIds", parameterToString(*r.assigneeUserIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
