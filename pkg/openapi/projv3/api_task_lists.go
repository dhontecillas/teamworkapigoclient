/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// TaskListsApiService TaskListsApi service
type TaskListsApiService service

type ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest struct {
	ctx _context.Context
	ApiService *TaskListsApiService
	taskDate *string
	startDate *time.Time
	reportFormat *string
	orderMode *string
	orderBy *string
	endDate *time.Time
	commentsOrderMode *string
	tasklistId *int32
	projectId *int32
	onlyCompletedTasks *bool
	isReportDownload *bool
	includeTime *bool
	includeTags *bool
	includePrivateItems *bool
	includeLateTasks *bool
	includeEstimatedTime *bool
	includeCustomFields *bool
	includeCompletedTasks *bool
	includeComments *bool
	includeCommentAvatars *bool
	includeColumns *bool
	includeAnytimeTasks *bool
	includeAllComments *bool
	ignoreStartDates *bool
	groupByTasklists *bool
	tags *[]string
	tagIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) TaskDate(taskDate string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.taskDate = &taskDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) StartDate(startDate time.Time) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) EndDate(endDate time.Time) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) CommentsOrderMode(commentsOrderMode string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.commentsOrderMode = &commentsOrderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) OnlyCompletedTasks(onlyCompletedTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.onlyCompletedTasks = &onlyCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeTime(includeTime bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeTime = &includeTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludePrivateItems(includePrivateItems bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includePrivateItems = &includePrivateItems
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeLateTasks(includeLateTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeLateTasks = &includeLateTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeEstimatedTime(includeEstimatedTime bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeEstimatedTime = &includeEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeComments(includeComments bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeComments = &includeComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeCommentAvatars(includeCommentAvatars bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeCommentAvatars = &includeCommentAvatars
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeColumns(includeColumns bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeColumns = &includeColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeAnytimeTasks(includeAnytimeTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeAnytimeTasks = &includeAnytimeTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IncludeAllComments(includeAllComments bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.includeAllComments = &includeAllComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) GroupByTasklists(groupByTasklists bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.groupByTasklists = &groupByTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) Tags(tags []string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsProjectIdTasklistsCsvExecute(r)
}

/*
 * GETProjectsApiV3ProjectsProjectIdTasklistsCsv Generate tasklist report in CSV format
 * Generates a task list report in CSV format containing all tasks for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsProjectIdTasklistsCsv(ctx _context.Context) ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest {
	return ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsProjectIdTasklistsCsvExecute(r ApiGETProjectsApiV3ProjectsProjectIdTasklistsCsvRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskListsApiService.GETProjectsApiV3ProjectsProjectIdTasklistsCsv")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/tasklists.csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskDate != nil {
		localVarQueryParams.Add("taskDate", parameterToString(*r.taskDate, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.commentsOrderMode != nil {
		localVarQueryParams.Add("commentsOrderMode", parameterToString(*r.commentsOrderMode, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.onlyCompletedTasks != nil {
		localVarQueryParams.Add("onlyCompletedTasks", parameterToString(*r.onlyCompletedTasks, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTime != nil {
		localVarQueryParams.Add("includeTime", parameterToString(*r.includeTime, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePrivateItems != nil {
		localVarQueryParams.Add("includePrivateItems", parameterToString(*r.includePrivateItems, ""))
	}
	if r.includeLateTasks != nil {
		localVarQueryParams.Add("includeLateTasks", parameterToString(*r.includeLateTasks, ""))
	}
	if r.includeEstimatedTime != nil {
		localVarQueryParams.Add("includeEstimatedTime", parameterToString(*r.includeEstimatedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeComments != nil {
		localVarQueryParams.Add("includeComments", parameterToString(*r.includeComments, ""))
	}
	if r.includeCommentAvatars != nil {
		localVarQueryParams.Add("includeCommentAvatars", parameterToString(*r.includeCommentAvatars, ""))
	}
	if r.includeColumns != nil {
		localVarQueryParams.Add("includeColumns", parameterToString(*r.includeColumns, ""))
	}
	if r.includeAnytimeTasks != nil {
		localVarQueryParams.Add("includeAnytimeTasks", parameterToString(*r.includeAnytimeTasks, ""))
	}
	if r.includeAllComments != nil {
		localVarQueryParams.Add("includeAllComments", parameterToString(*r.includeAllComments, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.groupByTasklists != nil {
		localVarQueryParams.Add("groupByTasklists", parameterToString(*r.groupByTasklists, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest struct {
	ctx _context.Context
	ApiService *TaskListsApiService
	taskDate *string
	startDate *time.Time
	reportFormat *string
	orderMode *string
	orderBy *string
	endDate *time.Time
	commentsOrderMode *string
	tasklistId *int32
	projectId *int32
	onlyCompletedTasks *bool
	isReportDownload *bool
	includeTime *bool
	includeTags *bool
	includePrivateItems *bool
	includeLateTasks *bool
	includeEstimatedTime *bool
	includeCustomFields *bool
	includeCompletedTasks *bool
	includeComments *bool
	includeCommentAvatars *bool
	includeColumns *bool
	includeAnytimeTasks *bool
	includeAllComments *bool
	ignoreStartDates *bool
	groupByTasklists *bool
	tags *[]string
	tagIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) TaskDate(taskDate string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.taskDate = &taskDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) StartDate(startDate time.Time) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) EndDate(endDate time.Time) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) CommentsOrderMode(commentsOrderMode string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.commentsOrderMode = &commentsOrderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) OnlyCompletedTasks(onlyCompletedTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.onlyCompletedTasks = &onlyCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeTime(includeTime bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeTime = &includeTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludePrivateItems(includePrivateItems bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includePrivateItems = &includePrivateItems
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeLateTasks(includeLateTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeLateTasks = &includeLateTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeEstimatedTime(includeEstimatedTime bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeEstimatedTime = &includeEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeComments(includeComments bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeComments = &includeComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeCommentAvatars(includeCommentAvatars bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeCommentAvatars = &includeCommentAvatars
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeColumns(includeColumns bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeColumns = &includeColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeAnytimeTasks(includeAnytimeTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeAnytimeTasks = &includeAnytimeTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IncludeAllComments(includeAllComments bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.includeAllComments = &includeAllComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) GroupByTasklists(groupByTasklists bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.groupByTasklists = &groupByTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) Tags(tags []string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsProjectIdTasklistsHtmlExecute(r)
}

/*
 * GETProjectsApiV3ProjectsProjectIdTasklistsHtml Generate tasklist report in HTML format
 * Generates a task list report in HTML format containing all tasks for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsProjectIdTasklistsHtml(ctx _context.Context) ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest {
	return ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsProjectIdTasklistsHtmlExecute(r ApiGETProjectsApiV3ProjectsProjectIdTasklistsHtmlRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskListsApiService.GETProjectsApiV3ProjectsProjectIdTasklistsHtml")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/tasklists.html"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskDate != nil {
		localVarQueryParams.Add("taskDate", parameterToString(*r.taskDate, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.commentsOrderMode != nil {
		localVarQueryParams.Add("commentsOrderMode", parameterToString(*r.commentsOrderMode, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.onlyCompletedTasks != nil {
		localVarQueryParams.Add("onlyCompletedTasks", parameterToString(*r.onlyCompletedTasks, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTime != nil {
		localVarQueryParams.Add("includeTime", parameterToString(*r.includeTime, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePrivateItems != nil {
		localVarQueryParams.Add("includePrivateItems", parameterToString(*r.includePrivateItems, ""))
	}
	if r.includeLateTasks != nil {
		localVarQueryParams.Add("includeLateTasks", parameterToString(*r.includeLateTasks, ""))
	}
	if r.includeEstimatedTime != nil {
		localVarQueryParams.Add("includeEstimatedTime", parameterToString(*r.includeEstimatedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeComments != nil {
		localVarQueryParams.Add("includeComments", parameterToString(*r.includeComments, ""))
	}
	if r.includeCommentAvatars != nil {
		localVarQueryParams.Add("includeCommentAvatars", parameterToString(*r.includeCommentAvatars, ""))
	}
	if r.includeColumns != nil {
		localVarQueryParams.Add("includeColumns", parameterToString(*r.includeColumns, ""))
	}
	if r.includeAnytimeTasks != nil {
		localVarQueryParams.Add("includeAnytimeTasks", parameterToString(*r.includeAnytimeTasks, ""))
	}
	if r.includeAllComments != nil {
		localVarQueryParams.Add("includeAllComments", parameterToString(*r.includeAllComments, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.groupByTasklists != nil {
		localVarQueryParams.Add("groupByTasklists", parameterToString(*r.groupByTasklists, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest struct {
	ctx _context.Context
	ApiService *TaskListsApiService
	taskDate *string
	startDate *time.Time
	reportFormat *string
	orderMode *string
	orderBy *string
	endDate *time.Time
	commentsOrderMode *string
	tasklistId *int32
	projectId *int32
	onlyCompletedTasks *bool
	isReportDownload *bool
	includeTime *bool
	includeTags *bool
	includePrivateItems *bool
	includeLateTasks *bool
	includeEstimatedTime *bool
	includeCustomFields *bool
	includeCompletedTasks *bool
	includeComments *bool
	includeCommentAvatars *bool
	includeColumns *bool
	includeAnytimeTasks *bool
	includeAllComments *bool
	ignoreStartDates *bool
	groupByTasklists *bool
	tags *[]string
	tagIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) TaskDate(taskDate string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.taskDate = &taskDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) StartDate(startDate time.Time) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) EndDate(endDate time.Time) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) CommentsOrderMode(commentsOrderMode string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.commentsOrderMode = &commentsOrderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) OnlyCompletedTasks(onlyCompletedTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.onlyCompletedTasks = &onlyCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeTime(includeTime bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeTime = &includeTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludePrivateItems(includePrivateItems bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includePrivateItems = &includePrivateItems
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeLateTasks(includeLateTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeLateTasks = &includeLateTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeEstimatedTime(includeEstimatedTime bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeEstimatedTime = &includeEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeComments(includeComments bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeComments = &includeComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeCommentAvatars(includeCommentAvatars bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeCommentAvatars = &includeCommentAvatars
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeColumns(includeColumns bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeColumns = &includeColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeAnytimeTasks(includeAnytimeTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeAnytimeTasks = &includeAnytimeTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IncludeAllComments(includeAllComments bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.includeAllComments = &includeAllComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) GroupByTasklists(groupByTasklists bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.groupByTasklists = &groupByTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) Tags(tags []string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsProjectIdTasklistsPdfExecute(r)
}

/*
 * GETProjectsApiV3ProjectsProjectIdTasklistsPdf Generate tasklist report in PDF format
 * Generates a task list report in PDF format containing all tasks for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsProjectIdTasklistsPdf(ctx _context.Context) ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest {
	return ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsProjectIdTasklistsPdfExecute(r ApiGETProjectsApiV3ProjectsProjectIdTasklistsPdfRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskListsApiService.GETProjectsApiV3ProjectsProjectIdTasklistsPdf")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/tasklists.pdf"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskDate != nil {
		localVarQueryParams.Add("taskDate", parameterToString(*r.taskDate, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.commentsOrderMode != nil {
		localVarQueryParams.Add("commentsOrderMode", parameterToString(*r.commentsOrderMode, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.onlyCompletedTasks != nil {
		localVarQueryParams.Add("onlyCompletedTasks", parameterToString(*r.onlyCompletedTasks, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTime != nil {
		localVarQueryParams.Add("includeTime", parameterToString(*r.includeTime, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePrivateItems != nil {
		localVarQueryParams.Add("includePrivateItems", parameterToString(*r.includePrivateItems, ""))
	}
	if r.includeLateTasks != nil {
		localVarQueryParams.Add("includeLateTasks", parameterToString(*r.includeLateTasks, ""))
	}
	if r.includeEstimatedTime != nil {
		localVarQueryParams.Add("includeEstimatedTime", parameterToString(*r.includeEstimatedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeComments != nil {
		localVarQueryParams.Add("includeComments", parameterToString(*r.includeComments, ""))
	}
	if r.includeCommentAvatars != nil {
		localVarQueryParams.Add("includeCommentAvatars", parameterToString(*r.includeCommentAvatars, ""))
	}
	if r.includeColumns != nil {
		localVarQueryParams.Add("includeColumns", parameterToString(*r.includeColumns, ""))
	}
	if r.includeAnytimeTasks != nil {
		localVarQueryParams.Add("includeAnytimeTasks", parameterToString(*r.includeAnytimeTasks, ""))
	}
	if r.includeAllComments != nil {
		localVarQueryParams.Add("includeAllComments", parameterToString(*r.includeAllComments, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.groupByTasklists != nil {
		localVarQueryParams.Add("groupByTasklists", parameterToString(*r.groupByTasklists, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/pdf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest struct {
	ctx _context.Context
	ApiService *TaskListsApiService
	taskDate *string
	startDate *time.Time
	reportFormat *string
	orderMode *string
	orderBy *string
	endDate *time.Time
	commentsOrderMode *string
	tasklistId *int32
	projectId *int32
	onlyCompletedTasks *bool
	isReportDownload *bool
	includeTime *bool
	includeTags *bool
	includePrivateItems *bool
	includeLateTasks *bool
	includeEstimatedTime *bool
	includeCustomFields *bool
	includeCompletedTasks *bool
	includeComments *bool
	includeCommentAvatars *bool
	includeColumns *bool
	includeAnytimeTasks *bool
	includeAllComments *bool
	ignoreStartDates *bool
	groupByTasklists *bool
	tags *[]string
	tagIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) TaskDate(taskDate string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.taskDate = &taskDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) StartDate(startDate time.Time) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) EndDate(endDate time.Time) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) CommentsOrderMode(commentsOrderMode string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.commentsOrderMode = &commentsOrderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) OnlyCompletedTasks(onlyCompletedTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.onlyCompletedTasks = &onlyCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeTime(includeTime bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeTime = &includeTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludePrivateItems(includePrivateItems bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includePrivateItems = &includePrivateItems
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeLateTasks(includeLateTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeLateTasks = &includeLateTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeEstimatedTime(includeEstimatedTime bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeEstimatedTime = &includeEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeComments(includeComments bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeComments = &includeComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeCommentAvatars(includeCommentAvatars bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeCommentAvatars = &includeCommentAvatars
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeColumns(includeColumns bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeColumns = &includeColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeAnytimeTasks(includeAnytimeTasks bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeAnytimeTasks = &includeAnytimeTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IncludeAllComments(includeAllComments bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.includeAllComments = &includeAllComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) GroupByTasklists(groupByTasklists bool) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.groupByTasklists = &groupByTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) Tags(tags []string) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsProjectIdTasklistsXlsxExecute(r)
}

/*
 * GETProjectsApiV3ProjectsProjectIdTasklistsXlsx Generate tasklist report in XLSX format
 * Generates a task list report in XLSX format containing all tasks for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsProjectIdTasklistsXlsx(ctx _context.Context) ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest {
	return ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsProjectIdTasklistsXlsxExecute(r ApiGETProjectsApiV3ProjectsProjectIdTasklistsXlsxRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskListsApiService.GETProjectsApiV3ProjectsProjectIdTasklistsXlsx")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/tasklists.xlsx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskDate != nil {
		localVarQueryParams.Add("taskDate", parameterToString(*r.taskDate, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.commentsOrderMode != nil {
		localVarQueryParams.Add("commentsOrderMode", parameterToString(*r.commentsOrderMode, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.onlyCompletedTasks != nil {
		localVarQueryParams.Add("onlyCompletedTasks", parameterToString(*r.onlyCompletedTasks, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTime != nil {
		localVarQueryParams.Add("includeTime", parameterToString(*r.includeTime, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePrivateItems != nil {
		localVarQueryParams.Add("includePrivateItems", parameterToString(*r.includePrivateItems, ""))
	}
	if r.includeLateTasks != nil {
		localVarQueryParams.Add("includeLateTasks", parameterToString(*r.includeLateTasks, ""))
	}
	if r.includeEstimatedTime != nil {
		localVarQueryParams.Add("includeEstimatedTime", parameterToString(*r.includeEstimatedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeComments != nil {
		localVarQueryParams.Add("includeComments", parameterToString(*r.includeComments, ""))
	}
	if r.includeCommentAvatars != nil {
		localVarQueryParams.Add("includeCommentAvatars", parameterToString(*r.includeCommentAvatars, ""))
	}
	if r.includeColumns != nil {
		localVarQueryParams.Add("includeColumns", parameterToString(*r.includeColumns, ""))
	}
	if r.includeAnytimeTasks != nil {
		localVarQueryParams.Add("includeAnytimeTasks", parameterToString(*r.includeAnytimeTasks, ""))
	}
	if r.includeAllComments != nil {
		localVarQueryParams.Add("includeAllComments", parameterToString(*r.includeAllComments, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.groupByTasklists != nil {
		localVarQueryParams.Add("groupByTasklists", parameterToString(*r.groupByTasklists, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
