/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileUsageResponse UsageResponse contains information regarding files usage on the account.
type FileUsageResponse struct {
	FilesUsage *FileUsageResponseFilesUsage `json:"filesUsage,omitempty"`
	Included *FileUsageResponseIncluded `json:"included,omitempty"`
}

// NewFileUsageResponse instantiates a new FileUsageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileUsageResponse() *FileUsageResponse {
	this := FileUsageResponse{}
	return &this
}

// NewFileUsageResponseWithDefaults instantiates a new FileUsageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileUsageResponseWithDefaults() *FileUsageResponse {
	this := FileUsageResponse{}
	return &this
}

// GetFilesUsage returns the FilesUsage field value if set, zero value otherwise.
func (o *FileUsageResponse) GetFilesUsage() FileUsageResponseFilesUsage {
	if o == nil || o.FilesUsage == nil {
		var ret FileUsageResponseFilesUsage
		return ret
	}
	return *o.FilesUsage
}

// GetFilesUsageOk returns a tuple with the FilesUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponse) GetFilesUsageOk() (*FileUsageResponseFilesUsage, bool) {
	if o == nil || o.FilesUsage == nil {
		return nil, false
	}
	return o.FilesUsage, true
}

// HasFilesUsage returns a boolean if a field has been set.
func (o *FileUsageResponse) HasFilesUsage() bool {
	if o != nil && o.FilesUsage != nil {
		return true
	}

	return false
}

// SetFilesUsage gets a reference to the given FileUsageResponseFilesUsage and assigns it to the FilesUsage field.
func (o *FileUsageResponse) SetFilesUsage(v FileUsageResponseFilesUsage) {
	o.FilesUsage = &v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *FileUsageResponse) GetIncluded() FileUsageResponseIncluded {
	if o == nil || o.Included == nil {
		var ret FileUsageResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUsageResponse) GetIncludedOk() (*FileUsageResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *FileUsageResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given FileUsageResponseIncluded and assigns it to the Included field.
func (o *FileUsageResponse) SetIncluded(v FileUsageResponseIncluded) {
	o.Included = &v
}

func (o FileUsageResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesUsage != nil {
		toSerialize["filesUsage"] = o.FilesUsage
	}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	return json.Marshal(toSerialize)
}

type NullableFileUsageResponse struct {
	value *FileUsageResponse
	isSet bool
}

func (v NullableFileUsageResponse) Get() *FileUsageResponse {
	return v.value
}

func (v *NullableFileUsageResponse) Set(val *FileUsageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUsageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUsageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUsageResponse(val *FileUsageResponse) *NullableFileUsageResponse {
	return &NullableFileUsageResponse{value: val, isSet: true}
}

func (v NullableFileUsageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUsageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


