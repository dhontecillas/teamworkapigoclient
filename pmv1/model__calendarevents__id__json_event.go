/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// CalendareventsIdJsonEvent struct for CalendareventsIdJsonEvent
type CalendareventsIdJsonEvent struct {
	AllDay *string `json:"all-day,omitempty"`
	AttendeesCanEdit *string `json:"attendees-can-edit,omitempty"`
	AttendingUserIds *string `json:"attending-user-ids,omitempty"`
	Description *string `json:"description,omitempty"`
	End *string `json:"end,omitempty"`
	Notify *string `json:"notify,omitempty"`
	NotifyUserIds *string `json:"notify-user-ids,omitempty"`
	Privacy *InlineResponse2003Privacy `json:"privacy,omitempty"`
	ProjectId *string `json:"project-id,omitempty"`
	ProjectUsersCanEdit *string `json:"project-users-can-edit,omitempty"`
	Reminders *[]CalendareventsIdJsonEventReminders `json:"reminders,omitempty"`
	ShowAsBusy *string `json:"show-as-busy,omitempty"`
	Start *string `json:"start,omitempty"`
	Title *string `json:"title,omitempty"`
	Type *CalendareventsIdJsonEventType `json:"type,omitempty"`
	Utc *bool `json:"utc,omitempty"`
	Where *string `json:"where,omitempty"`
}

// NewCalendareventsIdJsonEvent instantiates a new CalendareventsIdJsonEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendareventsIdJsonEvent() *CalendareventsIdJsonEvent {
	this := CalendareventsIdJsonEvent{}
	return &this
}

// NewCalendareventsIdJsonEventWithDefaults instantiates a new CalendareventsIdJsonEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendareventsIdJsonEventWithDefaults() *CalendareventsIdJsonEvent {
	this := CalendareventsIdJsonEvent{}
	return &this
}

// GetAllDay returns the AllDay field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetAllDay() string {
	if o == nil || o.AllDay == nil {
		var ret string
		return ret
	}
	return *o.AllDay
}

// GetAllDayOk returns a tuple with the AllDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetAllDayOk() (*string, bool) {
	if o == nil || o.AllDay == nil {
		return nil, false
	}
	return o.AllDay, true
}

// HasAllDay returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasAllDay() bool {
	if o != nil && o.AllDay != nil {
		return true
	}

	return false
}

// SetAllDay gets a reference to the given string and assigns it to the AllDay field.
func (o *CalendareventsIdJsonEvent) SetAllDay(v string) {
	o.AllDay = &v
}

// GetAttendeesCanEdit returns the AttendeesCanEdit field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetAttendeesCanEdit() string {
	if o == nil || o.AttendeesCanEdit == nil {
		var ret string
		return ret
	}
	return *o.AttendeesCanEdit
}

// GetAttendeesCanEditOk returns a tuple with the AttendeesCanEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetAttendeesCanEditOk() (*string, bool) {
	if o == nil || o.AttendeesCanEdit == nil {
		return nil, false
	}
	return o.AttendeesCanEdit, true
}

// HasAttendeesCanEdit returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasAttendeesCanEdit() bool {
	if o != nil && o.AttendeesCanEdit != nil {
		return true
	}

	return false
}

// SetAttendeesCanEdit gets a reference to the given string and assigns it to the AttendeesCanEdit field.
func (o *CalendareventsIdJsonEvent) SetAttendeesCanEdit(v string) {
	o.AttendeesCanEdit = &v
}

// GetAttendingUserIds returns the AttendingUserIds field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetAttendingUserIds() string {
	if o == nil || o.AttendingUserIds == nil {
		var ret string
		return ret
	}
	return *o.AttendingUserIds
}

// GetAttendingUserIdsOk returns a tuple with the AttendingUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetAttendingUserIdsOk() (*string, bool) {
	if o == nil || o.AttendingUserIds == nil {
		return nil, false
	}
	return o.AttendingUserIds, true
}

// HasAttendingUserIds returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasAttendingUserIds() bool {
	if o != nil && o.AttendingUserIds != nil {
		return true
	}

	return false
}

// SetAttendingUserIds gets a reference to the given string and assigns it to the AttendingUserIds field.
func (o *CalendareventsIdJsonEvent) SetAttendingUserIds(v string) {
	o.AttendingUserIds = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CalendareventsIdJsonEvent) SetDescription(v string) {
	o.Description = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetEnd() string {
	if o == nil || o.End == nil {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetEndOk() (*string, bool) {
	if o == nil || o.End == nil {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasEnd() bool {
	if o != nil && o.End != nil {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *CalendareventsIdJsonEvent) SetEnd(v string) {
	o.End = &v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetNotify() string {
	if o == nil || o.Notify == nil {
		var ret string
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetNotifyOk() (*string, bool) {
	if o == nil || o.Notify == nil {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasNotify() bool {
	if o != nil && o.Notify != nil {
		return true
	}

	return false
}

// SetNotify gets a reference to the given string and assigns it to the Notify field.
func (o *CalendareventsIdJsonEvent) SetNotify(v string) {
	o.Notify = &v
}

// GetNotifyUserIds returns the NotifyUserIds field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetNotifyUserIds() string {
	if o == nil || o.NotifyUserIds == nil {
		var ret string
		return ret
	}
	return *o.NotifyUserIds
}

// GetNotifyUserIdsOk returns a tuple with the NotifyUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetNotifyUserIdsOk() (*string, bool) {
	if o == nil || o.NotifyUserIds == nil {
		return nil, false
	}
	return o.NotifyUserIds, true
}

// HasNotifyUserIds returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasNotifyUserIds() bool {
	if o != nil && o.NotifyUserIds != nil {
		return true
	}

	return false
}

// SetNotifyUserIds gets a reference to the given string and assigns it to the NotifyUserIds field.
func (o *CalendareventsIdJsonEvent) SetNotifyUserIds(v string) {
	o.NotifyUserIds = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetPrivacy() InlineResponse2003Privacy {
	if o == nil || o.Privacy == nil {
		var ret InlineResponse2003Privacy
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetPrivacyOk() (*InlineResponse2003Privacy, bool) {
	if o == nil || o.Privacy == nil {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasPrivacy() bool {
	if o != nil && o.Privacy != nil {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given InlineResponse2003Privacy and assigns it to the Privacy field.
func (o *CalendareventsIdJsonEvent) SetPrivacy(v InlineResponse2003Privacy) {
	o.Privacy = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetProjectId() string {
	if o == nil || o.ProjectId == nil {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetProjectIdOk() (*string, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *CalendareventsIdJsonEvent) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetProjectUsersCanEdit returns the ProjectUsersCanEdit field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetProjectUsersCanEdit() string {
	if o == nil || o.ProjectUsersCanEdit == nil {
		var ret string
		return ret
	}
	return *o.ProjectUsersCanEdit
}

// GetProjectUsersCanEditOk returns a tuple with the ProjectUsersCanEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetProjectUsersCanEditOk() (*string, bool) {
	if o == nil || o.ProjectUsersCanEdit == nil {
		return nil, false
	}
	return o.ProjectUsersCanEdit, true
}

// HasProjectUsersCanEdit returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasProjectUsersCanEdit() bool {
	if o != nil && o.ProjectUsersCanEdit != nil {
		return true
	}

	return false
}

// SetProjectUsersCanEdit gets a reference to the given string and assigns it to the ProjectUsersCanEdit field.
func (o *CalendareventsIdJsonEvent) SetProjectUsersCanEdit(v string) {
	o.ProjectUsersCanEdit = &v
}

// GetReminders returns the Reminders field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetReminders() []CalendareventsIdJsonEventReminders {
	if o == nil || o.Reminders == nil {
		var ret []CalendareventsIdJsonEventReminders
		return ret
	}
	return *o.Reminders
}

// GetRemindersOk returns a tuple with the Reminders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetRemindersOk() (*[]CalendareventsIdJsonEventReminders, bool) {
	if o == nil || o.Reminders == nil {
		return nil, false
	}
	return o.Reminders, true
}

// HasReminders returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasReminders() bool {
	if o != nil && o.Reminders != nil {
		return true
	}

	return false
}

// SetReminders gets a reference to the given []CalendareventsIdJsonEventReminders and assigns it to the Reminders field.
func (o *CalendareventsIdJsonEvent) SetReminders(v []CalendareventsIdJsonEventReminders) {
	o.Reminders = &v
}

// GetShowAsBusy returns the ShowAsBusy field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetShowAsBusy() string {
	if o == nil || o.ShowAsBusy == nil {
		var ret string
		return ret
	}
	return *o.ShowAsBusy
}

// GetShowAsBusyOk returns a tuple with the ShowAsBusy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetShowAsBusyOk() (*string, bool) {
	if o == nil || o.ShowAsBusy == nil {
		return nil, false
	}
	return o.ShowAsBusy, true
}

// HasShowAsBusy returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasShowAsBusy() bool {
	if o != nil && o.ShowAsBusy != nil {
		return true
	}

	return false
}

// SetShowAsBusy gets a reference to the given string and assigns it to the ShowAsBusy field.
func (o *CalendareventsIdJsonEvent) SetShowAsBusy(v string) {
	o.ShowAsBusy = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetStart() string {
	if o == nil || o.Start == nil {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetStartOk() (*string, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *CalendareventsIdJsonEvent) SetStart(v string) {
	o.Start = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CalendareventsIdJsonEvent) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetType() CalendareventsIdJsonEventType {
	if o == nil || o.Type == nil {
		var ret CalendareventsIdJsonEventType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetTypeOk() (*CalendareventsIdJsonEventType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given CalendareventsIdJsonEventType and assigns it to the Type field.
func (o *CalendareventsIdJsonEvent) SetType(v CalendareventsIdJsonEventType) {
	o.Type = &v
}

// GetUtc returns the Utc field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetUtc() bool {
	if o == nil || o.Utc == nil {
		var ret bool
		return ret
	}
	return *o.Utc
}

// GetUtcOk returns a tuple with the Utc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetUtcOk() (*bool, bool) {
	if o == nil || o.Utc == nil {
		return nil, false
	}
	return o.Utc, true
}

// HasUtc returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasUtc() bool {
	if o != nil && o.Utc != nil {
		return true
	}

	return false
}

// SetUtc gets a reference to the given bool and assigns it to the Utc field.
func (o *CalendareventsIdJsonEvent) SetUtc(v bool) {
	o.Utc = &v
}

// GetWhere returns the Where field value if set, zero value otherwise.
func (o *CalendareventsIdJsonEvent) GetWhere() string {
	if o == nil || o.Where == nil {
		var ret string
		return ret
	}
	return *o.Where
}

// GetWhereOk returns a tuple with the Where field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsIdJsonEvent) GetWhereOk() (*string, bool) {
	if o == nil || o.Where == nil {
		return nil, false
	}
	return o.Where, true
}

// HasWhere returns a boolean if a field has been set.
func (o *CalendareventsIdJsonEvent) HasWhere() bool {
	if o != nil && o.Where != nil {
		return true
	}

	return false
}

// SetWhere gets a reference to the given string and assigns it to the Where field.
func (o *CalendareventsIdJsonEvent) SetWhere(v string) {
	o.Where = &v
}

func (o CalendareventsIdJsonEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllDay != nil {
		toSerialize["all-day"] = o.AllDay
	}
	if o.AttendeesCanEdit != nil {
		toSerialize["attendees-can-edit"] = o.AttendeesCanEdit
	}
	if o.AttendingUserIds != nil {
		toSerialize["attending-user-ids"] = o.AttendingUserIds
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	if o.Notify != nil {
		toSerialize["notify"] = o.Notify
	}
	if o.NotifyUserIds != nil {
		toSerialize["notify-user-ids"] = o.NotifyUserIds
	}
	if o.Privacy != nil {
		toSerialize["privacy"] = o.Privacy
	}
	if o.ProjectId != nil {
		toSerialize["project-id"] = o.ProjectId
	}
	if o.ProjectUsersCanEdit != nil {
		toSerialize["project-users-can-edit"] = o.ProjectUsersCanEdit
	}
	if o.Reminders != nil {
		toSerialize["reminders"] = o.Reminders
	}
	if o.ShowAsBusy != nil {
		toSerialize["show-as-busy"] = o.ShowAsBusy
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Utc != nil {
		toSerialize["utc"] = o.Utc
	}
	if o.Where != nil {
		toSerialize["where"] = o.Where
	}
	return json.Marshal(toSerialize)
}

type NullableCalendareventsIdJsonEvent struct {
	value *CalendareventsIdJsonEvent
	isSet bool
}

func (v NullableCalendareventsIdJsonEvent) Get() *CalendareventsIdJsonEvent {
	return v.value
}

func (v *NullableCalendareventsIdJsonEvent) Set(val *CalendareventsIdJsonEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendareventsIdJsonEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendareventsIdJsonEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendareventsIdJsonEvent(val *CalendareventsIdJsonEvent) *NullableCalendareventsIdJsonEvent {
	return &NullableCalendareventsIdJsonEvent{value: val, isSet: true}
}

func (v NullableCalendareventsIdJsonEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendareventsIdJsonEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


