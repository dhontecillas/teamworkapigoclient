/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// SummaryRiskResponse RiskResponse contains counters for risks.
type SummaryRiskResponse struct {
	Closed *int32 `json:"closed,omitempty"`
	Open *int32 `json:"open,omitempty"`
	Pending *int32 `json:"pending,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// NewSummaryRiskResponse instantiates a new SummaryRiskResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummaryRiskResponse() *SummaryRiskResponse {
	this := SummaryRiskResponse{}
	return &this
}

// NewSummaryRiskResponseWithDefaults instantiates a new SummaryRiskResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryRiskResponseWithDefaults() *SummaryRiskResponse {
	this := SummaryRiskResponse{}
	return &this
}

// GetClosed returns the Closed field value if set, zero value otherwise.
func (o *SummaryRiskResponse) GetClosed() int32 {
	if o == nil || o.Closed == nil {
		var ret int32
		return ret
	}
	return *o.Closed
}

// GetClosedOk returns a tuple with the Closed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryRiskResponse) GetClosedOk() (*int32, bool) {
	if o == nil || o.Closed == nil {
		return nil, false
	}
	return o.Closed, true
}

// HasClosed returns a boolean if a field has been set.
func (o *SummaryRiskResponse) HasClosed() bool {
	if o != nil && o.Closed != nil {
		return true
	}

	return false
}

// SetClosed gets a reference to the given int32 and assigns it to the Closed field.
func (o *SummaryRiskResponse) SetClosed(v int32) {
	o.Closed = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *SummaryRiskResponse) GetOpen() int32 {
	if o == nil || o.Open == nil {
		var ret int32
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryRiskResponse) GetOpenOk() (*int32, bool) {
	if o == nil || o.Open == nil {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *SummaryRiskResponse) HasOpen() bool {
	if o != nil && o.Open != nil {
		return true
	}

	return false
}

// SetOpen gets a reference to the given int32 and assigns it to the Open field.
func (o *SummaryRiskResponse) SetOpen(v int32) {
	o.Open = &v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *SummaryRiskResponse) GetPending() int32 {
	if o == nil || o.Pending == nil {
		var ret int32
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryRiskResponse) GetPendingOk() (*int32, bool) {
	if o == nil || o.Pending == nil {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *SummaryRiskResponse) HasPending() bool {
	if o != nil && o.Pending != nil {
		return true
	}

	return false
}

// SetPending gets a reference to the given int32 and assigns it to the Pending field.
func (o *SummaryRiskResponse) SetPending(v int32) {
	o.Pending = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *SummaryRiskResponse) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryRiskResponse) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *SummaryRiskResponse) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *SummaryRiskResponse) SetTotal(v int32) {
	o.Total = &v
}

func (o SummaryRiskResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Closed != nil {
		toSerialize["closed"] = o.Closed
	}
	if o.Open != nil {
		toSerialize["open"] = o.Open
	}
	if o.Pending != nil {
		toSerialize["pending"] = o.Pending
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableSummaryRiskResponse struct {
	value *SummaryRiskResponse
	isSet bool
}

func (v NullableSummaryRiskResponse) Get() *SummaryRiskResponse {
	return v.value
}

func (v *NullableSummaryRiskResponse) Set(val *SummaryRiskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryRiskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryRiskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryRiskResponse(val *SummaryRiskResponse) *NullableSummaryRiskResponse {
	return &NullableSummaryRiskResponse{value: val, isSet: true}
}

func (v NullableSummaryRiskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryRiskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


