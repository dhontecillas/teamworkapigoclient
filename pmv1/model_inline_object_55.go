/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineObject55 struct for InlineObject55
type InlineObject55 struct {
	Project *ProjectsIdJsonProject `json:"project,omitempty"`
}

// NewInlineObject55 instantiates a new InlineObject55 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject55() *InlineObject55 {
	this := InlineObject55{}
	return &this
}

// NewInlineObject55WithDefaults instantiates a new InlineObject55 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject55WithDefaults() *InlineObject55 {
	this := InlineObject55{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *InlineObject55) GetProject() ProjectsIdJsonProject {
	if o == nil || o.Project == nil {
		var ret ProjectsIdJsonProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject55) GetProjectOk() (*ProjectsIdJsonProject, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *InlineObject55) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectsIdJsonProject and assigns it to the Project field.
func (o *InlineObject55) SetProject(v ProjectsIdJsonProject) {
	o.Project = &v
}

func (o InlineObject55) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject55 struct {
	value *InlineObject55
	isSet bool
}

func (v NullableInlineObject55) Get() *InlineObject55 {
	return v.value
}

func (v *NullableInlineObject55) Set(val *InlineObject55) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject55) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject55) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject55(val *InlineObject55) *NullableInlineObject55 {
	return &NullableInlineObject55{value: val, isSet: true}
}

func (v NullableInlineObject55) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject55) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


