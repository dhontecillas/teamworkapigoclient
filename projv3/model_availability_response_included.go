/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// AvailabilityResponseIncluded struct for AvailabilityResponseIncluded
type AvailabilityResponseIncluded struct {
	CalendarEvents *map[string]ViewCalendarEvent `json:"calendarEvents,omitempty"`
	Users *map[string]ViewUser `json:"users,omitempty"`
	WorkingHourEntries *map[string]ViewWorkingHourEntry `json:"workingHourEntries,omitempty"`
	WorkingHours *map[string]ViewWorkingHour `json:"workingHours,omitempty"`
}

// NewAvailabilityResponseIncluded instantiates a new AvailabilityResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityResponseIncluded() *AvailabilityResponseIncluded {
	this := AvailabilityResponseIncluded{}
	return &this
}

// NewAvailabilityResponseIncludedWithDefaults instantiates a new AvailabilityResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityResponseIncludedWithDefaults() *AvailabilityResponseIncluded {
	this := AvailabilityResponseIncluded{}
	return &this
}

// GetCalendarEvents returns the CalendarEvents field value if set, zero value otherwise.
func (o *AvailabilityResponseIncluded) GetCalendarEvents() map[string]ViewCalendarEvent {
	if o == nil || o.CalendarEvents == nil {
		var ret map[string]ViewCalendarEvent
		return ret
	}
	return *o.CalendarEvents
}

// GetCalendarEventsOk returns a tuple with the CalendarEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityResponseIncluded) GetCalendarEventsOk() (*map[string]ViewCalendarEvent, bool) {
	if o == nil || o.CalendarEvents == nil {
		return nil, false
	}
	return o.CalendarEvents, true
}

// HasCalendarEvents returns a boolean if a field has been set.
func (o *AvailabilityResponseIncluded) HasCalendarEvents() bool {
	if o != nil && o.CalendarEvents != nil {
		return true
	}

	return false
}

// SetCalendarEvents gets a reference to the given map[string]ViewCalendarEvent and assigns it to the CalendarEvents field.
func (o *AvailabilityResponseIncluded) SetCalendarEvents(v map[string]ViewCalendarEvent) {
	o.CalendarEvents = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *AvailabilityResponseIncluded) GetUsers() map[string]ViewUser {
	if o == nil || o.Users == nil {
		var ret map[string]ViewUser
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityResponseIncluded) GetUsersOk() (*map[string]ViewUser, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *AvailabilityResponseIncluded) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given map[string]ViewUser and assigns it to the Users field.
func (o *AvailabilityResponseIncluded) SetUsers(v map[string]ViewUser) {
	o.Users = &v
}

// GetWorkingHourEntries returns the WorkingHourEntries field value if set, zero value otherwise.
func (o *AvailabilityResponseIncluded) GetWorkingHourEntries() map[string]ViewWorkingHourEntry {
	if o == nil || o.WorkingHourEntries == nil {
		var ret map[string]ViewWorkingHourEntry
		return ret
	}
	return *o.WorkingHourEntries
}

// GetWorkingHourEntriesOk returns a tuple with the WorkingHourEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityResponseIncluded) GetWorkingHourEntriesOk() (*map[string]ViewWorkingHourEntry, bool) {
	if o == nil || o.WorkingHourEntries == nil {
		return nil, false
	}
	return o.WorkingHourEntries, true
}

// HasWorkingHourEntries returns a boolean if a field has been set.
func (o *AvailabilityResponseIncluded) HasWorkingHourEntries() bool {
	if o != nil && o.WorkingHourEntries != nil {
		return true
	}

	return false
}

// SetWorkingHourEntries gets a reference to the given map[string]ViewWorkingHourEntry and assigns it to the WorkingHourEntries field.
func (o *AvailabilityResponseIncluded) SetWorkingHourEntries(v map[string]ViewWorkingHourEntry) {
	o.WorkingHourEntries = &v
}

// GetWorkingHours returns the WorkingHours field value if set, zero value otherwise.
func (o *AvailabilityResponseIncluded) GetWorkingHours() map[string]ViewWorkingHour {
	if o == nil || o.WorkingHours == nil {
		var ret map[string]ViewWorkingHour
		return ret
	}
	return *o.WorkingHours
}

// GetWorkingHoursOk returns a tuple with the WorkingHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityResponseIncluded) GetWorkingHoursOk() (*map[string]ViewWorkingHour, bool) {
	if o == nil || o.WorkingHours == nil {
		return nil, false
	}
	return o.WorkingHours, true
}

// HasWorkingHours returns a boolean if a field has been set.
func (o *AvailabilityResponseIncluded) HasWorkingHours() bool {
	if o != nil && o.WorkingHours != nil {
		return true
	}

	return false
}

// SetWorkingHours gets a reference to the given map[string]ViewWorkingHour and assigns it to the WorkingHours field.
func (o *AvailabilityResponseIncluded) SetWorkingHours(v map[string]ViewWorkingHour) {
	o.WorkingHours = &v
}

func (o AvailabilityResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CalendarEvents != nil {
		toSerialize["calendarEvents"] = o.CalendarEvents
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	if o.WorkingHourEntries != nil {
		toSerialize["workingHourEntries"] = o.WorkingHourEntries
	}
	if o.WorkingHours != nil {
		toSerialize["workingHours"] = o.WorkingHours
	}
	return json.Marshal(toSerialize)
}

type NullableAvailabilityResponseIncluded struct {
	value *AvailabilityResponseIncluded
	isSet bool
}

func (v NullableAvailabilityResponseIncluded) Get() *AvailabilityResponseIncluded {
	return v.value
}

func (v *NullableAvailabilityResponseIncluded) Set(val *AvailabilityResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityResponseIncluded(val *AvailabilityResponseIncluded) *NullableAvailabilityResponseIncluded {
	return &NullableAvailabilityResponseIncluded{value: val, isSet: true}
}

func (v NullableAvailabilityResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


