/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// AllocationSplitRequest SplitRequest contains the time at which to insert the split, and new duration of the resulting first allocation.
type AllocationSplitRequest struct {
	// Date unmarshals represents a Unified API Spec date format.
	At *map[string]interface{} `json:"at,omitempty"`
	Duration *int32 `json:"duration,omitempty"`
}

// NewAllocationSplitRequest instantiates a new AllocationSplitRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationSplitRequest() *AllocationSplitRequest {
	this := AllocationSplitRequest{}
	return &this
}

// NewAllocationSplitRequestWithDefaults instantiates a new AllocationSplitRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationSplitRequestWithDefaults() *AllocationSplitRequest {
	this := AllocationSplitRequest{}
	return &this
}

// GetAt returns the At field value if set, zero value otherwise.
func (o *AllocationSplitRequest) GetAt() map[string]interface{} {
	if o == nil || o.At == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.At
}

// GetAtOk returns a tuple with the At field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationSplitRequest) GetAtOk() (*map[string]interface{}, bool) {
	if o == nil || o.At == nil {
		return nil, false
	}
	return o.At, true
}

// HasAt returns a boolean if a field has been set.
func (o *AllocationSplitRequest) HasAt() bool {
	if o != nil && o.At != nil {
		return true
	}

	return false
}

// SetAt gets a reference to the given map[string]interface{} and assigns it to the At field.
func (o *AllocationSplitRequest) SetAt(v map[string]interface{}) {
	o.At = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *AllocationSplitRequest) GetDuration() int32 {
	if o == nil || o.Duration == nil {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationSplitRequest) GetDurationOk() (*int32, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *AllocationSplitRequest) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *AllocationSplitRequest) SetDuration(v int32) {
	o.Duration = &v
}

func (o AllocationSplitRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.At != nil {
		toSerialize["at"] = o.At
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	return json.Marshal(toSerialize)
}

type NullableAllocationSplitRequest struct {
	value *AllocationSplitRequest
	isSet bool
}

func (v NullableAllocationSplitRequest) Get() *AllocationSplitRequest {
	return v.value
}

func (v *NullableAllocationSplitRequest) Set(val *AllocationSplitRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationSplitRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationSplitRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationSplitRequest(val *AllocationSplitRequest) *NullableAllocationSplitRequest {
	return &NullableAllocationSplitRequest{value: val, isSet: true}
}

func (v NullableAllocationSplitRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationSplitRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


