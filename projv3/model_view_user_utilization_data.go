/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewUserUtilizationData UserUtilizationData stores the user utilization on a specific period.
type ViewUserUtilizationData struct {
	AllocatedMinutes *int32 `json:"allocatedMinutes,omitempty"`
	AvailableMinutes *int32 `json:"availableMinutes,omitempty"`
	BillableMinutes *int32 `json:"billableMinutes,omitempty"`
	// Date represents a Unified API Spec date format.
	EndDate *map[string]interface{} `json:"endDate,omitempty"`
	EstimatedMinutes *int32 `json:"estimatedMinutes,omitempty"`
	LoggedMinutes *int32 `json:"loggedMinutes,omitempty"`
	// Date represents a Unified API Spec date format.
	StartDate *map[string]interface{} `json:"startDate,omitempty"`
	UnavailableMinutes *int32 `json:"unavailableMinutes,omitempty"`
	UnbillableMinutes *int32 `json:"unbillableMinutes,omitempty"`
}

// NewViewUserUtilizationData instantiates a new ViewUserUtilizationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewUserUtilizationData() *ViewUserUtilizationData {
	this := ViewUserUtilizationData{}
	return &this
}

// NewViewUserUtilizationDataWithDefaults instantiates a new ViewUserUtilizationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewUserUtilizationDataWithDefaults() *ViewUserUtilizationData {
	this := ViewUserUtilizationData{}
	return &this
}

// GetAllocatedMinutes returns the AllocatedMinutes field value if set, zero value otherwise.
func (o *ViewUserUtilizationData) GetAllocatedMinutes() int32 {
	if o == nil || o.AllocatedMinutes == nil {
		var ret int32
		return ret
	}
	return *o.AllocatedMinutes
}

// GetAllocatedMinutesOk returns a tuple with the AllocatedMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserUtilizationData) GetAllocatedMinutesOk() (*int32, bool) {
	if o == nil || o.AllocatedMinutes == nil {
		return nil, false
	}
	return o.AllocatedMinutes, true
}

// HasAllocatedMinutes returns a boolean if a field has been set.
func (o *ViewUserUtilizationData) HasAllocatedMinutes() bool {
	if o != nil && o.AllocatedMinutes != nil {
		return true
	}

	return false
}

// SetAllocatedMinutes gets a reference to the given int32 and assigns it to the AllocatedMinutes field.
func (o *ViewUserUtilizationData) SetAllocatedMinutes(v int32) {
	o.AllocatedMinutes = &v
}

// GetAvailableMinutes returns the AvailableMinutes field value if set, zero value otherwise.
func (o *ViewUserUtilizationData) GetAvailableMinutes() int32 {
	if o == nil || o.AvailableMinutes == nil {
		var ret int32
		return ret
	}
	return *o.AvailableMinutes
}

// GetAvailableMinutesOk returns a tuple with the AvailableMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserUtilizationData) GetAvailableMinutesOk() (*int32, bool) {
	if o == nil || o.AvailableMinutes == nil {
		return nil, false
	}
	return o.AvailableMinutes, true
}

// HasAvailableMinutes returns a boolean if a field has been set.
func (o *ViewUserUtilizationData) HasAvailableMinutes() bool {
	if o != nil && o.AvailableMinutes != nil {
		return true
	}

	return false
}

// SetAvailableMinutes gets a reference to the given int32 and assigns it to the AvailableMinutes field.
func (o *ViewUserUtilizationData) SetAvailableMinutes(v int32) {
	o.AvailableMinutes = &v
}

// GetBillableMinutes returns the BillableMinutes field value if set, zero value otherwise.
func (o *ViewUserUtilizationData) GetBillableMinutes() int32 {
	if o == nil || o.BillableMinutes == nil {
		var ret int32
		return ret
	}
	return *o.BillableMinutes
}

// GetBillableMinutesOk returns a tuple with the BillableMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserUtilizationData) GetBillableMinutesOk() (*int32, bool) {
	if o == nil || o.BillableMinutes == nil {
		return nil, false
	}
	return o.BillableMinutes, true
}

// HasBillableMinutes returns a boolean if a field has been set.
func (o *ViewUserUtilizationData) HasBillableMinutes() bool {
	if o != nil && o.BillableMinutes != nil {
		return true
	}

	return false
}

// SetBillableMinutes gets a reference to the given int32 and assigns it to the BillableMinutes field.
func (o *ViewUserUtilizationData) SetBillableMinutes(v int32) {
	o.BillableMinutes = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ViewUserUtilizationData) GetEndDate() map[string]interface{} {
	if o == nil || o.EndDate == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserUtilizationData) GetEndDateOk() (*map[string]interface{}, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ViewUserUtilizationData) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given map[string]interface{} and assigns it to the EndDate field.
func (o *ViewUserUtilizationData) SetEndDate(v map[string]interface{}) {
	o.EndDate = &v
}

// GetEstimatedMinutes returns the EstimatedMinutes field value if set, zero value otherwise.
func (o *ViewUserUtilizationData) GetEstimatedMinutes() int32 {
	if o == nil || o.EstimatedMinutes == nil {
		var ret int32
		return ret
	}
	return *o.EstimatedMinutes
}

// GetEstimatedMinutesOk returns a tuple with the EstimatedMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserUtilizationData) GetEstimatedMinutesOk() (*int32, bool) {
	if o == nil || o.EstimatedMinutes == nil {
		return nil, false
	}
	return o.EstimatedMinutes, true
}

// HasEstimatedMinutes returns a boolean if a field has been set.
func (o *ViewUserUtilizationData) HasEstimatedMinutes() bool {
	if o != nil && o.EstimatedMinutes != nil {
		return true
	}

	return false
}

// SetEstimatedMinutes gets a reference to the given int32 and assigns it to the EstimatedMinutes field.
func (o *ViewUserUtilizationData) SetEstimatedMinutes(v int32) {
	o.EstimatedMinutes = &v
}

// GetLoggedMinutes returns the LoggedMinutes field value if set, zero value otherwise.
func (o *ViewUserUtilizationData) GetLoggedMinutes() int32 {
	if o == nil || o.LoggedMinutes == nil {
		var ret int32
		return ret
	}
	return *o.LoggedMinutes
}

// GetLoggedMinutesOk returns a tuple with the LoggedMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserUtilizationData) GetLoggedMinutesOk() (*int32, bool) {
	if o == nil || o.LoggedMinutes == nil {
		return nil, false
	}
	return o.LoggedMinutes, true
}

// HasLoggedMinutes returns a boolean if a field has been set.
func (o *ViewUserUtilizationData) HasLoggedMinutes() bool {
	if o != nil && o.LoggedMinutes != nil {
		return true
	}

	return false
}

// SetLoggedMinutes gets a reference to the given int32 and assigns it to the LoggedMinutes field.
func (o *ViewUserUtilizationData) SetLoggedMinutes(v int32) {
	o.LoggedMinutes = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ViewUserUtilizationData) GetStartDate() map[string]interface{} {
	if o == nil || o.StartDate == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserUtilizationData) GetStartDateOk() (*map[string]interface{}, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ViewUserUtilizationData) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given map[string]interface{} and assigns it to the StartDate field.
func (o *ViewUserUtilizationData) SetStartDate(v map[string]interface{}) {
	o.StartDate = &v
}

// GetUnavailableMinutes returns the UnavailableMinutes field value if set, zero value otherwise.
func (o *ViewUserUtilizationData) GetUnavailableMinutes() int32 {
	if o == nil || o.UnavailableMinutes == nil {
		var ret int32
		return ret
	}
	return *o.UnavailableMinutes
}

// GetUnavailableMinutesOk returns a tuple with the UnavailableMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserUtilizationData) GetUnavailableMinutesOk() (*int32, bool) {
	if o == nil || o.UnavailableMinutes == nil {
		return nil, false
	}
	return o.UnavailableMinutes, true
}

// HasUnavailableMinutes returns a boolean if a field has been set.
func (o *ViewUserUtilizationData) HasUnavailableMinutes() bool {
	if o != nil && o.UnavailableMinutes != nil {
		return true
	}

	return false
}

// SetUnavailableMinutes gets a reference to the given int32 and assigns it to the UnavailableMinutes field.
func (o *ViewUserUtilizationData) SetUnavailableMinutes(v int32) {
	o.UnavailableMinutes = &v
}

// GetUnbillableMinutes returns the UnbillableMinutes field value if set, zero value otherwise.
func (o *ViewUserUtilizationData) GetUnbillableMinutes() int32 {
	if o == nil || o.UnbillableMinutes == nil {
		var ret int32
		return ret
	}
	return *o.UnbillableMinutes
}

// GetUnbillableMinutesOk returns a tuple with the UnbillableMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserUtilizationData) GetUnbillableMinutesOk() (*int32, bool) {
	if o == nil || o.UnbillableMinutes == nil {
		return nil, false
	}
	return o.UnbillableMinutes, true
}

// HasUnbillableMinutes returns a boolean if a field has been set.
func (o *ViewUserUtilizationData) HasUnbillableMinutes() bool {
	if o != nil && o.UnbillableMinutes != nil {
		return true
	}

	return false
}

// SetUnbillableMinutes gets a reference to the given int32 and assigns it to the UnbillableMinutes field.
func (o *ViewUserUtilizationData) SetUnbillableMinutes(v int32) {
	o.UnbillableMinutes = &v
}

func (o ViewUserUtilizationData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllocatedMinutes != nil {
		toSerialize["allocatedMinutes"] = o.AllocatedMinutes
	}
	if o.AvailableMinutes != nil {
		toSerialize["availableMinutes"] = o.AvailableMinutes
	}
	if o.BillableMinutes != nil {
		toSerialize["billableMinutes"] = o.BillableMinutes
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.EstimatedMinutes != nil {
		toSerialize["estimatedMinutes"] = o.EstimatedMinutes
	}
	if o.LoggedMinutes != nil {
		toSerialize["loggedMinutes"] = o.LoggedMinutes
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.UnavailableMinutes != nil {
		toSerialize["unavailableMinutes"] = o.UnavailableMinutes
	}
	if o.UnbillableMinutes != nil {
		toSerialize["unbillableMinutes"] = o.UnbillableMinutes
	}
	return json.Marshal(toSerialize)
}

type NullableViewUserUtilizationData struct {
	value *ViewUserUtilizationData
	isSet bool
}

func (v NullableViewUserUtilizationData) Get() *ViewUserUtilizationData {
	return v.value
}

func (v *NullableViewUserUtilizationData) Set(val *ViewUserUtilizationData) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUserUtilizationData) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUserUtilizationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUserUtilizationData(val *ViewUserUtilizationData) *NullableViewUserUtilizationData {
	return &NullableViewUserUtilizationData{value: val, isSet: true}
}

func (v NullableViewUserUtilizationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUserUtilizationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


