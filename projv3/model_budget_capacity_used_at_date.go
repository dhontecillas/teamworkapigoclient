/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// BudgetCapacityUsedAtDate CapacityUsedAtDate reprsents the capacity of the
type BudgetCapacityUsedAtDate struct {
	// RFC3339 formated datetime, when the day starts int UTC time
	Date *string `json:"date,omitempty"`
	Usage *float32 `json:"usage,omitempty"`
}

// NewBudgetCapacityUsedAtDate instantiates a new BudgetCapacityUsedAtDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetCapacityUsedAtDate() *BudgetCapacityUsedAtDate {
	this := BudgetCapacityUsedAtDate{}
	return &this
}

// NewBudgetCapacityUsedAtDateWithDefaults instantiates a new BudgetCapacityUsedAtDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetCapacityUsedAtDateWithDefaults() *BudgetCapacityUsedAtDate {
	this := BudgetCapacityUsedAtDate{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BudgetCapacityUsedAtDate) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetCapacityUsedAtDate) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BudgetCapacityUsedAtDate) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *BudgetCapacityUsedAtDate) SetDate(v string) {
	o.Date = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *BudgetCapacityUsedAtDate) GetUsage() float32 {
	if o == nil || o.Usage == nil {
		var ret float32
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetCapacityUsedAtDate) GetUsageOk() (*float32, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *BudgetCapacityUsedAtDate) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given float32 and assigns it to the Usage field.
func (o *BudgetCapacityUsedAtDate) SetUsage(v float32) {
	o.Usage = &v
}

func (o BudgetCapacityUsedAtDate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableBudgetCapacityUsedAtDate struct {
	value *BudgetCapacityUsedAtDate
	isSet bool
}

func (v NullableBudgetCapacityUsedAtDate) Get() *BudgetCapacityUsedAtDate {
	return v.value
}

func (v *NullableBudgetCapacityUsedAtDate) Set(val *BudgetCapacityUsedAtDate) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetCapacityUsedAtDate) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetCapacityUsedAtDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetCapacityUsedAtDate(val *BudgetCapacityUsedAtDate) *NullableBudgetCapacityUsedAtDate {
	return &NullableBudgetCapacityUsedAtDate{value: val, isSet: true}
}

func (v NullableBudgetCapacityUsedAtDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetCapacityUsedAtDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


