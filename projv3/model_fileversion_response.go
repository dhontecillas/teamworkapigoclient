/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileversionResponse Response contains information about a specific fileversion.
type FileversionResponse struct {
	Fileversion *ViewFileversion `json:"fileversion,omitempty"`
	Included *FileversionResponseIncluded `json:"included,omitempty"`
}

// NewFileversionResponse instantiates a new FileversionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileversionResponse() *FileversionResponse {
	this := FileversionResponse{}
	return &this
}

// NewFileversionResponseWithDefaults instantiates a new FileversionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileversionResponseWithDefaults() *FileversionResponse {
	this := FileversionResponse{}
	return &this
}

// GetFileversion returns the Fileversion field value if set, zero value otherwise.
func (o *FileversionResponse) GetFileversion() ViewFileversion {
	if o == nil || o.Fileversion == nil {
		var ret ViewFileversion
		return ret
	}
	return *o.Fileversion
}

// GetFileversionOk returns a tuple with the Fileversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileversionResponse) GetFileversionOk() (*ViewFileversion, bool) {
	if o == nil || o.Fileversion == nil {
		return nil, false
	}
	return o.Fileversion, true
}

// HasFileversion returns a boolean if a field has been set.
func (o *FileversionResponse) HasFileversion() bool {
	if o != nil && o.Fileversion != nil {
		return true
	}

	return false
}

// SetFileversion gets a reference to the given ViewFileversion and assigns it to the Fileversion field.
func (o *FileversionResponse) SetFileversion(v ViewFileversion) {
	o.Fileversion = &v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *FileversionResponse) GetIncluded() FileversionResponseIncluded {
	if o == nil || o.Included == nil {
		var ret FileversionResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileversionResponse) GetIncludedOk() (*FileversionResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *FileversionResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given FileversionResponseIncluded and assigns it to the Included field.
func (o *FileversionResponse) SetIncluded(v FileversionResponseIncluded) {
	o.Included = &v
}

func (o FileversionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fileversion != nil {
		toSerialize["fileversion"] = o.Fileversion
	}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	return json.Marshal(toSerialize)
}

type NullableFileversionResponse struct {
	value *FileversionResponse
	isSet bool
}

func (v NullableFileversionResponse) Get() *FileversionResponse {
	return v.value
}

func (v *NullableFileversionResponse) Set(val *FileversionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileversionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileversionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileversionResponse(val *FileversionResponse) *NullableFileversionResponse {
	return &NullableFileversionResponse{value: val, isSet: true}
}

func (v NullableFileversionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileversionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


