/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineResponse20039PersonIntegrationsMicrosoftConnector struct for InlineResponse20039PersonIntegrationsMicrosoftConnector
type InlineResponse20039PersonIntegrationsMicrosoftConnector struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// NewInlineResponse20039PersonIntegrationsMicrosoftConnector instantiates a new InlineResponse20039PersonIntegrationsMicrosoftConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20039PersonIntegrationsMicrosoftConnector() *InlineResponse20039PersonIntegrationsMicrosoftConnector {
	this := InlineResponse20039PersonIntegrationsMicrosoftConnector{}
	return &this
}

// NewInlineResponse20039PersonIntegrationsMicrosoftConnectorWithDefaults instantiates a new InlineResponse20039PersonIntegrationsMicrosoftConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20039PersonIntegrationsMicrosoftConnectorWithDefaults() *InlineResponse20039PersonIntegrationsMicrosoftConnector {
	this := InlineResponse20039PersonIntegrationsMicrosoftConnector{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *InlineResponse20039PersonIntegrationsMicrosoftConnector) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20039PersonIntegrationsMicrosoftConnector) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *InlineResponse20039PersonIntegrationsMicrosoftConnector) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *InlineResponse20039PersonIntegrationsMicrosoftConnector) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o InlineResponse20039PersonIntegrationsMicrosoftConnector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20039PersonIntegrationsMicrosoftConnector struct {
	value *InlineResponse20039PersonIntegrationsMicrosoftConnector
	isSet bool
}

func (v NullableInlineResponse20039PersonIntegrationsMicrosoftConnector) Get() *InlineResponse20039PersonIntegrationsMicrosoftConnector {
	return v.value
}

func (v *NullableInlineResponse20039PersonIntegrationsMicrosoftConnector) Set(val *InlineResponse20039PersonIntegrationsMicrosoftConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20039PersonIntegrationsMicrosoftConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20039PersonIntegrationsMicrosoftConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20039PersonIntegrationsMicrosoftConnector(val *InlineResponse20039PersonIntegrationsMicrosoftConnector) *NullableInlineResponse20039PersonIntegrationsMicrosoftConnector {
	return &NullableInlineResponse20039PersonIntegrationsMicrosoftConnector{value: val, isSet: true}
}

func (v NullableInlineResponse20039PersonIntegrationsMicrosoftConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20039PersonIntegrationsMicrosoftConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


