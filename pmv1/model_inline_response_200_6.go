/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineResponse2006 struct for InlineResponse2006
type InlineResponse2006 struct {
	STATUS *string `json:"STATUS,omitempty"`
	Eventtypes *[]InlineResponse2002Column `json:"eventtypes,omitempty"`
}

// NewInlineResponse2006 instantiates a new InlineResponse2006 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2006() *InlineResponse2006 {
	this := InlineResponse2006{}
	return &this
}

// NewInlineResponse2006WithDefaults instantiates a new InlineResponse2006 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2006WithDefaults() *InlineResponse2006 {
	this := InlineResponse2006{}
	return &this
}

// GetSTATUS returns the STATUS field value if set, zero value otherwise.
func (o *InlineResponse2006) GetSTATUS() string {
	if o == nil || o.STATUS == nil {
		var ret string
		return ret
	}
	return *o.STATUS
}

// GetSTATUSOk returns a tuple with the STATUS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetSTATUSOk() (*string, bool) {
	if o == nil || o.STATUS == nil {
		return nil, false
	}
	return o.STATUS, true
}

// HasSTATUS returns a boolean if a field has been set.
func (o *InlineResponse2006) HasSTATUS() bool {
	if o != nil && o.STATUS != nil {
		return true
	}

	return false
}

// SetSTATUS gets a reference to the given string and assigns it to the STATUS field.
func (o *InlineResponse2006) SetSTATUS(v string) {
	o.STATUS = &v
}

// GetEventtypes returns the Eventtypes field value if set, zero value otherwise.
func (o *InlineResponse2006) GetEventtypes() []InlineResponse2002Column {
	if o == nil || o.Eventtypes == nil {
		var ret []InlineResponse2002Column
		return ret
	}
	return *o.Eventtypes
}

// GetEventtypesOk returns a tuple with the Eventtypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetEventtypesOk() (*[]InlineResponse2002Column, bool) {
	if o == nil || o.Eventtypes == nil {
		return nil, false
	}
	return o.Eventtypes, true
}

// HasEventtypes returns a boolean if a field has been set.
func (o *InlineResponse2006) HasEventtypes() bool {
	if o != nil && o.Eventtypes != nil {
		return true
	}

	return false
}

// SetEventtypes gets a reference to the given []InlineResponse2002Column and assigns it to the Eventtypes field.
func (o *InlineResponse2006) SetEventtypes(v []InlineResponse2002Column) {
	o.Eventtypes = &v
}

func (o InlineResponse2006) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.STATUS != nil {
		toSerialize["STATUS"] = o.STATUS
	}
	if o.Eventtypes != nil {
		toSerialize["eventtypes"] = o.Eventtypes
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2006 struct {
	value *InlineResponse2006
	isSet bool
}

func (v NullableInlineResponse2006) Get() *InlineResponse2006 {
	return v.value
}

func (v *NullableInlineResponse2006) Set(val *InlineResponse2006) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2006) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2006) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2006(val *InlineResponse2006) *NullableInlineResponse2006 {
	return &NullableInlineResponse2006{value: val, isSet: true}
}

func (v NullableInlineResponse2006) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2006) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


