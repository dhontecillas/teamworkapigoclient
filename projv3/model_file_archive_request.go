/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileArchiveRequest ArchiveRequest contains all file IDs that will be grouped for download.
type FileArchiveRequest struct {
	FileIds *[]int32 `json:"fileIds,omitempty"`
}

// NewFileArchiveRequest instantiates a new FileArchiveRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileArchiveRequest() *FileArchiveRequest {
	this := FileArchiveRequest{}
	return &this
}

// NewFileArchiveRequestWithDefaults instantiates a new FileArchiveRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileArchiveRequestWithDefaults() *FileArchiveRequest {
	this := FileArchiveRequest{}
	return &this
}

// GetFileIds returns the FileIds field value if set, zero value otherwise.
func (o *FileArchiveRequest) GetFileIds() []int32 {
	if o == nil || o.FileIds == nil {
		var ret []int32
		return ret
	}
	return *o.FileIds
}

// GetFileIdsOk returns a tuple with the FileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileArchiveRequest) GetFileIdsOk() (*[]int32, bool) {
	if o == nil || o.FileIds == nil {
		return nil, false
	}
	return o.FileIds, true
}

// HasFileIds returns a boolean if a field has been set.
func (o *FileArchiveRequest) HasFileIds() bool {
	if o != nil && o.FileIds != nil {
		return true
	}

	return false
}

// SetFileIds gets a reference to the given []int32 and assigns it to the FileIds field.
func (o *FileArchiveRequest) SetFileIds(v []int32) {
	o.FileIds = &v
}

func (o FileArchiveRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileIds != nil {
		toSerialize["fileIds"] = o.FileIds
	}
	return json.Marshal(toSerialize)
}

type NullableFileArchiveRequest struct {
	value *FileArchiveRequest
	isSet bool
}

func (v NullableFileArchiveRequest) Get() *FileArchiveRequest {
	return v.value
}

func (v *NullableFileArchiveRequest) Set(val *FileArchiveRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFileArchiveRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFileArchiveRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileArchiveRequest(val *FileArchiveRequest) *NullableFileArchiveRequest {
	return &NullableFileArchiveRequest{value: val, isSet: true}
}

func (v NullableFileArchiveRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileArchiveRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


