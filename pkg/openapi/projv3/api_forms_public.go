/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// FormsPublicApiService FormsPublicApi service
type FormsPublicApiService service

type ApiGETProjectsApiV3FormsPublicTokenJsonRequest struct {
	ctx _context.Context
	ApiService *FormsPublicApiService
	orderMode *string
	contentState *string
	userId *int32
	pageSize *int32
	page *int32
	projectIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsProjects *[]string
	fieldsForms *[]string
}

func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) ContentState(contentState string) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	r.contentState = &contentState
	return r
}
func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) UserId(userId int32) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) Page(page int32) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) Include(include []string) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) FieldsForms(fieldsForms []string) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	r.fieldsForms = &fieldsForms
	return r
}

func (r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) Execute() (FormPublicResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3FormsPublicTokenJsonExecute(r)
}

/*
 * GETProjectsApiV3FormsPublicTokenJson Get a forms via its token.
 * This endpoint does not require authentication.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3FormsPublicTokenJsonRequest
 */
func (a *FormsPublicApiService) GETProjectsApiV3FormsPublicTokenJson(ctx _context.Context) ApiGETProjectsApiV3FormsPublicTokenJsonRequest {
	return ApiGETProjectsApiV3FormsPublicTokenJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FormPublicResponse
 */
func (a *FormsPublicApiService) GETProjectsApiV3FormsPublicTokenJsonExecute(r ApiGETProjectsApiV3FormsPublicTokenJsonRequest) (FormPublicResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FormPublicResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FormsPublicApiService.GETProjectsApiV3FormsPublicTokenJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/forms/public/:token.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.contentState != nil {
		localVarQueryParams.Add("content.state", parameterToString(*r.contentState, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsForms != nil {
		localVarQueryParams.Add("fields[forms]", parameterToString(*r.fieldsForms, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3FormsPublicTokenSubmitJsonRequest struct {
	ctx _context.Context
	ApiService *FormsPublicApiService
	formSubmissionRequest *FormSubmissionRequest
}

func (r ApiPOSTProjectsApiV3FormsPublicTokenSubmitJsonRequest) FormSubmissionRequest(formSubmissionRequest FormSubmissionRequest) ApiPOSTProjectsApiV3FormsPublicTokenSubmitJsonRequest {
	r.formSubmissionRequest = &formSubmissionRequest
	return r
}

func (r ApiPOSTProjectsApiV3FormsPublicTokenSubmitJsonRequest) Execute() (FormFormsResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3FormsPublicTokenSubmitJsonExecute(r)
}

/*
 * POSTProjectsApiV3FormsPublicTokenSubmitJson Submit a form response
 * This endpoint does not require authentication.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3FormsPublicTokenSubmitJsonRequest
 */
func (a *FormsPublicApiService) POSTProjectsApiV3FormsPublicTokenSubmitJson(ctx _context.Context) ApiPOSTProjectsApiV3FormsPublicTokenSubmitJsonRequest {
	return ApiPOSTProjectsApiV3FormsPublicTokenSubmitJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FormFormsResponse
 */
func (a *FormsPublicApiService) POSTProjectsApiV3FormsPublicTokenSubmitJsonExecute(r ApiPOSTProjectsApiV3FormsPublicTokenSubmitJsonRequest) (FormFormsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FormFormsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FormsPublicApiService.POSTProjectsApiV3FormsPublicTokenSubmitJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/forms/public/:token/submit.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.formSubmissionRequest == nil {
		return localVarReturnValue, nil, reportError("formSubmissionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.formSubmissionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
