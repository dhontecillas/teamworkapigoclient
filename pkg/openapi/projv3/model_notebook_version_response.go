/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// NotebookVersionResponse VersionResponse contains information about a specifc notebook version
type NotebookVersionResponse struct {
	Included *NotebookVersionResponseIncluded `json:"included,omitempty"`
	Version *ViewNotebookVersion `json:"version,omitempty"`
}

// NewNotebookVersionResponse instantiates a new NotebookVersionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotebookVersionResponse() *NotebookVersionResponse {
	this := NotebookVersionResponse{}
	return &this
}

// NewNotebookVersionResponseWithDefaults instantiates a new NotebookVersionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotebookVersionResponseWithDefaults() *NotebookVersionResponse {
	this := NotebookVersionResponse{}
	return &this
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *NotebookVersionResponse) GetIncluded() NotebookVersionResponseIncluded {
	if o == nil || o.Included == nil {
		var ret NotebookVersionResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookVersionResponse) GetIncludedOk() (*NotebookVersionResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *NotebookVersionResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given NotebookVersionResponseIncluded and assigns it to the Included field.
func (o *NotebookVersionResponse) SetIncluded(v NotebookVersionResponseIncluded) {
	o.Included = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NotebookVersionResponse) GetVersion() ViewNotebookVersion {
	if o == nil || o.Version == nil {
		var ret ViewNotebookVersion
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookVersionResponse) GetVersionOk() (*ViewNotebookVersion, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NotebookVersionResponse) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given ViewNotebookVersion and assigns it to the Version field.
func (o *NotebookVersionResponse) SetVersion(v ViewNotebookVersion) {
	o.Version = &v
}

func (o NotebookVersionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableNotebookVersionResponse struct {
	value *NotebookVersionResponse
	isSet bool
}

func (v NullableNotebookVersionResponse) Get() *NotebookVersionResponse {
	return v.value
}

func (v *NullableNotebookVersionResponse) Set(val *NotebookVersionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNotebookVersionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNotebookVersionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotebookVersionResponse(val *NotebookVersionResponse) *NullableNotebookVersionResponse {
	return &NullableNotebookVersionResponse{value: val, isSet: true}
}

func (v NullableNotebookVersionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotebookVersionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


