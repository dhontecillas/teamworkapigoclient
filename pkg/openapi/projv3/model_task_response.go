/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// TaskResponse Response contains information about a specific task.
type TaskResponse struct {
	Included *TaskResponseIncluded `json:"included,omitempty"`
	Task *ViewTask `json:"task,omitempty"`
}

// NewTaskResponse instantiates a new TaskResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskResponse() *TaskResponse {
	this := TaskResponse{}
	return &this
}

// NewTaskResponseWithDefaults instantiates a new TaskResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskResponseWithDefaults() *TaskResponse {
	this := TaskResponse{}
	return &this
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *TaskResponse) GetIncluded() TaskResponseIncluded {
	if o == nil || o.Included == nil {
		var ret TaskResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponse) GetIncludedOk() (*TaskResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *TaskResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given TaskResponseIncluded and assigns it to the Included field.
func (o *TaskResponse) SetIncluded(v TaskResponseIncluded) {
	o.Included = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *TaskResponse) GetTask() ViewTask {
	if o == nil || o.Task == nil {
		var ret ViewTask
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponse) GetTaskOk() (*ViewTask, bool) {
	if o == nil || o.Task == nil {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *TaskResponse) HasTask() bool {
	if o != nil && o.Task != nil {
		return true
	}

	return false
}

// SetTask gets a reference to the given ViewTask and assigns it to the Task field.
func (o *TaskResponse) SetTask(v ViewTask) {
	o.Task = &v
}

func (o TaskResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Task != nil {
		toSerialize["task"] = o.Task
	}
	return json.Marshal(toSerialize)
}

type NullableTaskResponse struct {
	value *TaskResponse
	isSet bool
}

func (v NullableTaskResponse) Get() *TaskResponse {
	return v.value
}

func (v *NullableTaskResponse) Set(val *TaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskResponse(val *TaskResponse) *NullableTaskResponse {
	return &NullableTaskResponse{value: val, isSet: true}
}

func (v NullableTaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


