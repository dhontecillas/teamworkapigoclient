/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewCalendarEvent CalendarEvent contains all the information returned from a calendar event.
type ViewCalendarEvent struct {
	AdditionalPropertiesField *string `json:"additionalProperties,omitempty"`
	AllDay *bool `json:"allDay,omitempty"`
	AttendeesCanEdit *bool `json:"attendeesCanEdit,omitempty"`
	AttendingUserIds *[]int32 `json:"attendingUserIds,omitempty"`
	AttendingUsers *[]ViewRelationship `json:"attendingUsers,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	CreatedBy *int32 `json:"createdBy,omitempty"`
	CreatedByUserId *int32 `json:"createdByUserId,omitempty"`
	CreatedDateTime *string `json:"createdDateTime,omitempty"`
	CurrentUserAssociationType *string `json:"currentUserAssociationType,omitempty"`
	DateDeleted *string `json:"dateDeleted,omitempty"`
	DateLastUpdated *string `json:"dateLastUpdated,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	DeletedBy *int32 `json:"deletedBy,omitempty"`
	DeletedByUserId *int32 `json:"deletedByUserId,omitempty"`
	Description *string `json:"description,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Location *string `json:"location,omitempty"`
	MonthlyRepeatType *string `json:"monthlyRepeatType,omitempty"`
	OwnedBy *int32 `json:"ownedBy,omitempty"`
	OwnerUserId *int32 `json:"ownerUserId,omitempty"`
	PrivacyType *string `json:"privacyType,omitempty"`
	Project *ViewRelationship `json:"project,omitempty"`
	ProjectId *int32 `json:"projectId,omitempty"`
	ProjectUsersCanEdit *bool `json:"projectUsersCanEdit,omitempty"`
	Sequence *ViewRelationship `json:"sequence,omitempty"`
	SequenceId *int32 `json:"sequenceId,omitempty"`
	ShowAsBusy *bool `json:"showAsBusy,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	Title *string `json:"title,omitempty"`
	Type *ViewRelationship `json:"type,omitempty"`
	TypeId *int32 `json:"typeId,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	UpdatedBy *int32 `json:"updatedBy,omitempty"`
	UpdatedByUserId *int32 `json:"updatedByUserId,omitempty"`
}

// NewViewCalendarEvent instantiates a new ViewCalendarEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewCalendarEvent() *ViewCalendarEvent {
	this := ViewCalendarEvent{}
	return &this
}

// NewViewCalendarEventWithDefaults instantiates a new ViewCalendarEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewCalendarEventWithDefaults() *ViewCalendarEvent {
	this := ViewCalendarEvent{}
	return &this
}

// GetAdditionalPropertiesField returns the AdditionalPropertiesField field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetAdditionalPropertiesField() string {
	if o == nil || o.AdditionalPropertiesField == nil {
		var ret string
		return ret
	}
	return *o.AdditionalPropertiesField
}

// GetAdditionalPropertiesFieldOk returns a tuple with the AdditionalPropertiesField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetAdditionalPropertiesFieldOk() (*string, bool) {
	if o == nil || o.AdditionalPropertiesField == nil {
		return nil, false
	}
	return o.AdditionalPropertiesField, true
}

// HasAdditionalPropertiesField returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasAdditionalPropertiesField() bool {
	if o != nil && o.AdditionalPropertiesField != nil {
		return true
	}

	return false
}

// SetAdditionalPropertiesField gets a reference to the given string and assigns it to the AdditionalPropertiesField field.
func (o *ViewCalendarEvent) SetAdditionalPropertiesField(v string) {
	o.AdditionalPropertiesField = &v
}

// GetAllDay returns the AllDay field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetAllDay() bool {
	if o == nil || o.AllDay == nil {
		var ret bool
		return ret
	}
	return *o.AllDay
}

// GetAllDayOk returns a tuple with the AllDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetAllDayOk() (*bool, bool) {
	if o == nil || o.AllDay == nil {
		return nil, false
	}
	return o.AllDay, true
}

// HasAllDay returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasAllDay() bool {
	if o != nil && o.AllDay != nil {
		return true
	}

	return false
}

// SetAllDay gets a reference to the given bool and assigns it to the AllDay field.
func (o *ViewCalendarEvent) SetAllDay(v bool) {
	o.AllDay = &v
}

// GetAttendeesCanEdit returns the AttendeesCanEdit field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetAttendeesCanEdit() bool {
	if o == nil || o.AttendeesCanEdit == nil {
		var ret bool
		return ret
	}
	return *o.AttendeesCanEdit
}

// GetAttendeesCanEditOk returns a tuple with the AttendeesCanEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetAttendeesCanEditOk() (*bool, bool) {
	if o == nil || o.AttendeesCanEdit == nil {
		return nil, false
	}
	return o.AttendeesCanEdit, true
}

// HasAttendeesCanEdit returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasAttendeesCanEdit() bool {
	if o != nil && o.AttendeesCanEdit != nil {
		return true
	}

	return false
}

// SetAttendeesCanEdit gets a reference to the given bool and assigns it to the AttendeesCanEdit field.
func (o *ViewCalendarEvent) SetAttendeesCanEdit(v bool) {
	o.AttendeesCanEdit = &v
}

// GetAttendingUserIds returns the AttendingUserIds field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetAttendingUserIds() []int32 {
	if o == nil || o.AttendingUserIds == nil {
		var ret []int32
		return ret
	}
	return *o.AttendingUserIds
}

// GetAttendingUserIdsOk returns a tuple with the AttendingUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetAttendingUserIdsOk() (*[]int32, bool) {
	if o == nil || o.AttendingUserIds == nil {
		return nil, false
	}
	return o.AttendingUserIds, true
}

// HasAttendingUserIds returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasAttendingUserIds() bool {
	if o != nil && o.AttendingUserIds != nil {
		return true
	}

	return false
}

// SetAttendingUserIds gets a reference to the given []int32 and assigns it to the AttendingUserIds field.
func (o *ViewCalendarEvent) SetAttendingUserIds(v []int32) {
	o.AttendingUserIds = &v
}

// GetAttendingUsers returns the AttendingUsers field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetAttendingUsers() []ViewRelationship {
	if o == nil || o.AttendingUsers == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.AttendingUsers
}

// GetAttendingUsersOk returns a tuple with the AttendingUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetAttendingUsersOk() (*[]ViewRelationship, bool) {
	if o == nil || o.AttendingUsers == nil {
		return nil, false
	}
	return o.AttendingUsers, true
}

// HasAttendingUsers returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasAttendingUsers() bool {
	if o != nil && o.AttendingUsers != nil {
		return true
	}

	return false
}

// SetAttendingUsers gets a reference to the given []ViewRelationship and assigns it to the AttendingUsers field.
func (o *ViewCalendarEvent) SetAttendingUsers(v []ViewRelationship) {
	o.AttendingUsers = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ViewCalendarEvent) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetCreatedBy() int32 {
	if o == nil || o.CreatedBy == nil {
		var ret int32
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetCreatedByOk() (*int32, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int32 and assigns it to the CreatedBy field.
func (o *ViewCalendarEvent) SetCreatedBy(v int32) {
	o.CreatedBy = &v
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetCreatedByUserId() int32 {
	if o == nil || o.CreatedByUserId == nil {
		var ret int32
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetCreatedByUserIdOk() (*int32, bool) {
	if o == nil || o.CreatedByUserId == nil {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasCreatedByUserId() bool {
	if o != nil && o.CreatedByUserId != nil {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given int32 and assigns it to the CreatedByUserId field.
func (o *ViewCalendarEvent) SetCreatedByUserId(v int32) {
	o.CreatedByUserId = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetCreatedDateTime() string {
	if o == nil || o.CreatedDateTime == nil {
		var ret string
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetCreatedDateTimeOk() (*string, bool) {
	if o == nil || o.CreatedDateTime == nil {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime != nil {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given string and assigns it to the CreatedDateTime field.
func (o *ViewCalendarEvent) SetCreatedDateTime(v string) {
	o.CreatedDateTime = &v
}

// GetCurrentUserAssociationType returns the CurrentUserAssociationType field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetCurrentUserAssociationType() string {
	if o == nil || o.CurrentUserAssociationType == nil {
		var ret string
		return ret
	}
	return *o.CurrentUserAssociationType
}

// GetCurrentUserAssociationTypeOk returns a tuple with the CurrentUserAssociationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetCurrentUserAssociationTypeOk() (*string, bool) {
	if o == nil || o.CurrentUserAssociationType == nil {
		return nil, false
	}
	return o.CurrentUserAssociationType, true
}

// HasCurrentUserAssociationType returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasCurrentUserAssociationType() bool {
	if o != nil && o.CurrentUserAssociationType != nil {
		return true
	}

	return false
}

// SetCurrentUserAssociationType gets a reference to the given string and assigns it to the CurrentUserAssociationType field.
func (o *ViewCalendarEvent) SetCurrentUserAssociationType(v string) {
	o.CurrentUserAssociationType = &v
}

// GetDateDeleted returns the DateDeleted field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetDateDeleted() string {
	if o == nil || o.DateDeleted == nil {
		var ret string
		return ret
	}
	return *o.DateDeleted
}

// GetDateDeletedOk returns a tuple with the DateDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetDateDeletedOk() (*string, bool) {
	if o == nil || o.DateDeleted == nil {
		return nil, false
	}
	return o.DateDeleted, true
}

// HasDateDeleted returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasDateDeleted() bool {
	if o != nil && o.DateDeleted != nil {
		return true
	}

	return false
}

// SetDateDeleted gets a reference to the given string and assigns it to the DateDeleted field.
func (o *ViewCalendarEvent) SetDateDeleted(v string) {
	o.DateDeleted = &v
}

// GetDateLastUpdated returns the DateLastUpdated field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetDateLastUpdated() string {
	if o == nil || o.DateLastUpdated == nil {
		var ret string
		return ret
	}
	return *o.DateLastUpdated
}

// GetDateLastUpdatedOk returns a tuple with the DateLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetDateLastUpdatedOk() (*string, bool) {
	if o == nil || o.DateLastUpdated == nil {
		return nil, false
	}
	return o.DateLastUpdated, true
}

// HasDateLastUpdated returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasDateLastUpdated() bool {
	if o != nil && o.DateLastUpdated != nil {
		return true
	}

	return false
}

// SetDateLastUpdated gets a reference to the given string and assigns it to the DateLastUpdated field.
func (o *ViewCalendarEvent) SetDateLastUpdated(v string) {
	o.DateLastUpdated = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *ViewCalendarEvent) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *ViewCalendarEvent) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetDeletedBy() int32 {
	if o == nil || o.DeletedBy == nil {
		var ret int32
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetDeletedByOk() (*int32, bool) {
	if o == nil || o.DeletedBy == nil {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasDeletedBy() bool {
	if o != nil && o.DeletedBy != nil {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given int32 and assigns it to the DeletedBy field.
func (o *ViewCalendarEvent) SetDeletedBy(v int32) {
	o.DeletedBy = &v
}

// GetDeletedByUserId returns the DeletedByUserId field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetDeletedByUserId() int32 {
	if o == nil || o.DeletedByUserId == nil {
		var ret int32
		return ret
	}
	return *o.DeletedByUserId
}

// GetDeletedByUserIdOk returns a tuple with the DeletedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetDeletedByUserIdOk() (*int32, bool) {
	if o == nil || o.DeletedByUserId == nil {
		return nil, false
	}
	return o.DeletedByUserId, true
}

// HasDeletedByUserId returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasDeletedByUserId() bool {
	if o != nil && o.DeletedByUserId != nil {
		return true
	}

	return false
}

// SetDeletedByUserId gets a reference to the given int32 and assigns it to the DeletedByUserId field.
func (o *ViewCalendarEvent) SetDeletedByUserId(v int32) {
	o.DeletedByUserId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ViewCalendarEvent) SetDescription(v string) {
	o.Description = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ViewCalendarEvent) SetEndDate(v string) {
	o.EndDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewCalendarEvent) SetId(v int32) {
	o.Id = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ViewCalendarEvent) SetLocation(v string) {
	o.Location = &v
}

// GetMonthlyRepeatType returns the MonthlyRepeatType field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetMonthlyRepeatType() string {
	if o == nil || o.MonthlyRepeatType == nil {
		var ret string
		return ret
	}
	return *o.MonthlyRepeatType
}

// GetMonthlyRepeatTypeOk returns a tuple with the MonthlyRepeatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetMonthlyRepeatTypeOk() (*string, bool) {
	if o == nil || o.MonthlyRepeatType == nil {
		return nil, false
	}
	return o.MonthlyRepeatType, true
}

// HasMonthlyRepeatType returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasMonthlyRepeatType() bool {
	if o != nil && o.MonthlyRepeatType != nil {
		return true
	}

	return false
}

// SetMonthlyRepeatType gets a reference to the given string and assigns it to the MonthlyRepeatType field.
func (o *ViewCalendarEvent) SetMonthlyRepeatType(v string) {
	o.MonthlyRepeatType = &v
}

// GetOwnedBy returns the OwnedBy field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetOwnedBy() int32 {
	if o == nil || o.OwnedBy == nil {
		var ret int32
		return ret
	}
	return *o.OwnedBy
}

// GetOwnedByOk returns a tuple with the OwnedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetOwnedByOk() (*int32, bool) {
	if o == nil || o.OwnedBy == nil {
		return nil, false
	}
	return o.OwnedBy, true
}

// HasOwnedBy returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasOwnedBy() bool {
	if o != nil && o.OwnedBy != nil {
		return true
	}

	return false
}

// SetOwnedBy gets a reference to the given int32 and assigns it to the OwnedBy field.
func (o *ViewCalendarEvent) SetOwnedBy(v int32) {
	o.OwnedBy = &v
}

// GetOwnerUserId returns the OwnerUserId field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetOwnerUserId() int32 {
	if o == nil || o.OwnerUserId == nil {
		var ret int32
		return ret
	}
	return *o.OwnerUserId
}

// GetOwnerUserIdOk returns a tuple with the OwnerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetOwnerUserIdOk() (*int32, bool) {
	if o == nil || o.OwnerUserId == nil {
		return nil, false
	}
	return o.OwnerUserId, true
}

// HasOwnerUserId returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasOwnerUserId() bool {
	if o != nil && o.OwnerUserId != nil {
		return true
	}

	return false
}

// SetOwnerUserId gets a reference to the given int32 and assigns it to the OwnerUserId field.
func (o *ViewCalendarEvent) SetOwnerUserId(v int32) {
	o.OwnerUserId = &v
}

// GetPrivacyType returns the PrivacyType field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetPrivacyType() string {
	if o == nil || o.PrivacyType == nil {
		var ret string
		return ret
	}
	return *o.PrivacyType
}

// GetPrivacyTypeOk returns a tuple with the PrivacyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetPrivacyTypeOk() (*string, bool) {
	if o == nil || o.PrivacyType == nil {
		return nil, false
	}
	return o.PrivacyType, true
}

// HasPrivacyType returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasPrivacyType() bool {
	if o != nil && o.PrivacyType != nil {
		return true
	}

	return false
}

// SetPrivacyType gets a reference to the given string and assigns it to the PrivacyType field.
func (o *ViewCalendarEvent) SetPrivacyType(v string) {
	o.PrivacyType = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetProject() ViewRelationship {
	if o == nil || o.Project == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetProjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ViewRelationship and assigns it to the Project field.
func (o *ViewCalendarEvent) SetProject(v ViewRelationship) {
	o.Project = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetProjectId() int32 {
	if o == nil || o.ProjectId == nil {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetProjectIdOk() (*int32, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ViewCalendarEvent) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetProjectUsersCanEdit returns the ProjectUsersCanEdit field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetProjectUsersCanEdit() bool {
	if o == nil || o.ProjectUsersCanEdit == nil {
		var ret bool
		return ret
	}
	return *o.ProjectUsersCanEdit
}

// GetProjectUsersCanEditOk returns a tuple with the ProjectUsersCanEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetProjectUsersCanEditOk() (*bool, bool) {
	if o == nil || o.ProjectUsersCanEdit == nil {
		return nil, false
	}
	return o.ProjectUsersCanEdit, true
}

// HasProjectUsersCanEdit returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasProjectUsersCanEdit() bool {
	if o != nil && o.ProjectUsersCanEdit != nil {
		return true
	}

	return false
}

// SetProjectUsersCanEdit gets a reference to the given bool and assigns it to the ProjectUsersCanEdit field.
func (o *ViewCalendarEvent) SetProjectUsersCanEdit(v bool) {
	o.ProjectUsersCanEdit = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetSequence() ViewRelationship {
	if o == nil || o.Sequence == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetSequenceOk() (*ViewRelationship, bool) {
	if o == nil || o.Sequence == nil {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasSequence() bool {
	if o != nil && o.Sequence != nil {
		return true
	}

	return false
}

// SetSequence gets a reference to the given ViewRelationship and assigns it to the Sequence field.
func (o *ViewCalendarEvent) SetSequence(v ViewRelationship) {
	o.Sequence = &v
}

// GetSequenceId returns the SequenceId field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetSequenceId() int32 {
	if o == nil || o.SequenceId == nil {
		var ret int32
		return ret
	}
	return *o.SequenceId
}

// GetSequenceIdOk returns a tuple with the SequenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetSequenceIdOk() (*int32, bool) {
	if o == nil || o.SequenceId == nil {
		return nil, false
	}
	return o.SequenceId, true
}

// HasSequenceId returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasSequenceId() bool {
	if o != nil && o.SequenceId != nil {
		return true
	}

	return false
}

// SetSequenceId gets a reference to the given int32 and assigns it to the SequenceId field.
func (o *ViewCalendarEvent) SetSequenceId(v int32) {
	o.SequenceId = &v
}

// GetShowAsBusy returns the ShowAsBusy field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetShowAsBusy() bool {
	if o == nil || o.ShowAsBusy == nil {
		var ret bool
		return ret
	}
	return *o.ShowAsBusy
}

// GetShowAsBusyOk returns a tuple with the ShowAsBusy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetShowAsBusyOk() (*bool, bool) {
	if o == nil || o.ShowAsBusy == nil {
		return nil, false
	}
	return o.ShowAsBusy, true
}

// HasShowAsBusy returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasShowAsBusy() bool {
	if o != nil && o.ShowAsBusy != nil {
		return true
	}

	return false
}

// SetShowAsBusy gets a reference to the given bool and assigns it to the ShowAsBusy field.
func (o *ViewCalendarEvent) SetShowAsBusy(v bool) {
	o.ShowAsBusy = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ViewCalendarEvent) SetStartDate(v string) {
	o.StartDate = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ViewCalendarEvent) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetType() ViewRelationship {
	if o == nil || o.Type == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetTypeOk() (*ViewRelationship, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given ViewRelationship and assigns it to the Type field.
func (o *ViewCalendarEvent) SetType(v ViewRelationship) {
	o.Type = &v
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetTypeId() int32 {
	if o == nil || o.TypeId == nil {
		var ret int32
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetTypeIdOk() (*int32, bool) {
	if o == nil || o.TypeId == nil {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasTypeId() bool {
	if o != nil && o.TypeId != nil {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given int32 and assigns it to the TypeId field.
func (o *ViewCalendarEvent) SetTypeId(v int32) {
	o.TypeId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewCalendarEvent) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetUpdatedBy() int32 {
	if o == nil || o.UpdatedBy == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetUpdatedByOk() (*int32, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given int32 and assigns it to the UpdatedBy field.
func (o *ViewCalendarEvent) SetUpdatedBy(v int32) {
	o.UpdatedBy = &v
}

// GetUpdatedByUserId returns the UpdatedByUserId field value if set, zero value otherwise.
func (o *ViewCalendarEvent) GetUpdatedByUserId() int32 {
	if o == nil || o.UpdatedByUserId == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedByUserId
}

// GetUpdatedByUserIdOk returns a tuple with the UpdatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewCalendarEvent) GetUpdatedByUserIdOk() (*int32, bool) {
	if o == nil || o.UpdatedByUserId == nil {
		return nil, false
	}
	return o.UpdatedByUserId, true
}

// HasUpdatedByUserId returns a boolean if a field has been set.
func (o *ViewCalendarEvent) HasUpdatedByUserId() bool {
	if o != nil && o.UpdatedByUserId != nil {
		return true
	}

	return false
}

// SetUpdatedByUserId gets a reference to the given int32 and assigns it to the UpdatedByUserId field.
func (o *ViewCalendarEvent) SetUpdatedByUserId(v int32) {
	o.UpdatedByUserId = &v
}

func (o ViewCalendarEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalPropertiesField != nil {
		toSerialize["additionalProperties"] = o.AdditionalPropertiesField
	}
	if o.AllDay != nil {
		toSerialize["allDay"] = o.AllDay
	}
	if o.AttendeesCanEdit != nil {
		toSerialize["attendeesCanEdit"] = o.AttendeesCanEdit
	}
	if o.AttendingUserIds != nil {
		toSerialize["attendingUserIds"] = o.AttendingUserIds
	}
	if o.AttendingUsers != nil {
		toSerialize["attendingUsers"] = o.AttendingUsers
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CreatedByUserId != nil {
		toSerialize["createdByUserId"] = o.CreatedByUserId
	}
	if o.CreatedDateTime != nil {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if o.CurrentUserAssociationType != nil {
		toSerialize["currentUserAssociationType"] = o.CurrentUserAssociationType
	}
	if o.DateDeleted != nil {
		toSerialize["dateDeleted"] = o.DateDeleted
	}
	if o.DateLastUpdated != nil {
		toSerialize["dateLastUpdated"] = o.DateLastUpdated
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if o.DeletedBy != nil {
		toSerialize["deletedBy"] = o.DeletedBy
	}
	if o.DeletedByUserId != nil {
		toSerialize["deletedByUserId"] = o.DeletedByUserId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.MonthlyRepeatType != nil {
		toSerialize["monthlyRepeatType"] = o.MonthlyRepeatType
	}
	if o.OwnedBy != nil {
		toSerialize["ownedBy"] = o.OwnedBy
	}
	if o.OwnerUserId != nil {
		toSerialize["ownerUserId"] = o.OwnerUserId
	}
	if o.PrivacyType != nil {
		toSerialize["privacyType"] = o.PrivacyType
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.ProjectUsersCanEdit != nil {
		toSerialize["projectUsersCanEdit"] = o.ProjectUsersCanEdit
	}
	if o.Sequence != nil {
		toSerialize["sequence"] = o.Sequence
	}
	if o.SequenceId != nil {
		toSerialize["sequenceId"] = o.SequenceId
	}
	if o.ShowAsBusy != nil {
		toSerialize["showAsBusy"] = o.ShowAsBusy
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.TypeId != nil {
		toSerialize["typeId"] = o.TypeId
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if o.UpdatedByUserId != nil {
		toSerialize["updatedByUserId"] = o.UpdatedByUserId
	}
	return json.Marshal(toSerialize)
}

type NullableViewCalendarEvent struct {
	value *ViewCalendarEvent
	isSet bool
}

func (v NullableViewCalendarEvent) Get() *ViewCalendarEvent {
	return v.value
}

func (v *NullableViewCalendarEvent) Set(val *ViewCalendarEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableViewCalendarEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableViewCalendarEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewCalendarEvent(val *ViewCalendarEvent) *NullableViewCalendarEvent {
	return &NullableViewCalendarEvent{value: val, isSet: true}
}

func (v NullableViewCalendarEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewCalendarEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


