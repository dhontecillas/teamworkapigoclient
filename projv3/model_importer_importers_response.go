/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ImporterImportersResponse ImportersResponse contains information about a group of importers.
type ImporterImportersResponse struct {
	Importers *[]ImporterImporter `json:"importers,omitempty"`
	IsImporting *bool `json:"isImporting,omitempty"`
}

// NewImporterImportersResponse instantiates a new ImporterImportersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImporterImportersResponse() *ImporterImportersResponse {
	this := ImporterImportersResponse{}
	return &this
}

// NewImporterImportersResponseWithDefaults instantiates a new ImporterImportersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImporterImportersResponseWithDefaults() *ImporterImportersResponse {
	this := ImporterImportersResponse{}
	return &this
}

// GetImporters returns the Importers field value if set, zero value otherwise.
func (o *ImporterImportersResponse) GetImporters() []ImporterImporter {
	if o == nil || o.Importers == nil {
		var ret []ImporterImporter
		return ret
	}
	return *o.Importers
}

// GetImportersOk returns a tuple with the Importers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImporterImportersResponse) GetImportersOk() (*[]ImporterImporter, bool) {
	if o == nil || o.Importers == nil {
		return nil, false
	}
	return o.Importers, true
}

// HasImporters returns a boolean if a field has been set.
func (o *ImporterImportersResponse) HasImporters() bool {
	if o != nil && o.Importers != nil {
		return true
	}

	return false
}

// SetImporters gets a reference to the given []ImporterImporter and assigns it to the Importers field.
func (o *ImporterImportersResponse) SetImporters(v []ImporterImporter) {
	o.Importers = &v
}

// GetIsImporting returns the IsImporting field value if set, zero value otherwise.
func (o *ImporterImportersResponse) GetIsImporting() bool {
	if o == nil || o.IsImporting == nil {
		var ret bool
		return ret
	}
	return *o.IsImporting
}

// GetIsImportingOk returns a tuple with the IsImporting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImporterImportersResponse) GetIsImportingOk() (*bool, bool) {
	if o == nil || o.IsImporting == nil {
		return nil, false
	}
	return o.IsImporting, true
}

// HasIsImporting returns a boolean if a field has been set.
func (o *ImporterImportersResponse) HasIsImporting() bool {
	if o != nil && o.IsImporting != nil {
		return true
	}

	return false
}

// SetIsImporting gets a reference to the given bool and assigns it to the IsImporting field.
func (o *ImporterImportersResponse) SetIsImporting(v bool) {
	o.IsImporting = &v
}

func (o ImporterImportersResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Importers != nil {
		toSerialize["importers"] = o.Importers
	}
	if o.IsImporting != nil {
		toSerialize["isImporting"] = o.IsImporting
	}
	return json.Marshal(toSerialize)
}

type NullableImporterImportersResponse struct {
	value *ImporterImportersResponse
	isSet bool
}

func (v NullableImporterImportersResponse) Get() *ImporterImportersResponse {
	return v.value
}

func (v *NullableImporterImportersResponse) Set(val *ImporterImportersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableImporterImportersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableImporterImportersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImporterImportersResponse(val *ImporterImportersResponse) *NullableImporterImportersResponse {
	return &NullableImporterImportersResponse{value: val, isSet: true}
}

func (v NullableImporterImportersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImporterImportersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


