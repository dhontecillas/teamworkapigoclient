/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FileArchiveResponse ArchiveResponse contains the download URL with all desired files.
type FileArchiveResponse struct {
	DownloadURL *string `json:"downloadURL,omitempty"`
}

// NewFileArchiveResponse instantiates a new FileArchiveResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileArchiveResponse() *FileArchiveResponse {
	this := FileArchiveResponse{}
	return &this
}

// NewFileArchiveResponseWithDefaults instantiates a new FileArchiveResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileArchiveResponseWithDefaults() *FileArchiveResponse {
	this := FileArchiveResponse{}
	return &this
}

// GetDownloadURL returns the DownloadURL field value if set, zero value otherwise.
func (o *FileArchiveResponse) GetDownloadURL() string {
	if o == nil || o.DownloadURL == nil {
		var ret string
		return ret
	}
	return *o.DownloadURL
}

// GetDownloadURLOk returns a tuple with the DownloadURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileArchiveResponse) GetDownloadURLOk() (*string, bool) {
	if o == nil || o.DownloadURL == nil {
		return nil, false
	}
	return o.DownloadURL, true
}

// HasDownloadURL returns a boolean if a field has been set.
func (o *FileArchiveResponse) HasDownloadURL() bool {
	if o != nil && o.DownloadURL != nil {
		return true
	}

	return false
}

// SetDownloadURL gets a reference to the given string and assigns it to the DownloadURL field.
func (o *FileArchiveResponse) SetDownloadURL(v string) {
	o.DownloadURL = &v
}

func (o FileArchiveResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DownloadURL != nil {
		toSerialize["downloadURL"] = o.DownloadURL
	}
	return json.Marshal(toSerialize)
}

type NullableFileArchiveResponse struct {
	value *FileArchiveResponse
	isSet bool
}

func (v NullableFileArchiveResponse) Get() *FileArchiveResponse {
	return v.value
}

func (v *NullableFileArchiveResponse) Set(val *FileArchiveResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileArchiveResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileArchiveResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileArchiveResponse(val *FileArchiveResponse) *NullableFileArchiveResponse {
	return &NullableFileArchiveResponse{value: val, isSet: true}
}

func (v NullableFileArchiveResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileArchiveResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


