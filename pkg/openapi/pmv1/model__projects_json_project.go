/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// ProjectsJsonProject struct for ProjectsJsonProject
type ProjectsJsonProject struct {
	CategoryId *string `json:"category-id,omitempty"`
	CompanyId *string `json:"companyId,omitempty"`
	Description *string `json:"description,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	HarvestTimersEnabled *string `json:"harvest-timers-enabled,omitempty"`
	Name string `json:"name"`
	NewCompany *string `json:"newCompany,omitempty"`
	PrivacyEnabled *string `json:"privacyEnabled,omitempty"`
	ReplyByEmailEnabled *string `json:"replyByEmailEnabled,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	Tags *string `json:"tags,omitempty"`
}

// NewProjectsJsonProject instantiates a new ProjectsJsonProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsJsonProject(name string, ) *ProjectsJsonProject {
	this := ProjectsJsonProject{}
	this.Name = name
	return &this
}

// NewProjectsJsonProjectWithDefaults instantiates a new ProjectsJsonProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsJsonProjectWithDefaults() *ProjectsJsonProject {
	this := ProjectsJsonProject{}
	return &this
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *ProjectsJsonProject) GetCategoryId() string {
	if o == nil || o.CategoryId == nil {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetCategoryIdOk() (*string, bool) {
	if o == nil || o.CategoryId == nil {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *ProjectsJsonProject) HasCategoryId() bool {
	if o != nil && o.CategoryId != nil {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *ProjectsJsonProject) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *ProjectsJsonProject) GetCompanyId() string {
	if o == nil || o.CompanyId == nil {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetCompanyIdOk() (*string, bool) {
	if o == nil || o.CompanyId == nil {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *ProjectsJsonProject) HasCompanyId() bool {
	if o != nil && o.CompanyId != nil {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *ProjectsJsonProject) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProjectsJsonProject) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectsJsonProject) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProjectsJsonProject) SetDescription(v string) {
	o.Description = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ProjectsJsonProject) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ProjectsJsonProject) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ProjectsJsonProject) SetEndDate(v string) {
	o.EndDate = &v
}

// GetHarvestTimersEnabled returns the HarvestTimersEnabled field value if set, zero value otherwise.
func (o *ProjectsJsonProject) GetHarvestTimersEnabled() string {
	if o == nil || o.HarvestTimersEnabled == nil {
		var ret string
		return ret
	}
	return *o.HarvestTimersEnabled
}

// GetHarvestTimersEnabledOk returns a tuple with the HarvestTimersEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetHarvestTimersEnabledOk() (*string, bool) {
	if o == nil || o.HarvestTimersEnabled == nil {
		return nil, false
	}
	return o.HarvestTimersEnabled, true
}

// HasHarvestTimersEnabled returns a boolean if a field has been set.
func (o *ProjectsJsonProject) HasHarvestTimersEnabled() bool {
	if o != nil && o.HarvestTimersEnabled != nil {
		return true
	}

	return false
}

// SetHarvestTimersEnabled gets a reference to the given string and assigns it to the HarvestTimersEnabled field.
func (o *ProjectsJsonProject) SetHarvestTimersEnabled(v string) {
	o.HarvestTimersEnabled = &v
}

// GetName returns the Name field value
func (o *ProjectsJsonProject) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectsJsonProject) SetName(v string) {
	o.Name = v
}

// GetNewCompany returns the NewCompany field value if set, zero value otherwise.
func (o *ProjectsJsonProject) GetNewCompany() string {
	if o == nil || o.NewCompany == nil {
		var ret string
		return ret
	}
	return *o.NewCompany
}

// GetNewCompanyOk returns a tuple with the NewCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetNewCompanyOk() (*string, bool) {
	if o == nil || o.NewCompany == nil {
		return nil, false
	}
	return o.NewCompany, true
}

// HasNewCompany returns a boolean if a field has been set.
func (o *ProjectsJsonProject) HasNewCompany() bool {
	if o != nil && o.NewCompany != nil {
		return true
	}

	return false
}

// SetNewCompany gets a reference to the given string and assigns it to the NewCompany field.
func (o *ProjectsJsonProject) SetNewCompany(v string) {
	o.NewCompany = &v
}

// GetPrivacyEnabled returns the PrivacyEnabled field value if set, zero value otherwise.
func (o *ProjectsJsonProject) GetPrivacyEnabled() string {
	if o == nil || o.PrivacyEnabled == nil {
		var ret string
		return ret
	}
	return *o.PrivacyEnabled
}

// GetPrivacyEnabledOk returns a tuple with the PrivacyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetPrivacyEnabledOk() (*string, bool) {
	if o == nil || o.PrivacyEnabled == nil {
		return nil, false
	}
	return o.PrivacyEnabled, true
}

// HasPrivacyEnabled returns a boolean if a field has been set.
func (o *ProjectsJsonProject) HasPrivacyEnabled() bool {
	if o != nil && o.PrivacyEnabled != nil {
		return true
	}

	return false
}

// SetPrivacyEnabled gets a reference to the given string and assigns it to the PrivacyEnabled field.
func (o *ProjectsJsonProject) SetPrivacyEnabled(v string) {
	o.PrivacyEnabled = &v
}

// GetReplyByEmailEnabled returns the ReplyByEmailEnabled field value if set, zero value otherwise.
func (o *ProjectsJsonProject) GetReplyByEmailEnabled() string {
	if o == nil || o.ReplyByEmailEnabled == nil {
		var ret string
		return ret
	}
	return *o.ReplyByEmailEnabled
}

// GetReplyByEmailEnabledOk returns a tuple with the ReplyByEmailEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetReplyByEmailEnabledOk() (*string, bool) {
	if o == nil || o.ReplyByEmailEnabled == nil {
		return nil, false
	}
	return o.ReplyByEmailEnabled, true
}

// HasReplyByEmailEnabled returns a boolean if a field has been set.
func (o *ProjectsJsonProject) HasReplyByEmailEnabled() bool {
	if o != nil && o.ReplyByEmailEnabled != nil {
		return true
	}

	return false
}

// SetReplyByEmailEnabled gets a reference to the given string and assigns it to the ReplyByEmailEnabled field.
func (o *ProjectsJsonProject) SetReplyByEmailEnabled(v string) {
	o.ReplyByEmailEnabled = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ProjectsJsonProject) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ProjectsJsonProject) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ProjectsJsonProject) SetStartDate(v string) {
	o.StartDate = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ProjectsJsonProject) GetTags() string {
	if o == nil || o.Tags == nil {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsJsonProject) GetTagsOk() (*string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ProjectsJsonProject) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *ProjectsJsonProject) SetTags(v string) {
	o.Tags = &v
}

func (o ProjectsJsonProject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CategoryId != nil {
		toSerialize["category-id"] = o.CategoryId
	}
	if o.CompanyId != nil {
		toSerialize["companyId"] = o.CompanyId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.HarvestTimersEnabled != nil {
		toSerialize["harvest-timers-enabled"] = o.HarvestTimersEnabled
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.NewCompany != nil {
		toSerialize["newCompany"] = o.NewCompany
	}
	if o.PrivacyEnabled != nil {
		toSerialize["privacyEnabled"] = o.PrivacyEnabled
	}
	if o.ReplyByEmailEnabled != nil {
		toSerialize["replyByEmailEnabled"] = o.ReplyByEmailEnabled
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsJsonProject struct {
	value *ProjectsJsonProject
	isSet bool
}

func (v NullableProjectsJsonProject) Get() *ProjectsJsonProject {
	return v.value
}

func (v *NullableProjectsJsonProject) Set(val *ProjectsJsonProject) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsJsonProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsJsonProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsJsonProject(val *ProjectsJsonProject) *NullableProjectsJsonProject {
	return &NullableProjectsJsonProject{value: val, isSet: true}
}

func (v NullableProjectsJsonProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsJsonProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


