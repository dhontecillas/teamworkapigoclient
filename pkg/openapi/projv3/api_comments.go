/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// CommentsApiService CommentsApi service
type CommentsApiService service

type ApiGETProjectsApiV3CommentsJsonRequest struct {
	ctx _context.Context
	ApiService *CommentsApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	searchTerm *string
	publishedStartDate *string
	publishedEndDate *string
	projectStatuses *string
	orderMode *string
	orderBy *string
	objectTypes *string
	objectType *string
	commentStatus *string
	projectHealths *int32
	pageSize *int32
	page *int32
	strictHTML *bool
	onlyStarredProjects *bool
	matchAllProjectTags *bool
	includeArchivedProjects *bool
	userIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	objectIds *[]int32
	notifiedUserIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsTasks *[]string
	fieldsProjects *[]string
	fieldsNotebooks *[]string
	fieldsMilestones *[]string
	fieldsLinks *[]string
	fieldsFileversions *[]string
	fieldsFiles *[]string
	fieldsCompanies *[]string
}

func (r ApiGETProjectsApiV3CommentsJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3CommentsJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3CommentsJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) PublishedStartDate(publishedStartDate string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.publishedStartDate = &publishedStartDate
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) PublishedEndDate(publishedEndDate string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.publishedEndDate = &publishedEndDate
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) ObjectTypes(objectTypes string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.objectTypes = &objectTypes
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) ObjectType(objectType string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.objectType = &objectType
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) CommentStatus(commentStatus string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.commentStatus = &commentStatus
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) Page(page int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) StrictHTML(strictHTML bool) ApiGETProjectsApiV3CommentsJsonRequest {
	r.strictHTML = &strictHTML
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3CommentsJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3CommentsJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3CommentsJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) UserIds(userIds []int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) ObjectIds(objectIds []int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.objectIds = &objectIds
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) NotifiedUserIds(notifiedUserIds []int32) ApiGETProjectsApiV3CommentsJsonRequest {
	r.notifiedUserIds = &notifiedUserIds
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) Include(include []string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) FieldsNotebooks(fieldsNotebooks []string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.fieldsNotebooks = &fieldsNotebooks
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) FieldsLinks(fieldsLinks []string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.fieldsLinks = &fieldsLinks
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) FieldsFileversions(fieldsFileversions []string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.fieldsFileversions = &fieldsFileversions
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) FieldsFiles(fieldsFiles []string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.fieldsFiles = &fieldsFiles
	return r
}
func (r ApiGETProjectsApiV3CommentsJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3CommentsJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}

func (r ApiGETProjectsApiV3CommentsJsonRequest) Execute() (CommentCommentsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3CommentsJsonExecute(r)
}

/*
 * GETProjectsApiV3CommentsJson Get a list of comments
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3CommentsJsonRequest
 */
func (a *CommentsApiService) GETProjectsApiV3CommentsJson(ctx _context.Context) ApiGETProjectsApiV3CommentsJsonRequest {
	return ApiGETProjectsApiV3CommentsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CommentCommentsResponse
 */
func (a *CommentsApiService) GETProjectsApiV3CommentsJsonExecute(r ApiGETProjectsApiV3CommentsJsonRequest) (CommentCommentsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CommentCommentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentsApiService.GETProjectsApiV3CommentsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/comments.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.publishedStartDate != nil {
		localVarQueryParams.Add("publishedStartDate", parameterToString(*r.publishedStartDate, ""))
	}
	if r.publishedEndDate != nil {
		localVarQueryParams.Add("publishedEndDate", parameterToString(*r.publishedEndDate, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.objectTypes != nil {
		localVarQueryParams.Add("objectTypes", parameterToString(*r.objectTypes, ""))
	}
	if r.objectType != nil {
		localVarQueryParams.Add("objectType", parameterToString(*r.objectType, ""))
	}
	if r.commentStatus != nil {
		localVarQueryParams.Add("commentStatus", parameterToString(*r.commentStatus, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.strictHTML != nil {
		localVarQueryParams.Add("strictHTML", parameterToString(*r.strictHTML, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.objectIds != nil {
		localVarQueryParams.Add("objectIds", parameterToString(*r.objectIds, "csv"))
	}
	if r.notifiedUserIds != nil {
		localVarQueryParams.Add("notifiedUserIds", parameterToString(*r.notifiedUserIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsNotebooks != nil {
		localVarQueryParams.Add("fields[notebooks]", parameterToString(*r.fieldsNotebooks, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsLinks != nil {
		localVarQueryParams.Add("fields[links]", parameterToString(*r.fieldsLinks, "csv"))
	}
	if r.fieldsFileversions != nil {
		localVarQueryParams.Add("fields[fileversions]", parameterToString(*r.fieldsFileversions, "csv"))
	}
	if r.fieldsFiles != nil {
		localVarQueryParams.Add("fields[files]", parameterToString(*r.fieldsFiles, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
