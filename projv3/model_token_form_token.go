/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// TokenFormToken FormToken contains all the information returned from a token.
type TokenFormToken struct {
	Expires *bool `json:"expires,omitempty"`
	ExpiryDate *string `json:"expiryDate,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewTokenFormToken instantiates a new TokenFormToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenFormToken() *TokenFormToken {
	this := TokenFormToken{}
	return &this
}

// NewTokenFormTokenWithDefaults instantiates a new TokenFormToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenFormTokenWithDefaults() *TokenFormToken {
	this := TokenFormToken{}
	return &this
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *TokenFormToken) GetExpires() bool {
	if o == nil || o.Expires == nil {
		var ret bool
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenFormToken) GetExpiresOk() (*bool, bool) {
	if o == nil || o.Expires == nil {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *TokenFormToken) HasExpires() bool {
	if o != nil && o.Expires != nil {
		return true
	}

	return false
}

// SetExpires gets a reference to the given bool and assigns it to the Expires field.
func (o *TokenFormToken) SetExpires(v bool) {
	o.Expires = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *TokenFormToken) GetExpiryDate() string {
	if o == nil || o.ExpiryDate == nil {
		var ret string
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenFormToken) GetExpiryDateOk() (*string, bool) {
	if o == nil || o.ExpiryDate == nil {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *TokenFormToken) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate != nil {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given string and assigns it to the ExpiryDate field.
func (o *TokenFormToken) SetExpiryDate(v string) {
	o.ExpiryDate = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TokenFormToken) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenFormToken) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TokenFormToken) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *TokenFormToken) SetState(v string) {
	o.State = &v
}

func (o TokenFormToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if o.ExpiryDate != nil {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableTokenFormToken struct {
	value *TokenFormToken
	isSet bool
}

func (v NullableTokenFormToken) Get() *TokenFormToken {
	return v.value
}

func (v *NullableTokenFormToken) Set(val *TokenFormToken) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenFormToken) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenFormToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenFormToken(val *TokenFormToken) *NullableTokenFormToken {
	return &NullableTokenFormToken{value: val, isSet: true}
}

func (v NullableTokenFormToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenFormToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


