/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewNotebook Notebook contains all the information returned from a notebook.
type ViewNotebook struct {
	Category *ViewRelationship `json:"category,omitempty"`
	CategoryId *int32 `json:"categoryId,omitempty"`
	ChangeFollowers *ViewUserGroups `json:"changeFollowers,omitempty"`
	CommentFollowers *ViewUserGroups `json:"commentFollowers,omitempty"`
	CommentsCount *int32 `json:"commentsCount,omitempty"`
	ContentHTML *string `json:"contentHTML,omitempty"`
	Contents *string `json:"contents,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	CreatedBy *int32 `json:"createdBy,omitempty"`
	CreatedByUserID *int32 `json:"createdByUserID,omitempty"`
	DateCreated *string `json:"dateCreated,omitempty"`
	DateDeleted *string `json:"dateDeleted,omitempty"`
	DateUpdated *string `json:"dateUpdated,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	DeletedBy *int32 `json:"deletedBy,omitempty"`
	DeletedByUserID *int32 `json:"deletedByUserID,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *int32 `json:"id,omitempty"`
	IsPrivate *bool `json:"isPrivate,omitempty"`
	LatestVersionNo *int32 `json:"latestVersionNo,omitempty"`
	Lockdown *ViewRelationship `json:"lockdown,omitempty"`
	LockdownId *int32 `json:"lockdownId,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	Name *string `json:"name,omitempty"`
	NotebookVersion *ViewRelationship `json:"notebookVersion,omitempty"`
	NotebookVersionCreatedDateTime *string `json:"notebookVersionCreatedDateTime,omitempty"`
	NotebookVersionID *int32 `json:"notebookVersionID,omitempty"`
	NotebookVersionUpdatedDateTime *string `json:"notebookVersionUpdatedDateTime,omitempty"`
	Privacy *ViewUserGroups `json:"privacy,omitempty"`
	Project *ViewRelationship `json:"project,omitempty"`
	ProjectId *int32 `json:"projectId,omitempty"`
	ReadCommentsCount *int32 `json:"readCommentsCount,omitempty"`
	SecureContent *bool `json:"secureContent,omitempty"`
	TagIds *[]int32 `json:"tagIds,omitempty"`
	Tags *[]ViewRelationship `json:"tags,omitempty"`
	Type *string `json:"type,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	UpdatedBy *int32 `json:"updatedBy,omitempty"`
	UpdatedByUserID *int32 `json:"updatedByUserID,omitempty"`
	UserFollowingChanges *bool `json:"userFollowingChanges,omitempty"`
	UserFollowingComments *bool `json:"userFollowingComments,omitempty"`
	VersionCount *int32 `json:"versionCount,omitempty"`
}

// NewViewNotebook instantiates a new ViewNotebook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewNotebook() *ViewNotebook {
	this := ViewNotebook{}
	return &this
}

// NewViewNotebookWithDefaults instantiates a new ViewNotebook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewNotebookWithDefaults() *ViewNotebook {
	this := ViewNotebook{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ViewNotebook) GetCategory() ViewRelationship {
	if o == nil || o.Category == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetCategoryOk() (*ViewRelationship, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ViewNotebook) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given ViewRelationship and assigns it to the Category field.
func (o *ViewNotebook) SetCategory(v ViewRelationship) {
	o.Category = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *ViewNotebook) GetCategoryId() int32 {
	if o == nil || o.CategoryId == nil {
		var ret int32
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetCategoryIdOk() (*int32, bool) {
	if o == nil || o.CategoryId == nil {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *ViewNotebook) HasCategoryId() bool {
	if o != nil && o.CategoryId != nil {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given int32 and assigns it to the CategoryId field.
func (o *ViewNotebook) SetCategoryId(v int32) {
	o.CategoryId = &v
}

// GetChangeFollowers returns the ChangeFollowers field value if set, zero value otherwise.
func (o *ViewNotebook) GetChangeFollowers() ViewUserGroups {
	if o == nil || o.ChangeFollowers == nil {
		var ret ViewUserGroups
		return ret
	}
	return *o.ChangeFollowers
}

// GetChangeFollowersOk returns a tuple with the ChangeFollowers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetChangeFollowersOk() (*ViewUserGroups, bool) {
	if o == nil || o.ChangeFollowers == nil {
		return nil, false
	}
	return o.ChangeFollowers, true
}

// HasChangeFollowers returns a boolean if a field has been set.
func (o *ViewNotebook) HasChangeFollowers() bool {
	if o != nil && o.ChangeFollowers != nil {
		return true
	}

	return false
}

// SetChangeFollowers gets a reference to the given ViewUserGroups and assigns it to the ChangeFollowers field.
func (o *ViewNotebook) SetChangeFollowers(v ViewUserGroups) {
	o.ChangeFollowers = &v
}

// GetCommentFollowers returns the CommentFollowers field value if set, zero value otherwise.
func (o *ViewNotebook) GetCommentFollowers() ViewUserGroups {
	if o == nil || o.CommentFollowers == nil {
		var ret ViewUserGroups
		return ret
	}
	return *o.CommentFollowers
}

// GetCommentFollowersOk returns a tuple with the CommentFollowers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetCommentFollowersOk() (*ViewUserGroups, bool) {
	if o == nil || o.CommentFollowers == nil {
		return nil, false
	}
	return o.CommentFollowers, true
}

// HasCommentFollowers returns a boolean if a field has been set.
func (o *ViewNotebook) HasCommentFollowers() bool {
	if o != nil && o.CommentFollowers != nil {
		return true
	}

	return false
}

// SetCommentFollowers gets a reference to the given ViewUserGroups and assigns it to the CommentFollowers field.
func (o *ViewNotebook) SetCommentFollowers(v ViewUserGroups) {
	o.CommentFollowers = &v
}

// GetCommentsCount returns the CommentsCount field value if set, zero value otherwise.
func (o *ViewNotebook) GetCommentsCount() int32 {
	if o == nil || o.CommentsCount == nil {
		var ret int32
		return ret
	}
	return *o.CommentsCount
}

// GetCommentsCountOk returns a tuple with the CommentsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetCommentsCountOk() (*int32, bool) {
	if o == nil || o.CommentsCount == nil {
		return nil, false
	}
	return o.CommentsCount, true
}

// HasCommentsCount returns a boolean if a field has been set.
func (o *ViewNotebook) HasCommentsCount() bool {
	if o != nil && o.CommentsCount != nil {
		return true
	}

	return false
}

// SetCommentsCount gets a reference to the given int32 and assigns it to the CommentsCount field.
func (o *ViewNotebook) SetCommentsCount(v int32) {
	o.CommentsCount = &v
}

// GetContentHTML returns the ContentHTML field value if set, zero value otherwise.
func (o *ViewNotebook) GetContentHTML() string {
	if o == nil || o.ContentHTML == nil {
		var ret string
		return ret
	}
	return *o.ContentHTML
}

// GetContentHTMLOk returns a tuple with the ContentHTML field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetContentHTMLOk() (*string, bool) {
	if o == nil || o.ContentHTML == nil {
		return nil, false
	}
	return o.ContentHTML, true
}

// HasContentHTML returns a boolean if a field has been set.
func (o *ViewNotebook) HasContentHTML() bool {
	if o != nil && o.ContentHTML != nil {
		return true
	}

	return false
}

// SetContentHTML gets a reference to the given string and assigns it to the ContentHTML field.
func (o *ViewNotebook) SetContentHTML(v string) {
	o.ContentHTML = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *ViewNotebook) GetContents() string {
	if o == nil || o.Contents == nil {
		var ret string
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetContentsOk() (*string, bool) {
	if o == nil || o.Contents == nil {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *ViewNotebook) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// SetContents gets a reference to the given string and assigns it to the Contents field.
func (o *ViewNotebook) SetContents(v string) {
	o.Contents = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ViewNotebook) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ViewNotebook) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ViewNotebook) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ViewNotebook) GetCreatedBy() int32 {
	if o == nil || o.CreatedBy == nil {
		var ret int32
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetCreatedByOk() (*int32, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ViewNotebook) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int32 and assigns it to the CreatedBy field.
func (o *ViewNotebook) SetCreatedBy(v int32) {
	o.CreatedBy = &v
}

// GetCreatedByUserID returns the CreatedByUserID field value if set, zero value otherwise.
func (o *ViewNotebook) GetCreatedByUserID() int32 {
	if o == nil || o.CreatedByUserID == nil {
		var ret int32
		return ret
	}
	return *o.CreatedByUserID
}

// GetCreatedByUserIDOk returns a tuple with the CreatedByUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetCreatedByUserIDOk() (*int32, bool) {
	if o == nil || o.CreatedByUserID == nil {
		return nil, false
	}
	return o.CreatedByUserID, true
}

// HasCreatedByUserID returns a boolean if a field has been set.
func (o *ViewNotebook) HasCreatedByUserID() bool {
	if o != nil && o.CreatedByUserID != nil {
		return true
	}

	return false
}

// SetCreatedByUserID gets a reference to the given int32 and assigns it to the CreatedByUserID field.
func (o *ViewNotebook) SetCreatedByUserID(v int32) {
	o.CreatedByUserID = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *ViewNotebook) GetDateCreated() string {
	if o == nil || o.DateCreated == nil {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetDateCreatedOk() (*string, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *ViewNotebook) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *ViewNotebook) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateDeleted returns the DateDeleted field value if set, zero value otherwise.
func (o *ViewNotebook) GetDateDeleted() string {
	if o == nil || o.DateDeleted == nil {
		var ret string
		return ret
	}
	return *o.DateDeleted
}

// GetDateDeletedOk returns a tuple with the DateDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetDateDeletedOk() (*string, bool) {
	if o == nil || o.DateDeleted == nil {
		return nil, false
	}
	return o.DateDeleted, true
}

// HasDateDeleted returns a boolean if a field has been set.
func (o *ViewNotebook) HasDateDeleted() bool {
	if o != nil && o.DateDeleted != nil {
		return true
	}

	return false
}

// SetDateDeleted gets a reference to the given string and assigns it to the DateDeleted field.
func (o *ViewNotebook) SetDateDeleted(v string) {
	o.DateDeleted = &v
}

// GetDateUpdated returns the DateUpdated field value if set, zero value otherwise.
func (o *ViewNotebook) GetDateUpdated() string {
	if o == nil || o.DateUpdated == nil {
		var ret string
		return ret
	}
	return *o.DateUpdated
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetDateUpdatedOk() (*string, bool) {
	if o == nil || o.DateUpdated == nil {
		return nil, false
	}
	return o.DateUpdated, true
}

// HasDateUpdated returns a boolean if a field has been set.
func (o *ViewNotebook) HasDateUpdated() bool {
	if o != nil && o.DateUpdated != nil {
		return true
	}

	return false
}

// SetDateUpdated gets a reference to the given string and assigns it to the DateUpdated field.
func (o *ViewNotebook) SetDateUpdated(v string) {
	o.DateUpdated = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *ViewNotebook) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *ViewNotebook) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *ViewNotebook) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ViewNotebook) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ViewNotebook) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *ViewNotebook) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *ViewNotebook) GetDeletedBy() int32 {
	if o == nil || o.DeletedBy == nil {
		var ret int32
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetDeletedByOk() (*int32, bool) {
	if o == nil || o.DeletedBy == nil {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *ViewNotebook) HasDeletedBy() bool {
	if o != nil && o.DeletedBy != nil {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given int32 and assigns it to the DeletedBy field.
func (o *ViewNotebook) SetDeletedBy(v int32) {
	o.DeletedBy = &v
}

// GetDeletedByUserID returns the DeletedByUserID field value if set, zero value otherwise.
func (o *ViewNotebook) GetDeletedByUserID() int32 {
	if o == nil || o.DeletedByUserID == nil {
		var ret int32
		return ret
	}
	return *o.DeletedByUserID
}

// GetDeletedByUserIDOk returns a tuple with the DeletedByUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetDeletedByUserIDOk() (*int32, bool) {
	if o == nil || o.DeletedByUserID == nil {
		return nil, false
	}
	return o.DeletedByUserID, true
}

// HasDeletedByUserID returns a boolean if a field has been set.
func (o *ViewNotebook) HasDeletedByUserID() bool {
	if o != nil && o.DeletedByUserID != nil {
		return true
	}

	return false
}

// SetDeletedByUserID gets a reference to the given int32 and assigns it to the DeletedByUserID field.
func (o *ViewNotebook) SetDeletedByUserID(v int32) {
	o.DeletedByUserID = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ViewNotebook) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ViewNotebook) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ViewNotebook) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewNotebook) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewNotebook) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewNotebook) SetId(v int32) {
	o.Id = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *ViewNotebook) GetIsPrivate() bool {
	if o == nil || o.IsPrivate == nil {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetIsPrivateOk() (*bool, bool) {
	if o == nil || o.IsPrivate == nil {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *ViewNotebook) HasIsPrivate() bool {
	if o != nil && o.IsPrivate != nil {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *ViewNotebook) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetLatestVersionNo returns the LatestVersionNo field value if set, zero value otherwise.
func (o *ViewNotebook) GetLatestVersionNo() int32 {
	if o == nil || o.LatestVersionNo == nil {
		var ret int32
		return ret
	}
	return *o.LatestVersionNo
}

// GetLatestVersionNoOk returns a tuple with the LatestVersionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetLatestVersionNoOk() (*int32, bool) {
	if o == nil || o.LatestVersionNo == nil {
		return nil, false
	}
	return o.LatestVersionNo, true
}

// HasLatestVersionNo returns a boolean if a field has been set.
func (o *ViewNotebook) HasLatestVersionNo() bool {
	if o != nil && o.LatestVersionNo != nil {
		return true
	}

	return false
}

// SetLatestVersionNo gets a reference to the given int32 and assigns it to the LatestVersionNo field.
func (o *ViewNotebook) SetLatestVersionNo(v int32) {
	o.LatestVersionNo = &v
}

// GetLockdown returns the Lockdown field value if set, zero value otherwise.
func (o *ViewNotebook) GetLockdown() ViewRelationship {
	if o == nil || o.Lockdown == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Lockdown
}

// GetLockdownOk returns a tuple with the Lockdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetLockdownOk() (*ViewRelationship, bool) {
	if o == nil || o.Lockdown == nil {
		return nil, false
	}
	return o.Lockdown, true
}

// HasLockdown returns a boolean if a field has been set.
func (o *ViewNotebook) HasLockdown() bool {
	if o != nil && o.Lockdown != nil {
		return true
	}

	return false
}

// SetLockdown gets a reference to the given ViewRelationship and assigns it to the Lockdown field.
func (o *ViewNotebook) SetLockdown(v ViewRelationship) {
	o.Lockdown = &v
}

// GetLockdownId returns the LockdownId field value if set, zero value otherwise.
func (o *ViewNotebook) GetLockdownId() int32 {
	if o == nil || o.LockdownId == nil {
		var ret int32
		return ret
	}
	return *o.LockdownId
}

// GetLockdownIdOk returns a tuple with the LockdownId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetLockdownIdOk() (*int32, bool) {
	if o == nil || o.LockdownId == nil {
		return nil, false
	}
	return o.LockdownId, true
}

// HasLockdownId returns a boolean if a field has been set.
func (o *ViewNotebook) HasLockdownId() bool {
	if o != nil && o.LockdownId != nil {
		return true
	}

	return false
}

// SetLockdownId gets a reference to the given int32 and assigns it to the LockdownId field.
func (o *ViewNotebook) SetLockdownId(v int32) {
	o.LockdownId = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *ViewNotebook) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *ViewNotebook) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *ViewNotebook) SetLocked(v bool) {
	o.Locked = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewNotebook) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewNotebook) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewNotebook) SetName(v string) {
	o.Name = &v
}

// GetNotebookVersion returns the NotebookVersion field value if set, zero value otherwise.
func (o *ViewNotebook) GetNotebookVersion() ViewRelationship {
	if o == nil || o.NotebookVersion == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.NotebookVersion
}

// GetNotebookVersionOk returns a tuple with the NotebookVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetNotebookVersionOk() (*ViewRelationship, bool) {
	if o == nil || o.NotebookVersion == nil {
		return nil, false
	}
	return o.NotebookVersion, true
}

// HasNotebookVersion returns a boolean if a field has been set.
func (o *ViewNotebook) HasNotebookVersion() bool {
	if o != nil && o.NotebookVersion != nil {
		return true
	}

	return false
}

// SetNotebookVersion gets a reference to the given ViewRelationship and assigns it to the NotebookVersion field.
func (o *ViewNotebook) SetNotebookVersion(v ViewRelationship) {
	o.NotebookVersion = &v
}

// GetNotebookVersionCreatedDateTime returns the NotebookVersionCreatedDateTime field value if set, zero value otherwise.
func (o *ViewNotebook) GetNotebookVersionCreatedDateTime() string {
	if o == nil || o.NotebookVersionCreatedDateTime == nil {
		var ret string
		return ret
	}
	return *o.NotebookVersionCreatedDateTime
}

// GetNotebookVersionCreatedDateTimeOk returns a tuple with the NotebookVersionCreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetNotebookVersionCreatedDateTimeOk() (*string, bool) {
	if o == nil || o.NotebookVersionCreatedDateTime == nil {
		return nil, false
	}
	return o.NotebookVersionCreatedDateTime, true
}

// HasNotebookVersionCreatedDateTime returns a boolean if a field has been set.
func (o *ViewNotebook) HasNotebookVersionCreatedDateTime() bool {
	if o != nil && o.NotebookVersionCreatedDateTime != nil {
		return true
	}

	return false
}

// SetNotebookVersionCreatedDateTime gets a reference to the given string and assigns it to the NotebookVersionCreatedDateTime field.
func (o *ViewNotebook) SetNotebookVersionCreatedDateTime(v string) {
	o.NotebookVersionCreatedDateTime = &v
}

// GetNotebookVersionID returns the NotebookVersionID field value if set, zero value otherwise.
func (o *ViewNotebook) GetNotebookVersionID() int32 {
	if o == nil || o.NotebookVersionID == nil {
		var ret int32
		return ret
	}
	return *o.NotebookVersionID
}

// GetNotebookVersionIDOk returns a tuple with the NotebookVersionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetNotebookVersionIDOk() (*int32, bool) {
	if o == nil || o.NotebookVersionID == nil {
		return nil, false
	}
	return o.NotebookVersionID, true
}

// HasNotebookVersionID returns a boolean if a field has been set.
func (o *ViewNotebook) HasNotebookVersionID() bool {
	if o != nil && o.NotebookVersionID != nil {
		return true
	}

	return false
}

// SetNotebookVersionID gets a reference to the given int32 and assigns it to the NotebookVersionID field.
func (o *ViewNotebook) SetNotebookVersionID(v int32) {
	o.NotebookVersionID = &v
}

// GetNotebookVersionUpdatedDateTime returns the NotebookVersionUpdatedDateTime field value if set, zero value otherwise.
func (o *ViewNotebook) GetNotebookVersionUpdatedDateTime() string {
	if o == nil || o.NotebookVersionUpdatedDateTime == nil {
		var ret string
		return ret
	}
	return *o.NotebookVersionUpdatedDateTime
}

// GetNotebookVersionUpdatedDateTimeOk returns a tuple with the NotebookVersionUpdatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetNotebookVersionUpdatedDateTimeOk() (*string, bool) {
	if o == nil || o.NotebookVersionUpdatedDateTime == nil {
		return nil, false
	}
	return o.NotebookVersionUpdatedDateTime, true
}

// HasNotebookVersionUpdatedDateTime returns a boolean if a field has been set.
func (o *ViewNotebook) HasNotebookVersionUpdatedDateTime() bool {
	if o != nil && o.NotebookVersionUpdatedDateTime != nil {
		return true
	}

	return false
}

// SetNotebookVersionUpdatedDateTime gets a reference to the given string and assigns it to the NotebookVersionUpdatedDateTime field.
func (o *ViewNotebook) SetNotebookVersionUpdatedDateTime(v string) {
	o.NotebookVersionUpdatedDateTime = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *ViewNotebook) GetPrivacy() ViewUserGroups {
	if o == nil || o.Privacy == nil {
		var ret ViewUserGroups
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetPrivacyOk() (*ViewUserGroups, bool) {
	if o == nil || o.Privacy == nil {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *ViewNotebook) HasPrivacy() bool {
	if o != nil && o.Privacy != nil {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given ViewUserGroups and assigns it to the Privacy field.
func (o *ViewNotebook) SetPrivacy(v ViewUserGroups) {
	o.Privacy = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ViewNotebook) GetProject() ViewRelationship {
	if o == nil || o.Project == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetProjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ViewNotebook) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ViewRelationship and assigns it to the Project field.
func (o *ViewNotebook) SetProject(v ViewRelationship) {
	o.Project = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ViewNotebook) GetProjectId() int32 {
	if o == nil || o.ProjectId == nil {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetProjectIdOk() (*int32, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ViewNotebook) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ViewNotebook) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetReadCommentsCount returns the ReadCommentsCount field value if set, zero value otherwise.
func (o *ViewNotebook) GetReadCommentsCount() int32 {
	if o == nil || o.ReadCommentsCount == nil {
		var ret int32
		return ret
	}
	return *o.ReadCommentsCount
}

// GetReadCommentsCountOk returns a tuple with the ReadCommentsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetReadCommentsCountOk() (*int32, bool) {
	if o == nil || o.ReadCommentsCount == nil {
		return nil, false
	}
	return o.ReadCommentsCount, true
}

// HasReadCommentsCount returns a boolean if a field has been set.
func (o *ViewNotebook) HasReadCommentsCount() bool {
	if o != nil && o.ReadCommentsCount != nil {
		return true
	}

	return false
}

// SetReadCommentsCount gets a reference to the given int32 and assigns it to the ReadCommentsCount field.
func (o *ViewNotebook) SetReadCommentsCount(v int32) {
	o.ReadCommentsCount = &v
}

// GetSecureContent returns the SecureContent field value if set, zero value otherwise.
func (o *ViewNotebook) GetSecureContent() bool {
	if o == nil || o.SecureContent == nil {
		var ret bool
		return ret
	}
	return *o.SecureContent
}

// GetSecureContentOk returns a tuple with the SecureContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetSecureContentOk() (*bool, bool) {
	if o == nil || o.SecureContent == nil {
		return nil, false
	}
	return o.SecureContent, true
}

// HasSecureContent returns a boolean if a field has been set.
func (o *ViewNotebook) HasSecureContent() bool {
	if o != nil && o.SecureContent != nil {
		return true
	}

	return false
}

// SetSecureContent gets a reference to the given bool and assigns it to the SecureContent field.
func (o *ViewNotebook) SetSecureContent(v bool) {
	o.SecureContent = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *ViewNotebook) GetTagIds() []int32 {
	if o == nil || o.TagIds == nil {
		var ret []int32
		return ret
	}
	return *o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetTagIdsOk() (*[]int32, bool) {
	if o == nil || o.TagIds == nil {
		return nil, false
	}
	return o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *ViewNotebook) HasTagIds() bool {
	if o != nil && o.TagIds != nil {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []int32 and assigns it to the TagIds field.
func (o *ViewNotebook) SetTagIds(v []int32) {
	o.TagIds = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ViewNotebook) GetTags() []ViewRelationship {
	if o == nil || o.Tags == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetTagsOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ViewNotebook) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []ViewRelationship and assigns it to the Tags field.
func (o *ViewNotebook) SetTags(v []ViewRelationship) {
	o.Tags = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ViewNotebook) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ViewNotebook) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ViewNotebook) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewNotebook) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewNotebook) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewNotebook) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *ViewNotebook) GetUpdatedBy() int32 {
	if o == nil || o.UpdatedBy == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetUpdatedByOk() (*int32, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *ViewNotebook) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given int32 and assigns it to the UpdatedBy field.
func (o *ViewNotebook) SetUpdatedBy(v int32) {
	o.UpdatedBy = &v
}

// GetUpdatedByUserID returns the UpdatedByUserID field value if set, zero value otherwise.
func (o *ViewNotebook) GetUpdatedByUserID() int32 {
	if o == nil || o.UpdatedByUserID == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedByUserID
}

// GetUpdatedByUserIDOk returns a tuple with the UpdatedByUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetUpdatedByUserIDOk() (*int32, bool) {
	if o == nil || o.UpdatedByUserID == nil {
		return nil, false
	}
	return o.UpdatedByUserID, true
}

// HasUpdatedByUserID returns a boolean if a field has been set.
func (o *ViewNotebook) HasUpdatedByUserID() bool {
	if o != nil && o.UpdatedByUserID != nil {
		return true
	}

	return false
}

// SetUpdatedByUserID gets a reference to the given int32 and assigns it to the UpdatedByUserID field.
func (o *ViewNotebook) SetUpdatedByUserID(v int32) {
	o.UpdatedByUserID = &v
}

// GetUserFollowingChanges returns the UserFollowingChanges field value if set, zero value otherwise.
func (o *ViewNotebook) GetUserFollowingChanges() bool {
	if o == nil || o.UserFollowingChanges == nil {
		var ret bool
		return ret
	}
	return *o.UserFollowingChanges
}

// GetUserFollowingChangesOk returns a tuple with the UserFollowingChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetUserFollowingChangesOk() (*bool, bool) {
	if o == nil || o.UserFollowingChanges == nil {
		return nil, false
	}
	return o.UserFollowingChanges, true
}

// HasUserFollowingChanges returns a boolean if a field has been set.
func (o *ViewNotebook) HasUserFollowingChanges() bool {
	if o != nil && o.UserFollowingChanges != nil {
		return true
	}

	return false
}

// SetUserFollowingChanges gets a reference to the given bool and assigns it to the UserFollowingChanges field.
func (o *ViewNotebook) SetUserFollowingChanges(v bool) {
	o.UserFollowingChanges = &v
}

// GetUserFollowingComments returns the UserFollowingComments field value if set, zero value otherwise.
func (o *ViewNotebook) GetUserFollowingComments() bool {
	if o == nil || o.UserFollowingComments == nil {
		var ret bool
		return ret
	}
	return *o.UserFollowingComments
}

// GetUserFollowingCommentsOk returns a tuple with the UserFollowingComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetUserFollowingCommentsOk() (*bool, bool) {
	if o == nil || o.UserFollowingComments == nil {
		return nil, false
	}
	return o.UserFollowingComments, true
}

// HasUserFollowingComments returns a boolean if a field has been set.
func (o *ViewNotebook) HasUserFollowingComments() bool {
	if o != nil && o.UserFollowingComments != nil {
		return true
	}

	return false
}

// SetUserFollowingComments gets a reference to the given bool and assigns it to the UserFollowingComments field.
func (o *ViewNotebook) SetUserFollowingComments(v bool) {
	o.UserFollowingComments = &v
}

// GetVersionCount returns the VersionCount field value if set, zero value otherwise.
func (o *ViewNotebook) GetVersionCount() int32 {
	if o == nil || o.VersionCount == nil {
		var ret int32
		return ret
	}
	return *o.VersionCount
}

// GetVersionCountOk returns a tuple with the VersionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewNotebook) GetVersionCountOk() (*int32, bool) {
	if o == nil || o.VersionCount == nil {
		return nil, false
	}
	return o.VersionCount, true
}

// HasVersionCount returns a boolean if a field has been set.
func (o *ViewNotebook) HasVersionCount() bool {
	if o != nil && o.VersionCount != nil {
		return true
	}

	return false
}

// SetVersionCount gets a reference to the given int32 and assigns it to the VersionCount field.
func (o *ViewNotebook) SetVersionCount(v int32) {
	o.VersionCount = &v
}

func (o ViewNotebook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.CategoryId != nil {
		toSerialize["categoryId"] = o.CategoryId
	}
	if o.ChangeFollowers != nil {
		toSerialize["changeFollowers"] = o.ChangeFollowers
	}
	if o.CommentFollowers != nil {
		toSerialize["commentFollowers"] = o.CommentFollowers
	}
	if o.CommentsCount != nil {
		toSerialize["commentsCount"] = o.CommentsCount
	}
	if o.ContentHTML != nil {
		toSerialize["contentHTML"] = o.ContentHTML
	}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CreatedByUserID != nil {
		toSerialize["createdByUserID"] = o.CreatedByUserID
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.DateDeleted != nil {
		toSerialize["dateDeleted"] = o.DateDeleted
	}
	if o.DateUpdated != nil {
		toSerialize["dateUpdated"] = o.DateUpdated
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if o.DeletedBy != nil {
		toSerialize["deletedBy"] = o.DeletedBy
	}
	if o.DeletedByUserID != nil {
		toSerialize["deletedByUserID"] = o.DeletedByUserID
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsPrivate != nil {
		toSerialize["isPrivate"] = o.IsPrivate
	}
	if o.LatestVersionNo != nil {
		toSerialize["latestVersionNo"] = o.LatestVersionNo
	}
	if o.Lockdown != nil {
		toSerialize["lockdown"] = o.Lockdown
	}
	if o.LockdownId != nil {
		toSerialize["lockdownId"] = o.LockdownId
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NotebookVersion != nil {
		toSerialize["notebookVersion"] = o.NotebookVersion
	}
	if o.NotebookVersionCreatedDateTime != nil {
		toSerialize["notebookVersionCreatedDateTime"] = o.NotebookVersionCreatedDateTime
	}
	if o.NotebookVersionID != nil {
		toSerialize["notebookVersionID"] = o.NotebookVersionID
	}
	if o.NotebookVersionUpdatedDateTime != nil {
		toSerialize["notebookVersionUpdatedDateTime"] = o.NotebookVersionUpdatedDateTime
	}
	if o.Privacy != nil {
		toSerialize["privacy"] = o.Privacy
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.ReadCommentsCount != nil {
		toSerialize["readCommentsCount"] = o.ReadCommentsCount
	}
	if o.SecureContent != nil {
		toSerialize["secureContent"] = o.SecureContent
	}
	if o.TagIds != nil {
		toSerialize["tagIds"] = o.TagIds
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if o.UpdatedByUserID != nil {
		toSerialize["updatedByUserID"] = o.UpdatedByUserID
	}
	if o.UserFollowingChanges != nil {
		toSerialize["userFollowingChanges"] = o.UserFollowingChanges
	}
	if o.UserFollowingComments != nil {
		toSerialize["userFollowingComments"] = o.UserFollowingComments
	}
	if o.VersionCount != nil {
		toSerialize["versionCount"] = o.VersionCount
	}
	return json.Marshal(toSerialize)
}

type NullableViewNotebook struct {
	value *ViewNotebook
	isSet bool
}

func (v NullableViewNotebook) Get() *ViewNotebook {
	return v.value
}

func (v *NullableViewNotebook) Set(val *ViewNotebook) {
	v.value = val
	v.isSet = true
}

func (v NullableViewNotebook) IsSet() bool {
	return v.isSet
}

func (v *NullableViewNotebook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewNotebook(val *ViewNotebook) *NullableViewNotebook {
	return &NullableViewNotebook{value: val, isSet: true}
}

func (v NullableViewNotebook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewNotebook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


