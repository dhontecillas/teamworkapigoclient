/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// NotebooksApiService NotebooksApi service
type NotebooksApiService service

type ApiDELETEProjectsApiV3NotebooksIdJsonRequest struct {
	ctx _context.Context
	ApiService *NotebooksApiService
}


func (r ApiDELETEProjectsApiV3NotebooksIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3NotebooksIdJsonExecute(r)
}

/*
 * DELETEProjectsApiV3NotebooksIdJson Delete an existing notebook.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDELETEProjectsApiV3NotebooksIdJsonRequest
 */
func (a *NotebooksApiService) DELETEProjectsApiV3NotebooksIdJson(ctx _context.Context) ApiDELETEProjectsApiV3NotebooksIdJsonRequest {
	return ApiDELETEProjectsApiV3NotebooksIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *NotebooksApiService) DELETEProjectsApiV3NotebooksIdJsonExecute(r ApiDELETEProjectsApiV3NotebooksIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotebooksApiService.DELETEProjectsApiV3NotebooksIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/notebooks/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDELETEProjectsApiV3NotebooksIdVersionsJsonRequest struct {
	ctx _context.Context
	ApiService *NotebooksApiService
}


func (r ApiDELETEProjectsApiV3NotebooksIdVersionsJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3NotebooksIdVersionsJsonExecute(r)
}

/*
 * DELETEProjectsApiV3NotebooksIdVersionsJson Delete notebook versions.
 * Deletes some existing versions of a notebook by version ID
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDELETEProjectsApiV3NotebooksIdVersionsJsonRequest
 */
func (a *NotebooksApiService) DELETEProjectsApiV3NotebooksIdVersionsJson(ctx _context.Context) ApiDELETEProjectsApiV3NotebooksIdVersionsJsonRequest {
	return ApiDELETEProjectsApiV3NotebooksIdVersionsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *NotebooksApiService) DELETEProjectsApiV3NotebooksIdVersionsJsonExecute(r ApiDELETEProjectsApiV3NotebooksIdVersionsJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotebooksApiService.DELETEProjectsApiV3NotebooksIdVersionsJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/notebooks/:id/versions.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3NotebooksIdJsonRequest struct {
	ctx _context.Context
	ApiService *NotebooksApiService
}


func (r ApiGETProjectsApiV3NotebooksIdJsonRequest) Execute() (NotebookResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3NotebooksIdJsonExecute(r)
}

/*
 * GETProjectsApiV3NotebooksIdJson Get a specific notebook.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3NotebooksIdJsonRequest
 */
func (a *NotebooksApiService) GETProjectsApiV3NotebooksIdJson(ctx _context.Context) ApiGETProjectsApiV3NotebooksIdJsonRequest {
	return ApiGETProjectsApiV3NotebooksIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NotebookResponse
 */
func (a *NotebooksApiService) GETProjectsApiV3NotebooksIdJsonExecute(r ApiGETProjectsApiV3NotebooksIdJsonRequest) (NotebookResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NotebookResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotebooksApiService.GETProjectsApiV3NotebooksIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/notebooks/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3NotebooksIdVersionsJsonRequest struct {
	ctx _context.Context
	ApiService *NotebooksApiService
	include *[]string
	fieldsUsers *[]string
}

func (r ApiGETProjectsApiV3NotebooksIdVersionsJsonRequest) Include(include []string) ApiGETProjectsApiV3NotebooksIdVersionsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3NotebooksIdVersionsJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3NotebooksIdVersionsJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}

func (r ApiGETProjectsApiV3NotebooksIdVersionsJsonRequest) Execute() (NotebookVersionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3NotebooksIdVersionsJsonExecute(r)
}

/*
 * GETProjectsApiV3NotebooksIdVersionsJson Get notebook versions
 * Get a list of a notebooks versions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3NotebooksIdVersionsJsonRequest
 */
func (a *NotebooksApiService) GETProjectsApiV3NotebooksIdVersionsJson(ctx _context.Context) ApiGETProjectsApiV3NotebooksIdVersionsJsonRequest {
	return ApiGETProjectsApiV3NotebooksIdVersionsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NotebookVersionsResponse
 */
func (a *NotebooksApiService) GETProjectsApiV3NotebooksIdVersionsJsonExecute(r ApiGETProjectsApiV3NotebooksIdVersionsJsonRequest) (NotebookVersionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NotebookVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotebooksApiService.GETProjectsApiV3NotebooksIdVersionsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/notebooks/:id/versions.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3NotebooksJsonRequest struct {
	ctx _context.Context
	ApiService *NotebooksApiService
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	searchTerm *string
	projectStatuses *string
	orderMode *string
	orderBy *string
	createdAfterDate *string
	createdAfter *string
	projectHealths *int32
	pageSize *int32
	page *int32
	showDeleted *bool
	secureOnly *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	lockedOnly *bool
	getEmoji *bool
	tagIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	ids *[]int32
	fieldsUsers *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsNotebookCategories *[]string
	creatorIds *[]int32
	categoryIds *[]int32
}

func (r ApiGETProjectsApiV3NotebooksJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) CreatedAfterDate(createdAfterDate string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.createdAfterDate = &createdAfterDate
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) CreatedAfter(createdAfter string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.createdAfter = &createdAfter
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) Page(page int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) SecureOnly(secureOnly bool) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.secureOnly = &secureOnly
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) LockedOnly(lockedOnly bool) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.lockedOnly = &lockedOnly
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) GetEmoji(getEmoji bool) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.getEmoji = &getEmoji
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) Include(include []string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) Ids(ids []int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.ids = &ids
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) FieldsNotebookCategories(fieldsNotebookCategories []string) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.fieldsNotebookCategories = &fieldsNotebookCategories
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) CreatorIds(creatorIds []int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.creatorIds = &creatorIds
	return r
}
func (r ApiGETProjectsApiV3NotebooksJsonRequest) CategoryIds(categoryIds []int32) ApiGETProjectsApiV3NotebooksJsonRequest {
	r.categoryIds = &categoryIds
	return r
}

func (r ApiGETProjectsApiV3NotebooksJsonRequest) Execute() (NotebookNotebooksResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3NotebooksJsonExecute(r)
}

/*
 * GETProjectsApiV3NotebooksJson Get a list of notebooks.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3NotebooksJsonRequest
 */
func (a *NotebooksApiService) GETProjectsApiV3NotebooksJson(ctx _context.Context) ApiGETProjectsApiV3NotebooksJsonRequest {
	return ApiGETProjectsApiV3NotebooksJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NotebookNotebooksResponse
 */
func (a *NotebooksApiService) GETProjectsApiV3NotebooksJsonExecute(r ApiGETProjectsApiV3NotebooksJsonRequest) (NotebookNotebooksResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NotebookNotebooksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotebooksApiService.GETProjectsApiV3NotebooksJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/notebooks.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.createdAfterDate != nil {
		localVarQueryParams.Add("createdAfterDate", parameterToString(*r.createdAfterDate, ""))
	}
	if r.createdAfter != nil {
		localVarQueryParams.Add("createdAfter", parameterToString(*r.createdAfter, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.secureOnly != nil {
		localVarQueryParams.Add("secureOnly", parameterToString(*r.secureOnly, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.lockedOnly != nil {
		localVarQueryParams.Add("lockedOnly", parameterToString(*r.lockedOnly, ""))
	}
	if r.getEmoji != nil {
		localVarQueryParams.Add("getEmoji", parameterToString(*r.getEmoji, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsNotebookCategories != nil {
		localVarQueryParams.Add("fields[notebookCategories]", parameterToString(*r.fieldsNotebookCategories, "csv"))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, "csv"))
	}
	if r.categoryIds != nil {
		localVarQueryParams.Add("categoryIds", parameterToString(*r.categoryIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3NotebooksNIdVersionsVIdJsonRequest struct {
	ctx _context.Context
	ApiService *NotebooksApiService
	include *[]string
	fieldsUsers *[]string
}

func (r ApiGETProjectsApiV3NotebooksNIdVersionsVIdJsonRequest) Include(include []string) ApiGETProjectsApiV3NotebooksNIdVersionsVIdJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3NotebooksNIdVersionsVIdJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3NotebooksNIdVersionsVIdJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}

func (r ApiGETProjectsApiV3NotebooksNIdVersionsVIdJsonRequest) Execute() (NotebookVersionResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3NotebooksNIdVersionsVIdJsonExecute(r)
}

/*
 * GETProjectsApiV3NotebooksNIdVersionsVIdJson Get a notebook version
 * Get a specific notebook version.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3NotebooksNIdVersionsVIdJsonRequest
 */
func (a *NotebooksApiService) GETProjectsApiV3NotebooksNIdVersionsVIdJson(ctx _context.Context) ApiGETProjectsApiV3NotebooksNIdVersionsVIdJsonRequest {
	return ApiGETProjectsApiV3NotebooksNIdVersionsVIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NotebookVersionResponse
 */
func (a *NotebooksApiService) GETProjectsApiV3NotebooksNIdVersionsVIdJsonExecute(r ApiGETProjectsApiV3NotebooksNIdVersionsVIdJsonRequest) (NotebookVersionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NotebookVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotebooksApiService.GETProjectsApiV3NotebooksNIdVersionsVIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/notebooks/:nId/versions/:vId.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHProjectsApiV3NotebooksIdJsonRequest struct {
	ctx _context.Context
	ApiService *NotebooksApiService
	notebookRequest *NotebookRequest
}

func (r ApiPATCHProjectsApiV3NotebooksIdJsonRequest) NotebookRequest(notebookRequest NotebookRequest) ApiPATCHProjectsApiV3NotebooksIdJsonRequest {
	r.notebookRequest = &notebookRequest
	return r
}

func (r ApiPATCHProjectsApiV3NotebooksIdJsonRequest) Execute() (NotebookResponse, *_nethttp.Response, error) {
	return r.ApiService.PATCHProjectsApiV3NotebooksIdJsonExecute(r)
}

/*
 * PATCHProjectsApiV3NotebooksIdJson Edits a notebook
 * Edits the fields of an existing notebook
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPATCHProjectsApiV3NotebooksIdJsonRequest
 */
func (a *NotebooksApiService) PATCHProjectsApiV3NotebooksIdJson(ctx _context.Context) ApiPATCHProjectsApiV3NotebooksIdJsonRequest {
	return ApiPATCHProjectsApiV3NotebooksIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NotebookResponse
 */
func (a *NotebooksApiService) PATCHProjectsApiV3NotebooksIdJsonExecute(r ApiPATCHProjectsApiV3NotebooksIdJsonRequest) (NotebookResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NotebookResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotebooksApiService.PATCHProjectsApiV3NotebooksIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/notebooks/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.notebookRequest == nil {
		return localVarReturnValue, nil, reportError("notebookRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.notebookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3ProjectsProjectIdNotebooksJsonRequest struct {
	ctx _context.Context
	ApiService *NotebooksApiService
	notebookRequest *NotebookRequest
}

func (r ApiPOSTProjectsApiV3ProjectsProjectIdNotebooksJsonRequest) NotebookRequest(notebookRequest NotebookRequest) ApiPOSTProjectsApiV3ProjectsProjectIdNotebooksJsonRequest {
	r.notebookRequest = &notebookRequest
	return r
}

func (r ApiPOSTProjectsApiV3ProjectsProjectIdNotebooksJsonRequest) Execute() (NotebookResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3ProjectsProjectIdNotebooksJsonExecute(r)
}

/*
 * POSTProjectsApiV3ProjectsProjectIdNotebooksJson Create a new notebook.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3ProjectsProjectIdNotebooksJsonRequest
 */
func (a *NotebooksApiService) POSTProjectsApiV3ProjectsProjectIdNotebooksJson(ctx _context.Context) ApiPOSTProjectsApiV3ProjectsProjectIdNotebooksJsonRequest {
	return ApiPOSTProjectsApiV3ProjectsProjectIdNotebooksJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return NotebookResponse
 */
func (a *NotebooksApiService) POSTProjectsApiV3ProjectsProjectIdNotebooksJsonExecute(r ApiPOSTProjectsApiV3ProjectsProjectIdNotebooksJsonRequest) (NotebookResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NotebookResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotebooksApiService.POSTProjectsApiV3ProjectsProjectIdNotebooksJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/notebooks.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.notebookRequest == nil {
		return localVarReturnValue, nil, reportError("notebookRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.notebookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3NotebooksIdLockJsonRequest struct {
	ctx _context.Context
	ApiService *NotebooksApiService
}


func (r ApiPUTProjectsApiV3NotebooksIdLockJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3NotebooksIdLockJsonExecute(r)
}

/*
 * PUTProjectsApiV3NotebooksIdLockJson Lock a notebook
 * Locks a specific notebook.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPUTProjectsApiV3NotebooksIdLockJsonRequest
 */
func (a *NotebooksApiService) PUTProjectsApiV3NotebooksIdLockJson(ctx _context.Context) ApiPUTProjectsApiV3NotebooksIdLockJsonRequest {
	return ApiPUTProjectsApiV3NotebooksIdLockJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *NotebooksApiService) PUTProjectsApiV3NotebooksIdLockJsonExecute(r ApiPUTProjectsApiV3NotebooksIdLockJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotebooksApiService.PUTProjectsApiV3NotebooksIdLockJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/notebooks/:id/lock.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3NotebooksIdUnlockJsonRequest struct {
	ctx _context.Context
	ApiService *NotebooksApiService
}


func (r ApiPUTProjectsApiV3NotebooksIdUnlockJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3NotebooksIdUnlockJsonExecute(r)
}

/*
 * PUTProjectsApiV3NotebooksIdUnlockJson Unlock a notebook
 * Unlocks a specific notebook.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPUTProjectsApiV3NotebooksIdUnlockJsonRequest
 */
func (a *NotebooksApiService) PUTProjectsApiV3NotebooksIdUnlockJson(ctx _context.Context) ApiPUTProjectsApiV3NotebooksIdUnlockJsonRequest {
	return ApiPUTProjectsApiV3NotebooksIdUnlockJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *NotebooksApiService) PUTProjectsApiV3NotebooksIdUnlockJsonExecute(r ApiPUTProjectsApiV3NotebooksIdUnlockJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotebooksApiService.PUTProjectsApiV3NotebooksIdUnlockJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/notebooks/:id/unlock.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
