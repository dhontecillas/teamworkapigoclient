/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// FilesApiService FilesApi service
type FilesApiService service

type ApiDELETEProjectsApiV3FilesIdJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
}


func (r ApiDELETEProjectsApiV3FilesIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3FilesIdJsonExecute(r)
}

/*
 * DELETEProjectsApiV3FilesIdJson Delete an existing file and it's versions.
 * Delete an existing file including all the file versions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDELETEProjectsApiV3FilesIdJsonRequest
 */
func (a *FilesApiService) DELETEProjectsApiV3FilesIdJson(ctx _context.Context) ApiDELETEProjectsApiV3FilesIdJsonRequest {
	return ApiDELETEProjectsApiV3FilesIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *FilesApiService) DELETEProjectsApiV3FilesIdJsonExecute(r ApiDELETEProjectsApiV3FilesIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.DELETEProjectsApiV3FilesIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/files/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3FilesAvailableJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
}


func (r ApiGETProjectsApiV3FilesAvailableJsonRequest) Execute() (FileAvailableResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3FilesAvailableJsonExecute(r)
}

/*
 * GETProjectsApiV3FilesAvailableJson Retrieves available space on account
 * Retrieves the available space after calculating all stored file sizes.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3FilesAvailableJsonRequest
 */
func (a *FilesApiService) GETProjectsApiV3FilesAvailableJson(ctx _context.Context) ApiGETProjectsApiV3FilesAvailableJsonRequest {
	return ApiGETProjectsApiV3FilesAvailableJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FileAvailableResponse
 */
func (a *FilesApiService) GETProjectsApiV3FilesAvailableJsonExecute(r ApiGETProjectsApiV3FilesAvailableJsonRequest) (FileAvailableResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileAvailableResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.GETProjectsApiV3FilesAvailableJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/files/available.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3FilesChangesJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
	updatedAfterDateTime *time.Time
	updatedAfter *time.Time
	pageSize *int32
	includeParentId *bool
}

func (r ApiGETProjectsApiV3FilesChangesJsonRequest) UpdatedAfterDateTime(updatedAfterDateTime time.Time) ApiGETProjectsApiV3FilesChangesJsonRequest {
	r.updatedAfterDateTime = &updatedAfterDateTime
	return r
}
func (r ApiGETProjectsApiV3FilesChangesJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3FilesChangesJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3FilesChangesJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3FilesChangesJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3FilesChangesJsonRequest) IncludeParentId(includeParentId bool) ApiGETProjectsApiV3FilesChangesJsonRequest {
	r.includeParentId = &includeParentId
	return r
}

func (r ApiGETProjectsApiV3FilesChangesJsonRequest) Execute() (ChangeChangesResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3FilesChangesJsonExecute(r)
}

/*
 * GETProjectsApiV3FilesChangesJson Get all recently changed files.
 * Retrieves all recently changed files sorted by lastUpdateDateTime Descending
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3FilesChangesJsonRequest
 */
func (a *FilesApiService) GETProjectsApiV3FilesChangesJson(ctx _context.Context) ApiGETProjectsApiV3FilesChangesJsonRequest {
	return ApiGETProjectsApiV3FilesChangesJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ChangeChangesResponse
 */
func (a *FilesApiService) GETProjectsApiV3FilesChangesJsonExecute(r ApiGETProjectsApiV3FilesChangesJsonRequest) (ChangeChangesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ChangeChangesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.GETProjectsApiV3FilesChangesJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/files/changes.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfterDateTime != nil {
		localVarQueryParams.Add("updatedAfterDateTime", parameterToString(*r.updatedAfterDateTime, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.includeParentId != nil {
		localVarQueryParams.Add("includeParentId", parameterToString(*r.includeParentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3FilesIdJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
	uploadedStartDate *string
	uploadedEndDate *string
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	status *string
	searchTerm *string
	projectType *string
	orderMode *string
	orderBy *string
	versionId *int32
	version *int32
	taskId *int32
	projectId *int32
	pageSize *int32
	page *int32
	id *int32
	categoryId *int32
	skipInternalFiles *bool
	skipExternalFiles *bool
	showDeleted *bool
	searchAllFields *bool
	matchAllTags *bool
	lockedOnly *bool
	getVersions *bool
	getVersionReactions *bool
	getRelatedItems *bool
	getReactions *bool
	getLikes *bool
	getComments *bool
	fromDocumentEditor *bool
	versionIds *[]int32
	userIds *[]int32
	tagIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsTasks *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsMessages *[]string
	fieldsFileCategories *[]string
	fieldsComments *[]string
}

func (r ApiGETProjectsApiV3FilesIdJsonRequest) UploadedStartDate(uploadedStartDate string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.uploadedStartDate = &uploadedStartDate
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) UploadedEndDate(uploadedEndDate string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.uploadedEndDate = &uploadedEndDate
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) Status(status string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) ProjectType(projectType string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.projectType = &projectType
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) VersionId(versionId int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.versionId = &versionId
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) Version(version int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.version = &version
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) TaskId(taskId int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) Page(page int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) Id(id int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.id = &id
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) CategoryId(categoryId int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.categoryId = &categoryId
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) SkipInternalFiles(skipInternalFiles bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.skipInternalFiles = &skipInternalFiles
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) SkipExternalFiles(skipExternalFiles bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.skipExternalFiles = &skipExternalFiles
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) SearchAllFields(searchAllFields bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.searchAllFields = &searchAllFields
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) LockedOnly(lockedOnly bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.lockedOnly = &lockedOnly
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) GetVersions(getVersions bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.getVersions = &getVersions
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) GetVersionReactions(getVersionReactions bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.getVersionReactions = &getVersionReactions
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) GetRelatedItems(getRelatedItems bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.getRelatedItems = &getRelatedItems
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) GetReactions(getReactions bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.getReactions = &getReactions
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) GetLikes(getLikes bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.getLikes = &getLikes
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) GetComments(getComments bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.getComments = &getComments
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) FromDocumentEditor(fromDocumentEditor bool) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.fromDocumentEditor = &fromDocumentEditor
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) VersionIds(versionIds []int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.versionIds = &versionIds
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) UserIds(userIds []int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) Include(include []string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) FieldsMessages(fieldsMessages []string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.fieldsMessages = &fieldsMessages
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) FieldsFileCategories(fieldsFileCategories []string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.fieldsFileCategories = &fieldsFileCategories
	return r
}
func (r ApiGETProjectsApiV3FilesIdJsonRequest) FieldsComments(fieldsComments []string) ApiGETProjectsApiV3FilesIdJsonRequest {
	r.fieldsComments = &fieldsComments
	return r
}

func (r ApiGETProjectsApiV3FilesIdJsonRequest) Execute() (FileResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3FilesIdJsonExecute(r)
}

/*
 * GETProjectsApiV3FilesIdJson Get a specific file.
 * Get a single file by project file id.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3FilesIdJsonRequest
 */
func (a *FilesApiService) GETProjectsApiV3FilesIdJson(ctx _context.Context) ApiGETProjectsApiV3FilesIdJsonRequest {
	return ApiGETProjectsApiV3FilesIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FileResponse
 */
func (a *FilesApiService) GETProjectsApiV3FilesIdJsonExecute(r ApiGETProjectsApiV3FilesIdJsonRequest) (FileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.GETProjectsApiV3FilesIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/files/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.uploadedStartDate != nil {
		localVarQueryParams.Add("uploadedStartDate", parameterToString(*r.uploadedStartDate, ""))
	}
	if r.uploadedEndDate != nil {
		localVarQueryParams.Add("uploadedEndDate", parameterToString(*r.uploadedEndDate, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectType != nil {
		localVarQueryParams.Add("projectType", parameterToString(*r.projectType, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.versionId != nil {
		localVarQueryParams.Add("versionId", parameterToString(*r.versionId, ""))
	}
	if r.version != nil {
		localVarQueryParams.Add("version", parameterToString(*r.version, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, ""))
	}
	if r.skipInternalFiles != nil {
		localVarQueryParams.Add("skipInternalFiles", parameterToString(*r.skipInternalFiles, ""))
	}
	if r.skipExternalFiles != nil {
		localVarQueryParams.Add("skipExternalFiles", parameterToString(*r.skipExternalFiles, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.searchAllFields != nil {
		localVarQueryParams.Add("searchAllFields", parameterToString(*r.searchAllFields, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.lockedOnly != nil {
		localVarQueryParams.Add("lockedOnly", parameterToString(*r.lockedOnly, ""))
	}
	if r.getVersions != nil {
		localVarQueryParams.Add("getVersions", parameterToString(*r.getVersions, ""))
	}
	if r.getVersionReactions != nil {
		localVarQueryParams.Add("getVersionReactions", parameterToString(*r.getVersionReactions, ""))
	}
	if r.getRelatedItems != nil {
		localVarQueryParams.Add("getRelatedItems", parameterToString(*r.getRelatedItems, ""))
	}
	if r.getReactions != nil {
		localVarQueryParams.Add("getReactions", parameterToString(*r.getReactions, ""))
	}
	if r.getLikes != nil {
		localVarQueryParams.Add("getLikes", parameterToString(*r.getLikes, ""))
	}
	if r.getComments != nil {
		localVarQueryParams.Add("getComments", parameterToString(*r.getComments, ""))
	}
	if r.fromDocumentEditor != nil {
		localVarQueryParams.Add("fromDocumentEditor", parameterToString(*r.fromDocumentEditor, ""))
	}
	if r.versionIds != nil {
		localVarQueryParams.Add("versionIds", parameterToString(*r.versionIds, "csv"))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsMessages != nil {
		localVarQueryParams.Add("fields[messages]", parameterToString(*r.fieldsMessages, "csv"))
	}
	if r.fieldsFileCategories != nil {
		localVarQueryParams.Add("fields[fileCategories]", parameterToString(*r.fieldsFileCategories, "csv"))
	}
	if r.fieldsComments != nil {
		localVarQueryParams.Add("fields[comments]", parameterToString(*r.fieldsComments, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3FilesJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
	uploadedStartDate *string
	uploadedEndDate *string
	updatedAfterDate *time.Time
	updatedAfter *time.Time
	status *string
	searchTerm *string
	projectType *string
	orderMode *string
	orderBy *string
	versionId *int32
	version *int32
	taskId *int32
	projectId *int32
	pageSize *int32
	page *int32
	id *int32
	categoryId *int32
	skipInternalFiles *bool
	skipExternalFiles *bool
	showDeleted *bool
	searchAllFields *bool
	matchAllTags *bool
	lockedOnly *bool
	getVersions *bool
	getVersionReactions *bool
	getRelatedItems *bool
	getReactions *bool
	getLikes *bool
	getComments *bool
	fromDocumentEditor *bool
	versionIds *[]int32
	userIds *[]int32
	tagIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsTasks *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsMessages *[]string
	fieldsFileCategories *[]string
	fieldsComments *[]string
}

func (r ApiGETProjectsApiV3FilesJsonRequest) UploadedStartDate(uploadedStartDate string) ApiGETProjectsApiV3FilesJsonRequest {
	r.uploadedStartDate = &uploadedStartDate
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) UploadedEndDate(uploadedEndDate string) ApiGETProjectsApiV3FilesJsonRequest {
	r.uploadedEndDate = &uploadedEndDate
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) UpdatedAfterDate(updatedAfterDate time.Time) ApiGETProjectsApiV3FilesJsonRequest {
	r.updatedAfterDate = &updatedAfterDate
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3FilesJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) Status(status string) ApiGETProjectsApiV3FilesJsonRequest {
	r.status = &status
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3FilesJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) ProjectType(projectType string) ApiGETProjectsApiV3FilesJsonRequest {
	r.projectType = &projectType
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3FilesJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3FilesJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) VersionId(versionId int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.versionId = &versionId
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) Version(version int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.version = &version
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) TaskId(taskId int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) Page(page int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) Id(id int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.id = &id
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) CategoryId(categoryId int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.categoryId = &categoryId
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) SkipInternalFiles(skipInternalFiles bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.skipInternalFiles = &skipInternalFiles
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) SkipExternalFiles(skipExternalFiles bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.skipExternalFiles = &skipExternalFiles
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) SearchAllFields(searchAllFields bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.searchAllFields = &searchAllFields
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) LockedOnly(lockedOnly bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.lockedOnly = &lockedOnly
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) GetVersions(getVersions bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.getVersions = &getVersions
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) GetVersionReactions(getVersionReactions bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.getVersionReactions = &getVersionReactions
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) GetRelatedItems(getRelatedItems bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.getRelatedItems = &getRelatedItems
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) GetReactions(getReactions bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.getReactions = &getReactions
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) GetLikes(getLikes bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.getLikes = &getLikes
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) GetComments(getComments bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.getComments = &getComments
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) FromDocumentEditor(fromDocumentEditor bool) ApiGETProjectsApiV3FilesJsonRequest {
	r.fromDocumentEditor = &fromDocumentEditor
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) VersionIds(versionIds []int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.versionIds = &versionIds
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) UserIds(userIds []int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3FilesJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) Include(include []string) ApiGETProjectsApiV3FilesJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3FilesJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3FilesJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3FilesJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3FilesJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) FieldsMessages(fieldsMessages []string) ApiGETProjectsApiV3FilesJsonRequest {
	r.fieldsMessages = &fieldsMessages
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) FieldsFileCategories(fieldsFileCategories []string) ApiGETProjectsApiV3FilesJsonRequest {
	r.fieldsFileCategories = &fieldsFileCategories
	return r
}
func (r ApiGETProjectsApiV3FilesJsonRequest) FieldsComments(fieldsComments []string) ApiGETProjectsApiV3FilesJsonRequest {
	r.fieldsComments = &fieldsComments
	return r
}

func (r ApiGETProjectsApiV3FilesJsonRequest) Execute() (FileProjectFilesResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3FilesJsonExecute(r)
}

/*
 * GETProjectsApiV3FilesJson Get a list of files.
 * Return all files for the provided filters.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3FilesJsonRequest
 */
func (a *FilesApiService) GETProjectsApiV3FilesJson(ctx _context.Context) ApiGETProjectsApiV3FilesJsonRequest {
	return ApiGETProjectsApiV3FilesJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FileProjectFilesResponse
 */
func (a *FilesApiService) GETProjectsApiV3FilesJsonExecute(r ApiGETProjectsApiV3FilesJsonRequest) (FileProjectFilesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileProjectFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.GETProjectsApiV3FilesJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/files.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.uploadedStartDate != nil {
		localVarQueryParams.Add("uploadedStartDate", parameterToString(*r.uploadedStartDate, ""))
	}
	if r.uploadedEndDate != nil {
		localVarQueryParams.Add("uploadedEndDate", parameterToString(*r.uploadedEndDate, ""))
	}
	if r.updatedAfterDate != nil {
		localVarQueryParams.Add("updatedAfterDate", parameterToString(*r.updatedAfterDate, ""))
	}
	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.projectType != nil {
		localVarQueryParams.Add("projectType", parameterToString(*r.projectType, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.versionId != nil {
		localVarQueryParams.Add("versionId", parameterToString(*r.versionId, ""))
	}
	if r.version != nil {
		localVarQueryParams.Add("version", parameterToString(*r.version, ""))
	}
	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, ""))
	}
	if r.skipInternalFiles != nil {
		localVarQueryParams.Add("skipInternalFiles", parameterToString(*r.skipInternalFiles, ""))
	}
	if r.skipExternalFiles != nil {
		localVarQueryParams.Add("skipExternalFiles", parameterToString(*r.skipExternalFiles, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.searchAllFields != nil {
		localVarQueryParams.Add("searchAllFields", parameterToString(*r.searchAllFields, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.lockedOnly != nil {
		localVarQueryParams.Add("lockedOnly", parameterToString(*r.lockedOnly, ""))
	}
	if r.getVersions != nil {
		localVarQueryParams.Add("getVersions", parameterToString(*r.getVersions, ""))
	}
	if r.getVersionReactions != nil {
		localVarQueryParams.Add("getVersionReactions", parameterToString(*r.getVersionReactions, ""))
	}
	if r.getRelatedItems != nil {
		localVarQueryParams.Add("getRelatedItems", parameterToString(*r.getRelatedItems, ""))
	}
	if r.getReactions != nil {
		localVarQueryParams.Add("getReactions", parameterToString(*r.getReactions, ""))
	}
	if r.getLikes != nil {
		localVarQueryParams.Add("getLikes", parameterToString(*r.getLikes, ""))
	}
	if r.getComments != nil {
		localVarQueryParams.Add("getComments", parameterToString(*r.getComments, ""))
	}
	if r.fromDocumentEditor != nil {
		localVarQueryParams.Add("fromDocumentEditor", parameterToString(*r.fromDocumentEditor, ""))
	}
	if r.versionIds != nil {
		localVarQueryParams.Add("versionIds", parameterToString(*r.versionIds, "csv"))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsMessages != nil {
		localVarQueryParams.Add("fields[messages]", parameterToString(*r.fieldsMessages, "csv"))
	}
	if r.fieldsFileCategories != nil {
		localVarQueryParams.Add("fields[fileCategories]", parameterToString(*r.fieldsFileCategories, "csv"))
	}
	if r.fieldsComments != nil {
		localVarQueryParams.Add("fields[comments]", parameterToString(*r.fieldsComments, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3FilesUsageJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
	projectId *int32
	include *[]string
	fieldsProjects *[]string
}

func (r ApiGETProjectsApiV3FilesUsageJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3FilesUsageJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3FilesUsageJsonRequest) Include(include []string) ApiGETProjectsApiV3FilesUsageJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3FilesUsageJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3FilesUsageJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}

func (r ApiGETProjectsApiV3FilesUsageJsonRequest) Execute() (FileUsageResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3FilesUsageJsonExecute(r)
}

/*
 * GETProjectsApiV3FilesUsageJson Retrieve file usage on account
 * Retrieves all file space used on account.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3FilesUsageJsonRequest
 */
func (a *FilesApiService) GETProjectsApiV3FilesUsageJson(ctx _context.Context) ApiGETProjectsApiV3FilesUsageJsonRequest {
	return ApiGETProjectsApiV3FilesUsageJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FileUsageResponse
 */
func (a *FilesApiService) GETProjectsApiV3FilesUsageJsonExecute(r ApiGETProjectsApiV3FilesUsageJsonRequest) (FileUsageResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileUsageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.GETProjectsApiV3FilesUsageJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/files/usage.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3FileversionIdJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
	id *int32
	getReactions *bool
	include *[]string
	fieldsUsers *[]string
	fieldsProjects *[]string
	fieldsFiles *[]string
}

func (r ApiGETProjectsApiV3FileversionIdJsonRequest) Id(id int32) ApiGETProjectsApiV3FileversionIdJsonRequest {
	r.id = &id
	return r
}
func (r ApiGETProjectsApiV3FileversionIdJsonRequest) GetReactions(getReactions bool) ApiGETProjectsApiV3FileversionIdJsonRequest {
	r.getReactions = &getReactions
	return r
}
func (r ApiGETProjectsApiV3FileversionIdJsonRequest) Include(include []string) ApiGETProjectsApiV3FileversionIdJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3FileversionIdJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3FileversionIdJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3FileversionIdJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3FileversionIdJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3FileversionIdJsonRequest) FieldsFiles(fieldsFiles []string) ApiGETProjectsApiV3FileversionIdJsonRequest {
	r.fieldsFiles = &fieldsFiles
	return r
}

func (r ApiGETProjectsApiV3FileversionIdJsonRequest) Execute() (FileversionResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3FileversionIdJsonExecute(r)
}

/*
 * GETProjectsApiV3FileversionIdJson Get a specific fileversion.
 * Retrieve a fileversion by id.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3FileversionIdJsonRequest
 */
func (a *FilesApiService) GETProjectsApiV3FileversionIdJson(ctx _context.Context) ApiGETProjectsApiV3FileversionIdJsonRequest {
	return ApiGETProjectsApiV3FileversionIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FileversionResponse
 */
func (a *FilesApiService) GETProjectsApiV3FileversionIdJsonExecute(r ApiGETProjectsApiV3FileversionIdJsonRequest) (FileversionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileversionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.GETProjectsApiV3FileversionIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/fileversion/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.getReactions != nil {
		localVarQueryParams.Add("getReactions", parameterToString(*r.getReactions, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsFiles != nil {
		localVarQueryParams.Add("fields[files]", parameterToString(*r.fieldsFiles, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
	projectId *int32
	include *[]string
	fieldsProjects *[]string
}

func (r ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest) Include(include []string) ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}

func (r ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest) Execute() (FileUsageResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsIdFilesUsageJsonExecute(r)
}

/*
 * GETProjectsApiV3ProjectsIdFilesUsageJson Retrieve file usage on a project
 * Retrieves all file space used on account for a specific project.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest
 */
func (a *FilesApiService) GETProjectsApiV3ProjectsIdFilesUsageJson(ctx _context.Context) ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest {
	return ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FileUsageResponse
 */
func (a *FilesApiService) GETProjectsApiV3ProjectsIdFilesUsageJsonExecute(r ApiGETProjectsApiV3ProjectsIdFilesUsageJsonRequest) (FileUsageResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileUsageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.GETProjectsApiV3ProjectsIdFilesUsageJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:id/files/usage.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHProjectsApiV3FilesIdJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
	fileRequest *FileRequest
}

func (r ApiPATCHProjectsApiV3FilesIdJsonRequest) FileRequest(fileRequest FileRequest) ApiPATCHProjectsApiV3FilesIdJsonRequest {
	r.fileRequest = &fileRequest
	return r
}

func (r ApiPATCHProjectsApiV3FilesIdJsonRequest) Execute() (FileResponse, *_nethttp.Response, error) {
	return r.ApiService.PATCHProjectsApiV3FilesIdJsonExecute(r)
}

/*
 * PATCHProjectsApiV3FilesIdJson Update an existing file
 * Updates an existing file.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPATCHProjectsApiV3FilesIdJsonRequest
 */
func (a *FilesApiService) PATCHProjectsApiV3FilesIdJson(ctx _context.Context) ApiPATCHProjectsApiV3FilesIdJsonRequest {
	return ApiPATCHProjectsApiV3FilesIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FileResponse
 */
func (a *FilesApiService) PATCHProjectsApiV3FilesIdJsonExecute(r ApiPATCHProjectsApiV3FilesIdJsonRequest) (FileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.PATCHProjectsApiV3FilesIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/files/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.fileRequest == nil {
		return localVarReturnValue, nil, reportError("fileRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fileRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3FilesArchiveJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
	fileArchiveRequest *FileArchiveRequest
}

func (r ApiPOSTProjectsApiV3FilesArchiveJsonRequest) FileArchiveRequest(fileArchiveRequest FileArchiveRequest) ApiPOSTProjectsApiV3FilesArchiveJsonRequest {
	r.fileArchiveRequest = &fileArchiveRequest
	return r
}

func (r ApiPOSTProjectsApiV3FilesArchiveJsonRequest) Execute() (FileArchiveResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3FilesArchiveJsonExecute(r)
}

/*
 * POSTProjectsApiV3FilesArchiveJson Returns an URL for multiple files
 * Returns an URL to download multiple files at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3FilesArchiveJsonRequest
 */
func (a *FilesApiService) POSTProjectsApiV3FilesArchiveJson(ctx _context.Context) ApiPOSTProjectsApiV3FilesArchiveJsonRequest {
	return ApiPOSTProjectsApiV3FilesArchiveJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FileArchiveResponse
 */
func (a *FilesApiService) POSTProjectsApiV3FilesArchiveJsonExecute(r ApiPOSTProjectsApiV3FilesArchiveJsonRequest) (FileArchiveResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileArchiveResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.POSTProjectsApiV3FilesArchiveJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/files/archive.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.fileArchiveRequest == nil {
		return localVarReturnValue, nil, reportError("fileArchiveRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fileArchiveRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3FilesProjectFileIdJsonRequest struct {
	ctx _context.Context
	ApiService *FilesApiService
	fileversionRequest *FileversionRequest
}

func (r ApiPOSTProjectsApiV3FilesProjectFileIdJsonRequest) FileversionRequest(fileversionRequest FileversionRequest) ApiPOSTProjectsApiV3FilesProjectFileIdJsonRequest {
	r.fileversionRequest = &fileversionRequest
	return r
}

func (r ApiPOSTProjectsApiV3FilesProjectFileIdJsonRequest) Execute() (FileversionResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3FilesProjectFileIdJsonExecute(r)
}

/*
 * POSTProjectsApiV3FilesProjectFileIdJson Create a new fileversion for the project file id.
 * Creates a new fileversion for the project file id specified.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3FilesProjectFileIdJsonRequest
 */
func (a *FilesApiService) POSTProjectsApiV3FilesProjectFileIdJson(ctx _context.Context) ApiPOSTProjectsApiV3FilesProjectFileIdJsonRequest {
	return ApiPOSTProjectsApiV3FilesProjectFileIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FileversionResponse
 */
func (a *FilesApiService) POSTProjectsApiV3FilesProjectFileIdJsonExecute(r ApiPOSTProjectsApiV3FilesProjectFileIdJsonRequest) (FileversionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FileversionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.POSTProjectsApiV3FilesProjectFileIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/files/:projectFileId.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.fileversionRequest == nil {
		return localVarReturnValue, nil, reportError("fileversionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fileversionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
