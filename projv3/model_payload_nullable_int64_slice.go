/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// PayloadNullableInt64Slice NullableInt64Slice implements json.Unmarshaler to allow testing between a value that explicitly set to null or omitted.
type PayloadNullableInt64Slice struct {
	Null *bool `json:"Null,omitempty"`
	Set *bool `json:"Set,omitempty"`
	Value *[]int32 `json:"Value,omitempty"`
}

// NewPayloadNullableInt64Slice instantiates a new PayloadNullableInt64Slice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayloadNullableInt64Slice() *PayloadNullableInt64Slice {
	this := PayloadNullableInt64Slice{}
	return &this
}

// NewPayloadNullableInt64SliceWithDefaults instantiates a new PayloadNullableInt64Slice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayloadNullableInt64SliceWithDefaults() *PayloadNullableInt64Slice {
	this := PayloadNullableInt64Slice{}
	return &this
}

// GetNull returns the Null field value if set, zero value otherwise.
func (o *PayloadNullableInt64Slice) GetNull() bool {
	if o == nil || o.Null == nil {
		var ret bool
		return ret
	}
	return *o.Null
}

// GetNullOk returns a tuple with the Null field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadNullableInt64Slice) GetNullOk() (*bool, bool) {
	if o == nil || o.Null == nil {
		return nil, false
	}
	return o.Null, true
}

// HasNull returns a boolean if a field has been set.
func (o *PayloadNullableInt64Slice) HasNull() bool {
	if o != nil && o.Null != nil {
		return true
	}

	return false
}

// SetNull gets a reference to the given bool and assigns it to the Null field.
func (o *PayloadNullableInt64Slice) SetNull(v bool) {
	o.Null = &v
}

// GetSet returns the Set field value if set, zero value otherwise.
func (o *PayloadNullableInt64Slice) GetSet() bool {
	if o == nil || o.Set == nil {
		var ret bool
		return ret
	}
	return *o.Set
}

// GetSetOk returns a tuple with the Set field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadNullableInt64Slice) GetSetOk() (*bool, bool) {
	if o == nil || o.Set == nil {
		return nil, false
	}
	return o.Set, true
}

// HasSet returns a boolean if a field has been set.
func (o *PayloadNullableInt64Slice) HasSet() bool {
	if o != nil && o.Set != nil {
		return true
	}

	return false
}

// SetSet gets a reference to the given bool and assigns it to the Set field.
func (o *PayloadNullableInt64Slice) SetSet(v bool) {
	o.Set = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PayloadNullableInt64Slice) GetValue() []int32 {
	if o == nil || o.Value == nil {
		var ret []int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadNullableInt64Slice) GetValueOk() (*[]int32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PayloadNullableInt64Slice) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given []int32 and assigns it to the Value field.
func (o *PayloadNullableInt64Slice) SetValue(v []int32) {
	o.Value = &v
}

func (o PayloadNullableInt64Slice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Null != nil {
		toSerialize["Null"] = o.Null
	}
	if o.Set != nil {
		toSerialize["Set"] = o.Set
	}
	if o.Value != nil {
		toSerialize["Value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullablePayloadNullableInt64Slice struct {
	value *PayloadNullableInt64Slice
	isSet bool
}

func (v NullablePayloadNullableInt64Slice) Get() *PayloadNullableInt64Slice {
	return v.value
}

func (v *NullablePayloadNullableInt64Slice) Set(val *PayloadNullableInt64Slice) {
	v.value = val
	v.isSet = true
}

func (v NullablePayloadNullableInt64Slice) IsSet() bool {
	return v.isSet
}

func (v *NullablePayloadNullableInt64Slice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayloadNullableInt64Slice(val *PayloadNullableInt64Slice) *NullablePayloadNullableInt64Slice {
	return &NullablePayloadNullableInt64Slice{value: val, isSet: true}
}

func (v NullablePayloadNullableInt64Slice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayloadNullableInt64Slice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


