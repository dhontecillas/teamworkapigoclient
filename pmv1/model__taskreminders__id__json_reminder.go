/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// TaskremindersIdJsonReminder struct for TaskremindersIdJsonReminder
type TaskremindersIdJsonReminder struct {
	DateTimeUtc *string `json:"date-time-utc,omitempty"`
	Note *string `json:"note,omitempty"`
	Type *string `json:"type,omitempty"`
	UserId *string `json:"user-id,omitempty"`
}

// NewTaskremindersIdJsonReminder instantiates a new TaskremindersIdJsonReminder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskremindersIdJsonReminder() *TaskremindersIdJsonReminder {
	this := TaskremindersIdJsonReminder{}
	return &this
}

// NewTaskremindersIdJsonReminderWithDefaults instantiates a new TaskremindersIdJsonReminder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskremindersIdJsonReminderWithDefaults() *TaskremindersIdJsonReminder {
	this := TaskremindersIdJsonReminder{}
	return &this
}

// GetDateTimeUtc returns the DateTimeUtc field value if set, zero value otherwise.
func (o *TaskremindersIdJsonReminder) GetDateTimeUtc() string {
	if o == nil || o.DateTimeUtc == nil {
		var ret string
		return ret
	}
	return *o.DateTimeUtc
}

// GetDateTimeUtcOk returns a tuple with the DateTimeUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskremindersIdJsonReminder) GetDateTimeUtcOk() (*string, bool) {
	if o == nil || o.DateTimeUtc == nil {
		return nil, false
	}
	return o.DateTimeUtc, true
}

// HasDateTimeUtc returns a boolean if a field has been set.
func (o *TaskremindersIdJsonReminder) HasDateTimeUtc() bool {
	if o != nil && o.DateTimeUtc != nil {
		return true
	}

	return false
}

// SetDateTimeUtc gets a reference to the given string and assigns it to the DateTimeUtc field.
func (o *TaskremindersIdJsonReminder) SetDateTimeUtc(v string) {
	o.DateTimeUtc = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *TaskremindersIdJsonReminder) GetNote() string {
	if o == nil || o.Note == nil {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskremindersIdJsonReminder) GetNoteOk() (*string, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *TaskremindersIdJsonReminder) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *TaskremindersIdJsonReminder) SetNote(v string) {
	o.Note = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TaskremindersIdJsonReminder) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskremindersIdJsonReminder) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TaskremindersIdJsonReminder) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TaskremindersIdJsonReminder) SetType(v string) {
	o.Type = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *TaskremindersIdJsonReminder) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskremindersIdJsonReminder) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *TaskremindersIdJsonReminder) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *TaskremindersIdJsonReminder) SetUserId(v string) {
	o.UserId = &v
}

func (o TaskremindersIdJsonReminder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DateTimeUtc != nil {
		toSerialize["date-time-utc"] = o.DateTimeUtc
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UserId != nil {
		toSerialize["user-id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableTaskremindersIdJsonReminder struct {
	value *TaskremindersIdJsonReminder
	isSet bool
}

func (v NullableTaskremindersIdJsonReminder) Get() *TaskremindersIdJsonReminder {
	return v.value
}

func (v *NullableTaskremindersIdJsonReminder) Set(val *TaskremindersIdJsonReminder) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskremindersIdJsonReminder) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskremindersIdJsonReminder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskremindersIdJsonReminder(val *TaskremindersIdJsonReminder) *NullableTaskremindersIdJsonReminder {
	return &NullableTaskremindersIdJsonReminder{value: val, isSet: true}
}

func (v NullableTaskremindersIdJsonReminder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskremindersIdJsonReminder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


