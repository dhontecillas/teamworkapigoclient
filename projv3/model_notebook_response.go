/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// NotebookResponse Response contains information about a specific notebook.
type NotebookResponse struct {
	Included *NotebookNotebooksResponseIncluded `json:"included,omitempty"`
	Notebook *ViewNotebook `json:"notebook,omitempty"`
}

// NewNotebookResponse instantiates a new NotebookResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotebookResponse() *NotebookResponse {
	this := NotebookResponse{}
	return &this
}

// NewNotebookResponseWithDefaults instantiates a new NotebookResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotebookResponseWithDefaults() *NotebookResponse {
	this := NotebookResponse{}
	return &this
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *NotebookResponse) GetIncluded() NotebookNotebooksResponseIncluded {
	if o == nil || o.Included == nil {
		var ret NotebookNotebooksResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookResponse) GetIncludedOk() (*NotebookNotebooksResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *NotebookResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given NotebookNotebooksResponseIncluded and assigns it to the Included field.
func (o *NotebookResponse) SetIncluded(v NotebookNotebooksResponseIncluded) {
	o.Included = &v
}

// GetNotebook returns the Notebook field value if set, zero value otherwise.
func (o *NotebookResponse) GetNotebook() ViewNotebook {
	if o == nil || o.Notebook == nil {
		var ret ViewNotebook
		return ret
	}
	return *o.Notebook
}

// GetNotebookOk returns a tuple with the Notebook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotebookResponse) GetNotebookOk() (*ViewNotebook, bool) {
	if o == nil || o.Notebook == nil {
		return nil, false
	}
	return o.Notebook, true
}

// HasNotebook returns a boolean if a field has been set.
func (o *NotebookResponse) HasNotebook() bool {
	if o != nil && o.Notebook != nil {
		return true
	}

	return false
}

// SetNotebook gets a reference to the given ViewNotebook and assigns it to the Notebook field.
func (o *NotebookResponse) SetNotebook(v ViewNotebook) {
	o.Notebook = &v
}

func (o NotebookResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Notebook != nil {
		toSerialize["notebook"] = o.Notebook
	}
	return json.Marshal(toSerialize)
}

type NullableNotebookResponse struct {
	value *NotebookResponse
	isSet bool
}

func (v NullableNotebookResponse) Get() *NotebookResponse {
	return v.value
}

func (v *NullableNotebookResponse) Set(val *NotebookResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNotebookResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNotebookResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotebookResponse(val *NotebookResponse) *NullableNotebookResponse {
	return &NullableNotebookResponse{value: val, isSet: true}
}

func (v NullableNotebookResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotebookResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


