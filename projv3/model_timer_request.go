/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// TimerRequest Request contains information of a timer to be created or updated.
type TimerRequest struct {
	Timer *TimerTimer `json:"timer,omitempty"`
}

// NewTimerRequest instantiates a new TimerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimerRequest() *TimerRequest {
	this := TimerRequest{}
	return &this
}

// NewTimerRequestWithDefaults instantiates a new TimerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimerRequestWithDefaults() *TimerRequest {
	this := TimerRequest{}
	return &this
}

// GetTimer returns the Timer field value if set, zero value otherwise.
func (o *TimerRequest) GetTimer() TimerTimer {
	if o == nil || o.Timer == nil {
		var ret TimerTimer
		return ret
	}
	return *o.Timer
}

// GetTimerOk returns a tuple with the Timer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimerRequest) GetTimerOk() (*TimerTimer, bool) {
	if o == nil || o.Timer == nil {
		return nil, false
	}
	return o.Timer, true
}

// HasTimer returns a boolean if a field has been set.
func (o *TimerRequest) HasTimer() bool {
	if o != nil && o.Timer != nil {
		return true
	}

	return false
}

// SetTimer gets a reference to the given TimerTimer and assigns it to the Timer field.
func (o *TimerRequest) SetTimer(v TimerTimer) {
	o.Timer = &v
}

func (o TimerRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timer != nil {
		toSerialize["timer"] = o.Timer
	}
	return json.Marshal(toSerialize)
}

type NullableTimerRequest struct {
	value *TimerRequest
	isSet bool
}

func (v NullableTimerRequest) Get() *TimerRequest {
	return v.value
}

func (v *NullableTimerRequest) Set(val *TimerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTimerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTimerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimerRequest(val *TimerRequest) *NullableTimerRequest {
	return &NullableTimerRequest{value: val, isSet: true}
}

func (v NullableTimerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


