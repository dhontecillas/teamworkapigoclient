/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// TaskResponseIncluded struct for TaskResponseIncluded
type TaskResponseIncluded struct {
	Cards *map[string]ViewTaskCard `json:"cards,omitempty"`
	Columns *map[string]ViewBoardColumn `json:"columns,omitempty"`
	Comments *map[string]ViewComment `json:"comments,omitempty"`
	Companies *map[string]ViewCompany `json:"companies,omitempty"`
	Milestones *map[string]ViewMilestone `json:"milestones,omitempty"`
	Projects *map[string]ViewProject `json:"projects,omitempty"`
	Tags *map[string]ViewTag `json:"tags,omitempty"`
	Tasklists *map[string]ViewTasklist `json:"tasklists,omitempty"`
	Teams *map[string]ViewTeam `json:"teams,omitempty"`
	TimeTotals *map[string]ViewTaskTimeTotals `json:"timeTotals,omitempty"`
	Users *map[string]ViewUser `json:"users,omitempty"`
}

// NewTaskResponseIncluded instantiates a new TaskResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskResponseIncluded() *TaskResponseIncluded {
	this := TaskResponseIncluded{}
	return &this
}

// NewTaskResponseIncludedWithDefaults instantiates a new TaskResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskResponseIncludedWithDefaults() *TaskResponseIncluded {
	this := TaskResponseIncluded{}
	return &this
}

// GetCards returns the Cards field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetCards() map[string]ViewTaskCard {
	if o == nil || o.Cards == nil {
		var ret map[string]ViewTaskCard
		return ret
	}
	return *o.Cards
}

// GetCardsOk returns a tuple with the Cards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetCardsOk() (*map[string]ViewTaskCard, bool) {
	if o == nil || o.Cards == nil {
		return nil, false
	}
	return o.Cards, true
}

// HasCards returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasCards() bool {
	if o != nil && o.Cards != nil {
		return true
	}

	return false
}

// SetCards gets a reference to the given map[string]ViewTaskCard and assigns it to the Cards field.
func (o *TaskResponseIncluded) SetCards(v map[string]ViewTaskCard) {
	o.Cards = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetColumns() map[string]ViewBoardColumn {
	if o == nil || o.Columns == nil {
		var ret map[string]ViewBoardColumn
		return ret
	}
	return *o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetColumnsOk() (*map[string]ViewBoardColumn, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given map[string]ViewBoardColumn and assigns it to the Columns field.
func (o *TaskResponseIncluded) SetColumns(v map[string]ViewBoardColumn) {
	o.Columns = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetComments() map[string]ViewComment {
	if o == nil || o.Comments == nil {
		var ret map[string]ViewComment
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetCommentsOk() (*map[string]ViewComment, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given map[string]ViewComment and assigns it to the Comments field.
func (o *TaskResponseIncluded) SetComments(v map[string]ViewComment) {
	o.Comments = &v
}

// GetCompanies returns the Companies field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetCompanies() map[string]ViewCompany {
	if o == nil || o.Companies == nil {
		var ret map[string]ViewCompany
		return ret
	}
	return *o.Companies
}

// GetCompaniesOk returns a tuple with the Companies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetCompaniesOk() (*map[string]ViewCompany, bool) {
	if o == nil || o.Companies == nil {
		return nil, false
	}
	return o.Companies, true
}

// HasCompanies returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasCompanies() bool {
	if o != nil && o.Companies != nil {
		return true
	}

	return false
}

// SetCompanies gets a reference to the given map[string]ViewCompany and assigns it to the Companies field.
func (o *TaskResponseIncluded) SetCompanies(v map[string]ViewCompany) {
	o.Companies = &v
}

// GetMilestones returns the Milestones field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetMilestones() map[string]ViewMilestone {
	if o == nil || o.Milestones == nil {
		var ret map[string]ViewMilestone
		return ret
	}
	return *o.Milestones
}

// GetMilestonesOk returns a tuple with the Milestones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetMilestonesOk() (*map[string]ViewMilestone, bool) {
	if o == nil || o.Milestones == nil {
		return nil, false
	}
	return o.Milestones, true
}

// HasMilestones returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasMilestones() bool {
	if o != nil && o.Milestones != nil {
		return true
	}

	return false
}

// SetMilestones gets a reference to the given map[string]ViewMilestone and assigns it to the Milestones field.
func (o *TaskResponseIncluded) SetMilestones(v map[string]ViewMilestone) {
	o.Milestones = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetProjects() map[string]ViewProject {
	if o == nil || o.Projects == nil {
		var ret map[string]ViewProject
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetProjectsOk() (*map[string]ViewProject, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given map[string]ViewProject and assigns it to the Projects field.
func (o *TaskResponseIncluded) SetProjects(v map[string]ViewProject) {
	o.Projects = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetTags() map[string]ViewTag {
	if o == nil || o.Tags == nil {
		var ret map[string]ViewTag
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetTagsOk() (*map[string]ViewTag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]ViewTag and assigns it to the Tags field.
func (o *TaskResponseIncluded) SetTags(v map[string]ViewTag) {
	o.Tags = &v
}

// GetTasklists returns the Tasklists field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetTasklists() map[string]ViewTasklist {
	if o == nil || o.Tasklists == nil {
		var ret map[string]ViewTasklist
		return ret
	}
	return *o.Tasklists
}

// GetTasklistsOk returns a tuple with the Tasklists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetTasklistsOk() (*map[string]ViewTasklist, bool) {
	if o == nil || o.Tasklists == nil {
		return nil, false
	}
	return o.Tasklists, true
}

// HasTasklists returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasTasklists() bool {
	if o != nil && o.Tasklists != nil {
		return true
	}

	return false
}

// SetTasklists gets a reference to the given map[string]ViewTasklist and assigns it to the Tasklists field.
func (o *TaskResponseIncluded) SetTasklists(v map[string]ViewTasklist) {
	o.Tasklists = &v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetTeams() map[string]ViewTeam {
	if o == nil || o.Teams == nil {
		var ret map[string]ViewTeam
		return ret
	}
	return *o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetTeamsOk() (*map[string]ViewTeam, bool) {
	if o == nil || o.Teams == nil {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasTeams() bool {
	if o != nil && o.Teams != nil {
		return true
	}

	return false
}

// SetTeams gets a reference to the given map[string]ViewTeam and assigns it to the Teams field.
func (o *TaskResponseIncluded) SetTeams(v map[string]ViewTeam) {
	o.Teams = &v
}

// GetTimeTotals returns the TimeTotals field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetTimeTotals() map[string]ViewTaskTimeTotals {
	if o == nil || o.TimeTotals == nil {
		var ret map[string]ViewTaskTimeTotals
		return ret
	}
	return *o.TimeTotals
}

// GetTimeTotalsOk returns a tuple with the TimeTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetTimeTotalsOk() (*map[string]ViewTaskTimeTotals, bool) {
	if o == nil || o.TimeTotals == nil {
		return nil, false
	}
	return o.TimeTotals, true
}

// HasTimeTotals returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasTimeTotals() bool {
	if o != nil && o.TimeTotals != nil {
		return true
	}

	return false
}

// SetTimeTotals gets a reference to the given map[string]ViewTaskTimeTotals and assigns it to the TimeTotals field.
func (o *TaskResponseIncluded) SetTimeTotals(v map[string]ViewTaskTimeTotals) {
	o.TimeTotals = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *TaskResponseIncluded) GetUsers() map[string]ViewUser {
	if o == nil || o.Users == nil {
		var ret map[string]ViewUser
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResponseIncluded) GetUsersOk() (*map[string]ViewUser, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *TaskResponseIncluded) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given map[string]ViewUser and assigns it to the Users field.
func (o *TaskResponseIncluded) SetUsers(v map[string]ViewUser) {
	o.Users = &v
}

func (o TaskResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cards != nil {
		toSerialize["cards"] = o.Cards
	}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.Companies != nil {
		toSerialize["companies"] = o.Companies
	}
	if o.Milestones != nil {
		toSerialize["milestones"] = o.Milestones
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Tasklists != nil {
		toSerialize["tasklists"] = o.Tasklists
	}
	if o.Teams != nil {
		toSerialize["teams"] = o.Teams
	}
	if o.TimeTotals != nil {
		toSerialize["timeTotals"] = o.TimeTotals
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableTaskResponseIncluded struct {
	value *TaskResponseIncluded
	isSet bool
}

func (v NullableTaskResponseIncluded) Get() *TaskResponseIncluded {
	return v.value
}

func (v *NullableTaskResponseIncluded) Set(val *TaskResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskResponseIncluded(val *TaskResponseIncluded) *NullableTaskResponseIncluded {
	return &NullableTaskResponseIncluded{value: val, isSet: true}
}

func (v NullableTaskResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


