/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// ProjectsIdRatesJsonRates struct for ProjectsIdRatesJsonRates
type ProjectsIdRatesJsonRates struct {
	ProjectDefault *int32 `json:"project-default,omitempty"`
	Users *ProjectsIdRatesJsonRatesUsers `json:"users,omitempty"`
}

// NewProjectsIdRatesJsonRates instantiates a new ProjectsIdRatesJsonRates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsIdRatesJsonRates() *ProjectsIdRatesJsonRates {
	this := ProjectsIdRatesJsonRates{}
	return &this
}

// NewProjectsIdRatesJsonRatesWithDefaults instantiates a new ProjectsIdRatesJsonRates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsIdRatesJsonRatesWithDefaults() *ProjectsIdRatesJsonRates {
	this := ProjectsIdRatesJsonRates{}
	return &this
}

// GetProjectDefault returns the ProjectDefault field value if set, zero value otherwise.
func (o *ProjectsIdRatesJsonRates) GetProjectDefault() int32 {
	if o == nil || o.ProjectDefault == nil {
		var ret int32
		return ret
	}
	return *o.ProjectDefault
}

// GetProjectDefaultOk returns a tuple with the ProjectDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsIdRatesJsonRates) GetProjectDefaultOk() (*int32, bool) {
	if o == nil || o.ProjectDefault == nil {
		return nil, false
	}
	return o.ProjectDefault, true
}

// HasProjectDefault returns a boolean if a field has been set.
func (o *ProjectsIdRatesJsonRates) HasProjectDefault() bool {
	if o != nil && o.ProjectDefault != nil {
		return true
	}

	return false
}

// SetProjectDefault gets a reference to the given int32 and assigns it to the ProjectDefault field.
func (o *ProjectsIdRatesJsonRates) SetProjectDefault(v int32) {
	o.ProjectDefault = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *ProjectsIdRatesJsonRates) GetUsers() ProjectsIdRatesJsonRatesUsers {
	if o == nil || o.Users == nil {
		var ret ProjectsIdRatesJsonRatesUsers
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsIdRatesJsonRates) GetUsersOk() (*ProjectsIdRatesJsonRatesUsers, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *ProjectsIdRatesJsonRates) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given ProjectsIdRatesJsonRatesUsers and assigns it to the Users field.
func (o *ProjectsIdRatesJsonRates) SetUsers(v ProjectsIdRatesJsonRatesUsers) {
	o.Users = &v
}

func (o ProjectsIdRatesJsonRates) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProjectDefault != nil {
		toSerialize["project-default"] = o.ProjectDefault
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsIdRatesJsonRates struct {
	value *ProjectsIdRatesJsonRates
	isSet bool
}

func (v NullableProjectsIdRatesJsonRates) Get() *ProjectsIdRatesJsonRates {
	return v.value
}

func (v *NullableProjectsIdRatesJsonRates) Set(val *ProjectsIdRatesJsonRates) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsIdRatesJsonRates) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsIdRatesJsonRates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsIdRatesJsonRates(val *ProjectsIdRatesJsonRates) *NullableProjectsIdRatesJsonRates {
	return &NullableProjectsIdRatesJsonRates{value: val, isSet: true}
}

func (v NullableProjectsIdRatesJsonRates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsIdRatesJsonRates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


