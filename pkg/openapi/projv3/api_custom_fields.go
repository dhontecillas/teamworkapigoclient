/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// CustomFieldsApiService CustomFieldsApi service
type CustomFieldsApiService service

type ApiDELETEProjectsApiV3CustomfieldsIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
}


func (r ApiDELETEProjectsApiV3CustomfieldsIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3CustomfieldsIdJsonExecute(r)
}

/*
 * DELETEProjectsApiV3CustomfieldsIdJson Delete an existing custom field
 * Removes a custom field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDELETEProjectsApiV3CustomfieldsIdJsonRequest
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3CustomfieldsIdJson(ctx _context.Context) ApiDELETEProjectsApiV3CustomfieldsIdJsonRequest {
	return ApiDELETEProjectsApiV3CustomfieldsIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3CustomfieldsIdJsonExecute(r ApiDELETEProjectsApiV3CustomfieldsIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.DELETEProjectsApiV3CustomfieldsIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
}


func (r ApiDELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonExecute(r)
}

/*
 * DELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJson Delete an existing project custom field value.
 * Removes a project custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJson(ctx _context.Context) ApiDELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest {
	return ApiDELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonExecute(r ApiDELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.DELETEProjectsApiV3ProjectsProjectIdCustomfieldsIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/customfields/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDELETEProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
}


func (r ApiDELETEProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3TasksTaskIdCustomfieldsIdJsonExecute(r)
}

/*
 * DELETEProjectsApiV3TasksTaskIdCustomfieldsIdJson Delete an existing task custom field value.
 * Removes a task custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDELETEProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3TasksTaskIdCustomfieldsIdJson(ctx _context.Context) ApiDELETEProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest {
	return ApiDELETEProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3TasksTaskIdCustomfieldsIdJsonExecute(r ApiDELETEProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.DELETEProjectsApiV3TasksTaskIdCustomfieldsIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/:taskId/customfields/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3CustomfieldsIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectStatuses *string
	orderMode *string
	orderBy *string
	entities *string
	projectId *int32
	projectHealths *int32
	pageSize *int32
	page *int32
	showDeleted *bool
	onlyStarredProjects *bool
	onlySiteLevel *bool
	matchAllProjectTags *bool
	includeSiteLevel *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsProjects *[]string
}

func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) Entities(entities string) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.entities = &entities
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) Page(page int32) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) OnlySiteLevel(onlySiteLevel bool) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.onlySiteLevel = &onlySiteLevel
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) IncludeSiteLevel(includeSiteLevel bool) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.includeSiteLevel = &includeSiteLevel
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) Include(include []string) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}

func (r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) Execute() (CustomfieldResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3CustomfieldsIdJsonExecute(r)
}

/*
 * GETProjectsApiV3CustomfieldsIdJson Get a custom field by id.
 * This returns all details about an individual custom field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3CustomfieldsIdJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3CustomfieldsIdJson(ctx _context.Context) ApiGETProjectsApiV3CustomfieldsIdJsonRequest {
	return ApiGETProjectsApiV3CustomfieldsIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CustomfieldResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3CustomfieldsIdJsonExecute(r ApiGETProjectsApiV3CustomfieldsIdJsonRequest) (CustomfieldResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomfieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3CustomfieldsIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.entities != nil {
		localVarQueryParams.Add("entities", parameterToString(*r.entities, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlySiteLevel != nil {
		localVarQueryParams.Add("onlySiteLevel", parameterToString(*r.onlySiteLevel, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeSiteLevel != nil {
		localVarQueryParams.Add("includeSiteLevel", parameterToString(*r.includeSiteLevel, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3CustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectStatuses *string
	orderMode *string
	orderBy *string
	entities *string
	projectId *int32
	projectHealths *int32
	pageSize *int32
	page *int32
	showDeleted *bool
	onlyStarredProjects *bool
	onlySiteLevel *bool
	matchAllProjectTags *bool
	includeSiteLevel *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsProjects *[]string
}

func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) Entities(entities string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.entities = &entities
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) Page(page int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) OnlySiteLevel(onlySiteLevel bool) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.onlySiteLevel = &onlySiteLevel
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) IncludeSiteLevel(includeSiteLevel bool) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.includeSiteLevel = &includeSiteLevel
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) Include(include []string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}

func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) Execute() (CustomfieldCustomFieldsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3CustomfieldsJsonExecute(r)
}

/*
 * GETProjectsApiV3CustomfieldsJson Get all custom fields
 * Return all custom fields for the provided filters.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3CustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3CustomfieldsJson(ctx _context.Context) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	return ApiGETProjectsApiV3CustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CustomfieldCustomFieldsResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3CustomfieldsJsonExecute(r ApiGETProjectsApiV3CustomfieldsJsonRequest) (CustomfieldCustomFieldsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomfieldCustomFieldsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3CustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.entities != nil {
		localVarQueryParams.Add("entities", parameterToString(*r.entities, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlySiteLevel != nil {
		localVarQueryParams.Add("onlySiteLevel", parameterToString(*r.onlySiteLevel, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeSiteLevel != nil {
		localVarQueryParams.Add("includeSiteLevel", parameterToString(*r.includeSiteLevel, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
}


func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest) Execute() (ProjectResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonExecute(r)
}

/*
 * GETProjectsApiV3ProjectsProjectIdCustomfieldsIdJson Project custom field value.
 * Return a specific custom field value from a project.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3ProjectsProjectIdCustomfieldsIdJson(ctx _context.Context) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest {
	return ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProjectResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonExecute(r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest) (ProjectResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProjectResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3ProjectsProjectIdCustomfieldsIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/customfields/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	updatedAfter *time.Time
	searchTerm *string
	reportType *string
	reportFormat *string
	projectType *string
	projectStatuses *string
	orderMode *string
	orderBy *string
	minLastActivityDate *string
	maxLastActivityDate *string
	projectHealths *int32
	pageSize *int32
	page *int32
	onlyStarredProjects *bool
	onlyProjectsWithExplicitMembership *bool
	onlyArchivedProjects *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeProjectUserInfo *bool
	includeCustomFields *bool
	includeArchivedProjects *bool
	hideObservedProjects *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsProjectcategories *[]string
	fieldsProjectUpdates *[]string
	fieldsProjectBudgets *[]string
	fieldsPortfolioColumns *[]string
	fieldsPortfolioCards *[]string
	fieldsPortfolioBoards *[]string
	fieldsCustomfields *[]string
	fieldsCustomfieldProjects *[]string
	fieldsCompanies *[]string
}

func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ReportType(reportType string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.reportType = &reportType
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ProjectType(projectType string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.projectType = &projectType
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) MinLastActivityDate(minLastActivityDate string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.minLastActivityDate = &minLastActivityDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) MaxLastActivityDate(maxLastActivityDate string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.maxLastActivityDate = &maxLastActivityDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) Page(page int32) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) OnlyProjectsWithExplicitMembership(onlyProjectsWithExplicitMembership bool) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.onlyProjectsWithExplicitMembership = &onlyProjectsWithExplicitMembership
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) IncludeProjectUserInfo(includeProjectUserInfo bool) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.includeProjectUserInfo = &includeProjectUserInfo
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) HideObservedProjects(hideObservedProjects bool) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.hideObservedProjects = &hideObservedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) Include(include []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsProjectcategories(fieldsProjectcategories []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsProjectcategories = &fieldsProjectcategories
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsProjectUpdates(fieldsProjectUpdates []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsProjectUpdates = &fieldsProjectUpdates
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsProjectBudgets(fieldsProjectBudgets []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsProjectBudgets = &fieldsProjectBudgets
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsPortfolioColumns(fieldsPortfolioColumns []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsPortfolioColumns = &fieldsPortfolioColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsPortfolioCards(fieldsPortfolioCards []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsPortfolioCards = &fieldsPortfolioCards
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsPortfolioBoards(fieldsPortfolioBoards []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsPortfolioBoards = &fieldsPortfolioBoards
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsCustomfields(fieldsCustomfields []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsCustomfields = &fieldsCustomfields
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsCustomfieldProjects(fieldsCustomfieldProjects []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsCustomfieldProjects = &fieldsCustomfieldProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}

func (r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) Execute() (ProjectCustomFieldProjectsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsProjectIdCustomfieldsJsonExecute(r)
}

/*
 * GETProjectsApiV3ProjectsProjectIdCustomfieldsJson Project custom field values.
 * Return all custom field values from a specific project.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3ProjectsProjectIdCustomfieldsJson(ctx _context.Context) ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	return ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProjectCustomFieldProjectsResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3ProjectsProjectIdCustomfieldsJsonExecute(r ApiGETProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) (ProjectCustomFieldProjectsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProjectCustomFieldProjectsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3ProjectsProjectIdCustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/customfields.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportType != nil {
		localVarQueryParams.Add("reportType", parameterToString(*r.reportType, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectType != nil {
		localVarQueryParams.Add("projectType", parameterToString(*r.projectType, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.minLastActivityDate != nil {
		localVarQueryParams.Add("minLastActivityDate", parameterToString(*r.minLastActivityDate, ""))
	}
	if r.maxLastActivityDate != nil {
		localVarQueryParams.Add("maxLastActivityDate", parameterToString(*r.maxLastActivityDate, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyProjectsWithExplicitMembership != nil {
		localVarQueryParams.Add("onlyProjectsWithExplicitMembership", parameterToString(*r.onlyProjectsWithExplicitMembership, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeProjectUserInfo != nil {
		localVarQueryParams.Add("includeProjectUserInfo", parameterToString(*r.includeProjectUserInfo, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.hideObservedProjects != nil {
		localVarQueryParams.Add("hideObservedProjects", parameterToString(*r.hideObservedProjects, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsProjectcategories != nil {
		localVarQueryParams.Add("fields[projectcategories]", parameterToString(*r.fieldsProjectcategories, "csv"))
	}
	if r.fieldsProjectUpdates != nil {
		localVarQueryParams.Add("fields[projectUpdates]", parameterToString(*r.fieldsProjectUpdates, "csv"))
	}
	if r.fieldsProjectBudgets != nil {
		localVarQueryParams.Add("fields[projectBudgets]", parameterToString(*r.fieldsProjectBudgets, "csv"))
	}
	if r.fieldsPortfolioColumns != nil {
		localVarQueryParams.Add("fields[portfolioColumns]", parameterToString(*r.fieldsPortfolioColumns, "csv"))
	}
	if r.fieldsPortfolioCards != nil {
		localVarQueryParams.Add("fields[portfolioCards]", parameterToString(*r.fieldsPortfolioCards, "csv"))
	}
	if r.fieldsPortfolioBoards != nil {
		localVarQueryParams.Add("fields[portfolioBoards]", parameterToString(*r.fieldsPortfolioBoards, "csv"))
	}
	if r.fieldsCustomfields != nil {
		localVarQueryParams.Add("fields[customfields]", parameterToString(*r.fieldsCustomfields, "csv"))
	}
	if r.fieldsCustomfieldProjects != nil {
		localVarQueryParams.Add("fields[customfieldProjects]", parameterToString(*r.fieldsCustomfieldProjects, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
}


func (r ApiGETProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest) Execute() (TaskResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3TasksTaskIdCustomfieldsIdJsonExecute(r)
}

/*
 * GETProjectsApiV3TasksTaskIdCustomfieldsIdJson Task custom field value.
 * Return a specific custom field value from a task.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3TasksTaskIdCustomfieldsIdJson(ctx _context.Context) ApiGETProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest {
	return ApiGETProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TaskResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3TasksTaskIdCustomfieldsIdJsonExecute(r ApiGETProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest) (TaskResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3TasksTaskIdCustomfieldsIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/:taskId/customfields/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskId *int32
	pageSize *int32
	page *int32
	include *[]string
	fieldsTasks *[]string
	fieldsCustomfields *[]string
	fieldsCustomfieldTasks *[]string
	customFieldIds *[]int32
}

func (r ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) TaskId(taskId int32) ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) Page(page int32) ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) Include(include []string) ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) FieldsCustomfields(fieldsCustomfields []string) ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	r.fieldsCustomfields = &fieldsCustomfields
	return r
}
func (r ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) FieldsCustomfieldTasks(fieldsCustomfieldTasks []string) ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	r.fieldsCustomfieldTasks = &fieldsCustomfieldTasks
	return r
}
func (r ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) CustomFieldIds(customFieldIds []int32) ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	r.customFieldIds = &customFieldIds
	return r
}

func (r ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) Execute() (TaskCustomFieldTasksResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3TasksTaskIdCustomfieldsJsonExecute(r)
}

/*
 * GETProjectsApiV3TasksTaskIdCustomfieldsJson Task custom field values.
 * Return all custom field values from a specific task.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3TasksTaskIdCustomfieldsJson(ctx _context.Context) ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	return ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TaskCustomFieldTasksResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3TasksTaskIdCustomfieldsJsonExecute(r ApiGETProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) (TaskCustomFieldTasksResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskCustomFieldTasksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3TasksTaskIdCustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/:taskId/customfields.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsCustomfields != nil {
		localVarQueryParams.Add("fields[customfields]", parameterToString(*r.fieldsCustomfields, "csv"))
	}
	if r.fieldsCustomfieldTasks != nil {
		localVarQueryParams.Add("fields[customfieldTasks]", parameterToString(*r.fieldsCustomfieldTasks, "csv"))
	}
	if r.customFieldIds != nil {
		localVarQueryParams.Add("customFieldIds", parameterToString(*r.customFieldIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHProjectsApiV3CustomfieldsIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	customfieldRequest *CustomfieldRequest
}

func (r ApiPATCHProjectsApiV3CustomfieldsIdJsonRequest) CustomfieldRequest(customfieldRequest CustomfieldRequest) ApiPATCHProjectsApiV3CustomfieldsIdJsonRequest {
	r.customfieldRequest = &customfieldRequest
	return r
}

func (r ApiPATCHProjectsApiV3CustomfieldsIdJsonRequest) Execute() (CustomfieldResponse, *_nethttp.Response, error) {
	return r.ApiService.PATCHProjectsApiV3CustomfieldsIdJsonExecute(r)
}

/*
 * PATCHProjectsApiV3CustomfieldsIdJson Update an existing custom field.
 * Updates an existing custom field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPATCHProjectsApiV3CustomfieldsIdJsonRequest
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3CustomfieldsIdJson(ctx _context.Context) ApiPATCHProjectsApiV3CustomfieldsIdJsonRequest {
	return ApiPATCHProjectsApiV3CustomfieldsIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CustomfieldResponse
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3CustomfieldsIdJsonExecute(r ApiPATCHProjectsApiV3CustomfieldsIdJsonRequest) (CustomfieldResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomfieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.PATCHProjectsApiV3CustomfieldsIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.customfieldRequest == nil {
		return localVarReturnValue, nil, reportError("customfieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customfieldRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectRequest *ProjectRequest
}

func (r ApiPATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest) ProjectRequest(projectRequest ProjectRequest) ApiPATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest {
	r.projectRequest = &projectRequest
	return r
}

func (r ApiPATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest) Execute() (ProjectResponse, *_nethttp.Response, error) {
	return r.ApiService.PATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonExecute(r)
}

/*
 * PATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJson Update an existing project custom field value.
 * Edit a project custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJson(ctx _context.Context) ApiPATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest {
	return ApiPATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProjectResponse
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonExecute(r ApiPATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJsonRequest) (ProjectResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProjectResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.PATCHProjectsApiV3ProjectsProjectIdCustomfieldsIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/customfields/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.projectRequest == nil {
		return localVarReturnValue, nil, reportError("projectRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskRequest *TaskRequest
}

func (r ApiPATCHProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest) TaskRequest(taskRequest TaskRequest) ApiPATCHProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest {
	r.taskRequest = &taskRequest
	return r
}

func (r ApiPATCHProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest) Execute() (TaskResponse, *_nethttp.Response, error) {
	return r.ApiService.PATCHProjectsApiV3TasksTaskIdCustomfieldsIdJsonExecute(r)
}

/*
 * PATCHProjectsApiV3TasksTaskIdCustomfieldsIdJson Update an existing task custom field value.
 * Edit a task custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPATCHProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3TasksTaskIdCustomfieldsIdJson(ctx _context.Context) ApiPATCHProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest {
	return ApiPATCHProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TaskResponse
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3TasksTaskIdCustomfieldsIdJsonExecute(r ApiPATCHProjectsApiV3TasksTaskIdCustomfieldsIdJsonRequest) (TaskResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.PATCHProjectsApiV3TasksTaskIdCustomfieldsIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/:taskId/customfields/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.taskRequest == nil {
		return localVarReturnValue, nil, reportError("taskRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	customfieldBulkDeleteRequest *CustomfieldBulkDeleteRequest
}

func (r ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest) CustomfieldBulkDeleteRequest(customfieldBulkDeleteRequest CustomfieldBulkDeleteRequest) ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest {
	r.customfieldBulkDeleteRequest = &customfieldBulkDeleteRequest
	return r
}

func (r ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3CustomfieldsBulkDeleteJsonExecute(r)
}

/*
 * POSTProjectsApiV3CustomfieldsBulkDeleteJson Delete many custom fields at once
 * Remove multiple custom fields at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3CustomfieldsBulkDeleteJson(ctx _context.Context) ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest {
	return ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3CustomfieldsBulkDeleteJsonExecute(r ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3CustomfieldsBulkDeleteJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields/bulk/delete.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.customfieldBulkDeleteRequest == nil {
		return nil, reportError("customfieldBulkDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customfieldBulkDeleteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3CustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	customfieldRequest *CustomfieldRequest
}

func (r ApiPOSTProjectsApiV3CustomfieldsJsonRequest) CustomfieldRequest(customfieldRequest CustomfieldRequest) ApiPOSTProjectsApiV3CustomfieldsJsonRequest {
	r.customfieldRequest = &customfieldRequest
	return r
}

func (r ApiPOSTProjectsApiV3CustomfieldsJsonRequest) Execute() (CustomfieldResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3CustomfieldsJsonExecute(r)
}

/*
 * POSTProjectsApiV3CustomfieldsJson Create a new custom field
 * Creates a new custom field. The custom field could have a scope at an
installation-level or at a project-level.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3CustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3CustomfieldsJson(ctx _context.Context) ApiPOSTProjectsApiV3CustomfieldsJsonRequest {
	return ApiPOSTProjectsApiV3CustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CustomfieldResponse
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3CustomfieldsJsonExecute(r ApiPOSTProjectsApiV3CustomfieldsJsonRequest) (CustomfieldResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomfieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3CustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.customfieldRequest == nil {
		return localVarReturnValue, nil, reportError("customfieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customfieldRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectBulkDeleteRequest *ProjectBulkDeleteRequest
}

func (r ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJsonRequest) ProjectBulkDeleteRequest(projectBulkDeleteRequest ProjectBulkDeleteRequest) ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJsonRequest {
	r.projectBulkDeleteRequest = &projectBulkDeleteRequest
	return r
}

func (r ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJsonExecute(r)
}

/*
 * POSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJson Delete many project custom fields values at once.
 * Remove many entries of project custom field values at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJson(ctx _context.Context) ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJsonRequest {
	return ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJsonExecute(r ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkDeleteJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/customfields/bulk/delete.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.projectBulkDeleteRequest == nil {
		return nil, reportError("projectBulkDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectBulkDeleteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectBulkUpdateRequest *ProjectBulkUpdateRequest
}

func (r ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJsonRequest) ProjectBulkUpdateRequest(projectBulkUpdateRequest ProjectBulkUpdateRequest) ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJsonRequest {
	r.projectBulkUpdateRequest = &projectBulkUpdateRequest
	return r
}

func (r ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJsonRequest) Execute() (ProjectCustomFieldProjectsResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJsonExecute(r)
}

/*
 * POSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJson Update many project custom field values at once.
 * Edit many entries of project custom field values at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJson(ctx _context.Context) ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJsonRequest {
	return ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProjectCustomFieldProjectsResponse
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJsonExecute(r ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJsonRequest) (ProjectCustomFieldProjectsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProjectCustomFieldProjectsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3ProjectsProjectIdCustomfieldsBulkUpdateJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/customfields/bulk/update.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.projectBulkUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("projectBulkUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectBulkUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectRequest *ProjectRequest
}

func (r ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) ProjectRequest(projectRequest ProjectRequest) ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	r.projectRequest = &projectRequest
	return r
}

func (r ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) Execute() (ProjectResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3ProjectsProjectIdCustomfieldsJsonExecute(r)
}

/*
 * POSTProjectsApiV3ProjectsProjectIdCustomfieldsJson Add project custom field value.
 * Add a project custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsProjectIdCustomfieldsJson(ctx _context.Context) ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest {
	return ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProjectResponse
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsProjectIdCustomfieldsJsonExecute(r ApiPOSTProjectsApiV3ProjectsProjectIdCustomfieldsJsonRequest) (ProjectResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProjectResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3ProjectsProjectIdCustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/:projectId/customfields.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.projectRequest == nil {
		return localVarReturnValue, nil, reportError("projectRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskBulkDeleteRequest *TaskBulkDeleteRequest
}

func (r ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJsonRequest) TaskBulkDeleteRequest(taskBulkDeleteRequest TaskBulkDeleteRequest) ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJsonRequest {
	r.taskBulkDeleteRequest = &taskBulkDeleteRequest
	return r
}

func (r ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJsonExecute(r)
}

/*
 * POSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJson Delete many task custom fields values at once.
 * Remove many entries of task custom field values at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJson(ctx _context.Context) ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJsonRequest {
	return ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJsonExecute(r ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3TasksTaskIdCustomfieldsBulkDeleteJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/:taskId/customfields/bulk/delete.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.taskBulkDeleteRequest == nil {
		return nil, reportError("taskBulkDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskBulkDeleteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskBulkUpdateRequest *TaskBulkUpdateRequest
}

func (r ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJsonRequest) TaskBulkUpdateRequest(taskBulkUpdateRequest TaskBulkUpdateRequest) ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJsonRequest {
	r.taskBulkUpdateRequest = &taskBulkUpdateRequest
	return r
}

func (r ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJsonRequest) Execute() (TaskCustomFieldTasksResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJsonExecute(r)
}

/*
 * POSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJson Update many task custom field values at once.
 * Edit many entries of task custom field values at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJson(ctx _context.Context) ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJsonRequest {
	return ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TaskCustomFieldTasksResponse
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJsonExecute(r ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJsonRequest) (TaskCustomFieldTasksResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskCustomFieldTasksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3TasksTaskIdCustomfieldsBulkUpdateJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/:taskId/customfields/bulk/update.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.taskBulkUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("taskBulkUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskBulkUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskRequest *TaskRequest
}

func (r ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) TaskRequest(taskRequest TaskRequest) ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	r.taskRequest = &taskRequest
	return r
}

func (r ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) Execute() (TaskResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3TasksTaskIdCustomfieldsJsonExecute(r)
}

/*
 * POSTProjectsApiV3TasksTaskIdCustomfieldsJson Add task custom field value.
 * Add a task custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TasksTaskIdCustomfieldsJson(ctx _context.Context) ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsJsonRequest {
	return ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TaskResponse
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TasksTaskIdCustomfieldsJsonExecute(r ApiPOSTProjectsApiV3TasksTaskIdCustomfieldsJsonRequest) (TaskResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3TasksTaskIdCustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/:taskId/customfields.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.taskRequest == nil {
		return localVarReturnValue, nil, reportError("taskRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3CustomfieldsIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	customfieldRequest *CustomfieldRequest
}

func (r ApiPUTProjectsApiV3CustomfieldsIdJsonRequest) CustomfieldRequest(customfieldRequest CustomfieldRequest) ApiPUTProjectsApiV3CustomfieldsIdJsonRequest {
	r.customfieldRequest = &customfieldRequest
	return r
}

func (r ApiPUTProjectsApiV3CustomfieldsIdJsonRequest) Execute() (CustomfieldResponse, *_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3CustomfieldsIdJsonExecute(r)
}

/*
 * PUTProjectsApiV3CustomfieldsIdJson Update an existing custom field.
 * Updates an existing custom field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPUTProjectsApiV3CustomfieldsIdJsonRequest
 */
func (a *CustomFieldsApiService) PUTProjectsApiV3CustomfieldsIdJson(ctx _context.Context) ApiPUTProjectsApiV3CustomfieldsIdJsonRequest {
	return ApiPUTProjectsApiV3CustomfieldsIdJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CustomfieldResponse
 */
func (a *CustomFieldsApiService) PUTProjectsApiV3CustomfieldsIdJsonExecute(r ApiPUTProjectsApiV3CustomfieldsIdJsonRequest) (CustomfieldResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomfieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.PUTProjectsApiV3CustomfieldsIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields/:id.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.customfieldRequest == nil {
		return localVarReturnValue, nil, reportError("customfieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customfieldRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
