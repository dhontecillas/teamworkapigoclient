/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// ProjectsProjIdUpdateJsonUpdate struct for ProjectsProjIdUpdateJsonUpdate
type ProjectsProjIdUpdateJsonUpdate struct {
	// You can add health of the project when updating. It will attach a colour status to the project. Options include: 0 - no health status  1 - need attention - Red 2 - ready to release - yellow 3 - in progress - green
	Health *string `json:"health,omitempty"`
	Text *string `json:"text,omitempty"`
}

// NewProjectsProjIdUpdateJsonUpdate instantiates a new ProjectsProjIdUpdateJsonUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsProjIdUpdateJsonUpdate() *ProjectsProjIdUpdateJsonUpdate {
	this := ProjectsProjIdUpdateJsonUpdate{}
	var health string = ""
	this.Health = &health
	return &this
}

// NewProjectsProjIdUpdateJsonUpdateWithDefaults instantiates a new ProjectsProjIdUpdateJsonUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsProjIdUpdateJsonUpdateWithDefaults() *ProjectsProjIdUpdateJsonUpdate {
	this := ProjectsProjIdUpdateJsonUpdate{}
	var health string = ""
	this.Health = &health
	return &this
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *ProjectsProjIdUpdateJsonUpdate) GetHealth() string {
	if o == nil || o.Health == nil {
		var ret string
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsProjIdUpdateJsonUpdate) GetHealthOk() (*string, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *ProjectsProjIdUpdateJsonUpdate) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given string and assigns it to the Health field.
func (o *ProjectsProjIdUpdateJsonUpdate) SetHealth(v string) {
	o.Health = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ProjectsProjIdUpdateJsonUpdate) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsProjIdUpdateJsonUpdate) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ProjectsProjIdUpdateJsonUpdate) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ProjectsProjIdUpdateJsonUpdate) SetText(v string) {
	o.Text = &v
}

func (o ProjectsProjIdUpdateJsonUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Health != nil {
		toSerialize["health"] = o.Health
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsProjIdUpdateJsonUpdate struct {
	value *ProjectsProjIdUpdateJsonUpdate
	isSet bool
}

func (v NullableProjectsProjIdUpdateJsonUpdate) Get() *ProjectsProjIdUpdateJsonUpdate {
	return v.value
}

func (v *NullableProjectsProjIdUpdateJsonUpdate) Set(val *ProjectsProjIdUpdateJsonUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsProjIdUpdateJsonUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsProjIdUpdateJsonUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsProjIdUpdateJsonUpdate(val *ProjectsProjIdUpdateJsonUpdate) *NullableProjectsProjIdUpdateJsonUpdate {
	return &NullableProjectsProjIdUpdateJsonUpdate{value: val, isSet: true}
}

func (v NullableProjectsProjIdUpdateJsonUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsProjIdUpdateJsonUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


