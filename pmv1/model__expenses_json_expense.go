/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// ExpensesJsonExpense struct for ExpensesJsonExpense
type ExpensesJsonExpense struct {
	Cost *string `json:"cost,omitempty"`
	Date *string `json:"date,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	ProjectId *string `json:"project-id,omitempty"`
}

// NewExpensesJsonExpense instantiates a new ExpensesJsonExpense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpensesJsonExpense() *ExpensesJsonExpense {
	this := ExpensesJsonExpense{}
	return &this
}

// NewExpensesJsonExpenseWithDefaults instantiates a new ExpensesJsonExpense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpensesJsonExpenseWithDefaults() *ExpensesJsonExpense {
	this := ExpensesJsonExpense{}
	return &this
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *ExpensesJsonExpense) GetCost() string {
	if o == nil || o.Cost == nil {
		var ret string
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpensesJsonExpense) GetCostOk() (*string, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *ExpensesJsonExpense) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given string and assigns it to the Cost field.
func (o *ExpensesJsonExpense) SetCost(v string) {
	o.Cost = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ExpensesJsonExpense) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpensesJsonExpense) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ExpensesJsonExpense) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ExpensesJsonExpense) SetDate(v string) {
	o.Date = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExpensesJsonExpense) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpensesJsonExpense) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExpensesJsonExpense) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExpensesJsonExpense) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExpensesJsonExpense) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpensesJsonExpense) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExpensesJsonExpense) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExpensesJsonExpense) SetName(v string) {
	o.Name = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ExpensesJsonExpense) GetProjectId() string {
	if o == nil || o.ProjectId == nil {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpensesJsonExpense) GetProjectIdOk() (*string, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ExpensesJsonExpense) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *ExpensesJsonExpense) SetProjectId(v string) {
	o.ProjectId = &v
}

func (o ExpensesJsonExpense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ProjectId != nil {
		toSerialize["project-id"] = o.ProjectId
	}
	return json.Marshal(toSerialize)
}

type NullableExpensesJsonExpense struct {
	value *ExpensesJsonExpense
	isSet bool
}

func (v NullableExpensesJsonExpense) Get() *ExpensesJsonExpense {
	return v.value
}

func (v *NullableExpensesJsonExpense) Set(val *ExpensesJsonExpense) {
	v.value = val
	v.isSet = true
}

func (v NullableExpensesJsonExpense) IsSet() bool {
	return v.isSet
}

func (v *NullableExpensesJsonExpense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpensesJsonExpense(val *ExpensesJsonExpense) *NullableExpensesJsonExpense {
	return &NullableExpensesJsonExpense{value: val, isSet: true}
}

func (v NullableExpensesJsonExpense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpensesJsonExpense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


