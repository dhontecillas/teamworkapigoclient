/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// ProjectsUpdatesUpdateIdJsonUpdate struct for ProjectsUpdatesUpdateIdJsonUpdate
type ProjectsUpdatesUpdateIdJsonUpdate struct {
	Text *string `json:"text,omitempty"`
}

// NewProjectsUpdatesUpdateIdJsonUpdate instantiates a new ProjectsUpdatesUpdateIdJsonUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsUpdatesUpdateIdJsonUpdate() *ProjectsUpdatesUpdateIdJsonUpdate {
	this := ProjectsUpdatesUpdateIdJsonUpdate{}
	return &this
}

// NewProjectsUpdatesUpdateIdJsonUpdateWithDefaults instantiates a new ProjectsUpdatesUpdateIdJsonUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsUpdatesUpdateIdJsonUpdateWithDefaults() *ProjectsUpdatesUpdateIdJsonUpdate {
	this := ProjectsUpdatesUpdateIdJsonUpdate{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ProjectsUpdatesUpdateIdJsonUpdate) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsUpdatesUpdateIdJsonUpdate) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ProjectsUpdatesUpdateIdJsonUpdate) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ProjectsUpdatesUpdateIdJsonUpdate) SetText(v string) {
	o.Text = &v
}

func (o ProjectsUpdatesUpdateIdJsonUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsUpdatesUpdateIdJsonUpdate struct {
	value *ProjectsUpdatesUpdateIdJsonUpdate
	isSet bool
}

func (v NullableProjectsUpdatesUpdateIdJsonUpdate) Get() *ProjectsUpdatesUpdateIdJsonUpdate {
	return v.value
}

func (v *NullableProjectsUpdatesUpdateIdJsonUpdate) Set(val *ProjectsUpdatesUpdateIdJsonUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsUpdatesUpdateIdJsonUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsUpdatesUpdateIdJsonUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsUpdatesUpdateIdJsonUpdate(val *ProjectsUpdatesUpdateIdJsonUpdate) *NullableProjectsUpdatesUpdateIdJsonUpdate {
	return &NullableProjectsUpdatesUpdateIdJsonUpdate{value: val, isSet: true}
}

func (v NullableProjectsUpdatesUpdateIdJsonUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsUpdatesUpdateIdJsonUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


