/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// AvailabilityResponse Response contains information about a specific availability.
type AvailabilityResponse struct {
	Availability *ViewUserAvailability `json:"availability,omitempty"`
	Included *AvailabilityResponseIncluded `json:"included,omitempty"`
}

// NewAvailabilityResponse instantiates a new AvailabilityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityResponse() *AvailabilityResponse {
	this := AvailabilityResponse{}
	return &this
}

// NewAvailabilityResponseWithDefaults instantiates a new AvailabilityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityResponseWithDefaults() *AvailabilityResponse {
	this := AvailabilityResponse{}
	return &this
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *AvailabilityResponse) GetAvailability() ViewUserAvailability {
	if o == nil || o.Availability == nil {
		var ret ViewUserAvailability
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityResponse) GetAvailabilityOk() (*ViewUserAvailability, bool) {
	if o == nil || o.Availability == nil {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *AvailabilityResponse) HasAvailability() bool {
	if o != nil && o.Availability != nil {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given ViewUserAvailability and assigns it to the Availability field.
func (o *AvailabilityResponse) SetAvailability(v ViewUserAvailability) {
	o.Availability = &v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *AvailabilityResponse) GetIncluded() AvailabilityResponseIncluded {
	if o == nil || o.Included == nil {
		var ret AvailabilityResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityResponse) GetIncludedOk() (*AvailabilityResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *AvailabilityResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given AvailabilityResponseIncluded and assigns it to the Included field.
func (o *AvailabilityResponse) SetIncluded(v AvailabilityResponseIncluded) {
	o.Included = &v
}

func (o AvailabilityResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Availability != nil {
		toSerialize["availability"] = o.Availability
	}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	return json.Marshal(toSerialize)
}

type NullableAvailabilityResponse struct {
	value *AvailabilityResponse
	isSet bool
}

func (v NullableAvailabilityResponse) Get() *AvailabilityResponse {
	return v.value
}

func (v *NullableAvailabilityResponse) Set(val *AvailabilityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityResponse(val *AvailabilityResponse) *NullableAvailabilityResponse {
	return &NullableAvailabilityResponse{value: val, isSet: true}
}

func (v NullableAvailabilityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


