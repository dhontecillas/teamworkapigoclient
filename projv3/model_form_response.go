/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// FormResponse Response contains information about a specific form.
type FormResponse struct {
	Form *ViewForm `json:"form,omitempty"`
	Included *CalendarEventsResponseIncluded `json:"included,omitempty"`
}

// NewFormResponse instantiates a new FormResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormResponse() *FormResponse {
	this := FormResponse{}
	return &this
}

// NewFormResponseWithDefaults instantiates a new FormResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormResponseWithDefaults() *FormResponse {
	this := FormResponse{}
	return &this
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *FormResponse) GetForm() ViewForm {
	if o == nil || o.Form == nil {
		var ret ViewForm
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormResponse) GetFormOk() (*ViewForm, bool) {
	if o == nil || o.Form == nil {
		return nil, false
	}
	return o.Form, true
}

// HasForm returns a boolean if a field has been set.
func (o *FormResponse) HasForm() bool {
	if o != nil && o.Form != nil {
		return true
	}

	return false
}

// SetForm gets a reference to the given ViewForm and assigns it to the Form field.
func (o *FormResponse) SetForm(v ViewForm) {
	o.Form = &v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *FormResponse) GetIncluded() CalendarEventsResponseIncluded {
	if o == nil || o.Included == nil {
		var ret CalendarEventsResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormResponse) GetIncludedOk() (*CalendarEventsResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *FormResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given CalendarEventsResponseIncluded and assigns it to the Included field.
func (o *FormResponse) SetIncluded(v CalendarEventsResponseIncluded) {
	o.Included = &v
}

func (o FormResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Form != nil {
		toSerialize["form"] = o.Form
	}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	return json.Marshal(toSerialize)
}

type NullableFormResponse struct {
	value *FormResponse
	isSet bool
}

func (v NullableFormResponse) Get() *FormResponse {
	return v.value
}

func (v *NullableFormResponse) Set(val *FormResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFormResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFormResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormResponse(val *FormResponse) *NullableFormResponse {
	return &NullableFormResponse{value: val, isSet: true}
}

func (v NullableFormResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


