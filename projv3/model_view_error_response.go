/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewErrorResponse ErrorResponse defines how []Error should be marshaled to JSON.
type ViewErrorResponse struct {
	Errors *[]ViewError `json:"errors,omitempty"`
}

// NewViewErrorResponse instantiates a new ViewErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewErrorResponse() *ViewErrorResponse {
	this := ViewErrorResponse{}
	return &this
}

// NewViewErrorResponseWithDefaults instantiates a new ViewErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewErrorResponseWithDefaults() *ViewErrorResponse {
	this := ViewErrorResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ViewErrorResponse) GetErrors() []ViewError {
	if o == nil || o.Errors == nil {
		var ret []ViewError
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewErrorResponse) GetErrorsOk() (*[]ViewError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ViewErrorResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ViewError and assigns it to the Errors field.
func (o *ViewErrorResponse) SetErrors(v []ViewError) {
	o.Errors = &v
}

func (o ViewErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableViewErrorResponse struct {
	value *ViewErrorResponse
	isSet bool
}

func (v NullableViewErrorResponse) Get() *ViewErrorResponse {
	return v.value
}

func (v *NullableViewErrorResponse) Set(val *ViewErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableViewErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableViewErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewErrorResponse(val *ViewErrorResponse) *NullableViewErrorResponse {
	return &NullableViewErrorResponse{value: val, isSet: true}
}

func (v NullableViewErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


