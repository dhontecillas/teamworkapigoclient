/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// ActivityApiService ActivityApi service
type ActivityApiService service

type ApiGETProjectsApiV3LatestactivityJsonRequest struct {
	ctx _context.Context
	ApiService *ActivityApiService
	updatedAfter *time.Time
	startDate *time.Time
	sort *string
	projectStatuses *string
	projectStatus *string
	orderMode *string
	endDate *time.Time
	activityTypes *string
	projectId *int32
	projectHealths *int32
	pageSize *int32
	page *int32
	maxId *int32
	catchupFromId *int32
	showDeleted *bool
	onlyStarredProjects *bool
	matchAllProjectTags *bool
	includeArchivedProjects *bool
	groupCommentActivityType *bool
	userIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsProjects *[]string
	fieldsCompanies *[]string
	fieldsActivities *[]string
}

func (r ApiGETProjectsApiV3LatestactivityJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) StartDate(startDate time.Time) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) Sort(sort string) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) EndDate(endDate time.Time) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) ActivityTypes(activityTypes string) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.activityTypes = &activityTypes
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) Page(page int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) MaxId(maxId int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.maxId = &maxId
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) CatchupFromId(catchupFromId int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.catchupFromId = &catchupFromId
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) GroupCommentActivityType(groupCommentActivityType bool) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.groupCommentActivityType = &groupCommentActivityType
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) UserIds(userIds []int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) Include(include []string) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3LatestactivityJsonRequest) FieldsActivities(fieldsActivities []string) ApiGETProjectsApiV3LatestactivityJsonRequest {
	r.fieldsActivities = &fieldsActivities
	return r
}

func (r ApiGETProjectsApiV3LatestactivityJsonRequest) Execute() (ActivityActivitiesResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3LatestactivityJsonExecute(r)
}

/*
 * GETProjectsApiV3LatestactivityJson Latest activity (all projects)
 * Lists the latest activity across all projects ordered chronologically. When
you log into Teamwork you will see all the recent activity. This corresponds
to that view in Teamwork. There are parameters you can send in to filter your
results.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3LatestactivityJsonRequest
 */
func (a *ActivityApiService) GETProjectsApiV3LatestactivityJson(ctx _context.Context) ApiGETProjectsApiV3LatestactivityJsonRequest {
	return ApiGETProjectsApiV3LatestactivityJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ActivityActivitiesResponse
 */
func (a *ActivityApiService) GETProjectsApiV3LatestactivityJsonExecute(r ApiGETProjectsApiV3LatestactivityJsonRequest) (ActivityActivitiesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActivityActivitiesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityApiService.GETProjectsApiV3LatestactivityJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/latestactivity.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.activityTypes != nil {
		localVarQueryParams.Add("activityTypes", parameterToString(*r.activityTypes, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.maxId != nil {
		localVarQueryParams.Add("maxId", parameterToString(*r.maxId, ""))
	}
	if r.catchupFromId != nil {
		localVarQueryParams.Add("catchupFromId", parameterToString(*r.catchupFromId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.groupCommentActivityType != nil {
		localVarQueryParams.Add("groupCommentActivityType", parameterToString(*r.groupCommentActivityType, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.fieldsActivities != nil {
		localVarQueryParams.Add("fields[activities]", parameterToString(*r.fieldsActivities, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest struct {
	ctx _context.Context
	ApiService *ActivityApiService
	projectId2 int32
	updatedAfter *time.Time
	startDate *time.Time
	sort *string
	projectStatuses *string
	projectStatus *string
	orderMode *string
	endDate *time.Time
	activityTypes *string
	projectId *int32
	projectHealths *int32
	pageSize *int32
	page *int32
	maxId *int32
	catchupFromId *int32
	showDeleted *bool
	onlyStarredProjects *bool
	matchAllProjectTags *bool
	includeArchivedProjects *bool
	groupCommentActivityType *bool
	userIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsProjects *[]string
	fieldsCompanies *[]string
	fieldsActivities *[]string
}

func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) StartDate(startDate time.Time) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) Sort(sort string) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.sort = &sort
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) EndDate(endDate time.Time) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) ActivityTypes(activityTypes string) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.activityTypes = &activityTypes
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) PageSize(pageSize int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) Page(page int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) MaxId(maxId int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.maxId = &maxId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) CatchupFromId(catchupFromId int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.catchupFromId = &catchupFromId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) GroupCommentActivityType(groupCommentActivityType bool) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.groupCommentActivityType = &groupCommentActivityType
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) UserIds(userIds []int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.userIds = &userIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) Include(include []string) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) FieldsActivities(fieldsActivities []string) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	r.fieldsActivities = &fieldsActivities
	return r
}

func (r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) Execute() (ActivityActivitiesResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsprojectIdLatestactivityExecute(r)
}

/*
 * GETProjectsApiV3ProjectsprojectIdLatestactivity List latest activity for a specific project.
 * Lists the latest activity for a specific project. When you access a project
you will see all the recent activity. This corresponds to that view in
Teamwork. There is some parameters you can send in to filter your results.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId2
 * @return ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest
 */
func (a *ActivityApiService) GETProjectsApiV3ProjectsprojectIdLatestactivity(ctx _context.Context, projectId2 int32) ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest {
	return ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest{
		ApiService: a,
		ctx: ctx,
		projectId2: projectId2,
	}
}

/*
 * Execute executes the request
 * @return ActivityActivitiesResponse
 */
func (a *ActivityApiService) GETProjectsApiV3ProjectsprojectIdLatestactivityExecute(r ApiGETProjectsApiV3ProjectsprojectIdLatestactivityRequest) (ActivityActivitiesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActivityActivitiesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityApiService.GETProjectsApiV3ProjectsprojectIdLatestactivity")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/latestactivity"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId2, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.activityTypes != nil {
		localVarQueryParams.Add("activityTypes", parameterToString(*r.activityTypes, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.maxId != nil {
		localVarQueryParams.Add("maxId", parameterToString(*r.maxId, ""))
	}
	if r.catchupFromId != nil {
		localVarQueryParams.Add("catchupFromId", parameterToString(*r.catchupFromId, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.groupCommentActivityType != nil {
		localVarQueryParams.Add("groupCommentActivityType", parameterToString(*r.groupCommentActivityType, ""))
	}
	if r.userIds != nil {
		localVarQueryParams.Add("userIds", parameterToString(*r.userIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.fieldsActivities != nil {
		localVarQueryParams.Add("fields[activities]", parameterToString(*r.fieldsActivities, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
