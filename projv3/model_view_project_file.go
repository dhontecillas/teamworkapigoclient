/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewProjectFile ProjectFile contains all the information returned from a file.
type ViewProjectFile struct {
	Category *ViewRelationship `json:"category,omitempty"`
	CategoryId *int32 `json:"categoryId,omitempty"`
	ChangeFollowers *ViewUserGroups `json:"changeFollowers,omitempty"`
	CommentFollowers *ViewUserGroups `json:"commentFollowers,omitempty"`
	CommentsCount *int32 `json:"commentsCount,omitempty"`
	CommentsCountRead *int32 `json:"commentsCountRead,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	DeletedBy *int32 `json:"deletedBy,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	DownloadURL *string `json:"downloadURL,omitempty"`
	FileSource *string `json:"fileSource,omitempty"`
	Id *int32 `json:"id,omitempty"`
	IsLocked *bool `json:"isLocked,omitempty"`
	// IsPrivate can have the values 0 for public, 1 for private and 2 for inherited.
	IsPrivate *int32 `json:"isPrivate,omitempty"`
	LatestFileVersionNo *int32 `json:"latestFileVersionNo,omitempty"`
	Lockdown *ViewRelationship `json:"lockdown,omitempty"`
	LockdownId *int32 `json:"lockdownId,omitempty"`
	LockedBy *int32 `json:"lockedBy,omitempty"`
	LockedByUserId *int32 `json:"lockedByUserId,omitempty"`
	LockedDate *string `json:"lockedDate,omitempty"`
	NumLikes *int32 `json:"numLikes,omitempty"`
	OriginalName *string `json:"originalName,omitempty"`
	PreviewURL *string `json:"previewURL,omitempty"`
	Project *ViewRelationship `json:"project,omitempty"`
	ProjectId *int32 `json:"projectId,omitempty"`
	Reactions *ViewReactionsForObject `json:"reactions,omitempty"`
	RelatedItems *ViewRelatedItems `json:"relatedItems,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Status *string `json:"status,omitempty"`
	TagIds *[]int32 `json:"tagIds,omitempty"`
	Tags *[]ViewRelationship `json:"tags,omitempty"`
	ThumbURL *string `json:"thumbURL,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	UploadedBy *int32 `json:"uploadedBy,omitempty"`
	UploadedByUserID *int32 `json:"uploadedByUserID,omitempty"`
	UploadedDate *string `json:"uploadedDate,omitempty"`
	Version *ViewRelationship `json:"version,omitempty"`
	VersionId *int32 `json:"versionId,omitempty"`
	Versions *[]ViewFileversion `json:"versions,omitempty"`
}

// NewViewProjectFile instantiates a new ViewProjectFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewProjectFile() *ViewProjectFile {
	this := ViewProjectFile{}
	return &this
}

// NewViewProjectFileWithDefaults instantiates a new ViewProjectFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewProjectFileWithDefaults() *ViewProjectFile {
	this := ViewProjectFile{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ViewProjectFile) GetCategory() ViewRelationship {
	if o == nil || o.Category == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetCategoryOk() (*ViewRelationship, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ViewProjectFile) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given ViewRelationship and assigns it to the Category field.
func (o *ViewProjectFile) SetCategory(v ViewRelationship) {
	o.Category = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *ViewProjectFile) GetCategoryId() int32 {
	if o == nil || o.CategoryId == nil {
		var ret int32
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetCategoryIdOk() (*int32, bool) {
	if o == nil || o.CategoryId == nil {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *ViewProjectFile) HasCategoryId() bool {
	if o != nil && o.CategoryId != nil {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given int32 and assigns it to the CategoryId field.
func (o *ViewProjectFile) SetCategoryId(v int32) {
	o.CategoryId = &v
}

// GetChangeFollowers returns the ChangeFollowers field value if set, zero value otherwise.
func (o *ViewProjectFile) GetChangeFollowers() ViewUserGroups {
	if o == nil || o.ChangeFollowers == nil {
		var ret ViewUserGroups
		return ret
	}
	return *o.ChangeFollowers
}

// GetChangeFollowersOk returns a tuple with the ChangeFollowers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetChangeFollowersOk() (*ViewUserGroups, bool) {
	if o == nil || o.ChangeFollowers == nil {
		return nil, false
	}
	return o.ChangeFollowers, true
}

// HasChangeFollowers returns a boolean if a field has been set.
func (o *ViewProjectFile) HasChangeFollowers() bool {
	if o != nil && o.ChangeFollowers != nil {
		return true
	}

	return false
}

// SetChangeFollowers gets a reference to the given ViewUserGroups and assigns it to the ChangeFollowers field.
func (o *ViewProjectFile) SetChangeFollowers(v ViewUserGroups) {
	o.ChangeFollowers = &v
}

// GetCommentFollowers returns the CommentFollowers field value if set, zero value otherwise.
func (o *ViewProjectFile) GetCommentFollowers() ViewUserGroups {
	if o == nil || o.CommentFollowers == nil {
		var ret ViewUserGroups
		return ret
	}
	return *o.CommentFollowers
}

// GetCommentFollowersOk returns a tuple with the CommentFollowers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetCommentFollowersOk() (*ViewUserGroups, bool) {
	if o == nil || o.CommentFollowers == nil {
		return nil, false
	}
	return o.CommentFollowers, true
}

// HasCommentFollowers returns a boolean if a field has been set.
func (o *ViewProjectFile) HasCommentFollowers() bool {
	if o != nil && o.CommentFollowers != nil {
		return true
	}

	return false
}

// SetCommentFollowers gets a reference to the given ViewUserGroups and assigns it to the CommentFollowers field.
func (o *ViewProjectFile) SetCommentFollowers(v ViewUserGroups) {
	o.CommentFollowers = &v
}

// GetCommentsCount returns the CommentsCount field value if set, zero value otherwise.
func (o *ViewProjectFile) GetCommentsCount() int32 {
	if o == nil || o.CommentsCount == nil {
		var ret int32
		return ret
	}
	return *o.CommentsCount
}

// GetCommentsCountOk returns a tuple with the CommentsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetCommentsCountOk() (*int32, bool) {
	if o == nil || o.CommentsCount == nil {
		return nil, false
	}
	return o.CommentsCount, true
}

// HasCommentsCount returns a boolean if a field has been set.
func (o *ViewProjectFile) HasCommentsCount() bool {
	if o != nil && o.CommentsCount != nil {
		return true
	}

	return false
}

// SetCommentsCount gets a reference to the given int32 and assigns it to the CommentsCount field.
func (o *ViewProjectFile) SetCommentsCount(v int32) {
	o.CommentsCount = &v
}

// GetCommentsCountRead returns the CommentsCountRead field value if set, zero value otherwise.
func (o *ViewProjectFile) GetCommentsCountRead() int32 {
	if o == nil || o.CommentsCountRead == nil {
		var ret int32
		return ret
	}
	return *o.CommentsCountRead
}

// GetCommentsCountReadOk returns a tuple with the CommentsCountRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetCommentsCountReadOk() (*int32, bool) {
	if o == nil || o.CommentsCountRead == nil {
		return nil, false
	}
	return o.CommentsCountRead, true
}

// HasCommentsCountRead returns a boolean if a field has been set.
func (o *ViewProjectFile) HasCommentsCountRead() bool {
	if o != nil && o.CommentsCountRead != nil {
		return true
	}

	return false
}

// SetCommentsCountRead gets a reference to the given int32 and assigns it to the CommentsCountRead field.
func (o *ViewProjectFile) SetCommentsCountRead(v int32) {
	o.CommentsCountRead = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ViewProjectFile) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ViewProjectFile) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *ViewProjectFile) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *ViewProjectFile) GetDeletedBy() int32 {
	if o == nil || o.DeletedBy == nil {
		var ret int32
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetDeletedByOk() (*int32, bool) {
	if o == nil || o.DeletedBy == nil {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *ViewProjectFile) HasDeletedBy() bool {
	if o != nil && o.DeletedBy != nil {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given int32 and assigns it to the DeletedBy field.
func (o *ViewProjectFile) SetDeletedBy(v int32) {
	o.DeletedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ViewProjectFile) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ViewProjectFile) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ViewProjectFile) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ViewProjectFile) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ViewProjectFile) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ViewProjectFile) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDownloadURL returns the DownloadURL field value if set, zero value otherwise.
func (o *ViewProjectFile) GetDownloadURL() string {
	if o == nil || o.DownloadURL == nil {
		var ret string
		return ret
	}
	return *o.DownloadURL
}

// GetDownloadURLOk returns a tuple with the DownloadURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetDownloadURLOk() (*string, bool) {
	if o == nil || o.DownloadURL == nil {
		return nil, false
	}
	return o.DownloadURL, true
}

// HasDownloadURL returns a boolean if a field has been set.
func (o *ViewProjectFile) HasDownloadURL() bool {
	if o != nil && o.DownloadURL != nil {
		return true
	}

	return false
}

// SetDownloadURL gets a reference to the given string and assigns it to the DownloadURL field.
func (o *ViewProjectFile) SetDownloadURL(v string) {
	o.DownloadURL = &v
}

// GetFileSource returns the FileSource field value if set, zero value otherwise.
func (o *ViewProjectFile) GetFileSource() string {
	if o == nil || o.FileSource == nil {
		var ret string
		return ret
	}
	return *o.FileSource
}

// GetFileSourceOk returns a tuple with the FileSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetFileSourceOk() (*string, bool) {
	if o == nil || o.FileSource == nil {
		return nil, false
	}
	return o.FileSource, true
}

// HasFileSource returns a boolean if a field has been set.
func (o *ViewProjectFile) HasFileSource() bool {
	if o != nil && o.FileSource != nil {
		return true
	}

	return false
}

// SetFileSource gets a reference to the given string and assigns it to the FileSource field.
func (o *ViewProjectFile) SetFileSource(v string) {
	o.FileSource = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewProjectFile) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewProjectFile) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewProjectFile) SetId(v int32) {
	o.Id = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *ViewProjectFile) GetIsLocked() bool {
	if o == nil || o.IsLocked == nil {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetIsLockedOk() (*bool, bool) {
	if o == nil || o.IsLocked == nil {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *ViewProjectFile) HasIsLocked() bool {
	if o != nil && o.IsLocked != nil {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *ViewProjectFile) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *ViewProjectFile) GetIsPrivate() int32 {
	if o == nil || o.IsPrivate == nil {
		var ret int32
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetIsPrivateOk() (*int32, bool) {
	if o == nil || o.IsPrivate == nil {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *ViewProjectFile) HasIsPrivate() bool {
	if o != nil && o.IsPrivate != nil {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given int32 and assigns it to the IsPrivate field.
func (o *ViewProjectFile) SetIsPrivate(v int32) {
	o.IsPrivate = &v
}

// GetLatestFileVersionNo returns the LatestFileVersionNo field value if set, zero value otherwise.
func (o *ViewProjectFile) GetLatestFileVersionNo() int32 {
	if o == nil || o.LatestFileVersionNo == nil {
		var ret int32
		return ret
	}
	return *o.LatestFileVersionNo
}

// GetLatestFileVersionNoOk returns a tuple with the LatestFileVersionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetLatestFileVersionNoOk() (*int32, bool) {
	if o == nil || o.LatestFileVersionNo == nil {
		return nil, false
	}
	return o.LatestFileVersionNo, true
}

// HasLatestFileVersionNo returns a boolean if a field has been set.
func (o *ViewProjectFile) HasLatestFileVersionNo() bool {
	if o != nil && o.LatestFileVersionNo != nil {
		return true
	}

	return false
}

// SetLatestFileVersionNo gets a reference to the given int32 and assigns it to the LatestFileVersionNo field.
func (o *ViewProjectFile) SetLatestFileVersionNo(v int32) {
	o.LatestFileVersionNo = &v
}

// GetLockdown returns the Lockdown field value if set, zero value otherwise.
func (o *ViewProjectFile) GetLockdown() ViewRelationship {
	if o == nil || o.Lockdown == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Lockdown
}

// GetLockdownOk returns a tuple with the Lockdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetLockdownOk() (*ViewRelationship, bool) {
	if o == nil || o.Lockdown == nil {
		return nil, false
	}
	return o.Lockdown, true
}

// HasLockdown returns a boolean if a field has been set.
func (o *ViewProjectFile) HasLockdown() bool {
	if o != nil && o.Lockdown != nil {
		return true
	}

	return false
}

// SetLockdown gets a reference to the given ViewRelationship and assigns it to the Lockdown field.
func (o *ViewProjectFile) SetLockdown(v ViewRelationship) {
	o.Lockdown = &v
}

// GetLockdownId returns the LockdownId field value if set, zero value otherwise.
func (o *ViewProjectFile) GetLockdownId() int32 {
	if o == nil || o.LockdownId == nil {
		var ret int32
		return ret
	}
	return *o.LockdownId
}

// GetLockdownIdOk returns a tuple with the LockdownId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetLockdownIdOk() (*int32, bool) {
	if o == nil || o.LockdownId == nil {
		return nil, false
	}
	return o.LockdownId, true
}

// HasLockdownId returns a boolean if a field has been set.
func (o *ViewProjectFile) HasLockdownId() bool {
	if o != nil && o.LockdownId != nil {
		return true
	}

	return false
}

// SetLockdownId gets a reference to the given int32 and assigns it to the LockdownId field.
func (o *ViewProjectFile) SetLockdownId(v int32) {
	o.LockdownId = &v
}

// GetLockedBy returns the LockedBy field value if set, zero value otherwise.
func (o *ViewProjectFile) GetLockedBy() int32 {
	if o == nil || o.LockedBy == nil {
		var ret int32
		return ret
	}
	return *o.LockedBy
}

// GetLockedByOk returns a tuple with the LockedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetLockedByOk() (*int32, bool) {
	if o == nil || o.LockedBy == nil {
		return nil, false
	}
	return o.LockedBy, true
}

// HasLockedBy returns a boolean if a field has been set.
func (o *ViewProjectFile) HasLockedBy() bool {
	if o != nil && o.LockedBy != nil {
		return true
	}

	return false
}

// SetLockedBy gets a reference to the given int32 and assigns it to the LockedBy field.
func (o *ViewProjectFile) SetLockedBy(v int32) {
	o.LockedBy = &v
}

// GetLockedByUserId returns the LockedByUserId field value if set, zero value otherwise.
func (o *ViewProjectFile) GetLockedByUserId() int32 {
	if o == nil || o.LockedByUserId == nil {
		var ret int32
		return ret
	}
	return *o.LockedByUserId
}

// GetLockedByUserIdOk returns a tuple with the LockedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetLockedByUserIdOk() (*int32, bool) {
	if o == nil || o.LockedByUserId == nil {
		return nil, false
	}
	return o.LockedByUserId, true
}

// HasLockedByUserId returns a boolean if a field has been set.
func (o *ViewProjectFile) HasLockedByUserId() bool {
	if o != nil && o.LockedByUserId != nil {
		return true
	}

	return false
}

// SetLockedByUserId gets a reference to the given int32 and assigns it to the LockedByUserId field.
func (o *ViewProjectFile) SetLockedByUserId(v int32) {
	o.LockedByUserId = &v
}

// GetLockedDate returns the LockedDate field value if set, zero value otherwise.
func (o *ViewProjectFile) GetLockedDate() string {
	if o == nil || o.LockedDate == nil {
		var ret string
		return ret
	}
	return *o.LockedDate
}

// GetLockedDateOk returns a tuple with the LockedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetLockedDateOk() (*string, bool) {
	if o == nil || o.LockedDate == nil {
		return nil, false
	}
	return o.LockedDate, true
}

// HasLockedDate returns a boolean if a field has been set.
func (o *ViewProjectFile) HasLockedDate() bool {
	if o != nil && o.LockedDate != nil {
		return true
	}

	return false
}

// SetLockedDate gets a reference to the given string and assigns it to the LockedDate field.
func (o *ViewProjectFile) SetLockedDate(v string) {
	o.LockedDate = &v
}

// GetNumLikes returns the NumLikes field value if set, zero value otherwise.
func (o *ViewProjectFile) GetNumLikes() int32 {
	if o == nil || o.NumLikes == nil {
		var ret int32
		return ret
	}
	return *o.NumLikes
}

// GetNumLikesOk returns a tuple with the NumLikes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetNumLikesOk() (*int32, bool) {
	if o == nil || o.NumLikes == nil {
		return nil, false
	}
	return o.NumLikes, true
}

// HasNumLikes returns a boolean if a field has been set.
func (o *ViewProjectFile) HasNumLikes() bool {
	if o != nil && o.NumLikes != nil {
		return true
	}

	return false
}

// SetNumLikes gets a reference to the given int32 and assigns it to the NumLikes field.
func (o *ViewProjectFile) SetNumLikes(v int32) {
	o.NumLikes = &v
}

// GetOriginalName returns the OriginalName field value if set, zero value otherwise.
func (o *ViewProjectFile) GetOriginalName() string {
	if o == nil || o.OriginalName == nil {
		var ret string
		return ret
	}
	return *o.OriginalName
}

// GetOriginalNameOk returns a tuple with the OriginalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetOriginalNameOk() (*string, bool) {
	if o == nil || o.OriginalName == nil {
		return nil, false
	}
	return o.OriginalName, true
}

// HasOriginalName returns a boolean if a field has been set.
func (o *ViewProjectFile) HasOriginalName() bool {
	if o != nil && o.OriginalName != nil {
		return true
	}

	return false
}

// SetOriginalName gets a reference to the given string and assigns it to the OriginalName field.
func (o *ViewProjectFile) SetOriginalName(v string) {
	o.OriginalName = &v
}

// GetPreviewURL returns the PreviewURL field value if set, zero value otherwise.
func (o *ViewProjectFile) GetPreviewURL() string {
	if o == nil || o.PreviewURL == nil {
		var ret string
		return ret
	}
	return *o.PreviewURL
}

// GetPreviewURLOk returns a tuple with the PreviewURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetPreviewURLOk() (*string, bool) {
	if o == nil || o.PreviewURL == nil {
		return nil, false
	}
	return o.PreviewURL, true
}

// HasPreviewURL returns a boolean if a field has been set.
func (o *ViewProjectFile) HasPreviewURL() bool {
	if o != nil && o.PreviewURL != nil {
		return true
	}

	return false
}

// SetPreviewURL gets a reference to the given string and assigns it to the PreviewURL field.
func (o *ViewProjectFile) SetPreviewURL(v string) {
	o.PreviewURL = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ViewProjectFile) GetProject() ViewRelationship {
	if o == nil || o.Project == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetProjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ViewProjectFile) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ViewRelationship and assigns it to the Project field.
func (o *ViewProjectFile) SetProject(v ViewRelationship) {
	o.Project = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ViewProjectFile) GetProjectId() int32 {
	if o == nil || o.ProjectId == nil {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetProjectIdOk() (*int32, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ViewProjectFile) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ViewProjectFile) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *ViewProjectFile) GetReactions() ViewReactionsForObject {
	if o == nil || o.Reactions == nil {
		var ret ViewReactionsForObject
		return ret
	}
	return *o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetReactionsOk() (*ViewReactionsForObject, bool) {
	if o == nil || o.Reactions == nil {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *ViewProjectFile) HasReactions() bool {
	if o != nil && o.Reactions != nil {
		return true
	}

	return false
}

// SetReactions gets a reference to the given ViewReactionsForObject and assigns it to the Reactions field.
func (o *ViewProjectFile) SetReactions(v ViewReactionsForObject) {
	o.Reactions = &v
}

// GetRelatedItems returns the RelatedItems field value if set, zero value otherwise.
func (o *ViewProjectFile) GetRelatedItems() ViewRelatedItems {
	if o == nil || o.RelatedItems == nil {
		var ret ViewRelatedItems
		return ret
	}
	return *o.RelatedItems
}

// GetRelatedItemsOk returns a tuple with the RelatedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetRelatedItemsOk() (*ViewRelatedItems, bool) {
	if o == nil || o.RelatedItems == nil {
		return nil, false
	}
	return o.RelatedItems, true
}

// HasRelatedItems returns a boolean if a field has been set.
func (o *ViewProjectFile) HasRelatedItems() bool {
	if o != nil && o.RelatedItems != nil {
		return true
	}

	return false
}

// SetRelatedItems gets a reference to the given ViewRelatedItems and assigns it to the RelatedItems field.
func (o *ViewProjectFile) SetRelatedItems(v ViewRelatedItems) {
	o.RelatedItems = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ViewProjectFile) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ViewProjectFile) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *ViewProjectFile) SetSize(v int32) {
	o.Size = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ViewProjectFile) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ViewProjectFile) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ViewProjectFile) SetStatus(v string) {
	o.Status = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *ViewProjectFile) GetTagIds() []int32 {
	if o == nil || o.TagIds == nil {
		var ret []int32
		return ret
	}
	return *o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetTagIdsOk() (*[]int32, bool) {
	if o == nil || o.TagIds == nil {
		return nil, false
	}
	return o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *ViewProjectFile) HasTagIds() bool {
	if o != nil && o.TagIds != nil {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []int32 and assigns it to the TagIds field.
func (o *ViewProjectFile) SetTagIds(v []int32) {
	o.TagIds = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ViewProjectFile) GetTags() []ViewRelationship {
	if o == nil || o.Tags == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetTagsOk() (*[]ViewRelationship, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ViewProjectFile) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []ViewRelationship and assigns it to the Tags field.
func (o *ViewProjectFile) SetTags(v []ViewRelationship) {
	o.Tags = &v
}

// GetThumbURL returns the ThumbURL field value if set, zero value otherwise.
func (o *ViewProjectFile) GetThumbURL() string {
	if o == nil || o.ThumbURL == nil {
		var ret string
		return ret
	}
	return *o.ThumbURL
}

// GetThumbURLOk returns a tuple with the ThumbURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetThumbURLOk() (*string, bool) {
	if o == nil || o.ThumbURL == nil {
		return nil, false
	}
	return o.ThumbURL, true
}

// HasThumbURL returns a boolean if a field has been set.
func (o *ViewProjectFile) HasThumbURL() bool {
	if o != nil && o.ThumbURL != nil {
		return true
	}

	return false
}

// SetThumbURL gets a reference to the given string and assigns it to the ThumbURL field.
func (o *ViewProjectFile) SetThumbURL(v string) {
	o.ThumbURL = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewProjectFile) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewProjectFile) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewProjectFile) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUploadedBy returns the UploadedBy field value if set, zero value otherwise.
func (o *ViewProjectFile) GetUploadedBy() int32 {
	if o == nil || o.UploadedBy == nil {
		var ret int32
		return ret
	}
	return *o.UploadedBy
}

// GetUploadedByOk returns a tuple with the UploadedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetUploadedByOk() (*int32, bool) {
	if o == nil || o.UploadedBy == nil {
		return nil, false
	}
	return o.UploadedBy, true
}

// HasUploadedBy returns a boolean if a field has been set.
func (o *ViewProjectFile) HasUploadedBy() bool {
	if o != nil && o.UploadedBy != nil {
		return true
	}

	return false
}

// SetUploadedBy gets a reference to the given int32 and assigns it to the UploadedBy field.
func (o *ViewProjectFile) SetUploadedBy(v int32) {
	o.UploadedBy = &v
}

// GetUploadedByUserID returns the UploadedByUserID field value if set, zero value otherwise.
func (o *ViewProjectFile) GetUploadedByUserID() int32 {
	if o == nil || o.UploadedByUserID == nil {
		var ret int32
		return ret
	}
	return *o.UploadedByUserID
}

// GetUploadedByUserIDOk returns a tuple with the UploadedByUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetUploadedByUserIDOk() (*int32, bool) {
	if o == nil || o.UploadedByUserID == nil {
		return nil, false
	}
	return o.UploadedByUserID, true
}

// HasUploadedByUserID returns a boolean if a field has been set.
func (o *ViewProjectFile) HasUploadedByUserID() bool {
	if o != nil && o.UploadedByUserID != nil {
		return true
	}

	return false
}

// SetUploadedByUserID gets a reference to the given int32 and assigns it to the UploadedByUserID field.
func (o *ViewProjectFile) SetUploadedByUserID(v int32) {
	o.UploadedByUserID = &v
}

// GetUploadedDate returns the UploadedDate field value if set, zero value otherwise.
func (o *ViewProjectFile) GetUploadedDate() string {
	if o == nil || o.UploadedDate == nil {
		var ret string
		return ret
	}
	return *o.UploadedDate
}

// GetUploadedDateOk returns a tuple with the UploadedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetUploadedDateOk() (*string, bool) {
	if o == nil || o.UploadedDate == nil {
		return nil, false
	}
	return o.UploadedDate, true
}

// HasUploadedDate returns a boolean if a field has been set.
func (o *ViewProjectFile) HasUploadedDate() bool {
	if o != nil && o.UploadedDate != nil {
		return true
	}

	return false
}

// SetUploadedDate gets a reference to the given string and assigns it to the UploadedDate field.
func (o *ViewProjectFile) SetUploadedDate(v string) {
	o.UploadedDate = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ViewProjectFile) GetVersion() ViewRelationship {
	if o == nil || o.Version == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetVersionOk() (*ViewRelationship, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ViewProjectFile) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given ViewRelationship and assigns it to the Version field.
func (o *ViewProjectFile) SetVersion(v ViewRelationship) {
	o.Version = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *ViewProjectFile) GetVersionId() int32 {
	if o == nil || o.VersionId == nil {
		var ret int32
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetVersionIdOk() (*int32, bool) {
	if o == nil || o.VersionId == nil {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *ViewProjectFile) HasVersionId() bool {
	if o != nil && o.VersionId != nil {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given int32 and assigns it to the VersionId field.
func (o *ViewProjectFile) SetVersionId(v int32) {
	o.VersionId = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *ViewProjectFile) GetVersions() []ViewFileversion {
	if o == nil || o.Versions == nil {
		var ret []ViewFileversion
		return ret
	}
	return *o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectFile) GetVersionsOk() (*[]ViewFileversion, bool) {
	if o == nil || o.Versions == nil {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *ViewProjectFile) HasVersions() bool {
	if o != nil && o.Versions != nil {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []ViewFileversion and assigns it to the Versions field.
func (o *ViewProjectFile) SetVersions(v []ViewFileversion) {
	o.Versions = &v
}

func (o ViewProjectFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.CategoryId != nil {
		toSerialize["categoryId"] = o.CategoryId
	}
	if o.ChangeFollowers != nil {
		toSerialize["changeFollowers"] = o.ChangeFollowers
	}
	if o.CommentFollowers != nil {
		toSerialize["commentFollowers"] = o.CommentFollowers
	}
	if o.CommentsCount != nil {
		toSerialize["commentsCount"] = o.CommentsCount
	}
	if o.CommentsCountRead != nil {
		toSerialize["commentsCountRead"] = o.CommentsCountRead
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if o.DeletedBy != nil {
		toSerialize["deletedBy"] = o.DeletedBy
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.DownloadURL != nil {
		toSerialize["downloadURL"] = o.DownloadURL
	}
	if o.FileSource != nil {
		toSerialize["fileSource"] = o.FileSource
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsLocked != nil {
		toSerialize["isLocked"] = o.IsLocked
	}
	if o.IsPrivate != nil {
		toSerialize["isPrivate"] = o.IsPrivate
	}
	if o.LatestFileVersionNo != nil {
		toSerialize["latestFileVersionNo"] = o.LatestFileVersionNo
	}
	if o.Lockdown != nil {
		toSerialize["lockdown"] = o.Lockdown
	}
	if o.LockdownId != nil {
		toSerialize["lockdownId"] = o.LockdownId
	}
	if o.LockedBy != nil {
		toSerialize["lockedBy"] = o.LockedBy
	}
	if o.LockedByUserId != nil {
		toSerialize["lockedByUserId"] = o.LockedByUserId
	}
	if o.LockedDate != nil {
		toSerialize["lockedDate"] = o.LockedDate
	}
	if o.NumLikes != nil {
		toSerialize["numLikes"] = o.NumLikes
	}
	if o.OriginalName != nil {
		toSerialize["originalName"] = o.OriginalName
	}
	if o.PreviewURL != nil {
		toSerialize["previewURL"] = o.PreviewURL
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.Reactions != nil {
		toSerialize["reactions"] = o.Reactions
	}
	if o.RelatedItems != nil {
		toSerialize["relatedItems"] = o.RelatedItems
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.TagIds != nil {
		toSerialize["tagIds"] = o.TagIds
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.ThumbURL != nil {
		toSerialize["thumbURL"] = o.ThumbURL
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UploadedBy != nil {
		toSerialize["uploadedBy"] = o.UploadedBy
	}
	if o.UploadedByUserID != nil {
		toSerialize["uploadedByUserID"] = o.UploadedByUserID
	}
	if o.UploadedDate != nil {
		toSerialize["uploadedDate"] = o.UploadedDate
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.VersionId != nil {
		toSerialize["versionId"] = o.VersionId
	}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	return json.Marshal(toSerialize)
}

type NullableViewProjectFile struct {
	value *ViewProjectFile
	isSet bool
}

func (v NullableViewProjectFile) Get() *ViewProjectFile {
	return v.value
}

func (v *NullableViewProjectFile) Set(val *ViewProjectFile) {
	v.value = val
	v.isSet = true
}

func (v NullableViewProjectFile) IsSet() bool {
	return v.isSet
}

func (v *NullableViewProjectFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewProjectFile(val *ViewProjectFile) *NullableViewProjectFile {
	return &NullableViewProjectFile{value: val, isSet: true}
}

func (v NullableViewProjectFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewProjectFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


