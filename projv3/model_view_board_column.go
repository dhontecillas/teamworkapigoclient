/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewBoardColumn BoardColumn contains all the information returned from a column.
type ViewBoardColumn struct {
	Color *string `json:"color,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	DefaultTasklist *ViewRelationship `json:"defaultTasklist,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	DisplayOrder *int32 `json:"displayOrder,omitempty"`
	HasTriggers *bool `json:"hasTriggers,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Project *ViewRelationship `json:"project,omitempty"`
	Settings *ViewBoardColumnSettings `json:"settings,omitempty"`
	Sort *string `json:"sort,omitempty"`
	SortOrder *string `json:"sortOrder,omitempty"`
	Stats *ViewColumnStats `json:"stats,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// NewViewBoardColumn instantiates a new ViewBoardColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewBoardColumn() *ViewBoardColumn {
	this := ViewBoardColumn{}
	return &this
}

// NewViewBoardColumnWithDefaults instantiates a new ViewBoardColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewBoardColumnWithDefaults() *ViewBoardColumn {
	this := ViewBoardColumn{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *ViewBoardColumn) SetColor(v string) {
	o.Color = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ViewBoardColumn) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDefaultTasklist returns the DefaultTasklist field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetDefaultTasklist() ViewRelationship {
	if o == nil || o.DefaultTasklist == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.DefaultTasklist
}

// GetDefaultTasklistOk returns a tuple with the DefaultTasklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetDefaultTasklistOk() (*ViewRelationship, bool) {
	if o == nil || o.DefaultTasklist == nil {
		return nil, false
	}
	return o.DefaultTasklist, true
}

// HasDefaultTasklist returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasDefaultTasklist() bool {
	if o != nil && o.DefaultTasklist != nil {
		return true
	}

	return false
}

// SetDefaultTasklist gets a reference to the given ViewRelationship and assigns it to the DefaultTasklist field.
func (o *ViewBoardColumn) SetDefaultTasklist(v ViewRelationship) {
	o.DefaultTasklist = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *ViewBoardColumn) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *ViewBoardColumn) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetDisplayOrder() int32 {
	if o == nil || o.DisplayOrder == nil {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || o.DisplayOrder == nil {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasDisplayOrder() bool {
	if o != nil && o.DisplayOrder != nil {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *ViewBoardColumn) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetHasTriggers returns the HasTriggers field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetHasTriggers() bool {
	if o == nil || o.HasTriggers == nil {
		var ret bool
		return ret
	}
	return *o.HasTriggers
}

// GetHasTriggersOk returns a tuple with the HasTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetHasTriggersOk() (*bool, bool) {
	if o == nil || o.HasTriggers == nil {
		return nil, false
	}
	return o.HasTriggers, true
}

// HasHasTriggers returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasHasTriggers() bool {
	if o != nil && o.HasTriggers != nil {
		return true
	}

	return false
}

// SetHasTriggers gets a reference to the given bool and assigns it to the HasTriggers field.
func (o *ViewBoardColumn) SetHasTriggers(v bool) {
	o.HasTriggers = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewBoardColumn) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewBoardColumn) SetName(v string) {
	o.Name = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetProject() ViewRelationship {
	if o == nil || o.Project == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetProjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ViewRelationship and assigns it to the Project field.
func (o *ViewBoardColumn) SetProject(v ViewRelationship) {
	o.Project = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetSettings() ViewBoardColumnSettings {
	if o == nil || o.Settings == nil {
		var ret ViewBoardColumnSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetSettingsOk() (*ViewBoardColumnSettings, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given ViewBoardColumnSettings and assigns it to the Settings field.
func (o *ViewBoardColumn) SetSettings(v ViewBoardColumnSettings) {
	o.Settings = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetSort() string {
	if o == nil || o.Sort == nil {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetSortOk() (*string, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *ViewBoardColumn) SetSort(v string) {
	o.Sort = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetSortOrder() string {
	if o == nil || o.SortOrder == nil {
		var ret string
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetSortOrderOk() (*string, bool) {
	if o == nil || o.SortOrder == nil {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasSortOrder() bool {
	if o != nil && o.SortOrder != nil {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given string and assigns it to the SortOrder field.
func (o *ViewBoardColumn) SetSortOrder(v string) {
	o.SortOrder = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetStats() ViewColumnStats {
	if o == nil || o.Stats == nil {
		var ret ViewColumnStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetStatsOk() (*ViewColumnStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given ViewColumnStats and assigns it to the Stats field.
func (o *ViewBoardColumn) SetStats(v ViewColumnStats) {
	o.Stats = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewBoardColumn) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoardColumn) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewBoardColumn) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewBoardColumn) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o ViewBoardColumn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.DefaultTasklist != nil {
		toSerialize["defaultTasklist"] = o.DefaultTasklist
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if o.DisplayOrder != nil {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if o.HasTriggers != nil {
		toSerialize["hasTriggers"] = o.HasTriggers
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	if o.SortOrder != nil {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableViewBoardColumn struct {
	value *ViewBoardColumn
	isSet bool
}

func (v NullableViewBoardColumn) Get() *ViewBoardColumn {
	return v.value
}

func (v *NullableViewBoardColumn) Set(val *ViewBoardColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableViewBoardColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableViewBoardColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewBoardColumn(val *ViewBoardColumn) *NullableViewBoardColumn {
	return &NullableViewBoardColumn{value: val, isSet: true}
}

func (v NullableViewBoardColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewBoardColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


