/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// CalendarEventsResponse EventsResponse contains information about a group of calendar events.
type CalendarEventsResponse struct {
	CalendarEvents *[]ViewCalendarEvent `json:"calendarEvents,omitempty"`
	Included *CalendarEventsResponseIncluded `json:"included,omitempty"`
	Meta *ViewMeta `json:"meta,omitempty"`
}

// NewCalendarEventsResponse instantiates a new CalendarEventsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarEventsResponse() *CalendarEventsResponse {
	this := CalendarEventsResponse{}
	return &this
}

// NewCalendarEventsResponseWithDefaults instantiates a new CalendarEventsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarEventsResponseWithDefaults() *CalendarEventsResponse {
	this := CalendarEventsResponse{}
	return &this
}

// GetCalendarEvents returns the CalendarEvents field value if set, zero value otherwise.
func (o *CalendarEventsResponse) GetCalendarEvents() []ViewCalendarEvent {
	if o == nil || o.CalendarEvents == nil {
		var ret []ViewCalendarEvent
		return ret
	}
	return *o.CalendarEvents
}

// GetCalendarEventsOk returns a tuple with the CalendarEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventsResponse) GetCalendarEventsOk() (*[]ViewCalendarEvent, bool) {
	if o == nil || o.CalendarEvents == nil {
		return nil, false
	}
	return o.CalendarEvents, true
}

// HasCalendarEvents returns a boolean if a field has been set.
func (o *CalendarEventsResponse) HasCalendarEvents() bool {
	if o != nil && o.CalendarEvents != nil {
		return true
	}

	return false
}

// SetCalendarEvents gets a reference to the given []ViewCalendarEvent and assigns it to the CalendarEvents field.
func (o *CalendarEventsResponse) SetCalendarEvents(v []ViewCalendarEvent) {
	o.CalendarEvents = &v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *CalendarEventsResponse) GetIncluded() CalendarEventsResponseIncluded {
	if o == nil || o.Included == nil {
		var ret CalendarEventsResponseIncluded
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventsResponse) GetIncludedOk() (*CalendarEventsResponseIncluded, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *CalendarEventsResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given CalendarEventsResponseIncluded and assigns it to the Included field.
func (o *CalendarEventsResponse) SetIncluded(v CalendarEventsResponseIncluded) {
	o.Included = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *CalendarEventsResponse) GetMeta() ViewMeta {
	if o == nil || o.Meta == nil {
		var ret ViewMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventsResponse) GetMetaOk() (*ViewMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *CalendarEventsResponse) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ViewMeta and assigns it to the Meta field.
func (o *CalendarEventsResponse) SetMeta(v ViewMeta) {
	o.Meta = &v
}

func (o CalendarEventsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CalendarEvents != nil {
		toSerialize["calendarEvents"] = o.CalendarEvents
	}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableCalendarEventsResponse struct {
	value *CalendarEventsResponse
	isSet bool
}

func (v NullableCalendarEventsResponse) Get() *CalendarEventsResponse {
	return v.value
}

func (v *NullableCalendarEventsResponse) Set(val *CalendarEventsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarEventsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarEventsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarEventsResponse(val *CalendarEventsResponse) *NullableCalendarEventsResponse {
	return &NullableCalendarEventsResponse{value: val, isSet: true}
}

func (v NullableCalendarEventsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarEventsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


