/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// TasksIdFilesJsonTask struct for TasksIdFilesJsonTask
type TasksIdFilesJsonTask struct {
	Attachments *string `json:"attachments,omitempty"`
	AttachmentsCategoryIds *string `json:"attachmentsCategoryIds,omitempty"`
	PendingFileAttachments *[]string `json:"pendingFileAttachments,omitempty"`
	PendingFileAttachmentsCategoryIds *string `json:"pendingFileAttachmentsCategoryIds,omitempty"`
	RemoveOtherFiles *bool `json:"removeOtherFiles,omitempty"`
	UpdateFiles *bool `json:"updateFiles,omitempty"`
}

// NewTasksIdFilesJsonTask instantiates a new TasksIdFilesJsonTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTasksIdFilesJsonTask() *TasksIdFilesJsonTask {
	this := TasksIdFilesJsonTask{}
	return &this
}

// NewTasksIdFilesJsonTaskWithDefaults instantiates a new TasksIdFilesJsonTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTasksIdFilesJsonTaskWithDefaults() *TasksIdFilesJsonTask {
	this := TasksIdFilesJsonTask{}
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *TasksIdFilesJsonTask) GetAttachments() string {
	if o == nil || o.Attachments == nil {
		var ret string
		return ret
	}
	return *o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TasksIdFilesJsonTask) GetAttachmentsOk() (*string, bool) {
	if o == nil || o.Attachments == nil {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *TasksIdFilesJsonTask) HasAttachments() bool {
	if o != nil && o.Attachments != nil {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given string and assigns it to the Attachments field.
func (o *TasksIdFilesJsonTask) SetAttachments(v string) {
	o.Attachments = &v
}

// GetAttachmentsCategoryIds returns the AttachmentsCategoryIds field value if set, zero value otherwise.
func (o *TasksIdFilesJsonTask) GetAttachmentsCategoryIds() string {
	if o == nil || o.AttachmentsCategoryIds == nil {
		var ret string
		return ret
	}
	return *o.AttachmentsCategoryIds
}

// GetAttachmentsCategoryIdsOk returns a tuple with the AttachmentsCategoryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TasksIdFilesJsonTask) GetAttachmentsCategoryIdsOk() (*string, bool) {
	if o == nil || o.AttachmentsCategoryIds == nil {
		return nil, false
	}
	return o.AttachmentsCategoryIds, true
}

// HasAttachmentsCategoryIds returns a boolean if a field has been set.
func (o *TasksIdFilesJsonTask) HasAttachmentsCategoryIds() bool {
	if o != nil && o.AttachmentsCategoryIds != nil {
		return true
	}

	return false
}

// SetAttachmentsCategoryIds gets a reference to the given string and assigns it to the AttachmentsCategoryIds field.
func (o *TasksIdFilesJsonTask) SetAttachmentsCategoryIds(v string) {
	o.AttachmentsCategoryIds = &v
}

// GetPendingFileAttachments returns the PendingFileAttachments field value if set, zero value otherwise.
func (o *TasksIdFilesJsonTask) GetPendingFileAttachments() []string {
	if o == nil || o.PendingFileAttachments == nil {
		var ret []string
		return ret
	}
	return *o.PendingFileAttachments
}

// GetPendingFileAttachmentsOk returns a tuple with the PendingFileAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TasksIdFilesJsonTask) GetPendingFileAttachmentsOk() (*[]string, bool) {
	if o == nil || o.PendingFileAttachments == nil {
		return nil, false
	}
	return o.PendingFileAttachments, true
}

// HasPendingFileAttachments returns a boolean if a field has been set.
func (o *TasksIdFilesJsonTask) HasPendingFileAttachments() bool {
	if o != nil && o.PendingFileAttachments != nil {
		return true
	}

	return false
}

// SetPendingFileAttachments gets a reference to the given []string and assigns it to the PendingFileAttachments field.
func (o *TasksIdFilesJsonTask) SetPendingFileAttachments(v []string) {
	o.PendingFileAttachments = &v
}

// GetPendingFileAttachmentsCategoryIds returns the PendingFileAttachmentsCategoryIds field value if set, zero value otherwise.
func (o *TasksIdFilesJsonTask) GetPendingFileAttachmentsCategoryIds() string {
	if o == nil || o.PendingFileAttachmentsCategoryIds == nil {
		var ret string
		return ret
	}
	return *o.PendingFileAttachmentsCategoryIds
}

// GetPendingFileAttachmentsCategoryIdsOk returns a tuple with the PendingFileAttachmentsCategoryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TasksIdFilesJsonTask) GetPendingFileAttachmentsCategoryIdsOk() (*string, bool) {
	if o == nil || o.PendingFileAttachmentsCategoryIds == nil {
		return nil, false
	}
	return o.PendingFileAttachmentsCategoryIds, true
}

// HasPendingFileAttachmentsCategoryIds returns a boolean if a field has been set.
func (o *TasksIdFilesJsonTask) HasPendingFileAttachmentsCategoryIds() bool {
	if o != nil && o.PendingFileAttachmentsCategoryIds != nil {
		return true
	}

	return false
}

// SetPendingFileAttachmentsCategoryIds gets a reference to the given string and assigns it to the PendingFileAttachmentsCategoryIds field.
func (o *TasksIdFilesJsonTask) SetPendingFileAttachmentsCategoryIds(v string) {
	o.PendingFileAttachmentsCategoryIds = &v
}

// GetRemoveOtherFiles returns the RemoveOtherFiles field value if set, zero value otherwise.
func (o *TasksIdFilesJsonTask) GetRemoveOtherFiles() bool {
	if o == nil || o.RemoveOtherFiles == nil {
		var ret bool
		return ret
	}
	return *o.RemoveOtherFiles
}

// GetRemoveOtherFilesOk returns a tuple with the RemoveOtherFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TasksIdFilesJsonTask) GetRemoveOtherFilesOk() (*bool, bool) {
	if o == nil || o.RemoveOtherFiles == nil {
		return nil, false
	}
	return o.RemoveOtherFiles, true
}

// HasRemoveOtherFiles returns a boolean if a field has been set.
func (o *TasksIdFilesJsonTask) HasRemoveOtherFiles() bool {
	if o != nil && o.RemoveOtherFiles != nil {
		return true
	}

	return false
}

// SetRemoveOtherFiles gets a reference to the given bool and assigns it to the RemoveOtherFiles field.
func (o *TasksIdFilesJsonTask) SetRemoveOtherFiles(v bool) {
	o.RemoveOtherFiles = &v
}

// GetUpdateFiles returns the UpdateFiles field value if set, zero value otherwise.
func (o *TasksIdFilesJsonTask) GetUpdateFiles() bool {
	if o == nil || o.UpdateFiles == nil {
		var ret bool
		return ret
	}
	return *o.UpdateFiles
}

// GetUpdateFilesOk returns a tuple with the UpdateFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TasksIdFilesJsonTask) GetUpdateFilesOk() (*bool, bool) {
	if o == nil || o.UpdateFiles == nil {
		return nil, false
	}
	return o.UpdateFiles, true
}

// HasUpdateFiles returns a boolean if a field has been set.
func (o *TasksIdFilesJsonTask) HasUpdateFiles() bool {
	if o != nil && o.UpdateFiles != nil {
		return true
	}

	return false
}

// SetUpdateFiles gets a reference to the given bool and assigns it to the UpdateFiles field.
func (o *TasksIdFilesJsonTask) SetUpdateFiles(v bool) {
	o.UpdateFiles = &v
}

func (o TasksIdFilesJsonTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	if o.AttachmentsCategoryIds != nil {
		toSerialize["attachmentsCategoryIds"] = o.AttachmentsCategoryIds
	}
	if o.PendingFileAttachments != nil {
		toSerialize["pendingFileAttachments"] = o.PendingFileAttachments
	}
	if o.PendingFileAttachmentsCategoryIds != nil {
		toSerialize["pendingFileAttachmentsCategoryIds"] = o.PendingFileAttachmentsCategoryIds
	}
	if o.RemoveOtherFiles != nil {
		toSerialize["removeOtherFiles"] = o.RemoveOtherFiles
	}
	if o.UpdateFiles != nil {
		toSerialize["updateFiles"] = o.UpdateFiles
	}
	return json.Marshal(toSerialize)
}

type NullableTasksIdFilesJsonTask struct {
	value *TasksIdFilesJsonTask
	isSet bool
}

func (v NullableTasksIdFilesJsonTask) Get() *TasksIdFilesJsonTask {
	return v.value
}

func (v *NullableTasksIdFilesJsonTask) Set(val *TasksIdFilesJsonTask) {
	v.value = val
	v.isSet = true
}

func (v NullableTasksIdFilesJsonTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTasksIdFilesJsonTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTasksIdFilesJsonTask(val *TasksIdFilesJsonTask) *NullableTasksIdFilesJsonTask {
	return &NullableTasksIdFilesJsonTask{value: val, isSet: true}
}

func (v NullableTasksIdFilesJsonTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTasksIdFilesJsonTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


