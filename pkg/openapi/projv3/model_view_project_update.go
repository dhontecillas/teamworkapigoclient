/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewProjectUpdate ProjectUpdate contains all the information returned from a update.
type ViewProjectUpdate struct {
	Color *string `json:"color,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	CreatedBy *int32 `json:"createdBy,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	DeletedBy *int32 `json:"deletedBy,omitempty"`
	Health *int32 `json:"health,omitempty"`
	Id *int32 `json:"id,omitempty"`
	LikeFromUserIDs *[]int32 `json:"likeFromUserIDs,omitempty"`
	LikeFromUsers *[]ViewRelationship `json:"likeFromUsers,omitempty"`
	Project *ViewRelationship `json:"project,omitempty"`
	ProjectId *int32 `json:"projectId,omitempty"`
	Reactions *ViewReactionsForObject `json:"reactions,omitempty"`
	Text *string `json:"text,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// NewViewProjectUpdate instantiates a new ViewProjectUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewProjectUpdate() *ViewProjectUpdate {
	this := ViewProjectUpdate{}
	return &this
}

// NewViewProjectUpdateWithDefaults instantiates a new ViewProjectUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewProjectUpdateWithDefaults() *ViewProjectUpdate {
	this := ViewProjectUpdate{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *ViewProjectUpdate) SetColor(v string) {
	o.Color = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ViewProjectUpdate) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetCreatedBy() int32 {
	if o == nil || o.CreatedBy == nil {
		var ret int32
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetCreatedByOk() (*int32, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int32 and assigns it to the CreatedBy field.
func (o *ViewProjectUpdate) SetCreatedBy(v int32) {
	o.CreatedBy = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *ViewProjectUpdate) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *ViewProjectUpdate) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetDeletedBy() int32 {
	if o == nil || o.DeletedBy == nil {
		var ret int32
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetDeletedByOk() (*int32, bool) {
	if o == nil || o.DeletedBy == nil {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasDeletedBy() bool {
	if o != nil && o.DeletedBy != nil {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given int32 and assigns it to the DeletedBy field.
func (o *ViewProjectUpdate) SetDeletedBy(v int32) {
	o.DeletedBy = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetHealth() int32 {
	if o == nil || o.Health == nil {
		var ret int32
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetHealthOk() (*int32, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given int32 and assigns it to the Health field.
func (o *ViewProjectUpdate) SetHealth(v int32) {
	o.Health = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewProjectUpdate) SetId(v int32) {
	o.Id = &v
}

// GetLikeFromUserIDs returns the LikeFromUserIDs field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetLikeFromUserIDs() []int32 {
	if o == nil || o.LikeFromUserIDs == nil {
		var ret []int32
		return ret
	}
	return *o.LikeFromUserIDs
}

// GetLikeFromUserIDsOk returns a tuple with the LikeFromUserIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetLikeFromUserIDsOk() (*[]int32, bool) {
	if o == nil || o.LikeFromUserIDs == nil {
		return nil, false
	}
	return o.LikeFromUserIDs, true
}

// HasLikeFromUserIDs returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasLikeFromUserIDs() bool {
	if o != nil && o.LikeFromUserIDs != nil {
		return true
	}

	return false
}

// SetLikeFromUserIDs gets a reference to the given []int32 and assigns it to the LikeFromUserIDs field.
func (o *ViewProjectUpdate) SetLikeFromUserIDs(v []int32) {
	o.LikeFromUserIDs = &v
}

// GetLikeFromUsers returns the LikeFromUsers field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetLikeFromUsers() []ViewRelationship {
	if o == nil || o.LikeFromUsers == nil {
		var ret []ViewRelationship
		return ret
	}
	return *o.LikeFromUsers
}

// GetLikeFromUsersOk returns a tuple with the LikeFromUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetLikeFromUsersOk() (*[]ViewRelationship, bool) {
	if o == nil || o.LikeFromUsers == nil {
		return nil, false
	}
	return o.LikeFromUsers, true
}

// HasLikeFromUsers returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasLikeFromUsers() bool {
	if o != nil && o.LikeFromUsers != nil {
		return true
	}

	return false
}

// SetLikeFromUsers gets a reference to the given []ViewRelationship and assigns it to the LikeFromUsers field.
func (o *ViewProjectUpdate) SetLikeFromUsers(v []ViewRelationship) {
	o.LikeFromUsers = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetProject() ViewRelationship {
	if o == nil || o.Project == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetProjectOk() (*ViewRelationship, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ViewRelationship and assigns it to the Project field.
func (o *ViewProjectUpdate) SetProject(v ViewRelationship) {
	o.Project = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetProjectId() int32 {
	if o == nil || o.ProjectId == nil {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetProjectIdOk() (*int32, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ViewProjectUpdate) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetReactions() ViewReactionsForObject {
	if o == nil || o.Reactions == nil {
		var ret ViewReactionsForObject
		return ret
	}
	return *o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetReactionsOk() (*ViewReactionsForObject, bool) {
	if o == nil || o.Reactions == nil {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasReactions() bool {
	if o != nil && o.Reactions != nil {
		return true
	}

	return false
}

// SetReactions gets a reference to the given ViewReactionsForObject and assigns it to the Reactions field.
func (o *ViewProjectUpdate) SetReactions(v ViewReactionsForObject) {
	o.Reactions = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ViewProjectUpdate) SetText(v string) {
	o.Text = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewProjectUpdate) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProjectUpdate) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewProjectUpdate) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewProjectUpdate) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o ViewProjectUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if o.DeletedBy != nil {
		toSerialize["deletedBy"] = o.DeletedBy
	}
	if o.Health != nil {
		toSerialize["health"] = o.Health
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LikeFromUserIDs != nil {
		toSerialize["likeFromUserIDs"] = o.LikeFromUserIDs
	}
	if o.LikeFromUsers != nil {
		toSerialize["likeFromUsers"] = o.LikeFromUsers
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.Reactions != nil {
		toSerialize["reactions"] = o.Reactions
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableViewProjectUpdate struct {
	value *ViewProjectUpdate
	isSet bool
}

func (v NullableViewProjectUpdate) Get() *ViewProjectUpdate {
	return v.value
}

func (v *NullableViewProjectUpdate) Set(val *ViewProjectUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableViewProjectUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableViewProjectUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewProjectUpdate(val *ViewProjectUpdate) *NullableViewProjectUpdate {
	return &NullableViewProjectUpdate{value: val, isSet: true}
}

func (v NullableViewProjectUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewProjectUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


