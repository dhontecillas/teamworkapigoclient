/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// CommentCommentsResponseIncluded struct for CommentCommentsResponseIncluded
type CommentCommentsResponseIncluded struct {
	Companies *map[string]ViewCompany `json:"companies,omitempty"`
	Files *map[string]ViewProjectFile `json:"files,omitempty"`
	Fileversions *map[string]ViewFileversion `json:"fileversions,omitempty"`
	Links *map[string]ViewLinkItem `json:"links,omitempty"`
	Milestones *map[string]ViewMilestone `json:"milestones,omitempty"`
	Notebooks *map[string]ViewNotebook `json:"notebooks,omitempty"`
	Projects *map[string]ViewProject `json:"projects,omitempty"`
	Tasks *map[string]ViewTask `json:"tasks,omitempty"`
	Users *map[string]ViewUser `json:"users,omitempty"`
}

// NewCommentCommentsResponseIncluded instantiates a new CommentCommentsResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentCommentsResponseIncluded() *CommentCommentsResponseIncluded {
	this := CommentCommentsResponseIncluded{}
	return &this
}

// NewCommentCommentsResponseIncludedWithDefaults instantiates a new CommentCommentsResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentCommentsResponseIncludedWithDefaults() *CommentCommentsResponseIncluded {
	this := CommentCommentsResponseIncluded{}
	return &this
}

// GetCompanies returns the Companies field value if set, zero value otherwise.
func (o *CommentCommentsResponseIncluded) GetCompanies() map[string]ViewCompany {
	if o == nil || o.Companies == nil {
		var ret map[string]ViewCompany
		return ret
	}
	return *o.Companies
}

// GetCompaniesOk returns a tuple with the Companies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentCommentsResponseIncluded) GetCompaniesOk() (*map[string]ViewCompany, bool) {
	if o == nil || o.Companies == nil {
		return nil, false
	}
	return o.Companies, true
}

// HasCompanies returns a boolean if a field has been set.
func (o *CommentCommentsResponseIncluded) HasCompanies() bool {
	if o != nil && o.Companies != nil {
		return true
	}

	return false
}

// SetCompanies gets a reference to the given map[string]ViewCompany and assigns it to the Companies field.
func (o *CommentCommentsResponseIncluded) SetCompanies(v map[string]ViewCompany) {
	o.Companies = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *CommentCommentsResponseIncluded) GetFiles() map[string]ViewProjectFile {
	if o == nil || o.Files == nil {
		var ret map[string]ViewProjectFile
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentCommentsResponseIncluded) GetFilesOk() (*map[string]ViewProjectFile, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *CommentCommentsResponseIncluded) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given map[string]ViewProjectFile and assigns it to the Files field.
func (o *CommentCommentsResponseIncluded) SetFiles(v map[string]ViewProjectFile) {
	o.Files = &v
}

// GetFileversions returns the Fileversions field value if set, zero value otherwise.
func (o *CommentCommentsResponseIncluded) GetFileversions() map[string]ViewFileversion {
	if o == nil || o.Fileversions == nil {
		var ret map[string]ViewFileversion
		return ret
	}
	return *o.Fileversions
}

// GetFileversionsOk returns a tuple with the Fileversions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentCommentsResponseIncluded) GetFileversionsOk() (*map[string]ViewFileversion, bool) {
	if o == nil || o.Fileversions == nil {
		return nil, false
	}
	return o.Fileversions, true
}

// HasFileversions returns a boolean if a field has been set.
func (o *CommentCommentsResponseIncluded) HasFileversions() bool {
	if o != nil && o.Fileversions != nil {
		return true
	}

	return false
}

// SetFileversions gets a reference to the given map[string]ViewFileversion and assigns it to the Fileversions field.
func (o *CommentCommentsResponseIncluded) SetFileversions(v map[string]ViewFileversion) {
	o.Fileversions = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CommentCommentsResponseIncluded) GetLinks() map[string]ViewLinkItem {
	if o == nil || o.Links == nil {
		var ret map[string]ViewLinkItem
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentCommentsResponseIncluded) GetLinksOk() (*map[string]ViewLinkItem, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CommentCommentsResponseIncluded) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]ViewLinkItem and assigns it to the Links field.
func (o *CommentCommentsResponseIncluded) SetLinks(v map[string]ViewLinkItem) {
	o.Links = &v
}

// GetMilestones returns the Milestones field value if set, zero value otherwise.
func (o *CommentCommentsResponseIncluded) GetMilestones() map[string]ViewMilestone {
	if o == nil || o.Milestones == nil {
		var ret map[string]ViewMilestone
		return ret
	}
	return *o.Milestones
}

// GetMilestonesOk returns a tuple with the Milestones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentCommentsResponseIncluded) GetMilestonesOk() (*map[string]ViewMilestone, bool) {
	if o == nil || o.Milestones == nil {
		return nil, false
	}
	return o.Milestones, true
}

// HasMilestones returns a boolean if a field has been set.
func (o *CommentCommentsResponseIncluded) HasMilestones() bool {
	if o != nil && o.Milestones != nil {
		return true
	}

	return false
}

// SetMilestones gets a reference to the given map[string]ViewMilestone and assigns it to the Milestones field.
func (o *CommentCommentsResponseIncluded) SetMilestones(v map[string]ViewMilestone) {
	o.Milestones = &v
}

// GetNotebooks returns the Notebooks field value if set, zero value otherwise.
func (o *CommentCommentsResponseIncluded) GetNotebooks() map[string]ViewNotebook {
	if o == nil || o.Notebooks == nil {
		var ret map[string]ViewNotebook
		return ret
	}
	return *o.Notebooks
}

// GetNotebooksOk returns a tuple with the Notebooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentCommentsResponseIncluded) GetNotebooksOk() (*map[string]ViewNotebook, bool) {
	if o == nil || o.Notebooks == nil {
		return nil, false
	}
	return o.Notebooks, true
}

// HasNotebooks returns a boolean if a field has been set.
func (o *CommentCommentsResponseIncluded) HasNotebooks() bool {
	if o != nil && o.Notebooks != nil {
		return true
	}

	return false
}

// SetNotebooks gets a reference to the given map[string]ViewNotebook and assigns it to the Notebooks field.
func (o *CommentCommentsResponseIncluded) SetNotebooks(v map[string]ViewNotebook) {
	o.Notebooks = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *CommentCommentsResponseIncluded) GetProjects() map[string]ViewProject {
	if o == nil || o.Projects == nil {
		var ret map[string]ViewProject
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentCommentsResponseIncluded) GetProjectsOk() (*map[string]ViewProject, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *CommentCommentsResponseIncluded) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given map[string]ViewProject and assigns it to the Projects field.
func (o *CommentCommentsResponseIncluded) SetProjects(v map[string]ViewProject) {
	o.Projects = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *CommentCommentsResponseIncluded) GetTasks() map[string]ViewTask {
	if o == nil || o.Tasks == nil {
		var ret map[string]ViewTask
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentCommentsResponseIncluded) GetTasksOk() (*map[string]ViewTask, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *CommentCommentsResponseIncluded) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given map[string]ViewTask and assigns it to the Tasks field.
func (o *CommentCommentsResponseIncluded) SetTasks(v map[string]ViewTask) {
	o.Tasks = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *CommentCommentsResponseIncluded) GetUsers() map[string]ViewUser {
	if o == nil || o.Users == nil {
		var ret map[string]ViewUser
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentCommentsResponseIncluded) GetUsersOk() (*map[string]ViewUser, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *CommentCommentsResponseIncluded) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given map[string]ViewUser and assigns it to the Users field.
func (o *CommentCommentsResponseIncluded) SetUsers(v map[string]ViewUser) {
	o.Users = &v
}

func (o CommentCommentsResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Companies != nil {
		toSerialize["companies"] = o.Companies
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.Fileversions != nil {
		toSerialize["fileversions"] = o.Fileversions
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Milestones != nil {
		toSerialize["milestones"] = o.Milestones
	}
	if o.Notebooks != nil {
		toSerialize["notebooks"] = o.Notebooks
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableCommentCommentsResponseIncluded struct {
	value *CommentCommentsResponseIncluded
	isSet bool
}

func (v NullableCommentCommentsResponseIncluded) Get() *CommentCommentsResponseIncluded {
	return v.value
}

func (v *NullableCommentCommentsResponseIncluded) Set(val *CommentCommentsResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentCommentsResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentCommentsResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentCommentsResponseIncluded(val *CommentCommentsResponseIncluded) *NullableCommentCommentsResponseIncluded {
	return &NullableCommentCommentsResponseIncluded{value: val, isSet: true}
}

func (v NullableCommentCommentsResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentCommentsResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


