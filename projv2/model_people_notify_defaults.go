/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv2

import (
	"encoding/json"
)

// PeopleNotifyDefaults struct for PeopleNotifyDefaults
type PeopleNotifyDefaults struct {
	NewTasks *string `json:"newTasks,omitempty"`
}

// NewPeopleNotifyDefaults instantiates a new PeopleNotifyDefaults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleNotifyDefaults() *PeopleNotifyDefaults {
	this := PeopleNotifyDefaults{}
	return &this
}

// NewPeopleNotifyDefaultsWithDefaults instantiates a new PeopleNotifyDefaults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleNotifyDefaultsWithDefaults() *PeopleNotifyDefaults {
	this := PeopleNotifyDefaults{}
	return &this
}

// GetNewTasks returns the NewTasks field value if set, zero value otherwise.
func (o *PeopleNotifyDefaults) GetNewTasks() string {
	if o == nil || o.NewTasks == nil {
		var ret string
		return ret
	}
	return *o.NewTasks
}

// GetNewTasksOk returns a tuple with the NewTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleNotifyDefaults) GetNewTasksOk() (*string, bool) {
	if o == nil || o.NewTasks == nil {
		return nil, false
	}
	return o.NewTasks, true
}

// HasNewTasks returns a boolean if a field has been set.
func (o *PeopleNotifyDefaults) HasNewTasks() bool {
	if o != nil && o.NewTasks != nil {
		return true
	}

	return false
}

// SetNewTasks gets a reference to the given string and assigns it to the NewTasks field.
func (o *PeopleNotifyDefaults) SetNewTasks(v string) {
	o.NewTasks = &v
}

func (o PeopleNotifyDefaults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NewTasks != nil {
		toSerialize["newTasks"] = o.NewTasks
	}
	return json.Marshal(toSerialize)
}

type NullablePeopleNotifyDefaults struct {
	value *PeopleNotifyDefaults
	isSet bool
}

func (v NullablePeopleNotifyDefaults) Get() *PeopleNotifyDefaults {
	return v.value
}

func (v *NullablePeopleNotifyDefaults) Set(val *PeopleNotifyDefaults) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleNotifyDefaults) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleNotifyDefaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleNotifyDefaults(val *PeopleNotifyDefaults) *NullablePeopleNotifyDefaults {
	return &NullablePeopleNotifyDefaults{value: val, isSet: true}
}

func (v NullablePeopleNotifyDefaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleNotifyDefaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


