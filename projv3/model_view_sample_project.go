/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewSampleProject SampleProject contains all the sample project information.
type ViewSampleProject struct {
	CategoryId *int32 `json:"categoryId,omitempty"`
	Code *string `json:"code,omitempty"`
	Content *map[string]interface{} `json:"content,omitempty"`
	Description *string `json:"description,omitempty"`
	Icon *string `json:"icon,omitempty"`
	Id *int32 `json:"id,omitempty"`
	ImagePreview *string `json:"imagePreview,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewViewSampleProject instantiates a new ViewSampleProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewSampleProject() *ViewSampleProject {
	this := ViewSampleProject{}
	return &this
}

// NewViewSampleProjectWithDefaults instantiates a new ViewSampleProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewSampleProjectWithDefaults() *ViewSampleProject {
	this := ViewSampleProject{}
	return &this
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *ViewSampleProject) GetCategoryId() int32 {
	if o == nil || o.CategoryId == nil {
		var ret int32
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewSampleProject) GetCategoryIdOk() (*int32, bool) {
	if o == nil || o.CategoryId == nil {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *ViewSampleProject) HasCategoryId() bool {
	if o != nil && o.CategoryId != nil {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given int32 and assigns it to the CategoryId field.
func (o *ViewSampleProject) SetCategoryId(v int32) {
	o.CategoryId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ViewSampleProject) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewSampleProject) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ViewSampleProject) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ViewSampleProject) SetCode(v string) {
	o.Code = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ViewSampleProject) GetContent() map[string]interface{} {
	if o == nil || o.Content == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewSampleProject) GetContentOk() (*map[string]interface{}, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ViewSampleProject) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given map[string]interface{} and assigns it to the Content field.
func (o *ViewSampleProject) SetContent(v map[string]interface{}) {
	o.Content = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ViewSampleProject) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewSampleProject) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ViewSampleProject) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ViewSampleProject) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ViewSampleProject) GetIcon() string {
	if o == nil || o.Icon == nil {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewSampleProject) GetIconOk() (*string, bool) {
	if o == nil || o.Icon == nil {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ViewSampleProject) HasIcon() bool {
	if o != nil && o.Icon != nil {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *ViewSampleProject) SetIcon(v string) {
	o.Icon = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewSampleProject) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewSampleProject) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewSampleProject) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewSampleProject) SetId(v int32) {
	o.Id = &v
}

// GetImagePreview returns the ImagePreview field value if set, zero value otherwise.
func (o *ViewSampleProject) GetImagePreview() string {
	if o == nil || o.ImagePreview == nil {
		var ret string
		return ret
	}
	return *o.ImagePreview
}

// GetImagePreviewOk returns a tuple with the ImagePreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewSampleProject) GetImagePreviewOk() (*string, bool) {
	if o == nil || o.ImagePreview == nil {
		return nil, false
	}
	return o.ImagePreview, true
}

// HasImagePreview returns a boolean if a field has been set.
func (o *ViewSampleProject) HasImagePreview() bool {
	if o != nil && o.ImagePreview != nil {
		return true
	}

	return false
}

// SetImagePreview gets a reference to the given string and assigns it to the ImagePreview field.
func (o *ViewSampleProject) SetImagePreview(v string) {
	o.ImagePreview = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewSampleProject) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewSampleProject) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewSampleProject) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewSampleProject) SetName(v string) {
	o.Name = &v
}

func (o ViewSampleProject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CategoryId != nil {
		toSerialize["categoryId"] = o.CategoryId
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Icon != nil {
		toSerialize["icon"] = o.Icon
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ImagePreview != nil {
		toSerialize["imagePreview"] = o.ImagePreview
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableViewSampleProject struct {
	value *ViewSampleProject
	isSet bool
}

func (v NullableViewSampleProject) Get() *ViewSampleProject {
	return v.value
}

func (v *NullableViewSampleProject) Set(val *ViewSampleProject) {
	v.value = val
	v.isSet = true
}

func (v NullableViewSampleProject) IsSet() bool {
	return v.isSet
}

func (v *NullableViewSampleProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewSampleProject(val *ViewSampleProject) *NullableViewSampleProject {
	return &NullableViewSampleProject{value: val, isSet: true}
}

func (v NullableViewSampleProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewSampleProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


