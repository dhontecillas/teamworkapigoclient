/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// TaskListsApiService TaskListsApi service
type TaskListsApiService service

type ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest struct {
	ctx _context.Context
	ApiService *TaskListsApiService
	projectId2 int32
	taskDate *string
	startDate *time.Time
	reportFormat *string
	orderMode *string
	orderBy *string
	endDate *time.Time
	commentsOrderMode *string
	tasklistId *int32
	projectId *int32
	onlyCompletedTasks *bool
	isReportDownload *bool
	includeTime *bool
	includeTags *bool
	includePrivateItems *bool
	includeLateTasks *bool
	includeEstimatedTime *bool
	includeCustomFields *bool
	includeCompletedTasks *bool
	includeComments *bool
	includeCommentAvatars *bool
	includeColumns *bool
	includeAnytimeTasks *bool
	includeAllComments *bool
	ignoreStartDates *bool
	groupByTasklists *bool
	tags *[]string
	tagIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) TaskDate(taskDate string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.taskDate = &taskDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) StartDate(startDate time.Time) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) EndDate(endDate time.Time) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) CommentsOrderMode(commentsOrderMode string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.commentsOrderMode = &commentsOrderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) OnlyCompletedTasks(onlyCompletedTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.onlyCompletedTasks = &onlyCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeTime(includeTime bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeTime = &includeTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludePrivateItems(includePrivateItems bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includePrivateItems = &includePrivateItems
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeLateTasks(includeLateTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeLateTasks = &includeLateTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeEstimatedTime(includeEstimatedTime bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeEstimatedTime = &includeEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeComments(includeComments bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeComments = &includeComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeCommentAvatars(includeCommentAvatars bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeCommentAvatars = &includeCommentAvatars
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeColumns(includeColumns bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeColumns = &includeColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeAnytimeTasks(includeAnytimeTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeAnytimeTasks = &includeAnytimeTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IncludeAllComments(includeAllComments bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.includeAllComments = &includeAllComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) GroupByTasklists(groupByTasklists bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.groupByTasklists = &groupByTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) Tags(tags []string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsprojectIdTasklistsCsvExecute(r)
}

/*
 * GETProjectsApiV3ProjectsprojectIdTasklistsCsv Generate tasklist report in CSV format
 * Generates a task list report in CSV format containing all tasks for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId2
 * @return ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsprojectIdTasklistsCsv(ctx _context.Context, projectId2 int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest {
	return ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest{
		ApiService: a,
		ctx: ctx,
		projectId2: projectId2,
	}
}

/*
 * Execute executes the request
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsprojectIdTasklistsCsvExecute(r ApiGETProjectsApiV3ProjectsprojectIdTasklistsCsvRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskListsApiService.GETProjectsApiV3ProjectsprojectIdTasklistsCsv")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/tasklists.csv"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId2, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskDate != nil {
		localVarQueryParams.Add("taskDate", parameterToString(*r.taskDate, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.commentsOrderMode != nil {
		localVarQueryParams.Add("commentsOrderMode", parameterToString(*r.commentsOrderMode, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.onlyCompletedTasks != nil {
		localVarQueryParams.Add("onlyCompletedTasks", parameterToString(*r.onlyCompletedTasks, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTime != nil {
		localVarQueryParams.Add("includeTime", parameterToString(*r.includeTime, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePrivateItems != nil {
		localVarQueryParams.Add("includePrivateItems", parameterToString(*r.includePrivateItems, ""))
	}
	if r.includeLateTasks != nil {
		localVarQueryParams.Add("includeLateTasks", parameterToString(*r.includeLateTasks, ""))
	}
	if r.includeEstimatedTime != nil {
		localVarQueryParams.Add("includeEstimatedTime", parameterToString(*r.includeEstimatedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeComments != nil {
		localVarQueryParams.Add("includeComments", parameterToString(*r.includeComments, ""))
	}
	if r.includeCommentAvatars != nil {
		localVarQueryParams.Add("includeCommentAvatars", parameterToString(*r.includeCommentAvatars, ""))
	}
	if r.includeColumns != nil {
		localVarQueryParams.Add("includeColumns", parameterToString(*r.includeColumns, ""))
	}
	if r.includeAnytimeTasks != nil {
		localVarQueryParams.Add("includeAnytimeTasks", parameterToString(*r.includeAnytimeTasks, ""))
	}
	if r.includeAllComments != nil {
		localVarQueryParams.Add("includeAllComments", parameterToString(*r.includeAllComments, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.groupByTasklists != nil {
		localVarQueryParams.Add("groupByTasklists", parameterToString(*r.groupByTasklists, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest struct {
	ctx _context.Context
	ApiService *TaskListsApiService
	projectId2 int32
	taskDate *string
	startDate *time.Time
	reportFormat *string
	orderMode *string
	orderBy *string
	endDate *time.Time
	commentsOrderMode *string
	tasklistId *int32
	projectId *int32
	onlyCompletedTasks *bool
	isReportDownload *bool
	includeTime *bool
	includeTags *bool
	includePrivateItems *bool
	includeLateTasks *bool
	includeEstimatedTime *bool
	includeCustomFields *bool
	includeCompletedTasks *bool
	includeComments *bool
	includeCommentAvatars *bool
	includeColumns *bool
	includeAnytimeTasks *bool
	includeAllComments *bool
	ignoreStartDates *bool
	groupByTasklists *bool
	tags *[]string
	tagIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) TaskDate(taskDate string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.taskDate = &taskDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) StartDate(startDate time.Time) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) EndDate(endDate time.Time) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) CommentsOrderMode(commentsOrderMode string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.commentsOrderMode = &commentsOrderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) OnlyCompletedTasks(onlyCompletedTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.onlyCompletedTasks = &onlyCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeTime(includeTime bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeTime = &includeTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludePrivateItems(includePrivateItems bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includePrivateItems = &includePrivateItems
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeLateTasks(includeLateTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeLateTasks = &includeLateTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeEstimatedTime(includeEstimatedTime bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeEstimatedTime = &includeEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeComments(includeComments bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeComments = &includeComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeCommentAvatars(includeCommentAvatars bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeCommentAvatars = &includeCommentAvatars
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeColumns(includeColumns bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeColumns = &includeColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeAnytimeTasks(includeAnytimeTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeAnytimeTasks = &includeAnytimeTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IncludeAllComments(includeAllComments bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.includeAllComments = &includeAllComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) GroupByTasklists(groupByTasklists bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.groupByTasklists = &groupByTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) Tags(tags []string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsprojectIdTasklistsHtmlExecute(r)
}

/*
 * GETProjectsApiV3ProjectsprojectIdTasklistsHtml Generate tasklist report in HTML format
 * Generates a task list report in HTML format containing all tasks for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId2
 * @return ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsprojectIdTasklistsHtml(ctx _context.Context, projectId2 int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest {
	return ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest{
		ApiService: a,
		ctx: ctx,
		projectId2: projectId2,
	}
}

/*
 * Execute executes the request
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsprojectIdTasklistsHtmlExecute(r ApiGETProjectsApiV3ProjectsprojectIdTasklistsHtmlRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskListsApiService.GETProjectsApiV3ProjectsprojectIdTasklistsHtml")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/tasklists.html"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId2, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskDate != nil {
		localVarQueryParams.Add("taskDate", parameterToString(*r.taskDate, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.commentsOrderMode != nil {
		localVarQueryParams.Add("commentsOrderMode", parameterToString(*r.commentsOrderMode, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.onlyCompletedTasks != nil {
		localVarQueryParams.Add("onlyCompletedTasks", parameterToString(*r.onlyCompletedTasks, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTime != nil {
		localVarQueryParams.Add("includeTime", parameterToString(*r.includeTime, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePrivateItems != nil {
		localVarQueryParams.Add("includePrivateItems", parameterToString(*r.includePrivateItems, ""))
	}
	if r.includeLateTasks != nil {
		localVarQueryParams.Add("includeLateTasks", parameterToString(*r.includeLateTasks, ""))
	}
	if r.includeEstimatedTime != nil {
		localVarQueryParams.Add("includeEstimatedTime", parameterToString(*r.includeEstimatedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeComments != nil {
		localVarQueryParams.Add("includeComments", parameterToString(*r.includeComments, ""))
	}
	if r.includeCommentAvatars != nil {
		localVarQueryParams.Add("includeCommentAvatars", parameterToString(*r.includeCommentAvatars, ""))
	}
	if r.includeColumns != nil {
		localVarQueryParams.Add("includeColumns", parameterToString(*r.includeColumns, ""))
	}
	if r.includeAnytimeTasks != nil {
		localVarQueryParams.Add("includeAnytimeTasks", parameterToString(*r.includeAnytimeTasks, ""))
	}
	if r.includeAllComments != nil {
		localVarQueryParams.Add("includeAllComments", parameterToString(*r.includeAllComments, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.groupByTasklists != nil {
		localVarQueryParams.Add("groupByTasklists", parameterToString(*r.groupByTasklists, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest struct {
	ctx _context.Context
	ApiService *TaskListsApiService
	projectId2 int32
	taskDate *string
	startDate *time.Time
	reportFormat *string
	orderMode *string
	orderBy *string
	endDate *time.Time
	commentsOrderMode *string
	tasklistId *int32
	projectId *int32
	onlyCompletedTasks *bool
	isReportDownload *bool
	includeTime *bool
	includeTags *bool
	includePrivateItems *bool
	includeLateTasks *bool
	includeEstimatedTime *bool
	includeCustomFields *bool
	includeCompletedTasks *bool
	includeComments *bool
	includeCommentAvatars *bool
	includeColumns *bool
	includeAnytimeTasks *bool
	includeAllComments *bool
	ignoreStartDates *bool
	groupByTasklists *bool
	tags *[]string
	tagIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) TaskDate(taskDate string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.taskDate = &taskDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) StartDate(startDate time.Time) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) EndDate(endDate time.Time) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) CommentsOrderMode(commentsOrderMode string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.commentsOrderMode = &commentsOrderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) OnlyCompletedTasks(onlyCompletedTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.onlyCompletedTasks = &onlyCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeTime(includeTime bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeTime = &includeTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludePrivateItems(includePrivateItems bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includePrivateItems = &includePrivateItems
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeLateTasks(includeLateTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeLateTasks = &includeLateTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeEstimatedTime(includeEstimatedTime bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeEstimatedTime = &includeEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeComments(includeComments bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeComments = &includeComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeCommentAvatars(includeCommentAvatars bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeCommentAvatars = &includeCommentAvatars
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeColumns(includeColumns bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeColumns = &includeColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeAnytimeTasks(includeAnytimeTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeAnytimeTasks = &includeAnytimeTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IncludeAllComments(includeAllComments bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.includeAllComments = &includeAllComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) GroupByTasklists(groupByTasklists bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.groupByTasklists = &groupByTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) Tags(tags []string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsprojectIdTasklistsPdfExecute(r)
}

/*
 * GETProjectsApiV3ProjectsprojectIdTasklistsPdf Generate tasklist report in PDF format
 * Generates a task list report in PDF format containing all tasks for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId2
 * @return ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsprojectIdTasklistsPdf(ctx _context.Context, projectId2 int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest {
	return ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest{
		ApiService: a,
		ctx: ctx,
		projectId2: projectId2,
	}
}

/*
 * Execute executes the request
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsprojectIdTasklistsPdfExecute(r ApiGETProjectsApiV3ProjectsprojectIdTasklistsPdfRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskListsApiService.GETProjectsApiV3ProjectsprojectIdTasklistsPdf")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/tasklists.pdf"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId2, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskDate != nil {
		localVarQueryParams.Add("taskDate", parameterToString(*r.taskDate, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.commentsOrderMode != nil {
		localVarQueryParams.Add("commentsOrderMode", parameterToString(*r.commentsOrderMode, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.onlyCompletedTasks != nil {
		localVarQueryParams.Add("onlyCompletedTasks", parameterToString(*r.onlyCompletedTasks, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTime != nil {
		localVarQueryParams.Add("includeTime", parameterToString(*r.includeTime, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePrivateItems != nil {
		localVarQueryParams.Add("includePrivateItems", parameterToString(*r.includePrivateItems, ""))
	}
	if r.includeLateTasks != nil {
		localVarQueryParams.Add("includeLateTasks", parameterToString(*r.includeLateTasks, ""))
	}
	if r.includeEstimatedTime != nil {
		localVarQueryParams.Add("includeEstimatedTime", parameterToString(*r.includeEstimatedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeComments != nil {
		localVarQueryParams.Add("includeComments", parameterToString(*r.includeComments, ""))
	}
	if r.includeCommentAvatars != nil {
		localVarQueryParams.Add("includeCommentAvatars", parameterToString(*r.includeCommentAvatars, ""))
	}
	if r.includeColumns != nil {
		localVarQueryParams.Add("includeColumns", parameterToString(*r.includeColumns, ""))
	}
	if r.includeAnytimeTasks != nil {
		localVarQueryParams.Add("includeAnytimeTasks", parameterToString(*r.includeAnytimeTasks, ""))
	}
	if r.includeAllComments != nil {
		localVarQueryParams.Add("includeAllComments", parameterToString(*r.includeAllComments, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.groupByTasklists != nil {
		localVarQueryParams.Add("groupByTasklists", parameterToString(*r.groupByTasklists, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/pdf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest struct {
	ctx _context.Context
	ApiService *TaskListsApiService
	projectId2 int32
	taskDate *string
	startDate *time.Time
	reportFormat *string
	orderMode *string
	orderBy *string
	endDate *time.Time
	commentsOrderMode *string
	tasklistId *int32
	projectId *int32
	onlyCompletedTasks *bool
	isReportDownload *bool
	includeTime *bool
	includeTags *bool
	includePrivateItems *bool
	includeLateTasks *bool
	includeEstimatedTime *bool
	includeCustomFields *bool
	includeCompletedTasks *bool
	includeComments *bool
	includeCommentAvatars *bool
	includeColumns *bool
	includeAnytimeTasks *bool
	includeAllComments *bool
	ignoreStartDates *bool
	groupByTasklists *bool
	tags *[]string
	tagIds *[]int32
	assignedToUserIds *[]int32
	assignedToTeamIds *[]int32
	assignedToCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) TaskDate(taskDate string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.taskDate = &taskDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) StartDate(startDate time.Time) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) EndDate(endDate time.Time) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) CommentsOrderMode(commentsOrderMode string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.commentsOrderMode = &commentsOrderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) TasklistId(tasklistId int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.tasklistId = &tasklistId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) ProjectId(projectId int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) OnlyCompletedTasks(onlyCompletedTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.onlyCompletedTasks = &onlyCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeTime(includeTime bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeTime = &includeTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeTags(includeTags bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeTags = &includeTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludePrivateItems(includePrivateItems bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includePrivateItems = &includePrivateItems
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeLateTasks(includeLateTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeLateTasks = &includeLateTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeEstimatedTime(includeEstimatedTime bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeEstimatedTime = &includeEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeComments(includeComments bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeComments = &includeComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeCommentAvatars(includeCommentAvatars bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeCommentAvatars = &includeCommentAvatars
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeColumns(includeColumns bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeColumns = &includeColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeAnytimeTasks(includeAnytimeTasks bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeAnytimeTasks = &includeAnytimeTasks
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IncludeAllComments(includeAllComments bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.includeAllComments = &includeAllComments
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) IgnoreStartDates(ignoreStartDates bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.ignoreStartDates = &ignoreStartDates
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) GroupByTasklists(groupByTasklists bool) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.groupByTasklists = &groupByTasklists
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) Tags(tags []string) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.tags = &tags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) AssignedToUserIds(assignedToUserIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.assignedToUserIds = &assignedToUserIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) AssignedToTeamIds(assignedToTeamIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.assignedToTeamIds = &assignedToTeamIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) AssignedToCompanyIds(assignedToCompanyIds []int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	r.assignedToCompanyIds = &assignedToCompanyIds
	return r
}

func (r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsprojectIdTasklistsXlsxExecute(r)
}

/*
 * GETProjectsApiV3ProjectsprojectIdTasklistsXlsx Generate tasklist report in XLSX format
 * Generates a task list report in XLSX format containing all tasks for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId2
 * @return ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsprojectIdTasklistsXlsx(ctx _context.Context, projectId2 int32) ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest {
	return ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest{
		ApiService: a,
		ctx: ctx,
		projectId2: projectId2,
	}
}

/*
 * Execute executes the request
 */
func (a *TaskListsApiService) GETProjectsApiV3ProjectsprojectIdTasklistsXlsxExecute(r ApiGETProjectsApiV3ProjectsprojectIdTasklistsXlsxRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskListsApiService.GETProjectsApiV3ProjectsprojectIdTasklistsXlsx")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/tasklists.xlsx"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId2, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskDate != nil {
		localVarQueryParams.Add("taskDate", parameterToString(*r.taskDate, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.commentsOrderMode != nil {
		localVarQueryParams.Add("commentsOrderMode", parameterToString(*r.commentsOrderMode, ""))
	}
	if r.tasklistId != nil {
		localVarQueryParams.Add("tasklistId", parameterToString(*r.tasklistId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.onlyCompletedTasks != nil {
		localVarQueryParams.Add("onlyCompletedTasks", parameterToString(*r.onlyCompletedTasks, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTime != nil {
		localVarQueryParams.Add("includeTime", parameterToString(*r.includeTime, ""))
	}
	if r.includeTags != nil {
		localVarQueryParams.Add("includeTags", parameterToString(*r.includeTags, ""))
	}
	if r.includePrivateItems != nil {
		localVarQueryParams.Add("includePrivateItems", parameterToString(*r.includePrivateItems, ""))
	}
	if r.includeLateTasks != nil {
		localVarQueryParams.Add("includeLateTasks", parameterToString(*r.includeLateTasks, ""))
	}
	if r.includeEstimatedTime != nil {
		localVarQueryParams.Add("includeEstimatedTime", parameterToString(*r.includeEstimatedTime, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeComments != nil {
		localVarQueryParams.Add("includeComments", parameterToString(*r.includeComments, ""))
	}
	if r.includeCommentAvatars != nil {
		localVarQueryParams.Add("includeCommentAvatars", parameterToString(*r.includeCommentAvatars, ""))
	}
	if r.includeColumns != nil {
		localVarQueryParams.Add("includeColumns", parameterToString(*r.includeColumns, ""))
	}
	if r.includeAnytimeTasks != nil {
		localVarQueryParams.Add("includeAnytimeTasks", parameterToString(*r.includeAnytimeTasks, ""))
	}
	if r.includeAllComments != nil {
		localVarQueryParams.Add("includeAllComments", parameterToString(*r.includeAllComments, ""))
	}
	if r.ignoreStartDates != nil {
		localVarQueryParams.Add("ignoreStartDates", parameterToString(*r.ignoreStartDates, ""))
	}
	if r.groupByTasklists != nil {
		localVarQueryParams.Add("groupByTasklists", parameterToString(*r.groupByTasklists, ""))
	}
	if r.tags != nil {
		localVarQueryParams.Add("tags", parameterToString(*r.tags, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.assignedToUserIds != nil {
		localVarQueryParams.Add("assignedToUserIds", parameterToString(*r.assignedToUserIds, "csv"))
	}
	if r.assignedToTeamIds != nil {
		localVarQueryParams.Add("assignedToTeamIds", parameterToString(*r.assignedToTeamIds, "csv"))
	}
	if r.assignedToCompanyIds != nil {
		localVarQueryParams.Add("assignedToCompanyIds", parameterToString(*r.assignedToCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
