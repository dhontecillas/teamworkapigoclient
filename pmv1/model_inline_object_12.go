/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineObject12 struct for InlineObject12
type InlineObject12 struct {
	Eventtype *EventtypesJsonEventtype `json:"eventtype,omitempty"`
}

// NewInlineObject12 instantiates a new InlineObject12 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject12() *InlineObject12 {
	this := InlineObject12{}
	return &this
}

// NewInlineObject12WithDefaults instantiates a new InlineObject12 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject12WithDefaults() *InlineObject12 {
	this := InlineObject12{}
	return &this
}

// GetEventtype returns the Eventtype field value if set, zero value otherwise.
func (o *InlineObject12) GetEventtype() EventtypesJsonEventtype {
	if o == nil || o.Eventtype == nil {
		var ret EventtypesJsonEventtype
		return ret
	}
	return *o.Eventtype
}

// GetEventtypeOk returns a tuple with the Eventtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject12) GetEventtypeOk() (*EventtypesJsonEventtype, bool) {
	if o == nil || o.Eventtype == nil {
		return nil, false
	}
	return o.Eventtype, true
}

// HasEventtype returns a boolean if a field has been set.
func (o *InlineObject12) HasEventtype() bool {
	if o != nil && o.Eventtype != nil {
		return true
	}

	return false
}

// SetEventtype gets a reference to the given EventtypesJsonEventtype and assigns it to the Eventtype field.
func (o *InlineObject12) SetEventtype(v EventtypesJsonEventtype) {
	o.Eventtype = &v
}

func (o InlineObject12) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Eventtype != nil {
		toSerialize["eventtype"] = o.Eventtype
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject12 struct {
	value *InlineObject12
	isSet bool
}

func (v NullableInlineObject12) Get() *InlineObject12 {
	return v.value
}

func (v *NullableInlineObject12) Set(val *InlineObject12) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject12) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject12) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject12(val *InlineObject12) *NullableInlineObject12 {
	return &NullableInlineObject12{value: val, isSet: true}
}

func (v NullableInlineObject12) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject12) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


