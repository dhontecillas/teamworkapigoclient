/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// WorkloadApiService WorkloadApi service
type WorkloadApiService service

type ApiGETProjectsApiV3WorkloadCsvRequest struct {
	ctx _context.Context
	ApiService *WorkloadApiService
	startDate *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	orderMode *string
	orderBy *string
	endDate *string
	projectHealths *int32
	prorataEstimatedTime *bool
	onlyUntaggedTasks *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	matchAllExcludedTags *bool
	isReportDownload *bool
	includeTasksWithoutDates *bool
	distributeEstimatedTimeToAssignees *bool
	tagIds *[]int32
	responsiblePartyIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	excludeTagIds *[]int32
}

func (r ApiGETProjectsApiV3WorkloadCsvRequest) StartDate(startDate string) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) OrderMode(orderMode string) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) OrderBy(orderBy string) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) EndDate(endDate string) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ProrataEstimatedTime(prorataEstimatedTime bool) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.prorataEstimatedTime = &prorataEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) IncludeTasksWithoutDates(includeTasksWithoutDates bool) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.includeTasksWithoutDates = &includeTasksWithoutDates
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) DistributeEstimatedTimeToAssignees(distributeEstimatedTimeToAssignees bool) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.distributeEstimatedTimeToAssignees = &distributeEstimatedTimeToAssignees
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadCsvRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV3WorkloadCsvRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}

func (r ApiGETProjectsApiV3WorkloadCsvRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3WorkloadCsvExecute(r)
}

/*
 * GETProjectsApiV3WorkloadCsv Generate workload report in CSV format
 * Generates a workload report in CSV format containing all workload for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3WorkloadCsvRequest
 */
func (a *WorkloadApiService) GETProjectsApiV3WorkloadCsv(ctx _context.Context) ApiGETProjectsApiV3WorkloadCsvRequest {
	return ApiGETProjectsApiV3WorkloadCsvRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkloadApiService) GETProjectsApiV3WorkloadCsvExecute(r ApiGETProjectsApiV3WorkloadCsvRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadApiService.GETProjectsApiV3WorkloadCsv")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/workload.csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.prorataEstimatedTime != nil {
		localVarQueryParams.Add("prorataEstimatedTime", parameterToString(*r.prorataEstimatedTime, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTasksWithoutDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDates", parameterToString(*r.includeTasksWithoutDates, ""))
	}
	if r.distributeEstimatedTimeToAssignees != nil {
		localVarQueryParams.Add("distributeEstimatedTimeToAssignees", parameterToString(*r.distributeEstimatedTimeToAssignees, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3WorkloadHtmlRequest struct {
	ctx _context.Context
	ApiService *WorkloadApiService
	startDate *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	orderMode *string
	orderBy *string
	endDate *string
	projectHealths *int32
	prorataEstimatedTime *bool
	onlyUntaggedTasks *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	matchAllExcludedTags *bool
	isReportDownload *bool
	includeTasksWithoutDates *bool
	distributeEstimatedTimeToAssignees *bool
	tagIds *[]int32
	responsiblePartyIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	excludeTagIds *[]int32
}

func (r ApiGETProjectsApiV3WorkloadHtmlRequest) StartDate(startDate string) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) OrderMode(orderMode string) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) OrderBy(orderBy string) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) EndDate(endDate string) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ProrataEstimatedTime(prorataEstimatedTime bool) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.prorataEstimatedTime = &prorataEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) IncludeTasksWithoutDates(includeTasksWithoutDates bool) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.includeTasksWithoutDates = &includeTasksWithoutDates
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) DistributeEstimatedTimeToAssignees(distributeEstimatedTimeToAssignees bool) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.distributeEstimatedTimeToAssignees = &distributeEstimatedTimeToAssignees
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadHtmlRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV3WorkloadHtmlRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}

func (r ApiGETProjectsApiV3WorkloadHtmlRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3WorkloadHtmlExecute(r)
}

/*
 * GETProjectsApiV3WorkloadHtml Generate workload report in HTML format
 * Generates a workload report in HTML format containing all workload for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3WorkloadHtmlRequest
 */
func (a *WorkloadApiService) GETProjectsApiV3WorkloadHtml(ctx _context.Context) ApiGETProjectsApiV3WorkloadHtmlRequest {
	return ApiGETProjectsApiV3WorkloadHtmlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkloadApiService) GETProjectsApiV3WorkloadHtmlExecute(r ApiGETProjectsApiV3WorkloadHtmlRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadApiService.GETProjectsApiV3WorkloadHtml")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/workload.html"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.prorataEstimatedTime != nil {
		localVarQueryParams.Add("prorataEstimatedTime", parameterToString(*r.prorataEstimatedTime, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTasksWithoutDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDates", parameterToString(*r.includeTasksWithoutDates, ""))
	}
	if r.distributeEstimatedTimeToAssignees != nil {
		localVarQueryParams.Add("distributeEstimatedTimeToAssignees", parameterToString(*r.distributeEstimatedTimeToAssignees, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3WorkloadPdfRequest struct {
	ctx _context.Context
	ApiService *WorkloadApiService
	startDate *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	orderMode *string
	orderBy *string
	endDate *string
	projectHealths *int32
	prorataEstimatedTime *bool
	onlyUntaggedTasks *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	matchAllExcludedTags *bool
	isReportDownload *bool
	includeTasksWithoutDates *bool
	distributeEstimatedTimeToAssignees *bool
	tagIds *[]int32
	responsiblePartyIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	excludeTagIds *[]int32
}

func (r ApiGETProjectsApiV3WorkloadPdfRequest) StartDate(startDate string) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) OrderMode(orderMode string) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) OrderBy(orderBy string) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) EndDate(endDate string) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ProrataEstimatedTime(prorataEstimatedTime bool) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.prorataEstimatedTime = &prorataEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) IncludeTasksWithoutDates(includeTasksWithoutDates bool) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.includeTasksWithoutDates = &includeTasksWithoutDates
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) DistributeEstimatedTimeToAssignees(distributeEstimatedTimeToAssignees bool) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.distributeEstimatedTimeToAssignees = &distributeEstimatedTimeToAssignees
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPdfRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV3WorkloadPdfRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}

func (r ApiGETProjectsApiV3WorkloadPdfRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3WorkloadPdfExecute(r)
}

/*
 * GETProjectsApiV3WorkloadPdf Generate workload report in PDF format
 * Generates a task list report in PDF format containing all workload for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3WorkloadPdfRequest
 */
func (a *WorkloadApiService) GETProjectsApiV3WorkloadPdf(ctx _context.Context) ApiGETProjectsApiV3WorkloadPdfRequest {
	return ApiGETProjectsApiV3WorkloadPdfRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkloadApiService) GETProjectsApiV3WorkloadPdfExecute(r ApiGETProjectsApiV3WorkloadPdfRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadApiService.GETProjectsApiV3WorkloadPdf")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/workload.pdf"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.prorataEstimatedTime != nil {
		localVarQueryParams.Add("prorataEstimatedTime", parameterToString(*r.prorataEstimatedTime, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTasksWithoutDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDates", parameterToString(*r.includeTasksWithoutDates, ""))
	}
	if r.distributeEstimatedTimeToAssignees != nil {
		localVarQueryParams.Add("distributeEstimatedTimeToAssignees", parameterToString(*r.distributeEstimatedTimeToAssignees, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/pdf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3WorkloadPlannersJsonRequest struct {
	ctx _context.Context
	ApiService *WorkloadApiService
	startDate *string
	searchUserName *string
	searchTaskName *string
	projectStatuses *string
	projectStatus *string
	orderMode *string
	orderBy *string
	endDate *string
	projectHealths *int32
	pageSize *int32
	page *int32
	subtractLoggedTimeFromEstimates *bool
	prorating *bool
	onlyUntaggedTasks *bool
	onlyStarredProjects *bool
	matchAllProjectTags *bool
	includeTeamUserIds *bool
	includeTasksWithoutDates *bool
	includeCompletedTasks *bool
	includeCompanyUserIds *bool
	includeCalendarEvents *bool
	includeAssigneeTeams *bool
	includeAssigneeCompanies *bool
	includeArchivedProjects *bool
	distribute *bool
	teamIds *[]int32
	tagIds *[]int32
	responsiblePartyIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	memberOfProjectIds *[]int32
	include *[]string
	fieldsWorkingHours *[]string
	fieldsWorkingHourEntries *[]string
	fieldsUsers *[]string
	fieldsTimelogs *[]string
	fieldsTasks *[]string
	fieldsTasklists *[]string
	fieldsMilestones *[]string
	fieldsCompanies *[]string
	fieldsCalendarEvents *[]string
	excludeTagIds *[]int32
	companyIds *[]int32
	assigneeTeamIds *[]int32
	assigneeCompanyIds *[]int32
}

func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) StartDate(startDate string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) SearchUserName(searchUserName string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.searchUserName = &searchUserName
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) SearchTaskName(searchTaskName string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.searchTaskName = &searchTaskName
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) ProjectStatus(projectStatus string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.projectStatus = &projectStatus
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) EndDate(endDate string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) Page(page int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) SubtractLoggedTimeFromEstimates(subtractLoggedTimeFromEstimates bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.subtractLoggedTimeFromEstimates = &subtractLoggedTimeFromEstimates
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) Prorating(prorating bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.prorating = &prorating
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) IncludeTeamUserIds(includeTeamUserIds bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.includeTeamUserIds = &includeTeamUserIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) IncludeTasksWithoutDates(includeTasksWithoutDates bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.includeTasksWithoutDates = &includeTasksWithoutDates
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) IncludeCompletedTasks(includeCompletedTasks bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.includeCompletedTasks = &includeCompletedTasks
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) IncludeCompanyUserIds(includeCompanyUserIds bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.includeCompanyUserIds = &includeCompanyUserIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) IncludeCalendarEvents(includeCalendarEvents bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.includeCalendarEvents = &includeCalendarEvents
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) IncludeAssigneeTeams(includeAssigneeTeams bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.includeAssigneeTeams = &includeAssigneeTeams
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) IncludeAssigneeCompanies(includeAssigneeCompanies bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.includeAssigneeCompanies = &includeAssigneeCompanies
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) Distribute(distribute bool) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.distribute = &distribute
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) TeamIds(teamIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.teamIds = &teamIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) MemberOfProjectIds(memberOfProjectIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.memberOfProjectIds = &memberOfProjectIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) Include(include []string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) FieldsWorkingHours(fieldsWorkingHours []string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.fieldsWorkingHours = &fieldsWorkingHours
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) FieldsWorkingHourEntries(fieldsWorkingHourEntries []string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.fieldsWorkingHourEntries = &fieldsWorkingHourEntries
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) FieldsTimelogs(fieldsTimelogs []string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.fieldsTimelogs = &fieldsTimelogs
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) FieldsTasklists(fieldsTasklists []string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.fieldsTasklists = &fieldsTasklists
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) FieldsMilestones(fieldsMilestones []string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.fieldsMilestones = &fieldsMilestones
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) FieldsCalendarEvents(fieldsCalendarEvents []string) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.fieldsCalendarEvents = &fieldsCalendarEvents
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) CompanyIds(companyIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.companyIds = &companyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) AssigneeTeamIds(assigneeTeamIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.assigneeTeamIds = &assigneeTeamIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) AssigneeCompanyIds(assigneeCompanyIds []int32) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	r.assigneeCompanyIds = &assigneeCompanyIds
	return r
}

func (r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) Execute() (PlannerWorkloadPlannersResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3WorkloadPlannersJsonExecute(r)
}

/*
 * GETProjectsApiV3WorkloadPlannersJson Retrieve user workload planner
 * Return the workload planner for each users of the installation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3WorkloadPlannersJsonRequest
 */
func (a *WorkloadApiService) GETProjectsApiV3WorkloadPlannersJson(ctx _context.Context) ApiGETProjectsApiV3WorkloadPlannersJsonRequest {
	return ApiGETProjectsApiV3WorkloadPlannersJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PlannerWorkloadPlannersResponse
 */
func (a *WorkloadApiService) GETProjectsApiV3WorkloadPlannersJsonExecute(r ApiGETProjectsApiV3WorkloadPlannersJsonRequest) (PlannerWorkloadPlannersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PlannerWorkloadPlannersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadApiService.GETProjectsApiV3WorkloadPlannersJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/workload/planners.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.searchUserName != nil {
		localVarQueryParams.Add("searchUserName", parameterToString(*r.searchUserName, ""))
	}
	if r.searchTaskName != nil {
		localVarQueryParams.Add("searchTaskName", parameterToString(*r.searchTaskName, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.projectStatus != nil {
		localVarQueryParams.Add("projectStatus", parameterToString(*r.projectStatus, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.subtractLoggedTimeFromEstimates != nil {
		localVarQueryParams.Add("subtractLoggedTimeFromEstimates", parameterToString(*r.subtractLoggedTimeFromEstimates, ""))
	}
	if r.prorating != nil {
		localVarQueryParams.Add("prorating", parameterToString(*r.prorating, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeTeamUserIds != nil {
		localVarQueryParams.Add("includeTeamUserIds", parameterToString(*r.includeTeamUserIds, ""))
	}
	if r.includeTasksWithoutDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDates", parameterToString(*r.includeTasksWithoutDates, ""))
	}
	if r.includeCompletedTasks != nil {
		localVarQueryParams.Add("includeCompletedTasks", parameterToString(*r.includeCompletedTasks, ""))
	}
	if r.includeCompanyUserIds != nil {
		localVarQueryParams.Add("includeCompanyUserIds", parameterToString(*r.includeCompanyUserIds, ""))
	}
	if r.includeCalendarEvents != nil {
		localVarQueryParams.Add("includeCalendarEvents", parameterToString(*r.includeCalendarEvents, ""))
	}
	if r.includeAssigneeTeams != nil {
		localVarQueryParams.Add("includeAssigneeTeams", parameterToString(*r.includeAssigneeTeams, ""))
	}
	if r.includeAssigneeCompanies != nil {
		localVarQueryParams.Add("includeAssigneeCompanies", parameterToString(*r.includeAssigneeCompanies, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.distribute != nil {
		localVarQueryParams.Add("distribute", parameterToString(*r.distribute, ""))
	}
	if r.teamIds != nil {
		localVarQueryParams.Add("teamIds", parameterToString(*r.teamIds, "csv"))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.memberOfProjectIds != nil {
		localVarQueryParams.Add("memberOfProjectIds", parameterToString(*r.memberOfProjectIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsWorkingHours != nil {
		localVarQueryParams.Add("fields[workingHours]", parameterToString(*r.fieldsWorkingHours, "csv"))
	}
	if r.fieldsWorkingHourEntries != nil {
		localVarQueryParams.Add("fields[workingHourEntries]", parameterToString(*r.fieldsWorkingHourEntries, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTimelogs != nil {
		localVarQueryParams.Add("fields[timelogs]", parameterToString(*r.fieldsTimelogs, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsTasklists != nil {
		localVarQueryParams.Add("fields[tasklists]", parameterToString(*r.fieldsTasklists, "csv"))
	}
	if r.fieldsMilestones != nil {
		localVarQueryParams.Add("fields[milestones]", parameterToString(*r.fieldsMilestones, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	if r.fieldsCalendarEvents != nil {
		localVarQueryParams.Add("fields[calendarEvents]", parameterToString(*r.fieldsCalendarEvents, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	if r.companyIds != nil {
		localVarQueryParams.Add("companyIds", parameterToString(*r.companyIds, "csv"))
	}
	if r.assigneeTeamIds != nil {
		localVarQueryParams.Add("assigneeTeamIds", parameterToString(*r.assigneeTeamIds, "csv"))
	}
	if r.assigneeCompanyIds != nil {
		localVarQueryParams.Add("assigneeCompanyIds", parameterToString(*r.assigneeCompanyIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3WorkloadXlsxRequest struct {
	ctx _context.Context
	ApiService *WorkloadApiService
	startDate *string
	searchTerm *string
	reportFormat *string
	projectStatuses *string
	orderMode *string
	orderBy *string
	endDate *string
	projectHealths *int32
	prorataEstimatedTime *bool
	onlyUntaggedTasks *bool
	onlyStarredProjects *bool
	matchAllTags *bool
	matchAllProjectTags *bool
	matchAllExcludedTags *bool
	isReportDownload *bool
	includeTasksWithoutDates *bool
	distributeEstimatedTimeToAssignees *bool
	tagIds *[]int32
	responsiblePartyIds *[]int32
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	excludeTagIds *[]int32
}

func (r ApiGETProjectsApiV3WorkloadXlsxRequest) StartDate(startDate string) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) OrderMode(orderMode string) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) OrderBy(orderBy string) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) EndDate(endDate string) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ProrataEstimatedTime(prorataEstimatedTime bool) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.prorataEstimatedTime = &prorataEstimatedTime
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) OnlyUntaggedTasks(onlyUntaggedTasks bool) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.onlyUntaggedTasks = &onlyUntaggedTasks
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) MatchAllTags(matchAllTags bool) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.matchAllTags = &matchAllTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) MatchAllExcludedTags(matchAllExcludedTags bool) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.matchAllExcludedTags = &matchAllExcludedTags
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) IncludeTasksWithoutDates(includeTasksWithoutDates bool) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.includeTasksWithoutDates = &includeTasksWithoutDates
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) DistributeEstimatedTimeToAssignees(distributeEstimatedTimeToAssignees bool) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.distributeEstimatedTimeToAssignees = &distributeEstimatedTimeToAssignees
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) TagIds(tagIds []int32) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.tagIds = &tagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ResponsiblePartyIds(responsiblePartyIds []int32) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.responsiblePartyIds = &responsiblePartyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3WorkloadXlsxRequest) ExcludeTagIds(excludeTagIds []int32) ApiGETProjectsApiV3WorkloadXlsxRequest {
	r.excludeTagIds = &excludeTagIds
	return r
}

func (r ApiGETProjectsApiV3WorkloadXlsxRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3WorkloadXlsxExecute(r)
}

/*
 * GETProjectsApiV3WorkloadXlsx Generate workload report in XLSX format.
 * Generates a workload report in XLSX format containing all workload for the
provided filters. Only the tasks that the logged-in user can access will be
returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3WorkloadXlsxRequest
 */
func (a *WorkloadApiService) GETProjectsApiV3WorkloadXlsx(ctx _context.Context) ApiGETProjectsApiV3WorkloadXlsxRequest {
	return ApiGETProjectsApiV3WorkloadXlsxRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkloadApiService) GETProjectsApiV3WorkloadXlsxExecute(r ApiGETProjectsApiV3WorkloadXlsxRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadApiService.GETProjectsApiV3WorkloadXlsx")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/workload.xlsx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.prorataEstimatedTime != nil {
		localVarQueryParams.Add("prorataEstimatedTime", parameterToString(*r.prorataEstimatedTime, ""))
	}
	if r.onlyUntaggedTasks != nil {
		localVarQueryParams.Add("onlyUntaggedTasks", parameterToString(*r.onlyUntaggedTasks, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.matchAllTags != nil {
		localVarQueryParams.Add("matchAllTags", parameterToString(*r.matchAllTags, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.matchAllExcludedTags != nil {
		localVarQueryParams.Add("matchAllExcludedTags", parameterToString(*r.matchAllExcludedTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeTasksWithoutDates != nil {
		localVarQueryParams.Add("includeTasksWithoutDates", parameterToString(*r.includeTasksWithoutDates, ""))
	}
	if r.distributeEstimatedTimeToAssignees != nil {
		localVarQueryParams.Add("distributeEstimatedTimeToAssignees", parameterToString(*r.distributeEstimatedTimeToAssignees, ""))
	}
	if r.tagIds != nil {
		localVarQueryParams.Add("tagIds", parameterToString(*r.tagIds, "csv"))
	}
	if r.responsiblePartyIds != nil {
		localVarQueryParams.Add("responsiblePartyIds", parameterToString(*r.responsiblePartyIds, "csv"))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.excludeTagIds != nil {
		localVarQueryParams.Add("excludeTagIds", parameterToString(*r.excludeTagIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
