/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// CompanyResponseIncluded struct for CompanyResponseIncluded
type CompanyResponseIncluded struct {
	Countries *map[string]ViewCountry `json:"countries,omitempty"`
	Industries *map[string]ViewIndustry `json:"industries,omitempty"`
	Tags *map[string]ViewTag `json:"tags,omitempty"`
}

// NewCompanyResponseIncluded instantiates a new CompanyResponseIncluded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyResponseIncluded() *CompanyResponseIncluded {
	this := CompanyResponseIncluded{}
	return &this
}

// NewCompanyResponseIncludedWithDefaults instantiates a new CompanyResponseIncluded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyResponseIncludedWithDefaults() *CompanyResponseIncluded {
	this := CompanyResponseIncluded{}
	return &this
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *CompanyResponseIncluded) GetCountries() map[string]ViewCountry {
	if o == nil || o.Countries == nil {
		var ret map[string]ViewCountry
		return ret
	}
	return *o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyResponseIncluded) GetCountriesOk() (*map[string]ViewCountry, bool) {
	if o == nil || o.Countries == nil {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *CompanyResponseIncluded) HasCountries() bool {
	if o != nil && o.Countries != nil {
		return true
	}

	return false
}

// SetCountries gets a reference to the given map[string]ViewCountry and assigns it to the Countries field.
func (o *CompanyResponseIncluded) SetCountries(v map[string]ViewCountry) {
	o.Countries = &v
}

// GetIndustries returns the Industries field value if set, zero value otherwise.
func (o *CompanyResponseIncluded) GetIndustries() map[string]ViewIndustry {
	if o == nil || o.Industries == nil {
		var ret map[string]ViewIndustry
		return ret
	}
	return *o.Industries
}

// GetIndustriesOk returns a tuple with the Industries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyResponseIncluded) GetIndustriesOk() (*map[string]ViewIndustry, bool) {
	if o == nil || o.Industries == nil {
		return nil, false
	}
	return o.Industries, true
}

// HasIndustries returns a boolean if a field has been set.
func (o *CompanyResponseIncluded) HasIndustries() bool {
	if o != nil && o.Industries != nil {
		return true
	}

	return false
}

// SetIndustries gets a reference to the given map[string]ViewIndustry and assigns it to the Industries field.
func (o *CompanyResponseIncluded) SetIndustries(v map[string]ViewIndustry) {
	o.Industries = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CompanyResponseIncluded) GetTags() map[string]ViewTag {
	if o == nil || o.Tags == nil {
		var ret map[string]ViewTag
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyResponseIncluded) GetTagsOk() (*map[string]ViewTag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CompanyResponseIncluded) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]ViewTag and assigns it to the Tags field.
func (o *CompanyResponseIncluded) SetTags(v map[string]ViewTag) {
	o.Tags = &v
}

func (o CompanyResponseIncluded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Countries != nil {
		toSerialize["countries"] = o.Countries
	}
	if o.Industries != nil {
		toSerialize["industries"] = o.Industries
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyResponseIncluded struct {
	value *CompanyResponseIncluded
	isSet bool
}

func (v NullableCompanyResponseIncluded) Get() *CompanyResponseIncluded {
	return v.value
}

func (v *NullableCompanyResponseIncluded) Set(val *CompanyResponseIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyResponseIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyResponseIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyResponseIncluded(val *CompanyResponseIncluded) *NullableCompanyResponseIncluded {
	return &NullableCompanyResponseIncluded{value: val, isSet: true}
}

func (v NullableCompanyResponseIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyResponseIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


