/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// CustomFieldsApiService CustomFieldsApi service
type CustomFieldsApiService service

type ApiDELETEProjectsApiV3CustomfieldscustomFieldIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	customFieldId int32
}


func (r ApiDELETEProjectsApiV3CustomfieldscustomFieldIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3CustomfieldscustomFieldIdJsonExecute(r)
}

/*
 * DELETEProjectsApiV3CustomfieldscustomFieldIdJson Delete an existing custom field
 * Removes a custom field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param customFieldId
 * @return ApiDELETEProjectsApiV3CustomfieldscustomFieldIdJsonRequest
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3CustomfieldscustomFieldIdJson(ctx _context.Context, customFieldId int32) ApiDELETEProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	return ApiDELETEProjectsApiV3CustomfieldscustomFieldIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		customFieldId: customFieldId,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3CustomfieldscustomFieldIdJsonExecute(r ApiDELETEProjectsApiV3CustomfieldscustomFieldIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.DELETEProjectsApiV3CustomfieldscustomFieldIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields/{customFieldId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", _neturl.PathEscape(parameterToString(r.customFieldId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectId int32
	customFieldId int32
}


func (r ApiDELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonExecute(r)
}

/*
 * DELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJson Delete an existing project custom field value.
 * Removes a project custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @param customFieldId
 * @return ApiDELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJson(ctx _context.Context, projectId int32, customFieldId int32) ApiDELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest {
	return ApiDELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		customFieldId: customFieldId,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonExecute(r ApiDELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.DELETEProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/customfields/{customFieldId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", _neturl.PathEscape(parameterToString(r.customFieldId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskId int32
	customFieldId int32
}


func (r ApiDELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonExecute(r)
}

/*
 * DELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJson Delete an existing task custom field value.
 * Removes a task custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId
 * @param customFieldId
 * @return ApiDELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJson(ctx _context.Context, taskId int32, customFieldId int32) ApiDELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest {
	return ApiDELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
		customFieldId: customFieldId,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) DELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonExecute(r ApiDELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.DELETEProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/{taskId}/customfields/{customFieldId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", _neturl.PathEscape(parameterToString(r.customFieldId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3CustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectStatuses *string
	orderMode *string
	orderBy *string
	entities *string
	projectId *int32
	projectHealths *int32
	pageSize *int32
	page *int32
	showDeleted *bool
	onlyStarredProjects *bool
	onlySiteLevel *bool
	matchAllProjectTags *bool
	includeSiteLevel *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsProjects *[]string
}

func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) Entities(entities string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.entities = &entities
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) Page(page int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) OnlySiteLevel(onlySiteLevel bool) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.onlySiteLevel = &onlySiteLevel
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) IncludeSiteLevel(includeSiteLevel bool) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.includeSiteLevel = &includeSiteLevel
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) Include(include []string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}

func (r ApiGETProjectsApiV3CustomfieldsJsonRequest) Execute() (CustomfieldCustomFieldsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3CustomfieldsJsonExecute(r)
}

/*
 * GETProjectsApiV3CustomfieldsJson Get all custom fields
 * Return all custom fields for the provided filters.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGETProjectsApiV3CustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3CustomfieldsJson(ctx _context.Context) ApiGETProjectsApiV3CustomfieldsJsonRequest {
	return ApiGETProjectsApiV3CustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CustomfieldCustomFieldsResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3CustomfieldsJsonExecute(r ApiGETProjectsApiV3CustomfieldsJsonRequest) (CustomfieldCustomFieldsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomfieldCustomFieldsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3CustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.entities != nil {
		localVarQueryParams.Add("entities", parameterToString(*r.entities, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlySiteLevel != nil {
		localVarQueryParams.Add("onlySiteLevel", parameterToString(*r.onlySiteLevel, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeSiteLevel != nil {
		localVarQueryParams.Add("includeSiteLevel", parameterToString(*r.includeSiteLevel, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	customFieldId int32
	projectStatuses *string
	orderMode *string
	orderBy *string
	entities *string
	projectId *int32
	projectHealths *int32
	pageSize *int32
	page *int32
	showDeleted *bool
	onlyStarredProjects *bool
	onlySiteLevel *bool
	matchAllProjectTags *bool
	includeSiteLevel *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsProjects *[]string
}

func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) Entities(entities string) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.entities = &entities
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) ProjectId(projectId int32) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.projectId = &projectId
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) Page(page int32) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) ShowDeleted(showDeleted bool) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.showDeleted = &showDeleted
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) OnlySiteLevel(onlySiteLevel bool) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.onlySiteLevel = &onlySiteLevel
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) IncludeSiteLevel(includeSiteLevel bool) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.includeSiteLevel = &includeSiteLevel
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) Include(include []string) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}

func (r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) Execute() (CustomfieldResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3CustomfieldscustomFieldIdJsonExecute(r)
}

/*
 * GETProjectsApiV3CustomfieldscustomFieldIdJson Get a custom field by id.
 * This returns all details about an individual custom field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param customFieldId
 * @return ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3CustomfieldscustomFieldIdJson(ctx _context.Context, customFieldId int32) ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	return ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		customFieldId: customFieldId,
	}
}

/*
 * Execute executes the request
 * @return CustomfieldResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3CustomfieldscustomFieldIdJsonExecute(r ApiGETProjectsApiV3CustomfieldscustomFieldIdJsonRequest) (CustomfieldResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomfieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3CustomfieldscustomFieldIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields/{customFieldId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", _neturl.PathEscape(parameterToString(r.customFieldId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.entities != nil {
		localVarQueryParams.Add("entities", parameterToString(*r.entities, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showDeleted != nil {
		localVarQueryParams.Add("showDeleted", parameterToString(*r.showDeleted, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlySiteLevel != nil {
		localVarQueryParams.Add("onlySiteLevel", parameterToString(*r.onlySiteLevel, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.includeSiteLevel != nil {
		localVarQueryParams.Add("includeSiteLevel", parameterToString(*r.includeSiteLevel, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectId int32
	updatedAfter *time.Time
	searchTerm *string
	reportType *string
	reportFormat *string
	projectType *string
	projectStatuses *string
	orderMode *string
	orderBy *string
	minLastActivityDate *string
	maxLastActivityDate *string
	userId *int32
	projectHealths *int32
	pageSize *int32
	page *int32
	onlyStarredProjects *bool
	onlyProjectsWithExplicitMembership *bool
	onlyArchivedProjects *bool
	matchAllProjectTags *bool
	isReportDownload *bool
	includeProjectUserInfo *bool
	includeCustomFields *bool
	includeCompletedStatus *bool
	includeArchivedProjects *bool
	hideObservedProjects *bool
	projectTagIds *[]int32
	projectOwnerIds *[]int32
	projectIds *[]int32
	projectCompanyIds *[]int32
	projectCategoryIds *[]int32
	include *[]string
	fieldsUsers *[]string
	fieldsTags *[]string
	fieldsProjects *[]string
	fieldsProjectcategories *[]string
	fieldsProjectUpdates *[]string
	fieldsProjectBudgets *[]string
	fieldsPortfolioColumns *[]string
	fieldsPortfolioCards *[]string
	fieldsPortfolioBoards *[]string
	fieldsCustomfields *[]string
	fieldsCustomfieldProjects *[]string
	fieldsCompanies *[]string
}

func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) UpdatedAfter(updatedAfter time.Time) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.updatedAfter = &updatedAfter
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) SearchTerm(searchTerm string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.searchTerm = &searchTerm
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ReportType(reportType string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.reportType = &reportType
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ReportFormat(reportFormat string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.reportFormat = &reportFormat
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ProjectType(projectType string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.projectType = &projectType
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ProjectStatuses(projectStatuses string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.projectStatuses = &projectStatuses
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) OrderMode(orderMode string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.orderMode = &orderMode
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) OrderBy(orderBy string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) MinLastActivityDate(minLastActivityDate string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.minLastActivityDate = &minLastActivityDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) MaxLastActivityDate(maxLastActivityDate string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.maxLastActivityDate = &maxLastActivityDate
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) UserId(userId int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.userId = &userId
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ProjectHealths(projectHealths int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.projectHealths = &projectHealths
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) Page(page int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) OnlyStarredProjects(onlyStarredProjects bool) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.onlyStarredProjects = &onlyStarredProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) OnlyProjectsWithExplicitMembership(onlyProjectsWithExplicitMembership bool) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.onlyProjectsWithExplicitMembership = &onlyProjectsWithExplicitMembership
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) OnlyArchivedProjects(onlyArchivedProjects bool) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.onlyArchivedProjects = &onlyArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) MatchAllProjectTags(matchAllProjectTags bool) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.matchAllProjectTags = &matchAllProjectTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) IsReportDownload(isReportDownload bool) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.isReportDownload = &isReportDownload
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) IncludeProjectUserInfo(includeProjectUserInfo bool) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.includeProjectUserInfo = &includeProjectUserInfo
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) IncludeCustomFields(includeCustomFields bool) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.includeCustomFields = &includeCustomFields
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) IncludeCompletedStatus(includeCompletedStatus bool) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.includeCompletedStatus = &includeCompletedStatus
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) IncludeArchivedProjects(includeArchivedProjects bool) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.includeArchivedProjects = &includeArchivedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) HideObservedProjects(hideObservedProjects bool) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.hideObservedProjects = &hideObservedProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ProjectTagIds(projectTagIds []int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.projectTagIds = &projectTagIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ProjectOwnerIds(projectOwnerIds []int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.projectOwnerIds = &projectOwnerIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ProjectIds(projectIds []int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.projectIds = &projectIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ProjectCompanyIds(projectCompanyIds []int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.projectCompanyIds = &projectCompanyIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ProjectCategoryIds(projectCategoryIds []int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.projectCategoryIds = &projectCategoryIds
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) Include(include []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsUsers(fieldsUsers []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsUsers = &fieldsUsers
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsTags(fieldsTags []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsTags = &fieldsTags
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsProjects(fieldsProjects []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsProjects = &fieldsProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsProjectcategories(fieldsProjectcategories []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsProjectcategories = &fieldsProjectcategories
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsProjectUpdates(fieldsProjectUpdates []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsProjectUpdates = &fieldsProjectUpdates
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsProjectBudgets(fieldsProjectBudgets []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsProjectBudgets = &fieldsProjectBudgets
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsPortfolioColumns(fieldsPortfolioColumns []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsPortfolioColumns = &fieldsPortfolioColumns
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsPortfolioCards(fieldsPortfolioCards []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsPortfolioCards = &fieldsPortfolioCards
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsPortfolioBoards(fieldsPortfolioBoards []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsPortfolioBoards = &fieldsPortfolioBoards
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsCustomfields(fieldsCustomfields []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsCustomfields = &fieldsCustomfields
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsCustomfieldProjects(fieldsCustomfieldProjects []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsCustomfieldProjects = &fieldsCustomfieldProjects
	return r
}
func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) FieldsCompanies(fieldsCompanies []string) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.fieldsCompanies = &fieldsCompanies
	return r
}

func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) Execute() (ProjectCustomFieldProjectsResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsprojectIdCustomfieldsJsonExecute(r)
}

/*
 * GETProjectsApiV3ProjectsprojectIdCustomfieldsJson Project custom field values.
 * Return all custom field values from a specific project.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @return ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3ProjectsprojectIdCustomfieldsJson(ctx _context.Context, projectId int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	return ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

/*
 * Execute executes the request
 * @return ProjectCustomFieldProjectsResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3ProjectsprojectIdCustomfieldsJsonExecute(r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) (ProjectCustomFieldProjectsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProjectCustomFieldProjectsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3ProjectsprojectIdCustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/customfields.json"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.updatedAfter != nil {
		localVarQueryParams.Add("updatedAfter", parameterToString(*r.updatedAfter, ""))
	}
	if r.searchTerm != nil {
		localVarQueryParams.Add("searchTerm", parameterToString(*r.searchTerm, ""))
	}
	if r.reportType != nil {
		localVarQueryParams.Add("reportType", parameterToString(*r.reportType, ""))
	}
	if r.reportFormat != nil {
		localVarQueryParams.Add("reportFormat", parameterToString(*r.reportFormat, ""))
	}
	if r.projectType != nil {
		localVarQueryParams.Add("projectType", parameterToString(*r.projectType, ""))
	}
	if r.projectStatuses != nil {
		localVarQueryParams.Add("projectStatuses", parameterToString(*r.projectStatuses, ""))
	}
	if r.orderMode != nil {
		localVarQueryParams.Add("orderMode", parameterToString(*r.orderMode, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.minLastActivityDate != nil {
		localVarQueryParams.Add("minLastActivityDate", parameterToString(*r.minLastActivityDate, ""))
	}
	if r.maxLastActivityDate != nil {
		localVarQueryParams.Add("maxLastActivityDate", parameterToString(*r.maxLastActivityDate, ""))
	}
	if r.userId != nil {
		localVarQueryParams.Add("userId", parameterToString(*r.userId, ""))
	}
	if r.projectHealths != nil {
		localVarQueryParams.Add("projectHealths", parameterToString(*r.projectHealths, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.onlyStarredProjects != nil {
		localVarQueryParams.Add("onlyStarredProjects", parameterToString(*r.onlyStarredProjects, ""))
	}
	if r.onlyProjectsWithExplicitMembership != nil {
		localVarQueryParams.Add("onlyProjectsWithExplicitMembership", parameterToString(*r.onlyProjectsWithExplicitMembership, ""))
	}
	if r.onlyArchivedProjects != nil {
		localVarQueryParams.Add("onlyArchivedProjects", parameterToString(*r.onlyArchivedProjects, ""))
	}
	if r.matchAllProjectTags != nil {
		localVarQueryParams.Add("matchAllProjectTags", parameterToString(*r.matchAllProjectTags, ""))
	}
	if r.isReportDownload != nil {
		localVarQueryParams.Add("isReportDownload", parameterToString(*r.isReportDownload, ""))
	}
	if r.includeProjectUserInfo != nil {
		localVarQueryParams.Add("includeProjectUserInfo", parameterToString(*r.includeProjectUserInfo, ""))
	}
	if r.includeCustomFields != nil {
		localVarQueryParams.Add("includeCustomFields", parameterToString(*r.includeCustomFields, ""))
	}
	if r.includeCompletedStatus != nil {
		localVarQueryParams.Add("includeCompletedStatus", parameterToString(*r.includeCompletedStatus, ""))
	}
	if r.includeArchivedProjects != nil {
		localVarQueryParams.Add("includeArchivedProjects", parameterToString(*r.includeArchivedProjects, ""))
	}
	if r.hideObservedProjects != nil {
		localVarQueryParams.Add("hideObservedProjects", parameterToString(*r.hideObservedProjects, ""))
	}
	if r.projectTagIds != nil {
		localVarQueryParams.Add("projectTagIds", parameterToString(*r.projectTagIds, "csv"))
	}
	if r.projectOwnerIds != nil {
		localVarQueryParams.Add("projectOwnerIds", parameterToString(*r.projectOwnerIds, "csv"))
	}
	if r.projectIds != nil {
		localVarQueryParams.Add("projectIds", parameterToString(*r.projectIds, "csv"))
	}
	if r.projectCompanyIds != nil {
		localVarQueryParams.Add("projectCompanyIds", parameterToString(*r.projectCompanyIds, "csv"))
	}
	if r.projectCategoryIds != nil {
		localVarQueryParams.Add("projectCategoryIds", parameterToString(*r.projectCategoryIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsUsers != nil {
		localVarQueryParams.Add("fields[users]", parameterToString(*r.fieldsUsers, "csv"))
	}
	if r.fieldsTags != nil {
		localVarQueryParams.Add("fields[tags]", parameterToString(*r.fieldsTags, "csv"))
	}
	if r.fieldsProjects != nil {
		localVarQueryParams.Add("fields[projects]", parameterToString(*r.fieldsProjects, "csv"))
	}
	if r.fieldsProjectcategories != nil {
		localVarQueryParams.Add("fields[projectcategories]", parameterToString(*r.fieldsProjectcategories, "csv"))
	}
	if r.fieldsProjectUpdates != nil {
		localVarQueryParams.Add("fields[projectUpdates]", parameterToString(*r.fieldsProjectUpdates, "csv"))
	}
	if r.fieldsProjectBudgets != nil {
		localVarQueryParams.Add("fields[projectBudgets]", parameterToString(*r.fieldsProjectBudgets, "csv"))
	}
	if r.fieldsPortfolioColumns != nil {
		localVarQueryParams.Add("fields[portfolioColumns]", parameterToString(*r.fieldsPortfolioColumns, "csv"))
	}
	if r.fieldsPortfolioCards != nil {
		localVarQueryParams.Add("fields[portfolioCards]", parameterToString(*r.fieldsPortfolioCards, "csv"))
	}
	if r.fieldsPortfolioBoards != nil {
		localVarQueryParams.Add("fields[portfolioBoards]", parameterToString(*r.fieldsPortfolioBoards, "csv"))
	}
	if r.fieldsCustomfields != nil {
		localVarQueryParams.Add("fields[customfields]", parameterToString(*r.fieldsCustomfields, "csv"))
	}
	if r.fieldsCustomfieldProjects != nil {
		localVarQueryParams.Add("fields[customfieldProjects]", parameterToString(*r.fieldsCustomfieldProjects, "csv"))
	}
	if r.fieldsCompanies != nil {
		localVarQueryParams.Add("fields[companies]", parameterToString(*r.fieldsCompanies, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectId int32
	customFieldId int32
}


func (r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest) Execute() (ProjectResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonExecute(r)
}

/*
 * GETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJson Project custom field value.
 * Return a specific custom field value from a project.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @param customFieldId
 * @return ApiGETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJson(ctx _context.Context, projectId int32, customFieldId int32) ApiGETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest {
	return ApiGETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		customFieldId: customFieldId,
	}
}

/*
 * Execute executes the request
 * @return ProjectResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonExecute(r ApiGETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest) (ProjectResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProjectResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/customfields/{customFieldId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", _neturl.PathEscape(parameterToString(r.customFieldId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskId2 int32
	taskId *int32
	pageSize *int32
	page *int32
	include *[]string
	fieldsTasks *[]string
	fieldsCustomfields *[]string
	fieldsCustomfieldTasks *[]string
	customFieldIds *[]int32
}

func (r ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) TaskId(taskId int32) ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	r.taskId = &taskId
	return r
}
func (r ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) PageSize(pageSize int32) ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) Page(page int32) ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	r.page = &page
	return r
}
func (r ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) Include(include []string) ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	r.include = &include
	return r
}
func (r ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) FieldsTasks(fieldsTasks []string) ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	r.fieldsTasks = &fieldsTasks
	return r
}
func (r ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) FieldsCustomfields(fieldsCustomfields []string) ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	r.fieldsCustomfields = &fieldsCustomfields
	return r
}
func (r ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) FieldsCustomfieldTasks(fieldsCustomfieldTasks []string) ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	r.fieldsCustomfieldTasks = &fieldsCustomfieldTasks
	return r
}
func (r ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) CustomFieldIds(customFieldIds []int32) ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	r.customFieldIds = &customFieldIds
	return r
}

func (r ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) Execute() (TaskCustomFieldTasksResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3TaskstaskIdCustomfieldsJsonExecute(r)
}

/*
 * GETProjectsApiV3TaskstaskIdCustomfieldsJson Task custom field values.
 * Return all custom field values from a specific task.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId2
 * @return ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3TaskstaskIdCustomfieldsJson(ctx _context.Context, taskId2 int32) ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	return ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
		taskId2: taskId2,
	}
}

/*
 * Execute executes the request
 * @return TaskCustomFieldTasksResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3TaskstaskIdCustomfieldsJsonExecute(r ApiGETProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) (TaskCustomFieldTasksResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskCustomFieldTasksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3TaskstaskIdCustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/{taskId}/customfields.json"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId2, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.taskId != nil {
		localVarQueryParams.Add("taskId", parameterToString(*r.taskId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsTasks != nil {
		localVarQueryParams.Add("fields[tasks]", parameterToString(*r.fieldsTasks, "csv"))
	}
	if r.fieldsCustomfields != nil {
		localVarQueryParams.Add("fields[customfields]", parameterToString(*r.fieldsCustomfields, "csv"))
	}
	if r.fieldsCustomfieldTasks != nil {
		localVarQueryParams.Add("fields[customfieldTasks]", parameterToString(*r.fieldsCustomfieldTasks, "csv"))
	}
	if r.customFieldIds != nil {
		localVarQueryParams.Add("customFieldIds", parameterToString(*r.customFieldIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskId int32
	customFieldId int32
}


func (r ApiGETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest) Execute() (TaskResponse, *_nethttp.Response, error) {
	return r.ApiService.GETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonExecute(r)
}

/*
 * GETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJson Task custom field value.
 * Return a specific custom field value from a task.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId
 * @param customFieldId
 * @return ApiGETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest
 */
func (a *CustomFieldsApiService) GETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJson(ctx _context.Context, taskId int32, customFieldId int32) ApiGETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest {
	return ApiGETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
		customFieldId: customFieldId,
	}
}

/*
 * Execute executes the request
 * @return TaskResponse
 */
func (a *CustomFieldsApiService) GETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonExecute(r ApiGETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest) (TaskResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.GETProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/{taskId}/customfields/{customFieldId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", _neturl.PathEscape(parameterToString(r.customFieldId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHProjectsApiV3CustomfieldscustomFieldIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	customFieldId int32
	customfieldRequest *CustomfieldRequest
}

func (r ApiPATCHProjectsApiV3CustomfieldscustomFieldIdJsonRequest) CustomfieldRequest(customfieldRequest CustomfieldRequest) ApiPATCHProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.customfieldRequest = &customfieldRequest
	return r
}

func (r ApiPATCHProjectsApiV3CustomfieldscustomFieldIdJsonRequest) Execute() (CustomfieldResponse, *_nethttp.Response, error) {
	return r.ApiService.PATCHProjectsApiV3CustomfieldscustomFieldIdJsonExecute(r)
}

/*
 * PATCHProjectsApiV3CustomfieldscustomFieldIdJson Update an existing custom field.
 * Updates an existing custom field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param customFieldId
 * @return ApiPATCHProjectsApiV3CustomfieldscustomFieldIdJsonRequest
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3CustomfieldscustomFieldIdJson(ctx _context.Context, customFieldId int32) ApiPATCHProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	return ApiPATCHProjectsApiV3CustomfieldscustomFieldIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		customFieldId: customFieldId,
	}
}

/*
 * Execute executes the request
 * @return CustomfieldResponse
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3CustomfieldscustomFieldIdJsonExecute(r ApiPATCHProjectsApiV3CustomfieldscustomFieldIdJsonRequest) (CustomfieldResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomfieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.PATCHProjectsApiV3CustomfieldscustomFieldIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields/{customFieldId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", _neturl.PathEscape(parameterToString(r.customFieldId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.customfieldRequest == nil {
		return localVarReturnValue, nil, reportError("customfieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customfieldRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectId int32
	customFieldId int32
	projectRequest *ProjectRequest
}

func (r ApiPATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest) ProjectRequest(projectRequest ProjectRequest) ApiPATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest {
	r.projectRequest = &projectRequest
	return r
}

func (r ApiPATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest) Execute() (ProjectResponse, *_nethttp.Response, error) {
	return r.ApiService.PATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonExecute(r)
}

/*
 * PATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJson Update an existing project custom field value.
 * Edit a project custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @param customFieldId
 * @return ApiPATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJson(ctx _context.Context, projectId int32, customFieldId int32) ApiPATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest {
	return ApiPATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		customFieldId: customFieldId,
	}
}

/*
 * Execute executes the request
 * @return ProjectResponse
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonExecute(r ApiPATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJsonRequest) (ProjectResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProjectResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.PATCHProjectsApiV3ProjectsprojectIdCustomfieldscustomFieldIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/customfields/{customFieldId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", _neturl.PathEscape(parameterToString(r.customFieldId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.projectRequest == nil {
		return localVarReturnValue, nil, reportError("projectRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskId int32
	customFieldId int32
	taskRequest *TaskRequest
}

func (r ApiPATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest) TaskRequest(taskRequest TaskRequest) ApiPATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest {
	r.taskRequest = &taskRequest
	return r
}

func (r ApiPATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest) Execute() (TaskResponse, *_nethttp.Response, error) {
	return r.ApiService.PATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonExecute(r)
}

/*
 * PATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJson Update an existing task custom field value.
 * Edit a task custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId
 * @param customFieldId
 * @return ApiPATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJson(ctx _context.Context, taskId int32, customFieldId int32) ApiPATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest {
	return ApiPATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
		customFieldId: customFieldId,
	}
}

/*
 * Execute executes the request
 * @return TaskResponse
 */
func (a *CustomFieldsApiService) PATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonExecute(r ApiPATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJsonRequest) (TaskResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.PATCHProjectsApiV3TaskstaskIdCustomfieldscustomFieldIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/{taskId}/customfields/{customFieldId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", _neturl.PathEscape(parameterToString(r.customFieldId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.taskRequest == nil {
		return localVarReturnValue, nil, reportError("taskRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	customfieldBulkDeleteRequest *CustomfieldBulkDeleteRequest
}

func (r ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest) CustomfieldBulkDeleteRequest(customfieldBulkDeleteRequest CustomfieldBulkDeleteRequest) ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest {
	r.customfieldBulkDeleteRequest = &customfieldBulkDeleteRequest
	return r
}

func (r ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3CustomfieldsBulkDeleteJsonExecute(r)
}

/*
 * POSTProjectsApiV3CustomfieldsBulkDeleteJson Delete many custom fields at once
 * Remove multiple custom fields at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3CustomfieldsBulkDeleteJson(ctx _context.Context) ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest {
	return ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3CustomfieldsBulkDeleteJsonExecute(r ApiPOSTProjectsApiV3CustomfieldsBulkDeleteJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3CustomfieldsBulkDeleteJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields/bulk/delete.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.customfieldBulkDeleteRequest == nil {
		return nil, reportError("customfieldBulkDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customfieldBulkDeleteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3CustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	customfieldRequest *CustomfieldRequest
}

func (r ApiPOSTProjectsApiV3CustomfieldsJsonRequest) CustomfieldRequest(customfieldRequest CustomfieldRequest) ApiPOSTProjectsApiV3CustomfieldsJsonRequest {
	r.customfieldRequest = &customfieldRequest
	return r
}

func (r ApiPOSTProjectsApiV3CustomfieldsJsonRequest) Execute() (CustomfieldResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3CustomfieldsJsonExecute(r)
}

/*
 * POSTProjectsApiV3CustomfieldsJson Create a new custom field
 * Creates a new custom field. The custom field could have a scope at an
installation-level or at a project-level.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPOSTProjectsApiV3CustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3CustomfieldsJson(ctx _context.Context) ApiPOSTProjectsApiV3CustomfieldsJsonRequest {
	return ApiPOSTProjectsApiV3CustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CustomfieldResponse
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3CustomfieldsJsonExecute(r ApiPOSTProjectsApiV3CustomfieldsJsonRequest) (CustomfieldResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomfieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3CustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.customfieldRequest == nil {
		return localVarReturnValue, nil, reportError("customfieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customfieldRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectId int32
	projectBulkDeleteRequest *ProjectBulkDeleteRequest
}

func (r ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJsonRequest) ProjectBulkDeleteRequest(projectBulkDeleteRequest ProjectBulkDeleteRequest) ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJsonRequest {
	r.projectBulkDeleteRequest = &projectBulkDeleteRequest
	return r
}

func (r ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJsonExecute(r)
}

/*
 * POSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJson Delete many project custom fields values at once.
 * Remove many entries of project custom field values at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @return ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJson(ctx _context.Context, projectId int32) ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJsonRequest {
	return ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJsonRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJsonExecute(r ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkDeleteJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/customfields/bulk/delete.json"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.projectBulkDeleteRequest == nil {
		return nil, reportError("projectBulkDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectBulkDeleteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectId int32
	projectBulkUpdateRequest *ProjectBulkUpdateRequest
}

func (r ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJsonRequest) ProjectBulkUpdateRequest(projectBulkUpdateRequest ProjectBulkUpdateRequest) ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJsonRequest {
	r.projectBulkUpdateRequest = &projectBulkUpdateRequest
	return r
}

func (r ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJsonRequest) Execute() (ProjectCustomFieldProjectsResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJsonExecute(r)
}

/*
 * POSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJson Update many project custom field values at once.
 * Edit many entries of project custom field values at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @return ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJson(ctx _context.Context, projectId int32) ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJsonRequest {
	return ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJsonRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

/*
 * Execute executes the request
 * @return ProjectCustomFieldProjectsResponse
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJsonExecute(r ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJsonRequest) (ProjectCustomFieldProjectsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProjectCustomFieldProjectsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3ProjectsprojectIdCustomfieldsBulkUpdateJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/customfields/bulk/update.json"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.projectBulkUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("projectBulkUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectBulkUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	projectId int32
	projectRequest *ProjectRequest
}

func (r ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) ProjectRequest(projectRequest ProjectRequest) ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	r.projectRequest = &projectRequest
	return r
}

func (r ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) Execute() (ProjectResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3ProjectsprojectIdCustomfieldsJsonExecute(r)
}

/*
 * POSTProjectsApiV3ProjectsprojectIdCustomfieldsJson Add project custom field value.
 * Add a project custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @return ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsprojectIdCustomfieldsJson(ctx _context.Context, projectId int32) ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest {
	return ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

/*
 * Execute executes the request
 * @return ProjectResponse
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3ProjectsprojectIdCustomfieldsJsonExecute(r ApiPOSTProjectsApiV3ProjectsprojectIdCustomfieldsJsonRequest) (ProjectResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProjectResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3ProjectsprojectIdCustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/projects/{projectId}/customfields.json"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", _neturl.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.projectRequest == nil {
		return localVarReturnValue, nil, reportError("projectRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskId int32
	taskBulkDeleteRequest *TaskBulkDeleteRequest
}

func (r ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJsonRequest) TaskBulkDeleteRequest(taskBulkDeleteRequest TaskBulkDeleteRequest) ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJsonRequest {
	r.taskBulkDeleteRequest = &taskBulkDeleteRequest
	return r
}

func (r ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJsonRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJsonExecute(r)
}

/*
 * POSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJson Delete many task custom fields values at once.
 * Remove many entries of task custom field values at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId
 * @return ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJson(ctx _context.Context, taskId int32) ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJsonRequest {
	return ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJsonRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

/*
 * Execute executes the request
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJsonExecute(r ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJsonRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3TaskstaskIdCustomfieldsBulkDeleteJson")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/{taskId}/customfields/bulk/delete.json"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.taskBulkDeleteRequest == nil {
		return nil, reportError("taskBulkDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskBulkDeleteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskId int32
	taskBulkUpdateRequest *TaskBulkUpdateRequest
}

func (r ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJsonRequest) TaskBulkUpdateRequest(taskBulkUpdateRequest TaskBulkUpdateRequest) ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJsonRequest {
	r.taskBulkUpdateRequest = &taskBulkUpdateRequest
	return r
}

func (r ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJsonRequest) Execute() (TaskCustomFieldTasksResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJsonExecute(r)
}

/*
 * POSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJson Update many task custom field values at once.
 * Edit many entries of task custom field values at once.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId
 * @return ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJson(ctx _context.Context, taskId int32) ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJsonRequest {
	return ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJsonRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

/*
 * Execute executes the request
 * @return TaskCustomFieldTasksResponse
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJsonExecute(r ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJsonRequest) (TaskCustomFieldTasksResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskCustomFieldTasksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3TaskstaskIdCustomfieldsBulkUpdateJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/{taskId}/customfields/bulk/update.json"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.taskBulkUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("taskBulkUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskBulkUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	taskId int32
	taskRequest *TaskRequest
}

func (r ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) TaskRequest(taskRequest TaskRequest) ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	r.taskRequest = &taskRequest
	return r
}

func (r ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) Execute() (TaskResponse, *_nethttp.Response, error) {
	return r.ApiService.POSTProjectsApiV3TaskstaskIdCustomfieldsJsonExecute(r)
}

/*
 * POSTProjectsApiV3TaskstaskIdCustomfieldsJson Add task custom field value.
 * Add a task custom field value.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId
 * @return ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsJsonRequest
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TaskstaskIdCustomfieldsJson(ctx _context.Context, taskId int32) ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsJsonRequest {
	return ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsJsonRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

/*
 * Execute executes the request
 * @return TaskResponse
 */
func (a *CustomFieldsApiService) POSTProjectsApiV3TaskstaskIdCustomfieldsJsonExecute(r ApiPOSTProjectsApiV3TaskstaskIdCustomfieldsJsonRequest) (TaskResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.POSTProjectsApiV3TaskstaskIdCustomfieldsJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/tasks/{taskId}/customfields.json"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.taskRequest == nil {
		return localVarReturnValue, nil, reportError("taskRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPUTProjectsApiV3CustomfieldscustomFieldIdJsonRequest struct {
	ctx _context.Context
	ApiService *CustomFieldsApiService
	customFieldId int32
	customfieldRequest *CustomfieldRequest
}

func (r ApiPUTProjectsApiV3CustomfieldscustomFieldIdJsonRequest) CustomfieldRequest(customfieldRequest CustomfieldRequest) ApiPUTProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	r.customfieldRequest = &customfieldRequest
	return r
}

func (r ApiPUTProjectsApiV3CustomfieldscustomFieldIdJsonRequest) Execute() (CustomfieldResponse, *_nethttp.Response, error) {
	return r.ApiService.PUTProjectsApiV3CustomfieldscustomFieldIdJsonExecute(r)
}

/*
 * PUTProjectsApiV3CustomfieldscustomFieldIdJson Update an existing custom field.
 * Updates an existing custom field.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param customFieldId
 * @return ApiPUTProjectsApiV3CustomfieldscustomFieldIdJsonRequest
 */
func (a *CustomFieldsApiService) PUTProjectsApiV3CustomfieldscustomFieldIdJson(ctx _context.Context, customFieldId int32) ApiPUTProjectsApiV3CustomfieldscustomFieldIdJsonRequest {
	return ApiPUTProjectsApiV3CustomfieldscustomFieldIdJsonRequest{
		ApiService: a,
		ctx: ctx,
		customFieldId: customFieldId,
	}
}

/*
 * Execute executes the request
 * @return CustomfieldResponse
 */
func (a *CustomFieldsApiService) PUTProjectsApiV3CustomfieldscustomFieldIdJsonExecute(r ApiPUTProjectsApiV3CustomfieldscustomFieldIdJsonRequest) (CustomfieldResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomfieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomFieldsApiService.PUTProjectsApiV3CustomfieldscustomFieldIdJson")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/api/v3/customfields/{customFieldId}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"customFieldId"+"}", _neturl.PathEscape(parameterToString(r.customFieldId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.customfieldRequest == nil {
		return localVarReturnValue, nil, reportError("customfieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customfieldRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ViewErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
