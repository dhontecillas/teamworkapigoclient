/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// InlineResponse2005Event struct for InlineResponse2005Event
type InlineResponse2005Event struct {
	AllDay *bool `json:"all-day,omitempty"`
	AttendeesCanEdit *bool `json:"attendees-can-edit,omitempty"`
	AttendingUserIds *string `json:"attending-user-ids,omitempty"`
	AttendingUserNames *string `json:"attending-user-names,omitempty"`
	Description *string `json:"description,omitempty"`
	End *string `json:"end,omitempty"`
	Id *string `json:"id,omitempty"`
	LastChangedOn *string `json:"last-changed-on,omitempty"`
	NotifyUserIds *string `json:"notify-user-ids,omitempty"`
	NotifyUserNames *string `json:"notify-user-names,omitempty"`
	Owner *InlineResponse2003Owner `json:"owner,omitempty"`
	Privacy *InlineResponse2003Privacy `json:"privacy,omitempty"`
	ProjectUsersCanEdit *bool `json:"project-users-can-edit,omitempty"`
	Reminders *[]map[string]interface{} `json:"reminders,omitempty"`
	Repeat *map[string]interface{} `json:"repeat,omitempty"`
	ShowAsBusy *bool `json:"show-as-busy,omitempty"`
	Start *string `json:"start,omitempty"`
	Title *string `json:"title,omitempty"`
	Type *InlineResponse2002Column `json:"type,omitempty"`
	Where *string `json:"where,omitempty"`
}

// NewInlineResponse2005Event instantiates a new InlineResponse2005Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2005Event() *InlineResponse2005Event {
	this := InlineResponse2005Event{}
	return &this
}

// NewInlineResponse2005EventWithDefaults instantiates a new InlineResponse2005Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2005EventWithDefaults() *InlineResponse2005Event {
	this := InlineResponse2005Event{}
	return &this
}

// GetAllDay returns the AllDay field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetAllDay() bool {
	if o == nil || o.AllDay == nil {
		var ret bool
		return ret
	}
	return *o.AllDay
}

// GetAllDayOk returns a tuple with the AllDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetAllDayOk() (*bool, bool) {
	if o == nil || o.AllDay == nil {
		return nil, false
	}
	return o.AllDay, true
}

// HasAllDay returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasAllDay() bool {
	if o != nil && o.AllDay != nil {
		return true
	}

	return false
}

// SetAllDay gets a reference to the given bool and assigns it to the AllDay field.
func (o *InlineResponse2005Event) SetAllDay(v bool) {
	o.AllDay = &v
}

// GetAttendeesCanEdit returns the AttendeesCanEdit field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetAttendeesCanEdit() bool {
	if o == nil || o.AttendeesCanEdit == nil {
		var ret bool
		return ret
	}
	return *o.AttendeesCanEdit
}

// GetAttendeesCanEditOk returns a tuple with the AttendeesCanEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetAttendeesCanEditOk() (*bool, bool) {
	if o == nil || o.AttendeesCanEdit == nil {
		return nil, false
	}
	return o.AttendeesCanEdit, true
}

// HasAttendeesCanEdit returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasAttendeesCanEdit() bool {
	if o != nil && o.AttendeesCanEdit != nil {
		return true
	}

	return false
}

// SetAttendeesCanEdit gets a reference to the given bool and assigns it to the AttendeesCanEdit field.
func (o *InlineResponse2005Event) SetAttendeesCanEdit(v bool) {
	o.AttendeesCanEdit = &v
}

// GetAttendingUserIds returns the AttendingUserIds field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetAttendingUserIds() string {
	if o == nil || o.AttendingUserIds == nil {
		var ret string
		return ret
	}
	return *o.AttendingUserIds
}

// GetAttendingUserIdsOk returns a tuple with the AttendingUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetAttendingUserIdsOk() (*string, bool) {
	if o == nil || o.AttendingUserIds == nil {
		return nil, false
	}
	return o.AttendingUserIds, true
}

// HasAttendingUserIds returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasAttendingUserIds() bool {
	if o != nil && o.AttendingUserIds != nil {
		return true
	}

	return false
}

// SetAttendingUserIds gets a reference to the given string and assigns it to the AttendingUserIds field.
func (o *InlineResponse2005Event) SetAttendingUserIds(v string) {
	o.AttendingUserIds = &v
}

// GetAttendingUserNames returns the AttendingUserNames field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetAttendingUserNames() string {
	if o == nil || o.AttendingUserNames == nil {
		var ret string
		return ret
	}
	return *o.AttendingUserNames
}

// GetAttendingUserNamesOk returns a tuple with the AttendingUserNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetAttendingUserNamesOk() (*string, bool) {
	if o == nil || o.AttendingUserNames == nil {
		return nil, false
	}
	return o.AttendingUserNames, true
}

// HasAttendingUserNames returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasAttendingUserNames() bool {
	if o != nil && o.AttendingUserNames != nil {
		return true
	}

	return false
}

// SetAttendingUserNames gets a reference to the given string and assigns it to the AttendingUserNames field.
func (o *InlineResponse2005Event) SetAttendingUserNames(v string) {
	o.AttendingUserNames = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InlineResponse2005Event) SetDescription(v string) {
	o.Description = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetEnd() string {
	if o == nil || o.End == nil {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetEndOk() (*string, bool) {
	if o == nil || o.End == nil {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasEnd() bool {
	if o != nil && o.End != nil {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *InlineResponse2005Event) SetEnd(v string) {
	o.End = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InlineResponse2005Event) SetId(v string) {
	o.Id = &v
}

// GetLastChangedOn returns the LastChangedOn field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetLastChangedOn() string {
	if o == nil || o.LastChangedOn == nil {
		var ret string
		return ret
	}
	return *o.LastChangedOn
}

// GetLastChangedOnOk returns a tuple with the LastChangedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetLastChangedOnOk() (*string, bool) {
	if o == nil || o.LastChangedOn == nil {
		return nil, false
	}
	return o.LastChangedOn, true
}

// HasLastChangedOn returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasLastChangedOn() bool {
	if o != nil && o.LastChangedOn != nil {
		return true
	}

	return false
}

// SetLastChangedOn gets a reference to the given string and assigns it to the LastChangedOn field.
func (o *InlineResponse2005Event) SetLastChangedOn(v string) {
	o.LastChangedOn = &v
}

// GetNotifyUserIds returns the NotifyUserIds field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetNotifyUserIds() string {
	if o == nil || o.NotifyUserIds == nil {
		var ret string
		return ret
	}
	return *o.NotifyUserIds
}

// GetNotifyUserIdsOk returns a tuple with the NotifyUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetNotifyUserIdsOk() (*string, bool) {
	if o == nil || o.NotifyUserIds == nil {
		return nil, false
	}
	return o.NotifyUserIds, true
}

// HasNotifyUserIds returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasNotifyUserIds() bool {
	if o != nil && o.NotifyUserIds != nil {
		return true
	}

	return false
}

// SetNotifyUserIds gets a reference to the given string and assigns it to the NotifyUserIds field.
func (o *InlineResponse2005Event) SetNotifyUserIds(v string) {
	o.NotifyUserIds = &v
}

// GetNotifyUserNames returns the NotifyUserNames field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetNotifyUserNames() string {
	if o == nil || o.NotifyUserNames == nil {
		var ret string
		return ret
	}
	return *o.NotifyUserNames
}

// GetNotifyUserNamesOk returns a tuple with the NotifyUserNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetNotifyUserNamesOk() (*string, bool) {
	if o == nil || o.NotifyUserNames == nil {
		return nil, false
	}
	return o.NotifyUserNames, true
}

// HasNotifyUserNames returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasNotifyUserNames() bool {
	if o != nil && o.NotifyUserNames != nil {
		return true
	}

	return false
}

// SetNotifyUserNames gets a reference to the given string and assigns it to the NotifyUserNames field.
func (o *InlineResponse2005Event) SetNotifyUserNames(v string) {
	o.NotifyUserNames = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetOwner() InlineResponse2003Owner {
	if o == nil || o.Owner == nil {
		var ret InlineResponse2003Owner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetOwnerOk() (*InlineResponse2003Owner, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given InlineResponse2003Owner and assigns it to the Owner field.
func (o *InlineResponse2005Event) SetOwner(v InlineResponse2003Owner) {
	o.Owner = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetPrivacy() InlineResponse2003Privacy {
	if o == nil || o.Privacy == nil {
		var ret InlineResponse2003Privacy
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetPrivacyOk() (*InlineResponse2003Privacy, bool) {
	if o == nil || o.Privacy == nil {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasPrivacy() bool {
	if o != nil && o.Privacy != nil {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given InlineResponse2003Privacy and assigns it to the Privacy field.
func (o *InlineResponse2005Event) SetPrivacy(v InlineResponse2003Privacy) {
	o.Privacy = &v
}

// GetProjectUsersCanEdit returns the ProjectUsersCanEdit field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetProjectUsersCanEdit() bool {
	if o == nil || o.ProjectUsersCanEdit == nil {
		var ret bool
		return ret
	}
	return *o.ProjectUsersCanEdit
}

// GetProjectUsersCanEditOk returns a tuple with the ProjectUsersCanEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetProjectUsersCanEditOk() (*bool, bool) {
	if o == nil || o.ProjectUsersCanEdit == nil {
		return nil, false
	}
	return o.ProjectUsersCanEdit, true
}

// HasProjectUsersCanEdit returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasProjectUsersCanEdit() bool {
	if o != nil && o.ProjectUsersCanEdit != nil {
		return true
	}

	return false
}

// SetProjectUsersCanEdit gets a reference to the given bool and assigns it to the ProjectUsersCanEdit field.
func (o *InlineResponse2005Event) SetProjectUsersCanEdit(v bool) {
	o.ProjectUsersCanEdit = &v
}

// GetReminders returns the Reminders field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetReminders() []map[string]interface{} {
	if o == nil || o.Reminders == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Reminders
}

// GetRemindersOk returns a tuple with the Reminders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetRemindersOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Reminders == nil {
		return nil, false
	}
	return o.Reminders, true
}

// HasReminders returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasReminders() bool {
	if o != nil && o.Reminders != nil {
		return true
	}

	return false
}

// SetReminders gets a reference to the given []map[string]interface{} and assigns it to the Reminders field.
func (o *InlineResponse2005Event) SetReminders(v []map[string]interface{}) {
	o.Reminders = &v
}

// GetRepeat returns the Repeat field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetRepeat() map[string]interface{} {
	if o == nil || o.Repeat == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Repeat
}

// GetRepeatOk returns a tuple with the Repeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetRepeatOk() (*map[string]interface{}, bool) {
	if o == nil || o.Repeat == nil {
		return nil, false
	}
	return o.Repeat, true
}

// HasRepeat returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasRepeat() bool {
	if o != nil && o.Repeat != nil {
		return true
	}

	return false
}

// SetRepeat gets a reference to the given map[string]interface{} and assigns it to the Repeat field.
func (o *InlineResponse2005Event) SetRepeat(v map[string]interface{}) {
	o.Repeat = &v
}

// GetShowAsBusy returns the ShowAsBusy field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetShowAsBusy() bool {
	if o == nil || o.ShowAsBusy == nil {
		var ret bool
		return ret
	}
	return *o.ShowAsBusy
}

// GetShowAsBusyOk returns a tuple with the ShowAsBusy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetShowAsBusyOk() (*bool, bool) {
	if o == nil || o.ShowAsBusy == nil {
		return nil, false
	}
	return o.ShowAsBusy, true
}

// HasShowAsBusy returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasShowAsBusy() bool {
	if o != nil && o.ShowAsBusy != nil {
		return true
	}

	return false
}

// SetShowAsBusy gets a reference to the given bool and assigns it to the ShowAsBusy field.
func (o *InlineResponse2005Event) SetShowAsBusy(v bool) {
	o.ShowAsBusy = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetStart() string {
	if o == nil || o.Start == nil {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetStartOk() (*string, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *InlineResponse2005Event) SetStart(v string) {
	o.Start = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *InlineResponse2005Event) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetType() InlineResponse2002Column {
	if o == nil || o.Type == nil {
		var ret InlineResponse2002Column
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetTypeOk() (*InlineResponse2002Column, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given InlineResponse2002Column and assigns it to the Type field.
func (o *InlineResponse2005Event) SetType(v InlineResponse2002Column) {
	o.Type = &v
}

// GetWhere returns the Where field value if set, zero value otherwise.
func (o *InlineResponse2005Event) GetWhere() string {
	if o == nil || o.Where == nil {
		var ret string
		return ret
	}
	return *o.Where
}

// GetWhereOk returns a tuple with the Where field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005Event) GetWhereOk() (*string, bool) {
	if o == nil || o.Where == nil {
		return nil, false
	}
	return o.Where, true
}

// HasWhere returns a boolean if a field has been set.
func (o *InlineResponse2005Event) HasWhere() bool {
	if o != nil && o.Where != nil {
		return true
	}

	return false
}

// SetWhere gets a reference to the given string and assigns it to the Where field.
func (o *InlineResponse2005Event) SetWhere(v string) {
	o.Where = &v
}

func (o InlineResponse2005Event) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllDay != nil {
		toSerialize["all-day"] = o.AllDay
	}
	if o.AttendeesCanEdit != nil {
		toSerialize["attendees-can-edit"] = o.AttendeesCanEdit
	}
	if o.AttendingUserIds != nil {
		toSerialize["attending-user-ids"] = o.AttendingUserIds
	}
	if o.AttendingUserNames != nil {
		toSerialize["attending-user-names"] = o.AttendingUserNames
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastChangedOn != nil {
		toSerialize["last-changed-on"] = o.LastChangedOn
	}
	if o.NotifyUserIds != nil {
		toSerialize["notify-user-ids"] = o.NotifyUserIds
	}
	if o.NotifyUserNames != nil {
		toSerialize["notify-user-names"] = o.NotifyUserNames
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Privacy != nil {
		toSerialize["privacy"] = o.Privacy
	}
	if o.ProjectUsersCanEdit != nil {
		toSerialize["project-users-can-edit"] = o.ProjectUsersCanEdit
	}
	if o.Reminders != nil {
		toSerialize["reminders"] = o.Reminders
	}
	if o.Repeat != nil {
		toSerialize["repeat"] = o.Repeat
	}
	if o.ShowAsBusy != nil {
		toSerialize["show-as-busy"] = o.ShowAsBusy
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Where != nil {
		toSerialize["where"] = o.Where
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2005Event struct {
	value *InlineResponse2005Event
	isSet bool
}

func (v NullableInlineResponse2005Event) Get() *InlineResponse2005Event {
	return v.value
}

func (v *NullableInlineResponse2005Event) Set(val *InlineResponse2005Event) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2005Event) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2005Event) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2005Event(val *InlineResponse2005Event) *NullableInlineResponse2005Event {
	return &NullableInlineResponse2005Event{value: val, isSet: true}
}

func (v NullableInlineResponse2005Event) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2005Event) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


