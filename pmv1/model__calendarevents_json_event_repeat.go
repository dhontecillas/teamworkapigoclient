/*
 * Teamwork Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pmv1

import (
	"encoding/json"
)

// CalendareventsJsonEventRepeat struct for CalendareventsJsonEventRepeat
type CalendareventsJsonEventRepeat struct {
	EndDate *string `json:"endDate,omitempty"`
	Ends *bool `json:"ends,omitempty"`
	Frequency *string `json:"frequency,omitempty"`
	MonthType *string `json:"month-type,omitempty"`
}

// NewCalendareventsJsonEventRepeat instantiates a new CalendareventsJsonEventRepeat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendareventsJsonEventRepeat() *CalendareventsJsonEventRepeat {
	this := CalendareventsJsonEventRepeat{}
	return &this
}

// NewCalendareventsJsonEventRepeatWithDefaults instantiates a new CalendareventsJsonEventRepeat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendareventsJsonEventRepeatWithDefaults() *CalendareventsJsonEventRepeat {
	this := CalendareventsJsonEventRepeat{}
	return &this
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *CalendareventsJsonEventRepeat) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsJsonEventRepeat) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *CalendareventsJsonEventRepeat) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *CalendareventsJsonEventRepeat) SetEndDate(v string) {
	o.EndDate = &v
}

// GetEnds returns the Ends field value if set, zero value otherwise.
func (o *CalendareventsJsonEventRepeat) GetEnds() bool {
	if o == nil || o.Ends == nil {
		var ret bool
		return ret
	}
	return *o.Ends
}

// GetEndsOk returns a tuple with the Ends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsJsonEventRepeat) GetEndsOk() (*bool, bool) {
	if o == nil || o.Ends == nil {
		return nil, false
	}
	return o.Ends, true
}

// HasEnds returns a boolean if a field has been set.
func (o *CalendareventsJsonEventRepeat) HasEnds() bool {
	if o != nil && o.Ends != nil {
		return true
	}

	return false
}

// SetEnds gets a reference to the given bool and assigns it to the Ends field.
func (o *CalendareventsJsonEventRepeat) SetEnds(v bool) {
	o.Ends = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *CalendareventsJsonEventRepeat) GetFrequency() string {
	if o == nil || o.Frequency == nil {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsJsonEventRepeat) GetFrequencyOk() (*string, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *CalendareventsJsonEventRepeat) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *CalendareventsJsonEventRepeat) SetFrequency(v string) {
	o.Frequency = &v
}

// GetMonthType returns the MonthType field value if set, zero value otherwise.
func (o *CalendareventsJsonEventRepeat) GetMonthType() string {
	if o == nil || o.MonthType == nil {
		var ret string
		return ret
	}
	return *o.MonthType
}

// GetMonthTypeOk returns a tuple with the MonthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendareventsJsonEventRepeat) GetMonthTypeOk() (*string, bool) {
	if o == nil || o.MonthType == nil {
		return nil, false
	}
	return o.MonthType, true
}

// HasMonthType returns a boolean if a field has been set.
func (o *CalendareventsJsonEventRepeat) HasMonthType() bool {
	if o != nil && o.MonthType != nil {
		return true
	}

	return false
}

// SetMonthType gets a reference to the given string and assigns it to the MonthType field.
func (o *CalendareventsJsonEventRepeat) SetMonthType(v string) {
	o.MonthType = &v
}

func (o CalendareventsJsonEventRepeat) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Ends != nil {
		toSerialize["ends"] = o.Ends
	}
	if o.Frequency != nil {
		toSerialize["frequency"] = o.Frequency
	}
	if o.MonthType != nil {
		toSerialize["month-type"] = o.MonthType
	}
	return json.Marshal(toSerialize)
}

type NullableCalendareventsJsonEventRepeat struct {
	value *CalendareventsJsonEventRepeat
	isSet bool
}

func (v NullableCalendareventsJsonEventRepeat) Get() *CalendareventsJsonEventRepeat {
	return v.value
}

func (v *NullableCalendareventsJsonEventRepeat) Set(val *CalendareventsJsonEventRepeat) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendareventsJsonEventRepeat) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendareventsJsonEventRepeat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendareventsJsonEventRepeat(val *CalendareventsJsonEventRepeat) *NullableCalendareventsJsonEventRepeat {
	return &NullableCalendareventsJsonEventRepeat{value: val, isSet: true}
}

func (v NullableCalendareventsJsonEventRepeat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendareventsJsonEventRepeat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


