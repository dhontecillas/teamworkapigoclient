/*
 * Teamwork.com Projects API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package projv3

import (
	"encoding/json"
)

// ViewTaskCard TaskCard contains all the information returned from a card.
type ViewTaskCard struct {
	Archived *bool `json:"archived,omitempty"`
	ArchivedAt *string `json:"archivedAt,omitempty"`
	ArchivedBy *ViewRelationship `json:"archivedBy,omitempty"`
	CreateBy *ViewRelationship `json:"createBy,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	DeleteBy *ViewRelationship `json:"deleteBy,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	DisplayOrder *int32 `json:"displayOrder,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	Visible *bool `json:"visible,omitempty"`
}

// NewViewTaskCard instantiates a new ViewTaskCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewTaskCard() *ViewTaskCard {
	this := ViewTaskCard{}
	return &this
}

// NewViewTaskCardWithDefaults instantiates a new ViewTaskCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewTaskCardWithDefaults() *ViewTaskCard {
	this := ViewTaskCard{}
	return &this
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *ViewTaskCard) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *ViewTaskCard) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *ViewTaskCard) SetArchived(v bool) {
	o.Archived = &v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *ViewTaskCard) GetArchivedAt() string {
	if o == nil || o.ArchivedAt == nil {
		var ret string
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetArchivedAtOk() (*string, bool) {
	if o == nil || o.ArchivedAt == nil {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *ViewTaskCard) HasArchivedAt() bool {
	if o != nil && o.ArchivedAt != nil {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given string and assigns it to the ArchivedAt field.
func (o *ViewTaskCard) SetArchivedAt(v string) {
	o.ArchivedAt = &v
}

// GetArchivedBy returns the ArchivedBy field value if set, zero value otherwise.
func (o *ViewTaskCard) GetArchivedBy() ViewRelationship {
	if o == nil || o.ArchivedBy == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.ArchivedBy
}

// GetArchivedByOk returns a tuple with the ArchivedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetArchivedByOk() (*ViewRelationship, bool) {
	if o == nil || o.ArchivedBy == nil {
		return nil, false
	}
	return o.ArchivedBy, true
}

// HasArchivedBy returns a boolean if a field has been set.
func (o *ViewTaskCard) HasArchivedBy() bool {
	if o != nil && o.ArchivedBy != nil {
		return true
	}

	return false
}

// SetArchivedBy gets a reference to the given ViewRelationship and assigns it to the ArchivedBy field.
func (o *ViewTaskCard) SetArchivedBy(v ViewRelationship) {
	o.ArchivedBy = &v
}

// GetCreateBy returns the CreateBy field value if set, zero value otherwise.
func (o *ViewTaskCard) GetCreateBy() ViewRelationship {
	if o == nil || o.CreateBy == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.CreateBy
}

// GetCreateByOk returns a tuple with the CreateBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetCreateByOk() (*ViewRelationship, bool) {
	if o == nil || o.CreateBy == nil {
		return nil, false
	}
	return o.CreateBy, true
}

// HasCreateBy returns a boolean if a field has been set.
func (o *ViewTaskCard) HasCreateBy() bool {
	if o != nil && o.CreateBy != nil {
		return true
	}

	return false
}

// SetCreateBy gets a reference to the given ViewRelationship and assigns it to the CreateBy field.
func (o *ViewTaskCard) SetCreateBy(v ViewRelationship) {
	o.CreateBy = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ViewTaskCard) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ViewTaskCard) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ViewTaskCard) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDeleteBy returns the DeleteBy field value if set, zero value otherwise.
func (o *ViewTaskCard) GetDeleteBy() ViewRelationship {
	if o == nil || o.DeleteBy == nil {
		var ret ViewRelationship
		return ret
	}
	return *o.DeleteBy
}

// GetDeleteByOk returns a tuple with the DeleteBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetDeleteByOk() (*ViewRelationship, bool) {
	if o == nil || o.DeleteBy == nil {
		return nil, false
	}
	return o.DeleteBy, true
}

// HasDeleteBy returns a boolean if a field has been set.
func (o *ViewTaskCard) HasDeleteBy() bool {
	if o != nil && o.DeleteBy != nil {
		return true
	}

	return false
}

// SetDeleteBy gets a reference to the given ViewRelationship and assigns it to the DeleteBy field.
func (o *ViewTaskCard) SetDeleteBy(v ViewRelationship) {
	o.DeleteBy = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ViewTaskCard) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ViewTaskCard) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *ViewTaskCard) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *ViewTaskCard) GetDisplayOrder() int32 {
	if o == nil || o.DisplayOrder == nil {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || o.DisplayOrder == nil {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *ViewTaskCard) HasDisplayOrder() bool {
	if o != nil && o.DisplayOrder != nil {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *ViewTaskCard) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewTaskCard) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewTaskCard) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ViewTaskCard) SetId(v int32) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ViewTaskCard) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ViewTaskCard) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ViewTaskCard) SetStatus(v string) {
	o.Status = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ViewTaskCard) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ViewTaskCard) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ViewTaskCard) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *ViewTaskCard) GetVisible() bool {
	if o == nil || o.Visible == nil {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewTaskCard) GetVisibleOk() (*bool, bool) {
	if o == nil || o.Visible == nil {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *ViewTaskCard) HasVisible() bool {
	if o != nil && o.Visible != nil {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *ViewTaskCard) SetVisible(v bool) {
	o.Visible = &v
}

func (o ViewTaskCard) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.ArchivedAt != nil {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	if o.ArchivedBy != nil {
		toSerialize["archivedBy"] = o.ArchivedBy
	}
	if o.CreateBy != nil {
		toSerialize["createBy"] = o.CreateBy
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.DeleteBy != nil {
		toSerialize["deleteBy"] = o.DeleteBy
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if o.DisplayOrder != nil {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.Visible != nil {
		toSerialize["visible"] = o.Visible
	}
	return json.Marshal(toSerialize)
}

type NullableViewTaskCard struct {
	value *ViewTaskCard
	isSet bool
}

func (v NullableViewTaskCard) Get() *ViewTaskCard {
	return v.value
}

func (v *NullableViewTaskCard) Set(val *ViewTaskCard) {
	v.value = val
	v.isSet = true
}

func (v NullableViewTaskCard) IsSet() bool {
	return v.isSet
}

func (v *NullableViewTaskCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewTaskCard(val *ViewTaskCard) *NullableViewTaskCard {
	return &NullableViewTaskCard{value: val, isSet: true}
}

func (v NullableViewTaskCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewTaskCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


